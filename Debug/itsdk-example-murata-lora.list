
itsdk-example-murata-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009984  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f18  08009f18  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009f18  08009f18  00019f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f20  08009f20  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  20000088  08009fac  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08009fac  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000351e0  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b8e  00000000  00000000  0005528c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d08  00000000  00000000  0005be20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019b8  00000000  00000000  0005db28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f5f7  00000000  00000000  0005f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00029b91  00000000  00000000  0007ead7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a14e6  00000000  00000000  000a8668  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149b4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064dc  00000000  00000000  00149bcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009a2c 	.word	0x08009a2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08009a2c 	.word	0x08009a2c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_ldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d115      	bne.n	8000260 <__aeabi_ldivmod+0x30>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d113      	bne.n	8000260 <__aeabi_ldivmod+0x30>
 8000238:	2900      	cmp	r1, #0
 800023a:	db06      	blt.n	800024a <__aeabi_ldivmod+0x1a>
 800023c:	dc01      	bgt.n	8000242 <__aeabi_ldivmod+0x12>
 800023e:	2800      	cmp	r0, #0
 8000240:	d006      	beq.n	8000250 <__aeabi_ldivmod+0x20>
 8000242:	2000      	movs	r0, #0
 8000244:	43c0      	mvns	r0, r0
 8000246:	0841      	lsrs	r1, r0, #1
 8000248:	e002      	b.n	8000250 <__aeabi_ldivmod+0x20>
 800024a:	2180      	movs	r1, #128	; 0x80
 800024c:	0609      	lsls	r1, r1, #24
 800024e:	2000      	movs	r0, #0
 8000250:	b407      	push	{r0, r1, r2}
 8000252:	4802      	ldr	r0, [pc, #8]	; (800025c <__aeabi_ldivmod+0x2c>)
 8000254:	a101      	add	r1, pc, #4	; (adr r1, 800025c <__aeabi_ldivmod+0x2c>)
 8000256:	1840      	adds	r0, r0, r1
 8000258:	9002      	str	r0, [sp, #8]
 800025a:	bd03      	pop	{r0, r1, pc}
 800025c:	ffffffd1 	.word	0xffffffd1
 8000260:	b403      	push	{r0, r1}
 8000262:	4668      	mov	r0, sp
 8000264:	b501      	push	{r0, lr}
 8000266:	9802      	ldr	r0, [sp, #8]
 8000268:	f000 f912 	bl	8000490 <__gnu_ldivmod_helper>
 800026c:	9b01      	ldr	r3, [sp, #4]
 800026e:	469e      	mov	lr, r3
 8000270:	b002      	add	sp, #8
 8000272:	bc0c      	pop	{r2, r3}
 8000274:	4770      	bx	lr
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_uldivmod>:
 8000278:	2b00      	cmp	r3, #0
 800027a:	d111      	bne.n	80002a0 <__aeabi_uldivmod+0x28>
 800027c:	2a00      	cmp	r2, #0
 800027e:	d10f      	bne.n	80002a0 <__aeabi_uldivmod+0x28>
 8000280:	2900      	cmp	r1, #0
 8000282:	d100      	bne.n	8000286 <__aeabi_uldivmod+0xe>
 8000284:	2800      	cmp	r0, #0
 8000286:	d002      	beq.n	800028e <__aeabi_uldivmod+0x16>
 8000288:	2100      	movs	r1, #0
 800028a:	43c9      	mvns	r1, r1
 800028c:	1c08      	adds	r0, r1, #0
 800028e:	b407      	push	{r0, r1, r2}
 8000290:	4802      	ldr	r0, [pc, #8]	; (800029c <__aeabi_uldivmod+0x24>)
 8000292:	a102      	add	r1, pc, #8	; (adr r1, 800029c <__aeabi_uldivmod+0x24>)
 8000294:	1840      	adds	r0, r0, r1
 8000296:	9002      	str	r0, [sp, #8]
 8000298:	bd03      	pop	{r0, r1, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	ffffff91 	.word	0xffffff91
 80002a0:	b403      	push	{r0, r1}
 80002a2:	4668      	mov	r0, sp
 80002a4:	b501      	push	{r0, lr}
 80002a6:	9802      	ldr	r0, [sp, #8]
 80002a8:	f000 f830 	bl	800030c <__udivmoddi4>
 80002ac:	9b01      	ldr	r3, [sp, #4]
 80002ae:	469e      	mov	lr, r3
 80002b0:	b002      	add	sp, #8
 80002b2:	bc0c      	pop	{r2, r3}
 80002b4:	4770      	bx	lr
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_lmul>:
 80002b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ba:	46ce      	mov	lr, r9
 80002bc:	4647      	mov	r7, r8
 80002be:	0415      	lsls	r5, r2, #16
 80002c0:	0c2d      	lsrs	r5, r5, #16
 80002c2:	002e      	movs	r6, r5
 80002c4:	b580      	push	{r7, lr}
 80002c6:	0407      	lsls	r7, r0, #16
 80002c8:	0c14      	lsrs	r4, r2, #16
 80002ca:	0c3f      	lsrs	r7, r7, #16
 80002cc:	4699      	mov	r9, r3
 80002ce:	0c03      	lsrs	r3, r0, #16
 80002d0:	437e      	muls	r6, r7
 80002d2:	435d      	muls	r5, r3
 80002d4:	4367      	muls	r7, r4
 80002d6:	4363      	muls	r3, r4
 80002d8:	197f      	adds	r7, r7, r5
 80002da:	0c34      	lsrs	r4, r6, #16
 80002dc:	19e4      	adds	r4, r4, r7
 80002de:	469c      	mov	ip, r3
 80002e0:	42a5      	cmp	r5, r4
 80002e2:	d903      	bls.n	80002ec <__aeabi_lmul+0x34>
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	025b      	lsls	r3, r3, #9
 80002e8:	4698      	mov	r8, r3
 80002ea:	44c4      	add	ip, r8
 80002ec:	464b      	mov	r3, r9
 80002ee:	4343      	muls	r3, r0
 80002f0:	4351      	muls	r1, r2
 80002f2:	0c25      	lsrs	r5, r4, #16
 80002f4:	0436      	lsls	r6, r6, #16
 80002f6:	4465      	add	r5, ip
 80002f8:	0c36      	lsrs	r6, r6, #16
 80002fa:	0424      	lsls	r4, r4, #16
 80002fc:	19a4      	adds	r4, r4, r6
 80002fe:	195b      	adds	r3, r3, r5
 8000300:	1859      	adds	r1, r3, r1
 8000302:	0020      	movs	r0, r4
 8000304:	bc0c      	pop	{r2, r3}
 8000306:	4690      	mov	r8, r2
 8000308:	4699      	mov	r9, r3
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800030c <__udivmoddi4>:
 800030c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030e:	464f      	mov	r7, r9
 8000310:	4646      	mov	r6, r8
 8000312:	46d6      	mov	lr, sl
 8000314:	b5c0      	push	{r6, r7, lr}
 8000316:	0004      	movs	r4, r0
 8000318:	b082      	sub	sp, #8
 800031a:	000d      	movs	r5, r1
 800031c:	4691      	mov	r9, r2
 800031e:	4698      	mov	r8, r3
 8000320:	428b      	cmp	r3, r1
 8000322:	d82f      	bhi.n	8000384 <__udivmoddi4+0x78>
 8000324:	d02c      	beq.n	8000380 <__udivmoddi4+0x74>
 8000326:	4641      	mov	r1, r8
 8000328:	4648      	mov	r0, r9
 800032a:	f000 f8eb 	bl	8000504 <__clzdi2>
 800032e:	0029      	movs	r1, r5
 8000330:	0006      	movs	r6, r0
 8000332:	0020      	movs	r0, r4
 8000334:	f000 f8e6 	bl	8000504 <__clzdi2>
 8000338:	1a33      	subs	r3, r6, r0
 800033a:	469c      	mov	ip, r3
 800033c:	3b20      	subs	r3, #32
 800033e:	469a      	mov	sl, r3
 8000340:	d500      	bpl.n	8000344 <__udivmoddi4+0x38>
 8000342:	e076      	b.n	8000432 <__udivmoddi4+0x126>
 8000344:	464b      	mov	r3, r9
 8000346:	4652      	mov	r2, sl
 8000348:	4093      	lsls	r3, r2
 800034a:	001f      	movs	r7, r3
 800034c:	464b      	mov	r3, r9
 800034e:	4662      	mov	r2, ip
 8000350:	4093      	lsls	r3, r2
 8000352:	001e      	movs	r6, r3
 8000354:	42af      	cmp	r7, r5
 8000356:	d828      	bhi.n	80003aa <__udivmoddi4+0x9e>
 8000358:	d025      	beq.n	80003a6 <__udivmoddi4+0x9a>
 800035a:	4653      	mov	r3, sl
 800035c:	1ba4      	subs	r4, r4, r6
 800035e:	41bd      	sbcs	r5, r7
 8000360:	2b00      	cmp	r3, #0
 8000362:	da00      	bge.n	8000366 <__udivmoddi4+0x5a>
 8000364:	e07b      	b.n	800045e <__udivmoddi4+0x152>
 8000366:	2200      	movs	r2, #0
 8000368:	2300      	movs	r3, #0
 800036a:	9200      	str	r2, [sp, #0]
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	4652      	mov	r2, sl
 8000372:	4093      	lsls	r3, r2
 8000374:	9301      	str	r3, [sp, #4]
 8000376:	2301      	movs	r3, #1
 8000378:	4662      	mov	r2, ip
 800037a:	4093      	lsls	r3, r2
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	e018      	b.n	80003b2 <__udivmoddi4+0xa6>
 8000380:	4282      	cmp	r2, r0
 8000382:	d9d0      	bls.n	8000326 <__udivmoddi4+0x1a>
 8000384:	2200      	movs	r2, #0
 8000386:	2300      	movs	r3, #0
 8000388:	9200      	str	r2, [sp, #0]
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <__udivmoddi4+0x8a>
 8000392:	601c      	str	r4, [r3, #0]
 8000394:	605d      	str	r5, [r3, #4]
 8000396:	9800      	ldr	r0, [sp, #0]
 8000398:	9901      	ldr	r1, [sp, #4]
 800039a:	b002      	add	sp, #8
 800039c:	bc1c      	pop	{r2, r3, r4}
 800039e:	4690      	mov	r8, r2
 80003a0:	4699      	mov	r9, r3
 80003a2:	46a2      	mov	sl, r4
 80003a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d9d7      	bls.n	800035a <__udivmoddi4+0x4e>
 80003aa:	2200      	movs	r2, #0
 80003ac:	2300      	movs	r3, #0
 80003ae:	9200      	str	r2, [sp, #0]
 80003b0:	9301      	str	r3, [sp, #4]
 80003b2:	4663      	mov	r3, ip
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0e9      	beq.n	800038c <__udivmoddi4+0x80>
 80003b8:	07fb      	lsls	r3, r7, #31
 80003ba:	4698      	mov	r8, r3
 80003bc:	4641      	mov	r1, r8
 80003be:	0872      	lsrs	r2, r6, #1
 80003c0:	430a      	orrs	r2, r1
 80003c2:	087b      	lsrs	r3, r7, #1
 80003c4:	4666      	mov	r6, ip
 80003c6:	e00e      	b.n	80003e6 <__udivmoddi4+0xda>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d101      	bne.n	80003d0 <__udivmoddi4+0xc4>
 80003cc:	42a2      	cmp	r2, r4
 80003ce:	d80c      	bhi.n	80003ea <__udivmoddi4+0xde>
 80003d0:	1aa4      	subs	r4, r4, r2
 80003d2:	419d      	sbcs	r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	1924      	adds	r4, r4, r4
 80003d8:	416d      	adcs	r5, r5
 80003da:	2100      	movs	r1, #0
 80003dc:	3e01      	subs	r6, #1
 80003de:	1824      	adds	r4, r4, r0
 80003e0:	414d      	adcs	r5, r1
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d006      	beq.n	80003f4 <__udivmoddi4+0xe8>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d9ee      	bls.n	80003c8 <__udivmoddi4+0xbc>
 80003ea:	3e01      	subs	r6, #1
 80003ec:	1924      	adds	r4, r4, r4
 80003ee:	416d      	adcs	r5, r5
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d1f8      	bne.n	80003e6 <__udivmoddi4+0xda>
 80003f4:	9800      	ldr	r0, [sp, #0]
 80003f6:	9901      	ldr	r1, [sp, #4]
 80003f8:	4653      	mov	r3, sl
 80003fa:	1900      	adds	r0, r0, r4
 80003fc:	4169      	adcs	r1, r5
 80003fe:	2b00      	cmp	r3, #0
 8000400:	db23      	blt.n	800044a <__udivmoddi4+0x13e>
 8000402:	002b      	movs	r3, r5
 8000404:	4652      	mov	r2, sl
 8000406:	40d3      	lsrs	r3, r2
 8000408:	002a      	movs	r2, r5
 800040a:	4664      	mov	r4, ip
 800040c:	40e2      	lsrs	r2, r4
 800040e:	001c      	movs	r4, r3
 8000410:	4653      	mov	r3, sl
 8000412:	0015      	movs	r5, r2
 8000414:	2b00      	cmp	r3, #0
 8000416:	db2d      	blt.n	8000474 <__udivmoddi4+0x168>
 8000418:	0026      	movs	r6, r4
 800041a:	4657      	mov	r7, sl
 800041c:	40be      	lsls	r6, r7
 800041e:	0033      	movs	r3, r6
 8000420:	0026      	movs	r6, r4
 8000422:	4667      	mov	r7, ip
 8000424:	40be      	lsls	r6, r7
 8000426:	0032      	movs	r2, r6
 8000428:	1a80      	subs	r0, r0, r2
 800042a:	4199      	sbcs	r1, r3
 800042c:	9000      	str	r0, [sp, #0]
 800042e:	9101      	str	r1, [sp, #4]
 8000430:	e7ac      	b.n	800038c <__udivmoddi4+0x80>
 8000432:	4662      	mov	r2, ip
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	464a      	mov	r2, r9
 800043a:	40da      	lsrs	r2, r3
 800043c:	4661      	mov	r1, ip
 800043e:	0013      	movs	r3, r2
 8000440:	4642      	mov	r2, r8
 8000442:	408a      	lsls	r2, r1
 8000444:	0017      	movs	r7, r2
 8000446:	431f      	orrs	r7, r3
 8000448:	e780      	b.n	800034c <__udivmoddi4+0x40>
 800044a:	4662      	mov	r2, ip
 800044c:	2320      	movs	r3, #32
 800044e:	1a9b      	subs	r3, r3, r2
 8000450:	002a      	movs	r2, r5
 8000452:	4666      	mov	r6, ip
 8000454:	409a      	lsls	r2, r3
 8000456:	0023      	movs	r3, r4
 8000458:	40f3      	lsrs	r3, r6
 800045a:	4313      	orrs	r3, r2
 800045c:	e7d4      	b.n	8000408 <__udivmoddi4+0xfc>
 800045e:	4662      	mov	r2, ip
 8000460:	2320      	movs	r3, #32
 8000462:	2100      	movs	r1, #0
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	2200      	movs	r2, #0
 8000468:	9100      	str	r1, [sp, #0]
 800046a:	9201      	str	r2, [sp, #4]
 800046c:	2201      	movs	r2, #1
 800046e:	40da      	lsrs	r2, r3
 8000470:	9201      	str	r2, [sp, #4]
 8000472:	e780      	b.n	8000376 <__udivmoddi4+0x6a>
 8000474:	2320      	movs	r3, #32
 8000476:	4662      	mov	r2, ip
 8000478:	0026      	movs	r6, r4
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	40de      	lsrs	r6, r3
 800047e:	002f      	movs	r7, r5
 8000480:	46b0      	mov	r8, r6
 8000482:	4666      	mov	r6, ip
 8000484:	40b7      	lsls	r7, r6
 8000486:	4646      	mov	r6, r8
 8000488:	003b      	movs	r3, r7
 800048a:	4333      	orrs	r3, r6
 800048c:	e7c8      	b.n	8000420 <__udivmoddi4+0x114>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__gnu_ldivmod_helper>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	b083      	sub	sp, #12
 8000494:	0016      	movs	r6, r2
 8000496:	001f      	movs	r7, r3
 8000498:	9000      	str	r0, [sp, #0]
 800049a:	9101      	str	r1, [sp, #4]
 800049c:	f000 f83e 	bl	800051c <__divdi3>
 80004a0:	0004      	movs	r4, r0
 80004a2:	000d      	movs	r5, r1
 80004a4:	0002      	movs	r2, r0
 80004a6:	000b      	movs	r3, r1
 80004a8:	0030      	movs	r0, r6
 80004aa:	0039      	movs	r1, r7
 80004ac:	f7ff ff04 	bl	80002b8 <__aeabi_lmul>
 80004b0:	9a00      	ldr	r2, [sp, #0]
 80004b2:	9b01      	ldr	r3, [sp, #4]
 80004b4:	1a12      	subs	r2, r2, r0
 80004b6:	418b      	sbcs	r3, r1
 80004b8:	9908      	ldr	r1, [sp, #32]
 80004ba:	0020      	movs	r0, r4
 80004bc:	600a      	str	r2, [r1, #0]
 80004be:	604b      	str	r3, [r1, #4]
 80004c0:	0029      	movs	r1, r5
 80004c2:	b003      	add	sp, #12
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__clzsi2>:
 80004c8:	211c      	movs	r1, #28
 80004ca:	2301      	movs	r3, #1
 80004cc:	041b      	lsls	r3, r3, #16
 80004ce:	4298      	cmp	r0, r3
 80004d0:	d301      	bcc.n	80004d6 <__clzsi2+0xe>
 80004d2:	0c00      	lsrs	r0, r0, #16
 80004d4:	3910      	subs	r1, #16
 80004d6:	0a1b      	lsrs	r3, r3, #8
 80004d8:	4298      	cmp	r0, r3
 80004da:	d301      	bcc.n	80004e0 <__clzsi2+0x18>
 80004dc:	0a00      	lsrs	r0, r0, #8
 80004de:	3908      	subs	r1, #8
 80004e0:	091b      	lsrs	r3, r3, #4
 80004e2:	4298      	cmp	r0, r3
 80004e4:	d301      	bcc.n	80004ea <__clzsi2+0x22>
 80004e6:	0900      	lsrs	r0, r0, #4
 80004e8:	3904      	subs	r1, #4
 80004ea:	a202      	add	r2, pc, #8	; (adr r2, 80004f4 <__clzsi2+0x2c>)
 80004ec:	5c10      	ldrb	r0, [r2, r0]
 80004ee:	1840      	adds	r0, r0, r1
 80004f0:	4770      	bx	lr
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	02020304 	.word	0x02020304
 80004f8:	01010101 	.word	0x01010101
	...

08000504 <__clzdi2>:
 8000504:	b510      	push	{r4, lr}
 8000506:	2900      	cmp	r1, #0
 8000508:	d103      	bne.n	8000512 <__clzdi2+0xe>
 800050a:	f7ff ffdd 	bl	80004c8 <__clzsi2>
 800050e:	3020      	adds	r0, #32
 8000510:	e002      	b.n	8000518 <__clzdi2+0x14>
 8000512:	1c08      	adds	r0, r1, #0
 8000514:	f7ff ffd8 	bl	80004c8 <__clzsi2>
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__divdi3>:
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	464e      	mov	r6, r9
 8000520:	4657      	mov	r7, sl
 8000522:	46de      	mov	lr, fp
 8000524:	4645      	mov	r5, r8
 8000526:	b5e0      	push	{r5, r6, r7, lr}
 8000528:	000f      	movs	r7, r1
 800052a:	2100      	movs	r1, #0
 800052c:	b083      	sub	sp, #12
 800052e:	0006      	movs	r6, r0
 8000530:	4689      	mov	r9, r1
 8000532:	2f00      	cmp	r7, #0
 8000534:	da06      	bge.n	8000544 <__divdi3+0x28>
 8000536:	0039      	movs	r1, r7
 8000538:	2700      	movs	r7, #0
 800053a:	4246      	negs	r6, r0
 800053c:	418f      	sbcs	r7, r1
 800053e:	2101      	movs	r1, #1
 8000540:	4249      	negs	r1, r1
 8000542:	4689      	mov	r9, r1
 8000544:	2b00      	cmp	r3, #0
 8000546:	da07      	bge.n	8000558 <__divdi3+0x3c>
 8000548:	4649      	mov	r1, r9
 800054a:	43c9      	mvns	r1, r1
 800054c:	0010      	movs	r0, r2
 800054e:	4689      	mov	r9, r1
 8000550:	0019      	movs	r1, r3
 8000552:	2300      	movs	r3, #0
 8000554:	4242      	negs	r2, r0
 8000556:	418b      	sbcs	r3, r1
 8000558:	0034      	movs	r4, r6
 800055a:	003d      	movs	r5, r7
 800055c:	4692      	mov	sl, r2
 800055e:	4698      	mov	r8, r3
 8000560:	42bb      	cmp	r3, r7
 8000562:	d869      	bhi.n	8000638 <__divdi3+0x11c>
 8000564:	d066      	beq.n	8000634 <__divdi3+0x118>
 8000566:	4641      	mov	r1, r8
 8000568:	4650      	mov	r0, sl
 800056a:	f7ff ffcb 	bl	8000504 <__clzdi2>
 800056e:	4683      	mov	fp, r0
 8000570:	0039      	movs	r1, r7
 8000572:	0030      	movs	r0, r6
 8000574:	f7ff ffc6 	bl	8000504 <__clzdi2>
 8000578:	465b      	mov	r3, fp
 800057a:	1a1b      	subs	r3, r3, r0
 800057c:	469c      	mov	ip, r3
 800057e:	3b20      	subs	r3, #32
 8000580:	469b      	mov	fp, r3
 8000582:	d500      	bpl.n	8000586 <__divdi3+0x6a>
 8000584:	e075      	b.n	8000672 <__divdi3+0x156>
 8000586:	4651      	mov	r1, sl
 8000588:	4658      	mov	r0, fp
 800058a:	4081      	lsls	r1, r0
 800058c:	000b      	movs	r3, r1
 800058e:	4651      	mov	r1, sl
 8000590:	4660      	mov	r0, ip
 8000592:	4081      	lsls	r1, r0
 8000594:	000a      	movs	r2, r1
 8000596:	42bb      	cmp	r3, r7
 8000598:	d861      	bhi.n	800065e <__divdi3+0x142>
 800059a:	d05e      	beq.n	800065a <__divdi3+0x13e>
 800059c:	0034      	movs	r4, r6
 800059e:	003d      	movs	r5, r7
 80005a0:	4659      	mov	r1, fp
 80005a2:	1aa4      	subs	r4, r4, r2
 80005a4:	419d      	sbcs	r5, r3
 80005a6:	2900      	cmp	r1, #0
 80005a8:	da00      	bge.n	80005ac <__divdi3+0x90>
 80005aa:	e07a      	b.n	80006a2 <__divdi3+0x186>
 80005ac:	2100      	movs	r1, #0
 80005ae:	2000      	movs	r0, #0
 80005b0:	2601      	movs	r6, #1
 80005b2:	9000      	str	r0, [sp, #0]
 80005b4:	9101      	str	r1, [sp, #4]
 80005b6:	4659      	mov	r1, fp
 80005b8:	408e      	lsls	r6, r1
 80005ba:	9601      	str	r6, [sp, #4]
 80005bc:	4661      	mov	r1, ip
 80005be:	2601      	movs	r6, #1
 80005c0:	408e      	lsls	r6, r1
 80005c2:	4661      	mov	r1, ip
 80005c4:	9600      	str	r6, [sp, #0]
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d050      	beq.n	800066c <__divdi3+0x150>
 80005ca:	07d9      	lsls	r1, r3, #31
 80005cc:	0856      	lsrs	r6, r2, #1
 80005ce:	085f      	lsrs	r7, r3, #1
 80005d0:	430e      	orrs	r6, r1
 80005d2:	4663      	mov	r3, ip
 80005d4:	e00e      	b.n	80005f4 <__divdi3+0xd8>
 80005d6:	42af      	cmp	r7, r5
 80005d8:	d101      	bne.n	80005de <__divdi3+0xc2>
 80005da:	42a6      	cmp	r6, r4
 80005dc:	d80c      	bhi.n	80005f8 <__divdi3+0xdc>
 80005de:	1ba4      	subs	r4, r4, r6
 80005e0:	41bd      	sbcs	r5, r7
 80005e2:	2101      	movs	r1, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2200      	movs	r2, #0
 80005ea:	3b01      	subs	r3, #1
 80005ec:	1864      	adds	r4, r4, r1
 80005ee:	4155      	adcs	r5, r2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d006      	beq.n	8000602 <__divdi3+0xe6>
 80005f4:	42af      	cmp	r7, r5
 80005f6:	d9ee      	bls.n	80005d6 <__divdi3+0xba>
 80005f8:	3b01      	subs	r3, #1
 80005fa:	1924      	adds	r4, r4, r4
 80005fc:	416d      	adcs	r5, r5
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f8      	bne.n	80005f4 <__divdi3+0xd8>
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	465b      	mov	r3, fp
 8000608:	1900      	adds	r0, r0, r4
 800060a:	4169      	adcs	r1, r5
 800060c:	2b00      	cmp	r3, #0
 800060e:	db3d      	blt.n	800068c <__divdi3+0x170>
 8000610:	002e      	movs	r6, r5
 8000612:	40de      	lsrs	r6, r3
 8000614:	4663      	mov	r3, ip
 8000616:	002c      	movs	r4, r5
 8000618:	40dc      	lsrs	r4, r3
 800061a:	465b      	mov	r3, fp
 800061c:	2b00      	cmp	r3, #0
 800061e:	db4b      	blt.n	80006b8 <__divdi3+0x19c>
 8000620:	0034      	movs	r4, r6
 8000622:	465d      	mov	r5, fp
 8000624:	40ac      	lsls	r4, r5
 8000626:	0023      	movs	r3, r4
 8000628:	4664      	mov	r4, ip
 800062a:	40a6      	lsls	r6, r4
 800062c:	0032      	movs	r2, r6
 800062e:	1a80      	subs	r0, r0, r2
 8000630:	4199      	sbcs	r1, r3
 8000632:	e003      	b.n	800063c <__divdi3+0x120>
 8000634:	42b2      	cmp	r2, r6
 8000636:	d996      	bls.n	8000566 <__divdi3+0x4a>
 8000638:	2000      	movs	r0, #0
 800063a:	2100      	movs	r1, #0
 800063c:	464b      	mov	r3, r9
 800063e:	2b00      	cmp	r3, #0
 8000640:	d004      	beq.n	800064c <__divdi3+0x130>
 8000642:	0003      	movs	r3, r0
 8000644:	000c      	movs	r4, r1
 8000646:	2100      	movs	r1, #0
 8000648:	4258      	negs	r0, r3
 800064a:	41a1      	sbcs	r1, r4
 800064c:	b003      	add	sp, #12
 800064e:	bc3c      	pop	{r2, r3, r4, r5}
 8000650:	4690      	mov	r8, r2
 8000652:	4699      	mov	r9, r3
 8000654:	46a2      	mov	sl, r4
 8000656:	46ab      	mov	fp, r5
 8000658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065a:	42b1      	cmp	r1, r6
 800065c:	d99e      	bls.n	800059c <__divdi3+0x80>
 800065e:	2100      	movs	r1, #0
 8000660:	2000      	movs	r0, #0
 8000662:	9000      	str	r0, [sp, #0]
 8000664:	9101      	str	r1, [sp, #4]
 8000666:	4661      	mov	r1, ip
 8000668:	2900      	cmp	r1, #0
 800066a:	d1ae      	bne.n	80005ca <__divdi3+0xae>
 800066c:	9800      	ldr	r0, [sp, #0]
 800066e:	9901      	ldr	r1, [sp, #4]
 8000670:	e7e4      	b.n	800063c <__divdi3+0x120>
 8000672:	2320      	movs	r3, #32
 8000674:	4662      	mov	r2, ip
 8000676:	4651      	mov	r1, sl
 8000678:	1a9b      	subs	r3, r3, r2
 800067a:	40d9      	lsrs	r1, r3
 800067c:	4640      	mov	r0, r8
 800067e:	9100      	str	r1, [sp, #0]
 8000680:	4661      	mov	r1, ip
 8000682:	4088      	lsls	r0, r1
 8000684:	0003      	movs	r3, r0
 8000686:	9900      	ldr	r1, [sp, #0]
 8000688:	430b      	orrs	r3, r1
 800068a:	e780      	b.n	800058e <__divdi3+0x72>
 800068c:	4662      	mov	r2, ip
 800068e:	2320      	movs	r3, #32
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	409a      	lsls	r2, r3
 8000696:	0026      	movs	r6, r4
 8000698:	0013      	movs	r3, r2
 800069a:	4662      	mov	r2, ip
 800069c:	40d6      	lsrs	r6, r2
 800069e:	431e      	orrs	r6, r3
 80006a0:	e7b8      	b.n	8000614 <__divdi3+0xf8>
 80006a2:	4661      	mov	r1, ip
 80006a4:	2620      	movs	r6, #32
 80006a6:	2701      	movs	r7, #1
 80006a8:	1a76      	subs	r6, r6, r1
 80006aa:	2000      	movs	r0, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	40f7      	lsrs	r7, r6
 80006b0:	9000      	str	r0, [sp, #0]
 80006b2:	9101      	str	r1, [sp, #4]
 80006b4:	9701      	str	r7, [sp, #4]
 80006b6:	e781      	b.n	80005bc <__divdi3+0xa0>
 80006b8:	4667      	mov	r7, ip
 80006ba:	2320      	movs	r3, #32
 80006bc:	4662      	mov	r2, ip
 80006be:	0035      	movs	r5, r6
 80006c0:	40bc      	lsls	r4, r7
 80006c2:	1a9b      	subs	r3, r3, r2
 80006c4:	40dd      	lsrs	r5, r3
 80006c6:	0023      	movs	r3, r4
 80006c8:	432b      	orrs	r3, r5
 80006ca:	e7ad      	b.n	8000628 <__divdi3+0x10c>

080006cc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	2308      	movs	r3, #8
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f008 fd9a 	bl	8009214 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_ADC_Init+0xc0>)
 80006e2:	4a2b      	ldr	r2, [pc, #172]	; (8000790 <MX_ADC_Init+0xc4>)
 80006e4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <MX_ADC_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_ADC_Init+0xc0>)
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	05d2      	lsls	r2, r2, #23
 80006f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_ADC_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <MX_ADC_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_ADC_Init+0xc0>)
 8000702:	2201      	movs	r2, #1
 8000704:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC_Init+0xc0>)
 800070e:	2220      	movs	r2, #32
 8000710:	2100      	movs	r1, #0
 8000712:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ADC_Init+0xc0>)
 8000716:	2221      	movs	r2, #33	; 0x21
 8000718:	2100      	movs	r1, #0
 800071a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_ADC_Init+0xc0>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ADC_Init+0xc0>)
 8000724:	22c2      	movs	r2, #194	; 0xc2
 8000726:	32ff      	adds	r2, #255	; 0xff
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_ADC_Init+0xc0>)
 800072c:	222c      	movs	r2, #44	; 0x2c
 800072e:	2100      	movs	r1, #0
 8000730:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_ADC_Init+0xc0>)
 8000734:	2204      	movs	r2, #4
 8000736:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC_Init+0xc0>)
 800073a:	2200      	movs	r2, #0
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_ADC_Init+0xc0>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC_Init+0xc0>)
 8000746:	2200      	movs	r2, #0
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_ADC_Init+0xc0>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_ADC_Init+0xc0>)
 8000752:	0018      	movs	r0, r3
 8000754:	f000 ffbe 	bl	80016d4 <HAL_ADC_Init>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800075c:	f000 faa6 	bl	8000cac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000760:	003b      	movs	r3, r7
 8000762:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <MX_ADC_Init+0xc8>)
 8000764:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000766:	003b      	movs	r3, r7
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0152      	lsls	r2, r2, #5
 800076c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800076e:	003a      	movs	r2, r7
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_ADC_Init+0xc0>)
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f001 f921 	bl	80019bc <HAL_ADC_ConfigChannel>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800077e:	f000 fa95 	bl	8000cac <Error_Handler>
  }

}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000168 	.word	0x20000168
 8000790:	40012400 	.word	0x40012400
 8000794:	48040000 	.word	0x48040000

08000798 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_ADC_MspInit+0x28>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d106      	bne.n	80007b8 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_ADC_MspInit+0x2c>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_ADC_MspInit+0x2c>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0089      	lsls	r1, r1, #2
 80007b4:	430a      	orrs	r2, r1
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b002      	add	sp, #8
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40012400 	.word	0x40012400
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_RTC_AlarmAEventCallback>:
 *      Author: jeann
 */
#include "alarm_it.h"

extern int gg;
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	gg=1;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_RTC_AlarmAEventCallback+0x20>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
	hrtc->State = HAL_RTC_STATE_READY;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2221      	movs	r2, #33	; 0x21
 80007da:	2101      	movs	r1, #1
 80007dc:	5499      	strb	r1, [r3, r2]
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	200000a4 	.word	0x200000a4

080007ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b08b      	sub	sp, #44	; 0x2c
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	2414      	movs	r4, #20
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2314      	movs	r3, #20
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f008 fd09 	bl	8009214 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b7d      	ldr	r3, [pc, #500]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000806:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
 800080e:	4b7a      	ldr	r3, [pc, #488]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b77      	ldr	r3, [pc, #476]	; (80009f8 <MX_GPIO_Init+0x20c>)
 800081c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081e:	4b76      	ldr	r3, [pc, #472]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000820:	2102      	movs	r1, #2
 8000822:	430a      	orrs	r2, r1
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
 8000826:	4b74      	ldr	r3, [pc, #464]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082a:	2202      	movs	r2, #2
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b71      	ldr	r3, [pc, #452]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000836:	4b70      	ldr	r3, [pc, #448]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000838:	2104      	movs	r1, #4
 800083a:	430a      	orrs	r2, r1
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
 800083e:	4b6e      	ldr	r3, [pc, #440]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000842:	2204      	movs	r2, #4
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b6b      	ldr	r3, [pc, #428]	; (80009f8 <MX_GPIO_Init+0x20c>)
 800084c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084e:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	430a      	orrs	r2, r1
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
 8000856:	4b68      	ldr	r3, [pc, #416]	; (80009f8 <MX_GPIO_Init+0x20c>)
 8000858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000862:	4966      	ldr	r1, [pc, #408]	; (80009fc <MX_GPIO_Init+0x210>)
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fc12 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000870:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <MX_GPIO_Init+0x214>)
 8000872:	2200      	movs	r2, #0
 8000874:	21e0      	movs	r1, #224	; 0xe0
 8000876:	0018      	movs	r0, r3
 8000878:	f001 fc0c 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 800087c:	4b61      	ldr	r3, [pc, #388]	; (8000a04 <MX_GPIO_Init+0x218>)
 800087e:	2200      	movs	r2, #0
 8000880:	2107      	movs	r1, #7
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fc06 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	4a5f      	ldr	r2, [pc, #380]	; (8000a08 <MX_GPIO_Init+0x21c>)
 800088c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	193a      	adds	r2, r7, r4
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fa75 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD4_Pin;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	22e0      	movs	r2, #224	; 0xe0
 80008b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2201      	movs	r2, #1
 80008ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	000c      	movs	r4, r1
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	4a4c      	ldr	r2, [pc, #304]	; (8000a00 <MX_GPIO_Init+0x214>)
 80008ce:	0019      	movs	r1, r3
 80008d0:	0010      	movs	r0, r2
 80008d2:	f001 fa61 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_10;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	22f0      	movs	r2, #240	; 0xf0
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e0:	000c      	movs	r4, r1
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2203      	movs	r2, #3
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	4a43      	ldr	r2, [pc, #268]	; (8000a00 <MX_GPIO_Init+0x214>)
 80008f2:	0019      	movs	r1, r3
 80008f4:	0010      	movs	r0, r2
 80008f6:	f001 fa4f 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA14 PA13 PA8 PA11
                           PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_11
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	4a43      	ldr	r2, [pc, #268]	; (8000a0c <MX_GPIO_Init+0x220>)
 80008fe:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2203      	movs	r2, #3
 8000904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	193a      	adds	r2, r7, r4
 800090e:	23a0      	movs	r3, #160	; 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f001 fa3f 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2213      	movs	r2, #19
 800091e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	4a3b      	ldr	r2, [pc, #236]	; (8000a10 <MX_GPIO_Init+0x224>)
 8000924:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	193b      	adds	r3, r7, r4
 800092e:	4a34      	ldr	r2, [pc, #208]	; (8000a00 <MX_GPIO_Init+0x214>)
 8000930:	0019      	movs	r1, r3
 8000932:	0010      	movs	r0, r2
 8000934:	f001 fa30 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8000938:	0021      	movs	r1, r4
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	0192      	lsls	r2, r2, #6
 8000940:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	4a32      	ldr	r2, [pc, #200]	; (8000a10 <MX_GPIO_Init+0x224>)
 8000946:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 800094e:	000c      	movs	r4, r1
 8000950:	187b      	adds	r3, r7, r1
 8000952:	4a2c      	ldr	r2, [pc, #176]	; (8000a04 <MX_GPIO_Init+0x218>)
 8000954:	0019      	movs	r1, r3
 8000956:	0010      	movs	r0, r2
 8000958:	f001 fa1e 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 800095c:	0021      	movs	r1, r4
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2201      	movs	r2, #1
 8000968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2202      	movs	r2, #2
 8000974:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	000c      	movs	r4, r1
 8000978:	187b      	adds	r3, r7, r1
 800097a:	4a22      	ldr	r2, [pc, #136]	; (8000a04 <MX_GPIO_Init+0x218>)
 800097c:	0019      	movs	r1, r3
 800097e:	0010      	movs	r0, r2
 8000980:	f001 fa0a 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000984:	0021      	movs	r1, r4
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2204      	movs	r2, #4
 800098a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2201      	movs	r2, #1
 8000996:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000998:	000c      	movs	r4, r1
 800099a:	187b      	adds	r3, r7, r1
 800099c:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <MX_GPIO_Init+0x214>)
 800099e:	0019      	movs	r1, r3
 80009a0:	0010      	movs	r0, r2
 80009a2:	f001 f9f9 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a6:	0021      	movs	r1, r4
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2220      	movs	r2, #32
 80009ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2201      	movs	r2, #1
 80009b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c0:	187a      	adds	r2, r7, r1
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 f9e5 	bl	8001d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2005      	movs	r0, #5
 80009d4:	f001 f966 	bl	8001ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80009d8:	2005      	movs	r0, #5
 80009da:	f001 f978 	bl	8001cce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2007      	movs	r0, #7
 80009e4:	f001 f95e 	bl	8001ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009e8:	2007      	movs	r0, #7
 80009ea:	f001 f970 	bl	8001cce <HAL_NVIC_EnableIRQ>

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b00b      	add	sp, #44	; 0x2c
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40021000 	.word	0x40021000
 80009fc:	00009022 	.word	0x00009022
 8000a00:	50000400 	.word	0x50000400
 8000a04:	50000800 	.word	0x50000800
 8000a08:	00009002 	.word	0x00009002
 8000a0c:	00006911 	.word	0x00006911
 8000a10:	10110000 	.word	0x10110000

08000a14 <stm32l_lowPowerRestoreGpioConfig>:

/* USER CODE BEGIN 2 */
void stm32l_lowPowerRestoreGpioConfig() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af02      	add	r7, sp, #8

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1e:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a26:	4b3c      	ldr	r3, [pc, #240]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a36:	4b38      	ldr	r3, [pc, #224]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a38:	2102      	movs	r1, #2
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	2202      	movs	r2, #2
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	430a      	orrs	r2, r1
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a66:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	4013      	ands	r3, r2
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

	  // RF sw
	  gpio_configure_ext(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	2200      	movs	r2, #0
 8000a82:	2102      	movs	r1, #2
 8000a84:	2000      	movs	r0, #0
 8000a86:	f007 f951 	bl	8007d2c <gpio_configure_ext>

	  // LoRa NSS
	  gpio_configure_ext(ITSDK_SX1276_NSS_BANK,ITSDK_SX1276_NSS_PIN,GPIO_OUTPUT_PULLUP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	0219      	lsls	r1, r3, #8
 8000a8e:	2300      	movs	r3, #0
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2301      	movs	r3, #1
 8000a94:	2201      	movs	r2, #1
 8000a96:	2000      	movs	r0, #0
 8000a98:	f007 f948 	bl	8007d2c <gpio_configure_ext>

	  // LoRa TCXO
	  gpio_configure_ext(ITSDK_SX1276_TCXO_VCC_BANK,ITSDK_SX1276_TCXO_VCC_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_LOW,ITSDK_GPIO_ALT_NONE);
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	0159      	lsls	r1, r3, #5
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f007 f93f 	bl	8007d2c <gpio_configure_ext>

	  // LoRa DIO0-1-2-3-4
	  gpio_configure_ext(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000aae:	2300      	movs	r3, #0
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f007 f937 	bl	8007d2c <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f007 f92f 	bl	8007d2c <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f007 f927 	bl	8007d2c <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	0199      	lsls	r1, r3, #6
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2207      	movs	r2, #7
 8000aea:	2002      	movs	r0, #2
 8000aec:	f007 f91e 	bl	8007d2c <gpio_configure_ext>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2005      	movs	r0, #5
 8000af6:	f001 f8d5 	bl	8001ca4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000afa:	2005      	movs	r0, #5
 8000afc:	f001 f8e7 	bl	8001cce <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2007      	movs	r0, #7
 8000b06:	f001 f8cd 	bl	8001ca4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f001 f8df 	bl	8001cce <HAL_NVIC_EnableIRQ>

}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b004      	add	sp, #16
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000

08000b1c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_IWDG_Init+0x34>)
 8000b22:	4a0c      	ldr	r2, [pc, #48]	; (8000b54 <MX_IWDG_Init+0x38>)
 8000b24:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_IWDG_Init+0x34>)
 8000b28:	2206      	movs	r2, #6
 8000b2a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_IWDG_Init+0x34>)
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <MX_IWDG_Init+0x3c>)
 8000b30:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_IWDG_Init+0x34>)
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <MX_IWDG_Init+0x3c>)
 8000b36:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <MX_IWDG_Init+0x34>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 fae4 	bl	8002108 <HAL_IWDG_Init>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000b44:	f000 f8b2 	bl	8000cac <Error_Handler>
  }

}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	200001c4 	.word	0x200001c4
 8000b54:	40003000 	.word	0x40003000
 8000b58:	00000fff 	.word	0x00000fff

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f000 fd1c 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f818 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f7ff fe40 	bl	80007ec <MX_GPIO_Init>
  MX_RTC_Init();
 8000b6c:	f000 f8de 	bl	8000d2c <MX_RTC_Init>
  MX_SPI1_Init();
 8000b70:	f000 f9a4 	bl	8000ebc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b74:	f000 f9da 	bl	8000f2c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000b78:	f000 fc30 	bl	80013dc <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000b7c:	f7ff ffce 	bl	8000b1c <MX_IWDG_Init>
  MX_ADC_Init();
 8000b80:	f7ff fda4 	bl	80006cc <MX_ADC_Init>
  MX_TIM21_Init();
 8000b84:	f000 fb84 	bl	8001290 <MX_TIM21_Init>
  MX_USART1_UART_Init();
 8000b88:	f000 fbf0 	bl	800136c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  itsdk_setup();
 8000b8c:	f006 fd36 	bl	80075fc <itsdk_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	itsdk_loop();
 8000b90:	f006 fd70 	bl	8007674 <itsdk_loop>
 8000b94:	e7fc      	b.n	8000b90 <main+0x34>
	...

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b09d      	sub	sp, #116	; 0x74
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	2438      	movs	r4, #56	; 0x38
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	2338      	movs	r3, #56	; 0x38
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f008 fb33 	bl	8009214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bae:	2324      	movs	r3, #36	; 0x24
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2314      	movs	r3, #20
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f008 fb2b 	bl	8009214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	2324      	movs	r3, #36	; 0x24
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	f008 fb24 	bl	8009214 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bcc:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <SystemClock_Config+0x108>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <SystemClock_Config+0x10c>)
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <SystemClock_Config+0x108>)
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	0109      	lsls	r1, r1, #4
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bde:	f001 faed 	bl	80021bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <SystemClock_Config+0x110>)
 8000be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <SystemClock_Config+0x110>)
 8000be8:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemClock_Config+0x10c>)
 8000bea:	400a      	ands	r2, r1
 8000bec:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	220e      	movs	r2, #14
 8000bf2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	0052      	lsls	r2, r2, #1
 8000bfa:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfc:	0021      	movs	r1, r4
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2201      	movs	r2, #1
 8000c02:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2210      	movs	r2, #16
 8000c08:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2202      	movs	r2, #2
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	0312      	lsls	r2, r2, #12
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	0412      	lsls	r2, r2, #16
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 fb22 	bl	8002278 <HAL_RCC_OscConfig>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c38:	f000 f838 	bl	8000cac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	2124      	movs	r1, #36	; 0x24
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	220f      	movs	r2, #15
 8000c42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2203      	movs	r2, #3
 8000c48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2101      	movs	r1, #1
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 fed9 	bl	8002a18 <HAL_RCC_ClockConfig>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000c6a:	f000 f81f 	bl	8000cac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000c6e:	003b      	movs	r3, r7
 8000c70:	2223      	movs	r2, #35	; 0x23
 8000c72:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c74:	003b      	movs	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c80:	003b      	movs	r3, r7
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	0252      	lsls	r2, r2, #9
 8000c86:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	003b      	movs	r3, r7
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 f8a8 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	1e03      	subs	r3, r0, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000c94:	f000 f80a 	bl	8000cac <Error_Handler>
  }
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b01d      	add	sp, #116	; 0x74
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	40007000 	.word	0x40007000
 8000ca4:	ffffe7ff 	.word	0xffffe7ff
 8000ca8:	40021000 	.word	0x40021000

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <project_setup>:

// =====================================================================
// Setup
extern uint8_t byte;
extern uint8_t tabToPrint[5];
void project_setup() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

//	SX1276InitLowPower();

	log_info("Starting up\r\n");				// print a message on the USART2
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <project_setup+0x20>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f006 fbc8 	bl	8007454 <log_info>
	itsdk_delayMs(2000);
 8000cc4:	23fa      	movs	r3, #250	; 0xfa
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f007 fabd 	bl	8008248 <itsdk_delayMs>
	lowPower_enable();
 8000cce:	f006 fc8b 	bl	80075e8 <lowPower_enable>
	//gpio_reset(LED4_PORT,LED4_PIN);

	//itdt_sched_registerSched(TASKDELAYMS,ITSDK_SCHED_CONF_IMMEDIATE, &task);

	//lowPower_disable();
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	08009acc 	.word	0x08009acc

08000cdc <project_loop>:
 * Project loop may not contain functional stuff
 * Keep in this loop only really short operations
 */
extern int serial1Counter;
extern int serial2Counter;
void project_loop() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

	log_info("sleepmode\r\n");
	lowPower_delayMs(20000);
	*/

	  HAL_UART_Transmit(&huart2, &tabToPrint[0], 5, 500);
 8000ce0:	23fa      	movs	r3, #250	; 0xfa
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <project_loop+0x3c>)
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <project_loop+0x40>)
 8000ce8:	2205      	movs	r2, #5
 8000cea:	f003 fafb 	bl	80042e4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"\nL00\r\n", 6, 500);
 8000cee:	23fa      	movs	r3, #250	; 0xfa
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	490b      	ldr	r1, [pc, #44]	; (8000d20 <project_loop+0x44>)
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <project_loop+0x40>)
 8000cf6:	2206      	movs	r2, #6
 8000cf8:	f003 faf4 	bl	80042e4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000cfc:	23fa      	movs	r3, #250	; 0xfa
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 fca9 	bl	8001658 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart1, &byte, 1);
 8000d06:	4907      	ldr	r1, [pc, #28]	; (8000d24 <project_loop+0x48>)
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <project_loop+0x4c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f003 fb91 	bl	8004434 <HAL_UART_Receive_IT>
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000490 	.word	0x20000490
 8000d1c:	20000364 	.word	0x20000364
 8000d20:	08009adc 	.word	0x08009adc
 8000d24:	20000496 	.word	0x20000496
 8000d28:	200002e4 	.word	0x200002e4

08000d2c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000d32:	232c      	movs	r3, #44	; 0x2c
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	0018      	movs	r0, r3
 8000d38:	2314      	movs	r3, #20
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f008 fa69 	bl	8009214 <memset>
  RTC_DateTypeDef sDate = {0};
 8000d42:	2328      	movs	r3, #40	; 0x28
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	2328      	movs	r3, #40	; 0x28
 8000d50:	001a      	movs	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	f008 fa5e 	bl	8009214 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d58:	4b46      	ldr	r3, [pc, #280]	; (8000e74 <MX_RTC_Init+0x148>)
 8000d5a:	4a47      	ldr	r2, [pc, #284]	; (8000e78 <MX_RTC_Init+0x14c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <MX_RTC_Init+0x148>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d64:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <MX_RTC_Init+0x148>)
 8000d66:	227f      	movs	r2, #127	; 0x7f
 8000d68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d6a:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <MX_RTC_Init+0x148>)
 8000d6c:	22ff      	movs	r2, #255	; 0xff
 8000d6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d70:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <MX_RTC_Init+0x148>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <MX_RTC_Init+0x148>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d7c:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <MX_RTC_Init+0x148>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <MX_RTC_Init+0x148>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d88:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <MX_RTC_Init+0x148>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 f980 	bl	8003090 <HAL_RTC_Init>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000d94:	f7ff ff8a 	bl	8000cac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000d98:	212c      	movs	r1, #44	; 0x2c
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2200      	movs	r2, #0
 8000da4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000db8:	1879      	adds	r1, r7, r1
 8000dba:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <MX_RTC_Init+0x148>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f002 fa04 	bl	80031cc <HAL_RTC_SetTime>
 8000dc4:	1e03      	subs	r3, r0, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000dc8:	f7ff ff70 	bl	8000cac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dcc:	2128      	movs	r1, #40	; 0x28
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2201      	movs	r2, #1
 8000dde:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2200      	movs	r2, #0
 8000de4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000de6:	1879      	adds	r1, r7, r1
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_RTC_Init+0x148>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	0018      	movs	r0, r3
 8000dee:	f002 fb0d 	bl	800340c <HAL_RTC_SetDate>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d001      	beq.n	8000dfa <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000df6:	f7ff ff59 	bl	8000cac <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e18:	003b      	movs	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000e24:	003b      	movs	r3, r7
 8000e26:	22f0      	movs	r2, #240	; 0xf0
 8000e28:	0512      	lsls	r2, r2, #20
 8000e2a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2220      	movs	r2, #32
 8000e36:	2101      	movs	r1, #1
 8000e38:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	0052      	lsls	r2, r2, #1
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000e42:	0039      	movs	r1, r7
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_RTC_Init+0x148>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f002 fbdb 	bl	8003604 <HAL_RTC_SetAlarm_IT>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d001      	beq.n	8000e56 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8000e52:	f7ff ff2b 	bl	8000cac <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <MX_RTC_Init+0x148>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f002 fe03 	bl	8003a68 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d001      	beq.n	8000e6a <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 8000e66:	f7ff ff21 	bl	8000cac <Error_Handler>
  }

}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b010      	add	sp, #64	; 0x40
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	200001d4 	.word	0x200001d4
 8000e78:	40002800 	.word	0x40002800

08000e7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_RTC_MspInit+0x38>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10e      	bne.n	8000eac <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_RTC_MspInit+0x3c>)
 8000e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_RTC_MspInit+0x3c>)
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	02c9      	lsls	r1, r1, #11
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 feff 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f000 ff11 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40002800 	.word	0x40002800
 8000eb8:	40021000 	.word	0x40021000

08000ebc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <MX_SPI1_Init+0x6c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000ec8:	2282      	movs	r2, #130	; 0x82
 8000eca:	0052      	lsls	r2, r2, #1
 8000ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <MX_SPI1_Init+0x68>)
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f002 ff04 	bl	8003d1c <HAL_SPI_Init>
 8000f14:	1e03      	subs	r3, r0, #0
 8000f16:	d001      	beq.n	8000f1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f18:	f7ff fec8 	bl	8000cac <Error_Handler>
  }

}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000250 	.word	0x20000250
 8000f28:	40013000 	.word	0x40013000

08000f2c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <MX_SPI2_Init+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f38:	2282      	movs	r2, #130	; 0x82
 8000f3a:	0052      	lsls	r2, r2, #1
 8000f3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f76:	2207      	movs	r2, #7
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <MX_SPI2_Init+0x64>)
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f002 fecd 	bl	8003d1c <HAL_SPI_Init>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8000f86:	f7ff fe91 	bl	8000cac <Error_Handler>
  }

}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001f8 	.word	0x200001f8
 8000f94:	40003800 	.word	0x40003800

08000f98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b08b      	sub	sp, #44	; 0x2c
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	2314      	movs	r3, #20
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	2314      	movs	r3, #20
 8000fa8:	001a      	movs	r2, r3
 8000faa:	2100      	movs	r1, #0
 8000fac:	f008 f932 	bl	8009214 <memset>
  if(spiHandle->Instance==SPI1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a41      	ldr	r2, [pc, #260]	; (80010bc <HAL_SPI_MspInit+0x124>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d14d      	bne.n	8001056 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8000fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	0149      	lsls	r1, r1, #5
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8000fce:	2102      	movs	r1, #2
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8000fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd8:	2202      	movs	r2, #2
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8000fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8000fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8000ff8:	2114      	movs	r1, #20
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2202      	movs	r2, #2
 8001004:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2203      	movs	r2, #3
 8001010:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8001018:	000c      	movs	r4, r1
 800101a:	187b      	adds	r3, r7, r1
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <HAL_SPI_MspInit+0x12c>)
 800101e:	0019      	movs	r1, r3
 8001020:	0010      	movs	r0, r2
 8001022:	f000 feb9 	bl	8001d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 8001026:	0021      	movs	r1, r4
 8001028:	187b      	adds	r3, r7, r1
 800102a:	22c0      	movs	r2, #192	; 0xc0
 800102c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2202      	movs	r2, #2
 8001032:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2203      	movs	r2, #3
 800103e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	187a      	adds	r2, r7, r1
 8001048:	23a0      	movs	r3, #160	; 0xa0
 800104a:	05db      	lsls	r3, r3, #23
 800104c:	0011      	movs	r1, r2
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fea2 	bl	8001d98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001054:	e02e      	b.n	80010b4 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <HAL_SPI_MspInit+0x130>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d129      	bne.n	80010b4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8001062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	01c9      	lsls	r1, r1, #7
 800106a:	430a      	orrs	r2, r1
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8001070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 8001074:	2102      	movs	r1, #2
 8001076:	430a      	orrs	r2, r1
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_SPI_MspInit+0x128>)
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	2202      	movs	r2, #2
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8001086:	2114      	movs	r1, #20
 8001088:	187b      	adds	r3, r7, r1
 800108a:	22f0      	movs	r2, #240	; 0xf0
 800108c:	0212      	lsls	r2, r2, #8
 800108e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2202      	movs	r2, #2
 8001094:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2203      	movs	r2, #3
 80010a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_SPI_MspInit+0x12c>)
 80010ac:	0019      	movs	r1, r3
 80010ae:	0010      	movs	r0, r2
 80010b0:	f000 fe72 	bl	8001d98 <HAL_GPIO_Init>
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b00b      	add	sp, #44	; 0x2c
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	40013000 	.word	0x40013000
 80010c0:	40021000 	.word	0x40021000
 80010c4:	50000400 	.word	0x50000400
 80010c8:	40003800 	.word	0x40003800

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_MspInit+0x24>)
 80010d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_MspInit+0x24>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_MspInit+0x24>)
 80010de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_MspInit+0x24>)
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	0549      	lsls	r1, r1, #21
 80010e6:	430a      	orrs	r2, r1
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f007 ff24 	bl	8008f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <RTC_IRQHandler+0x1c>)
 800112e:	0018      	movs	r0, r3
 8001130:	f002 fbb4 	bl	800389c <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <RTC_IRQHandler+0x1c>)
 8001136:	0018      	movs	r0, r3
 8001138:	f002 fdbe 	bl	8003cb8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	200001d4 	.word	0x200001d4

08001148 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 ffbf 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001152:	2002      	movs	r0, #2
 8001154:	f000 ffbc 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001162:	2010      	movs	r0, #16
 8001164:	f000 ffb4 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	019b      	lsls	r3, r3, #6
 800116c:	0018      	movs	r0, r3
 800116e:	f000 ffaf 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <USART1_IRQHandler+0x14>)
 800117e:	0018      	movs	r0, r3
 8001180:	f003 fa10 	bl	80045a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	200002e4 	.word	0x200002e4

08001190 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <USART2_IRQHandler+0x14>)
 8001196:	0018      	movs	r0, r3
 8001198:	f003 fa04 	bl	80045a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	20000364 	.word	0x20000364

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f007 ffd6 	bl	8009188 <__errno>
 80011dc:	0003      	movs	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	425b      	negs	r3, r3
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	18d2      	adds	r2, r2, r3
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <_sbrk+0x64>)
 80011f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b006      	add	sp, #24
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20005000 	.word	0x20005000
 8001208:	00000400 	.word	0x00000400
 800120c:	200000a8 	.word	0x200000a8
 8001210:	200004f8 	.word	0x200004f8

08001214 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <SystemInit+0x64>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <SystemInit+0x64>)
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0049      	lsls	r1, r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <SystemInit+0x64>)
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <SystemInit+0x64>)
 800122c:	4913      	ldr	r1, [pc, #76]	; (800127c <SystemInit+0x68>)
 800122e:	400a      	ands	r2, r1
 8001230:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <SystemInit+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <SystemInit+0x64>)
 8001238:	4911      	ldr	r1, [pc, #68]	; (8001280 <SystemInit+0x6c>)
 800123a:	400a      	ands	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <SystemInit+0x64>)
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <SystemInit+0x64>)
 8001244:	2101      	movs	r1, #1
 8001246:	438a      	bics	r2, r1
 8001248:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <SystemInit+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <SystemInit+0x64>)
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <SystemInit+0x70>)
 8001252:	400a      	ands	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <SystemInit+0x64>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <SystemInit+0x64>)
 800125c:	490a      	ldr	r1, [pc, #40]	; (8001288 <SystemInit+0x74>)
 800125e:	400a      	ands	r2, r1
 8001260:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SystemInit+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <SystemInit+0x78>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	0512      	lsls	r2, r2, #20
 800126e:	609a      	str	r2, [r3, #8]
#endif
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	40021000 	.word	0x40021000
 800127c:	88ff400c 	.word	0x88ff400c
 8001280:	fef6fff6 	.word	0xfef6fff6
 8001284:	fffbffff 	.word	0xfffbffff
 8001288:	ff02ffff 	.word	0xff02ffff
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <MX_TIM21_Init>:

TIM_HandleTypeDef htim21;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	2308      	movs	r3, #8
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	0018      	movs	r0, r3
 800129c:	2310      	movs	r3, #16
 800129e:	001a      	movs	r2, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	f007 ffb7 	bl	8009214 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	003b      	movs	r3, r7
 80012a8:	0018      	movs	r0, r3
 80012aa:	2308      	movs	r3, #8
 80012ac:	001a      	movs	r2, r3
 80012ae:	2100      	movs	r1, #0
 80012b0:	f007 ffb0 	bl	8009214 <memset>

  htim21.Instance = TIM21;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_TIM21_Init+0xa0>)
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <MX_TIM21_Init+0xa4>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_TIM21_Init+0xa0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_TIM21_Init+0xa0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_TIM21_Init+0xa0>)
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <MX_TIM21_Init+0xa8>)
 80012ca:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_TIM21_Init+0xa0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_TIM21_Init+0xa0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_TIM21_Init+0xa0>)
 80012da:	0018      	movs	r0, r3
 80012dc:	f002 fd88 	bl	8003df0 <HAL_TIM_Base_Init>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 80012e4:	f7ff fce2 	bl	8000cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e8:	2108      	movs	r1, #8
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	0152      	lsls	r2, r2, #5
 80012f0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80012f2:	187a      	adds	r2, r7, r1
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_TIM21_Init+0xa0>)
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f002 fda5 	bl	8003e48 <HAL_TIM_ConfigClockSource>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8001302:	f7ff fcd3 	bl	8000cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001306:	003b      	movs	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	003b      	movs	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001312:	003a      	movs	r2, r7
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_TIM21_Init+0xa0>)
 8001316:	0011      	movs	r1, r2
 8001318:	0018      	movs	r0, r3
 800131a:	f002 ff4b 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8001322:	f7ff fcc3 	bl	8000cac <Error_Handler>
  }

}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	46bd      	mov	sp, r7
 800132a:	b006      	add	sp, #24
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	200002a8 	.word	0x200002a8
 8001334:	40010800 	.word	0x40010800
 8001338:	0000ffff 	.word	0x0000ffff

0800133c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_TIM_Base_MspInit+0x28>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d105      	bne.n	800135a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_TIM_Base_MspInit+0x2c>)
 8001350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_TIM_Base_MspInit+0x2c>)
 8001354:	2104      	movs	r1, #4
 8001356:	430a      	orrs	r2, r1
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	40010800 	.word	0x40010800
 8001368:	40021000 	.word	0x40021000

0800136c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 8001372:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <MX_USART1_UART_Init+0x6c>)
 8001374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 8001378:	2296      	movs	r2, #150	; 0x96
 800137a:	0192      	lsls	r2, r2, #6
 800137c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 8001392:	2204      	movs	r2, #4
 8001394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 80013aa:	2203      	movs	r2, #3
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	0292      	lsls	r2, r2, #10
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0252      	lsls	r2, r2, #9
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <MX_USART1_UART_Init+0x68>)
 80013c0:	0018      	movs	r0, r3
 80013c2:	f002 ff3b 	bl	800423c <HAL_UART_Init>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 80013ca:	f7ff fc6f 	bl	8000cac <Error_Handler>
  }

}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200002e4 	.word	0x200002e4
 80013d8:	40013800 	.word	0x40013800

080013dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <MX_USART2_UART_Init+0x5c>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013e8:	2296      	movs	r2, #150	; 0x96
 80013ea:	0192      	lsls	r2, r2, #6
 80013ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART2_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART2_UART_Init+0x58>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART2_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART2_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART2_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART2_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <MX_USART2_UART_Init+0x58>)
 8001420:	0018      	movs	r0, r3
 8001422:	f002 ff0b 	bl	800423c <HAL_UART_Init>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800142a:	f7ff fc3f 	bl	8000cac <Error_Handler>
  }

}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000364 	.word	0x20000364
 8001438:	40004400 	.word	0x40004400

0800143c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	2314      	movs	r3, #20
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	0018      	movs	r0, r3
 800144a:	2314      	movs	r3, #20
 800144c:	001a      	movs	r2, r3
 800144e:	2100      	movs	r1, #0
 8001450:	f007 fee0 	bl	8009214 <memset>
  if(uartHandle->Instance==USART1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a38      	ldr	r2, [pc, #224]	; (800153c <HAL_UART_MspInit+0x100>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d133      	bne.n	80014c6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_UART_MspInit+0x104>)
 8001460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001462:	4b37      	ldr	r3, [pc, #220]	; (8001540 <HAL_UART_MspInit+0x104>)
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	01c9      	lsls	r1, r1, #7
 8001468:	430a      	orrs	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_UART_MspInit+0x104>)
 800146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001470:	4b33      	ldr	r3, [pc, #204]	; (8001540 <HAL_UART_MspInit+0x104>)
 8001472:	2101      	movs	r1, #1
 8001474:	430a      	orrs	r2, r1
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_UART_MspInit+0x104>)
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	2201      	movs	r2, #1
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001484:	2114      	movs	r1, #20
 8001486:	187b      	adds	r3, r7, r1
 8001488:	22c0      	movs	r2, #192	; 0xc0
 800148a:	00d2      	lsls	r2, r2, #3
 800148c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2202      	movs	r2, #2
 8001492:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2203      	movs	r2, #3
 800149e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2204      	movs	r2, #4
 80014a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	187a      	adds	r2, r7, r1
 80014a8:	23a0      	movs	r3, #160	; 0xa0
 80014aa:	05db      	lsls	r3, r3, #23
 80014ac:	0011      	movs	r1, r2
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fc72 	bl	8001d98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	201b      	movs	r0, #27
 80014ba:	f000 fbf3 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014be:	201b      	movs	r0, #27
 80014c0:	f000 fc05 	bl	8001cce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014c4:	e036      	b.n	8001534 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_UART_MspInit+0x108>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d131      	bne.n	8001534 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_UART_MspInit+0x104>)
 80014d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_UART_MspInit+0x104>)
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	0289      	lsls	r1, r1, #10
 80014da:	430a      	orrs	r2, r1
 80014dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_UART_MspInit+0x104>)
 80014e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_UART_MspInit+0x104>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	430a      	orrs	r2, r1
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_UART_MspInit+0x104>)
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	2201      	movs	r2, #1
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014f6:	2114      	movs	r1, #20
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2202      	movs	r2, #2
 8001502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2203      	movs	r2, #3
 800150e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2204      	movs	r2, #4
 8001514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	187a      	adds	r2, r7, r1
 8001518:	23a0      	movs	r3, #160	; 0xa0
 800151a:	05db      	lsls	r3, r3, #23
 800151c:	0011      	movs	r1, r2
 800151e:	0018      	movs	r0, r3
 8001520:	f000 fc3a 	bl	8001d98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	201c      	movs	r0, #28
 800152a:	f000 fbbb 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800152e:	201c      	movs	r0, #28
 8001530:	f000 fbcd 	bl	8001cce <HAL_NVIC_EnableIRQ>
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b00a      	add	sp, #40	; 0x28
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40013800 	.word	0x40013800
 8001540:	40021000 	.word	0x40021000
 8001544:	40004400 	.word	0x40004400

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800154a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800154c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800154e:	e003      	b.n	8001558 <LoopCopyDataInit>

08001550 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001552:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001554:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001556:	3104      	adds	r1, #4

08001558 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <LoopForever+0xa>)
  ldr  r3, =_edata
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <LoopForever+0xe>)
  adds  r2, r0, r1
 800155c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800155e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001560:	d3f6      	bcc.n	8001550 <CopyDataInit>
  ldr  r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001564:	e002      	b.n	800156c <LoopFillZerobss>

08001566 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001566:	2300      	movs	r3, #0
  str  r3, [r2]
 8001568:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156a:	3204      	adds	r2, #4

0800156c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <LoopForever+0x16>)
  cmp  r2, r3
 800156e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001570:	d3f9      	bcc.n	8001566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001572:	f7ff fe4f 	bl	8001214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f007 fe0d 	bl	8009194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff faef 	bl	8000b5c <main>

0800157e <LoopForever>:

LoopForever:
    b LoopForever
 800157e:	e7fe      	b.n	800157e <LoopForever>
   ldr   r0, =_estack
 8001580:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8001584:	08009f28 	.word	0x08009f28
  ldr  r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800158c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001590:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001594:	200004f4 	.word	0x200004f4

08001598 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_COMP_IRQHandler>
	...

0800159c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_Init+0x3c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Init+0x3c>)
 80015ae:	2140      	movs	r1, #64	; 0x40
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f811 	bl	80015dc <HAL_InitTick>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	e001      	b.n	80015ca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015c6:	f7ff fd81 	bl	80010cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_InitTick+0x5c>)
 80015e6:	681c      	ldr	r4, [r3, #0]
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_InitTick+0x60>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	0019      	movs	r1, r3
 80015ee:	23fa      	movs	r3, #250	; 0xfa
 80015f0:	0098      	lsls	r0, r3, #2
 80015f2:	f7fe fd91 	bl	8000118 <__udivsi3>
 80015f6:	0003      	movs	r3, r0
 80015f8:	0019      	movs	r1, r3
 80015fa:	0020      	movs	r0, r4
 80015fc:	f7fe fd8c 	bl	8000118 <__udivsi3>
 8001600:	0003      	movs	r3, r0
 8001602:	0018      	movs	r0, r3
 8001604:	f000 fb73 	bl	8001cee <HAL_SYSTICK_Config>
 8001608:	1e03      	subs	r3, r0, #0
 800160a:	d001      	beq.n	8001610 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e00f      	b.n	8001630 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d80b      	bhi.n	800162e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	2301      	movs	r3, #1
 800161a:	425b      	negs	r3, r3
 800161c:	2200      	movs	r2, #0
 800161e:	0018      	movs	r0, r3
 8001620:	f000 fb40 	bl	8001ca4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_InitTick+0x64>)
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b003      	add	sp, #12
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000008 	.word	0x20000008
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b02      	ldr	r3, [pc, #8]	; (8001654 <HAL_GetTick+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	200003e4 	.word	0x200003e4

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff fff0 	bl	8001644 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_Delay+0x40>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	001a      	movs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	189b      	adds	r3, r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	f7ff ffe0 	bl	8001644 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b004      	add	sp, #16
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000008 	.word	0x20000008

0800169c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <HAL_SuspendTick+0x18>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_SuspendTick+0x18>)
 80016a6:	2102      	movs	r1, #2
 80016a8:	438a      	bics	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_ResumeTick+0x18>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_ResumeTick+0x18>)
 80016c2:	2102      	movs	r1, #2
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e159      	b.n	800199a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2250      	movs	r2, #80	; 0x50
 80016f8:	2100      	movs	r1, #0
 80016fa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff f84a 	bl	8000798 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	2210      	movs	r2, #16
 800170a:	4013      	ands	r3, r2
 800170c:	2b10      	cmp	r3, #16
 800170e:	d005      	beq.n	800171c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2204      	movs	r2, #4
 8001718:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800171a:	d00b      	beq.n	8001734 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	2210      	movs	r2, #16
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2250      	movs	r2, #80	; 0x50
 800172c:	2100      	movs	r1, #0
 800172e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e132      	b.n	800199a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	4a9a      	ldr	r2, [pc, #616]	; (80019a4 <HAL_ADC_Init+0x2d0>)
 800173a:	4013      	ands	r3, r2
 800173c:	2202      	movs	r2, #2
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2203      	movs	r2, #3
 800174c:	4013      	ands	r3, r2
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_ADC_Init+0x90>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	4013      	ands	r3, r2
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_ADC_Init+0x90>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_ADC_Init+0x92>
 8001764:	2300      	movs	r3, #0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d149      	bne.n	80017fe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	23c0      	movs	r3, #192	; 0xc0
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	429a      	cmp	r2, r3
 8001774:	d00b      	beq.n	800178e <HAL_ADC_Init+0xba>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	05db      	lsls	r3, r3, #23
 800177e:	429a      	cmp	r2, r3
 8001780:	d005      	beq.n	800178e <HAL_ADC_Init+0xba>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	429a      	cmp	r2, r3
 800178c:	d111      	bne.n	80017b2 <HAL_ADC_Init+0xde>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	0892      	lsrs	r2, r2, #2
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6919      	ldr	r1, [r3, #16]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	e014      	b.n	80017dc <HAL_ADC_Init+0x108>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	0892      	lsrs	r2, r2, #2
 80017c0:	611a      	str	r2, [r3, #16]
 80017c2:	4b79      	ldr	r3, [pc, #484]	; (80019a8 <HAL_ADC_Init+0x2d4>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <HAL_ADC_Init+0x2d4>)
 80017c8:	4978      	ldr	r1, [pc, #480]	; (80019ac <HAL_ADC_Init+0x2d8>)
 80017ca:	400a      	ands	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <HAL_ADC_Init+0x2d4>)
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4b74      	ldr	r3, [pc, #464]	; (80019a8 <HAL_ADC_Init+0x2d4>)
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2118      	movs	r1, #24
 80017e8:	438a      	bics	r2, r1
 80017ea:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68d9      	ldr	r1, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80017fe:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <HAL_ADC_Init+0x2d4>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b69      	ldr	r3, [pc, #420]	; (80019a8 <HAL_ADC_Init+0x2d4>)
 8001804:	496a      	ldr	r1, [pc, #424]	; (80019b0 <HAL_ADC_Init+0x2dc>)
 8001806:	400a      	ands	r2, r1
 8001808:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800180a:	4b67      	ldr	r3, [pc, #412]	; (80019a8 <HAL_ADC_Init+0x2d4>)
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001812:	065a      	lsls	r2, r3, #25
 8001814:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <HAL_ADC_Init+0x2d4>)
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	055b      	lsls	r3, r3, #21
 8001824:	4013      	ands	r3, r2
 8001826:	d108      	bne.n	800183a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	0549      	lsls	r1, r1, #21
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	495b      	ldr	r1, [pc, #364]	; (80019b4 <HAL_ADC_Init+0x2e0>)
 8001846:	400a      	ands	r2, r1
 8001848:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68d9      	ldr	r1, [r3, #12]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d101      	bne.n	8001860 <HAL_ADC_Init+0x18c>
 800185c:	2304      	movs	r3, #4
 800185e:	e000      	b.n	8001862 <HAL_ADC_Init+0x18e>
 8001860:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001862:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2020      	movs	r0, #32
 8001868:	5c1b      	ldrb	r3, [r3, r0]
 800186a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800186c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	202c      	movs	r0, #44	; 0x2c
 8001872:	5c1b      	ldrb	r3, [r3, r0]
 8001874:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001876:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800187c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001884:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800188c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189a:	23c2      	movs	r3, #194	; 0xc2
 800189c:	33ff      	adds	r3, #255	; 0xff
 800189e:	429a      	cmp	r2, r3
 80018a0:	d00b      	beq.n	80018ba <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68d9      	ldr	r1, [r3, #12]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2221      	movs	r2, #33	; 0x21
 80018be:	5c9b      	ldrb	r3, [r3, r2]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d11a      	bne.n	80018fa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2220      	movs	r2, #32
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0249      	lsls	r1, r1, #9
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e00b      	b.n	80018fa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e6:	2220      	movs	r2, #32
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	2201      	movs	r2, #1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d11f      	bne.n	8001942 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	492a      	ldr	r1, [pc, #168]	; (80019b8 <HAL_ADC_Init+0x2e4>)
 800190e:	400a      	ands	r2, r1
 8001910:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6919      	ldr	r1, [r3, #16]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001920:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001926:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	e00e      	b.n	8001960 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	2201      	movs	r2, #1
 800194a:	4013      	ands	r3, r2
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2101      	movs	r1, #1
 800195c:	438a      	bics	r2, r1
 800195e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2107      	movs	r1, #7
 800196c:	438a      	bics	r2, r1
 800196e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6959      	ldr	r1, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	2203      	movs	r2, #3
 800198e:	4393      	bics	r3, r2
 8001990:	2201      	movs	r2, #1
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	fffffefd 	.word	0xfffffefd
 80019a8:	40012708 	.word	0x40012708
 80019ac:	ffc3ffff 	.word	0xffc3ffff
 80019b0:	fdffffff 	.word	0xfdffffff
 80019b4:	fffe0219 	.word	0xfffe0219
 80019b8:	fffffc03 	.word	0xfffffc03

080019bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2250      	movs	r2, #80	; 0x50
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x18>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e06c      	b.n	8001aae <HAL_ADC_ConfigChannel+0xf2>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2250      	movs	r2, #80	; 0x50
 80019d8:	2101      	movs	r1, #1
 80019da:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d00b      	beq.n	8001a00 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ec:	2220      	movs	r2, #32
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2250      	movs	r2, #80	; 0x50
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e056      	b.n	8001aae <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a2c      	ldr	r2, [pc, #176]	; (8001ab8 <HAL_ADC_ConfigChannel+0xfc>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d028      	beq.n	8001a5c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	035b      	lsls	r3, r3, #13
 8001a16:	0b5a      	lsrs	r2, r3, #13
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	02db      	lsls	r3, r3, #11
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d009      	beq.n	8001a40 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_ADC_ConfigChannel+0x100>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_ADC_ConfigChannel+0x100>)
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0409      	lsls	r1, r1, #16
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f000 f844 	bl	8001ac8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d02b      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_ADC_ConfigChannel+0x100>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_ADC_ConfigChannel+0x100>)
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	03c9      	lsls	r1, r1, #15
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e023      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	035b      	lsls	r3, r3, #13
 8001a68:	0b5b      	lsrs	r3, r3, #13
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	400a      	ands	r2, r1
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	02db      	lsls	r3, r3, #11
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d005      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_ADC_ConfigChannel+0x100>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_ADC_ConfigChannel+0x100>)
 8001a86:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_ADC_ConfigChannel+0x104>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	4013      	ands	r3, r2
 8001a96:	d005      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_ADC_ConfigChannel+0x100>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_ADC_ConfigChannel+0x100>)
 8001a9e:	4909      	ldr	r1, [pc, #36]	; (8001ac4 <HAL_ADC_ConfigChannel+0x108>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2250      	movs	r2, #80	; 0x50
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	00001001 	.word	0x00001001
 8001abc:	40012708 	.word	0x40012708
 8001ac0:	ff7fffff 	.word	0xff7fffff
 8001ac4:	ffbfffff 	.word	0xffbfffff

08001ac8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <ADC_DelayMicroSecond+0x34>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	490a      	ldr	r1, [pc, #40]	; (8001b00 <ADC_DelayMicroSecond+0x38>)
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7fe fb1e 	bl	8000118 <__udivsi3>
 8001adc:	0003      	movs	r3, r0
 8001ade:	001a      	movs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4353      	muls	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001ae6:	e002      	b.n	8001aee <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f9      	bne.n	8001ae8 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b004      	add	sp, #16
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	000f4240 	.word	0x000f4240

08001b04 <HAL_ADCEx_EnableVREFINT>:
  *         For more details on procedure and buffer current consumption, refer to device reference manual.
  * @note   This is functional only if the LOCK is not set.
  * @retval None
*/
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  
  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8001b10:	6a1a      	ldr	r2, [r3, #32]
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	0049      	lsls	r1, r1, #1
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	621a      	str	r2, [r3, #32]
  
  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b1c:	f7ff fd92 	bl	8001644 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	607b      	str	r3, [r7, #4]
  
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8001b24:	e008      	b.n	8001b38 <HAL_ADCEx_EnableVREFINT+0x34>
  {
    if((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 8001b26:	f7ff fd8d 	bl	8001644 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d901      	bls.n	8001b38 <HAL_ADCEx_EnableVREFINT+0x34>
    { 
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e006      	b.n	8001b46 <HAL_ADCEx_EnableVREFINT+0x42>
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8001b3a:	6a1a      	ldr	r2, [r3, #32]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	05db      	lsls	r3, r3, #23
 8001b40:	4013      	ands	r3, r2
 8001b42:	d0f0      	beq.n	8001b26 <HAL_ADCEx_EnableVREFINT+0x22>
    }
  }
  
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40010000 	.word	0x40010000

08001b54 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	001a      	movs	r2, r3
 8001b66:	231f      	movs	r3, #31
 8001b68:	401a      	ands	r2, r3
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <NVIC_EnableIRQ+0x28>)
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4091      	lsls	r1, r2
 8001b70:	000a      	movs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	0002      	movs	r2, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b7f      	cmp	r3, #127	; 0x7f
 8001b94:	d932      	bls.n	8001bfc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b96:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <NVIC_SetPriority+0xd4>)
 8001b98:	1dfb      	adds	r3, r7, #7
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	230f      	movs	r3, #15
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	3b08      	subs	r3, #8
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3306      	adds	r3, #6
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	18d3      	adds	r3, r2, r3
 8001bac:	3304      	adds	r3, #4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	1dfa      	adds	r2, r7, #7
 8001bb2:	7812      	ldrb	r2, [r2, #0]
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	400a      	ands	r2, r1
 8001bba:	00d2      	lsls	r2, r2, #3
 8001bbc:	21ff      	movs	r1, #255	; 0xff
 8001bbe:	4091      	lsls	r1, r2
 8001bc0:	000a      	movs	r2, r1
 8001bc2:	43d2      	mvns	r2, r2
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	019b      	lsls	r3, r3, #6
 8001bcc:	22ff      	movs	r2, #255	; 0xff
 8001bce:	401a      	ands	r2, r3
 8001bd0:	1dfb      	adds	r3, r7, #7
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	4003      	ands	r3, r0
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bde:	481d      	ldr	r0, [pc, #116]	; (8001c54 <NVIC_SetPriority+0xd4>)
 8001be0:	1dfb      	adds	r3, r7, #7
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	001c      	movs	r4, r3
 8001be6:	230f      	movs	r3, #15
 8001be8:	4023      	ands	r3, r4
 8001bea:	3b08      	subs	r3, #8
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	3306      	adds	r3, #6
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	18c3      	adds	r3, r0, r3
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bfa:	e027      	b.n	8001c4c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bfc:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <NVIC_SetPriority+0xd8>)
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b25b      	sxtb	r3, r3
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	33c0      	adds	r3, #192	; 0xc0
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	589b      	ldr	r3, [r3, r2]
 8001c0c:	1dfa      	adds	r2, r7, #7
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	0011      	movs	r1, r2
 8001c12:	2203      	movs	r2, #3
 8001c14:	400a      	ands	r2, r1
 8001c16:	00d2      	lsls	r2, r2, #3
 8001c18:	21ff      	movs	r1, #255	; 0xff
 8001c1a:	4091      	lsls	r1, r2
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	43d2      	mvns	r2, r2
 8001c20:	401a      	ands	r2, r3
 8001c22:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	019b      	lsls	r3, r3, #6
 8001c28:	22ff      	movs	r2, #255	; 0xff
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	0018      	movs	r0, r3
 8001c32:	2303      	movs	r3, #3
 8001c34:	4003      	ands	r3, r0
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c3a:	4807      	ldr	r0, [pc, #28]	; (8001c58 <NVIC_SetPriority+0xd8>)
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	430a      	orrs	r2, r1
 8001c46:	33c0      	adds	r3, #192	; 0xc0
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	501a      	str	r2, [r3, r0]
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b003      	add	sp, #12
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <SysTick_Config+0x40>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e010      	b.n	8001c94 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <SysTick_Config+0x44>)
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	3a01      	subs	r2, #1
 8001c78:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	425b      	negs	r3, r3
 8001c7e:	2103      	movs	r1, #3
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff ff7d 	bl	8001b80 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <SysTick_Config+0x44>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <SysTick_Config+0x44>)
 8001c8e:	2207      	movs	r2, #7
 8001c90:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	00ffffff 	.word	0x00ffffff
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	210f      	movs	r1, #15
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	1c02      	adds	r2, r0, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <NVIC_SetPriority>
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b004      	add	sp, #16
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7ff ff37 	bl	8001b54 <NVIC_EnableIRQ>
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f7ff ffaf 	bl	8001c5c <SysTick_Config>
 8001cfe:	0003      	movs	r3, r0
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	230f      	movs	r3, #15
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2225      	movs	r2, #37	; 0x25
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d007      	beq.n	8001d34 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2204      	movs	r2, #4
 8001d28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e02a      	b.n	8001d8a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	210e      	movs	r1, #14
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2101      	movs	r1, #1
 8001d50:	438a      	bics	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	221c      	movs	r2, #28
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2101      	movs	r1, #1
 8001d62:	4091      	lsls	r1, r2
 8001d64:	000a      	movs	r2, r1
 8001d66:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2225      	movs	r2, #37	; 0x25
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	0010      	movs	r0, r2
 8001d88:	4798      	blx	r3
    }
  }
  return status;
 8001d8a:	230f      	movs	r3, #15
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b004      	add	sp, #16
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dae:	e155      	b.n	800205c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4091      	lsls	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d100      	bne.n	8001dc8 <HAL_GPIO_Init+0x30>
 8001dc6:	e146      	b.n	8002056 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d00b      	beq.n	8001de8 <HAL_GPIO_Init+0x50>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d007      	beq.n	8001de8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ddc:	2b11      	cmp	r3, #17
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b12      	cmp	r3, #18
 8001de6:	d130      	bne.n	8001e4a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	409a      	lsls	r2, r3
 8001df6:	0013      	movs	r3, r2
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	0013      	movs	r3, r2
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1e:	2201      	movs	r2, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
 8001e24:	0013      	movs	r3, r2
 8001e26:	43da      	mvns	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	2201      	movs	r2, #1
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0xf2>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d123      	bne.n	8001ed2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	58d3      	ldr	r3, [r2, r3]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2107      	movs	r1, #7
 8001eb6:	400b      	ands	r3, r1
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	0092      	lsls	r2, r2, #2
 8001ece:	6939      	ldr	r1, [r7, #16]
 8001ed0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	0013      	movs	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	055b      	lsls	r3, r3, #21
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d100      	bne.n	8001f14 <HAL_GPIO_Init+0x17c>
 8001f12:	e0a0      	b.n	8002056 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f14:	4b57      	ldr	r3, [pc, #348]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f18:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f20:	4a55      	ldr	r2, [pc, #340]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	589b      	ldr	r3, [r3, r2]
 8001f2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2203      	movs	r2, #3
 8001f32:	4013      	ands	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	0013      	movs	r3, r2
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	23a0      	movs	r3, #160	; 0xa0
 8001f48:	05db      	lsls	r3, r3, #23
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d01f      	beq.n	8001f8e <HAL_GPIO_Init+0x1f6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	; (800207c <HAL_GPIO_Init+0x2e4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d019      	beq.n	8001f8a <HAL_GPIO_Init+0x1f2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a49      	ldr	r2, [pc, #292]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_GPIO_Init+0x1ee>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a48      	ldr	r2, [pc, #288]	; (8002084 <HAL_GPIO_Init+0x2ec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00d      	beq.n	8001f82 <HAL_GPIO_Init+0x1ea>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a47      	ldr	r2, [pc, #284]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d007      	beq.n	8001f7e <HAL_GPIO_Init+0x1e6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a46      	ldr	r2, [pc, #280]	; (800208c <HAL_GPIO_Init+0x2f4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f76:	2305      	movs	r3, #5
 8001f78:	e00a      	b.n	8001f90 <HAL_GPIO_Init+0x1f8>
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	e008      	b.n	8001f90 <HAL_GPIO_Init+0x1f8>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x1f8>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x1f8>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x1f8>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x1f8>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	2103      	movs	r1, #3
 8001f94:	400a      	ands	r2, r1
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa0:	4935      	ldr	r1, [pc, #212]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002002:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43da      	mvns	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	035b      	lsls	r3, r3, #13
 800201a:	4013      	ands	r3, r2
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43da      	mvns	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	039b      	lsls	r3, r3, #14
 8002044:	4013      	ands	r3, r2
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_GPIO_Init+0x2f8>)
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	40da      	lsrs	r2, r3
 8002064:	1e13      	subs	r3, r2, #0
 8002066:	d000      	beq.n	800206a <HAL_GPIO_Init+0x2d2>
 8002068:	e6a2      	b.n	8001db0 <HAL_GPIO_Init+0x18>
  }
}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b006      	add	sp, #24
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	50000400 	.word	0x50000400
 8002080:	50000800 	.word	0x50000800
 8002084:	50000c00 	.word	0x50000c00
 8002088:	50001000 	.word	0x50001000
 800208c:	50001c00 	.word	0x50001c00
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	0008      	movs	r0, r1
 800209e:	0011      	movs	r1, r2
 80020a0:	1cbb      	adds	r3, r7, #2
 80020a2:	1c02      	adds	r2, r0, #0
 80020a4:	801a      	strh	r2, [r3, #0]
 80020a6:	1c7b      	adds	r3, r7, #1
 80020a8:	1c0a      	adds	r2, r1, #0
 80020aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ac:	1c7b      	adds	r3, r7, #1
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b4:	1cbb      	adds	r3, r7, #2
 80020b6:	881a      	ldrh	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80020bc:	e003      	b.n	80020c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80020be:	1cbb      	adds	r3, r7, #2
 80020c0:	881a      	ldrh	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	0002      	movs	r2, r0
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	1dba      	adds	r2, r7, #6
 80020e2:	8812      	ldrh	r2, [r2, #0]
 80020e4:	4013      	ands	r3, r2
 80020e6:	d008      	beq.n	80020fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020ea:	1dba      	adds	r2, r7, #6
 80020ec:	8812      	ldrh	r2, [r2, #0]
 80020ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f0:	1dbb      	adds	r3, r7, #6
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f005 ffff 	bl	80080f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e036      	b.n	8002188 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <HAL_IWDG_Init+0x88>)
 8002120:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <HAL_IWDG_Init+0x8c>)
 8002128:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6852      	ldr	r2, [r2, #4]
 8002132:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6892      	ldr	r2, [r2, #8]
 800213c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800213e:	f7ff fa81 	bl	8001644 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8002146:	e008      	b.n	800215a <HAL_IWDG_Init+0x52>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002148:	f7ff fa7c 	bl	8001644 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b30      	cmp	r3, #48	; 0x30
 8002154:	d901      	bls.n	800215a <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e016      	b.n	8002188 <HAL_IWDG_Init+0x80>
  while(hiwdg->Instance->SR != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f1      	bne.n	8002148 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	429a      	cmp	r2, r3
 8002170:	d005      	beq.n	800217e <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68d2      	ldr	r2, [r2, #12]
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	e003      	b.n	8002186 <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <HAL_IWDG_Init+0x90>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b004      	add	sp, #16
 800218e:	bd80      	pop	{r7, pc}
 8002190:	0000cccc 	.word	0x0000cccc
 8002194:	00005555 	.word	0x00005555
 8002198:	0000aaaa 	.word	0x0000aaaa

0800219c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a03      	ldr	r2, [pc, #12]	; (80021b8 <HAL_IWDG_Refresh+0x1c>)
 80021aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	0000aaaa 	.word	0x0000aaaa

080021bc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	0049      	lsls	r1, r1, #1
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40007000 	.word	0x40007000

080021d8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	000a      	movs	r2, r1
 80021e2:	1cfb      	adds	r3, r7, #3
 80021e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_PWR_EnterSTOPMode+0x60>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2203      	movs	r2, #3
 80021f4:	4393      	bics	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002200:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_PWR_EnterSTOPMode+0x60>)
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_PWR_EnterSTOPMode+0x64>)
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_PWR_EnterSTOPMode+0x64>)
 800220c:	2104      	movs	r1, #4
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002212:	1cfb      	adds	r3, r7, #3
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800221a:	bf30      	wfi
 800221c:	e002      	b.n	8002224 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800221e:	bf40      	sev
  __ASM volatile ("wfe");
 8002220:	bf20      	wfe
 8002222:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_PWR_EnterSTOPMode+0x64>)
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_PWR_EnterSTOPMode+0x64>)
 800222a:	2104      	movs	r1, #4
 800222c:	438a      	bics	r2, r1
 800222e:	611a      	str	r2, [r3, #16]

}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40007000 	.word	0x40007000
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8002244:	4b04      	ldr	r3, [pc, #16]	; (8002258 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	00c9      	lsls	r1, r1, #3
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	0089      	lsls	r1, r1, #2
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40007000 	.word	0x40007000

08002278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f000 fbbc 	bl	8002a04 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228c:	4bc8      	ldr	r3, [pc, #800]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	220c      	movs	r2, #12
 8002292:	4013      	ands	r3, r2
 8002294:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002296:	4bc6      	ldr	r3, [pc, #792]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	025b      	lsls	r3, r3, #9
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2201      	movs	r2, #1
 80022a8:	4013      	ands	r3, r2
 80022aa:	d100      	bne.n	80022ae <HAL_RCC_OscConfig+0x36>
 80022ac:	e07e      	b.n	80023ac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d007      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d112      	bne.n	80022e0 <HAL_RCC_OscConfig+0x68>
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	025b      	lsls	r3, r3, #9
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d10d      	bne.n	80022e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	4bba      	ldr	r3, [pc, #744]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	4013      	ands	r3, r2
 80022ce:	d100      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5a>
 80022d0:	e06b      	b.n	80023aa <HAL_RCC_OscConfig+0x132>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d167      	bne.n	80023aa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	f000 fb92 	bl	8002a04 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	025b      	lsls	r3, r3, #9
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x84>
 80022ec:	4bb0      	ldr	r3, [pc, #704]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4baf      	ldr	r3, [pc, #700]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	0249      	lsls	r1, r1, #9
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e027      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	23a0      	movs	r3, #160	; 0xa0
 8002302:	02db      	lsls	r3, r3, #11
 8002304:	429a      	cmp	r2, r3
 8002306:	d10e      	bne.n	8002326 <HAL_RCC_OscConfig+0xae>
 8002308:	4ba9      	ldr	r3, [pc, #676]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4ba8      	ldr	r3, [pc, #672]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	02c9      	lsls	r1, r1, #11
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	4ba6      	ldr	r3, [pc, #664]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4ba5      	ldr	r3, [pc, #660]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0249      	lsls	r1, r1, #9
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e012      	b.n	800234c <HAL_RCC_OscConfig+0xd4>
 8002326:	4ba2      	ldr	r3, [pc, #648]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4ba1      	ldr	r3, [pc, #644]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800232c:	49a1      	ldr	r1, [pc, #644]	; (80025b4 <HAL_RCC_OscConfig+0x33c>)
 800232e:	400a      	ands	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	4b9f      	ldr	r3, [pc, #636]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	025b      	lsls	r3, r3, #9
 800233a:	4013      	ands	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4b9b      	ldr	r3, [pc, #620]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b9a      	ldr	r3, [pc, #616]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002346:	499c      	ldr	r1, [pc, #624]	; (80025b8 <HAL_RCC_OscConfig+0x340>)
 8002348:	400a      	ands	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff f976 	bl	8001644 <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800235c:	e009      	b.n	8002372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235e:	f7ff f971 	bl	8001644 <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d902      	bls.n	8002372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	f000 fb49 	bl	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002372:	4b8f      	ldr	r3, [pc, #572]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	029b      	lsls	r3, r3, #10
 800237a:	4013      	ands	r3, r2
 800237c:	d0ef      	beq.n	800235e <HAL_RCC_OscConfig+0xe6>
 800237e:	e015      	b.n	80023ac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff f960 	bl	8001644 <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238a:	f7ff f95b 	bl	8001644 <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e333      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800239c:	4b84      	ldr	r3, [pc, #528]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	029b      	lsls	r3, r3, #10
 80023a4:	4013      	ands	r3, r2
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x112>
 80023a8:	e000      	b.n	80023ac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2202      	movs	r2, #2
 80023b2:	4013      	ands	r3, r2
 80023b4:	d100      	bne.n	80023b8 <HAL_RCC_OscConfig+0x140>
 80023b6:	e098      	b.n	80024ea <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	2220      	movs	r2, #32
 80023c2:	4013      	ands	r3, r2
 80023c4:	d009      	beq.n	80023da <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80023c6:	4b7a      	ldr	r3, [pc, #488]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b79      	ldr	r3, [pc, #484]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80023cc:	2120      	movs	r1, #32
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	2220      	movs	r2, #32
 80023d6:	4393      	bics	r3, r2
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d005      	beq.n	80023ec <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d13d      	bne.n	8002462 <HAL_RCC_OscConfig+0x1ea>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d13a      	bne.n	8002462 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80023ec:	4b70      	ldr	r3, [pc, #448]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2204      	movs	r2, #4
 80023f2:	4013      	ands	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_RCC_OscConfig+0x188>
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e301      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x344>)
 8002406:	4013      	ands	r3, r2
 8002408:	0019      	movs	r1, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	021a      	lsls	r2, r3, #8
 8002410:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002416:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2209      	movs	r2, #9
 800241c:	4393      	bics	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	4b63      	ldr	r3, [pc, #396]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002428:	f000 fc20 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 800242c:	0001      	movs	r1, r0
 800242e:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	220f      	movs	r2, #15
 8002436:	4013      	ands	r3, r2
 8002438:	4a61      	ldr	r2, [pc, #388]	; (80025c0 <HAL_RCC_OscConfig+0x348>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	000a      	movs	r2, r1
 800243e:	40da      	lsrs	r2, r3
 8002440:	4b60      	ldr	r3, [pc, #384]	; (80025c4 <HAL_RCC_OscConfig+0x34c>)
 8002442:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002444:	2513      	movs	r5, #19
 8002446:	197c      	adds	r4, r7, r5
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff f8c7 	bl	80015dc <HAL_InitTick>
 800244e:	0003      	movs	r3, r0
 8002450:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002452:	197b      	adds	r3, r7, r5
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d047      	beq.n	80024ea <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800245a:	2313      	movs	r3, #19
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	e2d0      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	d027      	beq.n	80024b8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002468:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2209      	movs	r2, #9
 800246e:	4393      	bics	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7ff f8e3 	bl	8001644 <HAL_GetTick>
 800247e:	0003      	movs	r3, r0
 8002480:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002484:	f7ff f8de 	bl	8001644 <HAL_GetTick>
 8002488:	0002      	movs	r2, r0
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e2b6      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2204      	movs	r2, #4
 800249c:	4013      	ands	r3, r2
 800249e:	d0f1      	beq.n	8002484 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a45      	ldr	r2, [pc, #276]	; (80025bc <HAL_RCC_OscConfig+0x344>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	021a      	lsls	r2, r3, #8
 80024b0:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e018      	b.n	80024ea <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b8:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80024be:	2101      	movs	r1, #1
 80024c0:	438a      	bics	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff f8be 	bl	8001644 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff f8b9 	bl	8001644 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e291      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024e0:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2204      	movs	r2, #4
 80024e6:	4013      	ands	r3, r2
 80024e8:	d1f1      	bne.n	80024ce <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2210      	movs	r2, #16
 80024f0:	4013      	ands	r3, r2
 80024f2:	d100      	bne.n	80024f6 <HAL_RCC_OscConfig+0x27e>
 80024f4:	e09f      	b.n	8002636 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d13f      	bne.n	800257c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d005      	beq.n	8002514 <HAL_RCC_OscConfig+0x29c>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e277      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <HAL_RCC_OscConfig+0x350>)
 800251a:	4013      	ands	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002522:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002524:	430a      	orrs	r2, r1
 8002526:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	0a19      	lsrs	r1, r3, #8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	061a      	lsls	r2, r3, #24
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002538:	430a      	orrs	r2, r1
 800253a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	0b5b      	lsrs	r3, r3, #13
 8002542:	3301      	adds	r3, #1
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	0212      	lsls	r2, r2, #8
 8002548:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	210f      	movs	r1, #15
 8002552:	400b      	ands	r3, r1
 8002554:	491a      	ldr	r1, [pc, #104]	; (80025c0 <HAL_RCC_OscConfig+0x348>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_RCC_OscConfig+0x34c>)
 800255c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800255e:	2513      	movs	r5, #19
 8002560:	197c      	adds	r4, r7, r5
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff f83a 	bl	80015dc <HAL_InitTick>
 8002568:	0003      	movs	r3, r0
 800256a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800256c:	197b      	adds	r3, r7, r5
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d060      	beq.n	8002636 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8002574:	2313      	movs	r3, #19
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	e243      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d03e      	beq.n	8002602 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_OscConfig+0x338>)
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	0049      	lsls	r1, r1, #1
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff f857 	bl	8001644 <HAL_GetTick>
 8002596:	0003      	movs	r3, r0
 8002598:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800259a:	e017      	b.n	80025cc <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800259c:	f7ff f852 	bl	8001644 <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d910      	bls.n	80025cc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e22a      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	40021000 	.word	0x40021000
 80025b4:	fffeffff 	.word	0xfffeffff
 80025b8:	fffbffff 	.word	0xfffbffff
 80025bc:	ffffe0ff 	.word	0xffffe0ff
 80025c0:	08009b8c 	.word	0x08009b8c
 80025c4:	20000000 	.word	0x20000000
 80025c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025cc:	4bc6      	ldr	r3, [pc, #792]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	d0e1      	beq.n	800259c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d8:	4bc3      	ldr	r3, [pc, #780]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4ac3      	ldr	r2, [pc, #780]	; (80028ec <HAL_RCC_OscConfig+0x674>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e6:	4bc0      	ldr	r3, [pc, #768]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ec:	4bbe      	ldr	r3, [pc, #760]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	0a19      	lsrs	r1, r3, #8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	061a      	lsls	r2, r3, #24
 80025fa:	4bbb      	ldr	r3, [pc, #748]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	e019      	b.n	8002636 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002602:	4bb9      	ldr	r3, [pc, #740]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4bb8      	ldr	r3, [pc, #736]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002608:	49b9      	ldr	r1, [pc, #740]	; (80028f0 <HAL_RCC_OscConfig+0x678>)
 800260a:	400a      	ands	r2, r1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff f819 	bl	8001644 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002618:	f7ff f814 	bl	8001644 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1ec      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800262a:	4baf      	ldr	r3, [pc, #700]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2208      	movs	r2, #8
 800263c:	4013      	ands	r3, r2
 800263e:	d036      	beq.n	80026ae <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d019      	beq.n	800267c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	4ba7      	ldr	r3, [pc, #668]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800264a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800264c:	4ba6      	ldr	r3, [pc, #664]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002654:	f7fe fff6 	bl	8001644 <HAL_GetTick>
 8002658:	0003      	movs	r3, r0
 800265a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fff1 	bl	8001644 <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1c9      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002670:	4b9d      	ldr	r3, [pc, #628]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002674:	2202      	movs	r2, #2
 8002676:	4013      	ands	r3, r2
 8002678:	d0f1      	beq.n	800265e <HAL_RCC_OscConfig+0x3e6>
 800267a:	e018      	b.n	80026ae <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267c:	4b9a      	ldr	r3, [pc, #616]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800267e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002680:	4b99      	ldr	r3, [pc, #612]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002682:	2101      	movs	r1, #1
 8002684:	438a      	bics	r2, r1
 8002686:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002688:	f7fe ffdc 	bl	8001644 <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002692:	f7fe ffd7 	bl	8001644 <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1af      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026a4:	4b90      	ldr	r3, [pc, #576]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	d1f1      	bne.n	8002692 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2204      	movs	r2, #4
 80026b4:	4013      	ands	r3, r2
 80026b6:	d100      	bne.n	80026ba <HAL_RCC_OscConfig+0x442>
 80026b8:	e0af      	b.n	800281a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2323      	movs	r3, #35	; 0x23
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80026c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	055b      	lsls	r3, r3, #21
 80026ca:	4013      	ands	r3, r2
 80026cc:	d10a      	bne.n	80026e4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b86      	ldr	r3, [pc, #536]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80026d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d2:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0549      	lsls	r1, r1, #21
 80026d8:	430a      	orrs	r2, r1
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026dc:	2323      	movs	r3, #35	; 0x23
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b83      	ldr	r3, [pc, #524]	; (80028f4 <HAL_RCC_OscConfig+0x67c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d11a      	bne.n	8002726 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f0:	4b80      	ldr	r3, [pc, #512]	; (80028f4 <HAL_RCC_OscConfig+0x67c>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b7f      	ldr	r3, [pc, #508]	; (80028f4 <HAL_RCC_OscConfig+0x67c>)
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	0049      	lsls	r1, r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7fe ffa1 	bl	8001644 <HAL_GetTick>
 8002702:	0003      	movs	r3, r0
 8002704:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe ff9c 	bl	8001644 <HAL_GetTick>
 800270c:	0002      	movs	r2, r0
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e174      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b76      	ldr	r3, [pc, #472]	; (80028f4 <HAL_RCC_OscConfig+0x67c>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	429a      	cmp	r2, r3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_OscConfig+0x4ca>
 8002732:	4b6d      	ldr	r3, [pc, #436]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002736:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	0049      	lsls	r1, r1, #1
 800273c:	430a      	orrs	r2, r1
 800273e:	651a      	str	r2, [r3, #80]	; 0x50
 8002740:	e031      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x4ec>
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800274c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800274e:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002750:	4967      	ldr	r1, [pc, #412]	; (80028f0 <HAL_RCC_OscConfig+0x678>)
 8002752:	400a      	ands	r2, r1
 8002754:	651a      	str	r2, [r3, #80]	; 0x50
 8002756:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002758:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800275a:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800275c:	4966      	ldr	r1, [pc, #408]	; (80028f8 <HAL_RCC_OscConfig+0x680>)
 800275e:	400a      	ands	r2, r1
 8002760:	651a      	str	r2, [r3, #80]	; 0x50
 8002762:	e020      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	23a0      	movs	r3, #160	; 0xa0
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	429a      	cmp	r2, r3
 800276e:	d10e      	bne.n	800278e <HAL_RCC_OscConfig+0x516>
 8002770:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002774:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002776:	2180      	movs	r1, #128	; 0x80
 8002778:	00c9      	lsls	r1, r1, #3
 800277a:	430a      	orrs	r2, r1
 800277c:	651a      	str	r2, [r3, #80]	; 0x50
 800277e:	4b5a      	ldr	r3, [pc, #360]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002782:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002784:	2180      	movs	r1, #128	; 0x80
 8002786:	0049      	lsls	r1, r1, #1
 8002788:	430a      	orrs	r2, r1
 800278a:	651a      	str	r2, [r3, #80]	; 0x50
 800278c:	e00b      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
 800278e:	4b56      	ldr	r3, [pc, #344]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002792:	4b55      	ldr	r3, [pc, #340]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002794:	4956      	ldr	r1, [pc, #344]	; (80028f0 <HAL_RCC_OscConfig+0x678>)
 8002796:	400a      	ands	r2, r1
 8002798:	651a      	str	r2, [r3, #80]	; 0x50
 800279a:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800279c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800279e:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80027a0:	4955      	ldr	r1, [pc, #340]	; (80028f8 <HAL_RCC_OscConfig+0x680>)
 80027a2:	400a      	ands	r2, r1
 80027a4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d015      	beq.n	80027da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7fe ff49 	bl	8001644 <HAL_GetTick>
 80027b2:	0003      	movs	r3, r0
 80027b4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027b6:	e009      	b.n	80027cc <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe ff44 	bl	8001644 <HAL_GetTick>
 80027bc:	0002      	movs	r2, r0
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	4a4e      	ldr	r2, [pc, #312]	; (80028fc <HAL_RCC_OscConfig+0x684>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e11b      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027cc:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80027ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4013      	ands	r3, r2
 80027d6:	d0ef      	beq.n	80027b8 <HAL_RCC_OscConfig+0x540>
 80027d8:	e014      	b.n	8002804 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027da:	f7fe ff33 	bl	8001644 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027e2:	e009      	b.n	80027f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe ff2e 	bl	8001644 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	4a43      	ldr	r2, [pc, #268]	; (80028fc <HAL_RCC_OscConfig+0x684>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e105      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80027fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4013      	ands	r3, r2
 8002802:	d1ef      	bne.n	80027e4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002804:	2323      	movs	r3, #35	; 0x23
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d105      	bne.n	800281a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280e:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002812:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002814:	493a      	ldr	r1, [pc, #232]	; (8002900 <HAL_RCC_OscConfig+0x688>)
 8002816:	400a      	ands	r2, r1
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2220      	movs	r2, #32
 8002820:	4013      	ands	r3, r2
 8002822:	d049      	beq.n	80028b8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d026      	beq.n	800287a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800282c:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002832:	2101      	movs	r1, #1
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800283a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800283e:	2101      	movs	r1, #1
 8002840:	430a      	orrs	r2, r1
 8002842:	635a      	str	r2, [r3, #52]	; 0x34
 8002844:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <HAL_RCC_OscConfig+0x68c>)
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_RCC_OscConfig+0x68c>)
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	0189      	lsls	r1, r1, #6
 800284e:	430a      	orrs	r2, r1
 8002850:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7fe fef7 	bl	8001644 <HAL_GetTick>
 8002856:	0003      	movs	r3, r0
 8002858:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800285c:	f7fe fef2 	bl	8001644 <HAL_GetTick>
 8002860:	0002      	movs	r2, r0
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0ca      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2202      	movs	r2, #2
 8002874:	4013      	ands	r3, r2
 8002876:	d0f1      	beq.n	800285c <HAL_RCC_OscConfig+0x5e4>
 8002878:	e01e      	b.n	80028b8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 8002880:	2101      	movs	r1, #1
 8002882:	438a      	bics	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <HAL_RCC_OscConfig+0x68c>)
 8002888:	6a1a      	ldr	r2, [r3, #32]
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_RCC_OscConfig+0x68c>)
 800288c:	491e      	ldr	r1, [pc, #120]	; (8002908 <HAL_RCC_OscConfig+0x690>)
 800288e:	400a      	ands	r2, r1
 8002890:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fed7 	bl	8001644 <HAL_GetTick>
 8002896:	0003      	movs	r3, r0
 8002898:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800289c:	f7fe fed2 	bl	8001644 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0aa      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2202      	movs	r2, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d1f1      	bne.n	800289c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d100      	bne.n	80028c2 <HAL_RCC_OscConfig+0x64a>
 80028c0:	e09f      	b.n	8002a02 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d100      	bne.n	80028ca <HAL_RCC_OscConfig+0x652>
 80028c8:	e078      	b.n	80029bc <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d159      	bne.n	8002986 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <HAL_RCC_OscConfig+0x670>)
 80028d8:	490c      	ldr	r1, [pc, #48]	; (800290c <HAL_RCC_OscConfig+0x694>)
 80028da:	400a      	ands	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe feb1 	bl	8001644 <HAL_GetTick>
 80028e2:	0003      	movs	r3, r0
 80028e4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028e6:	e01c      	b.n	8002922 <HAL_RCC_OscConfig+0x6aa>
 80028e8:	40021000 	.word	0x40021000
 80028ec:	ffff1fff 	.word	0xffff1fff
 80028f0:	fffffeff 	.word	0xfffffeff
 80028f4:	40007000 	.word	0x40007000
 80028f8:	fffffbff 	.word	0xfffffbff
 80028fc:	00001388 	.word	0x00001388
 8002900:	efffffff 	.word	0xefffffff
 8002904:	40010000 	.word	0x40010000
 8002908:	ffffdfff 	.word	0xffffdfff
 800290c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fe98 	bl	8001644 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e070      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002922:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	049b      	lsls	r3, r3, #18
 800292a:	4013      	ands	r3, r2
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a37      	ldr	r2, [pc, #220]	; (8002a10 <HAL_RCC_OscConfig+0x798>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	431a      	orrs	r2, r3
 8002948:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 800294a:	430a      	orrs	r2, r1
 800294c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	0449      	lsls	r1, r1, #17
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fe72 	bl	8001644 <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002966:	f7fe fe6d 	bl	8001644 <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e045      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002978:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	049b      	lsls	r3, r3, #18
 8002980:	4013      	ands	r3, r2
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x6ee>
 8002984:	e03d      	b.n	8002a02 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 800298c:	4921      	ldr	r1, [pc, #132]	; (8002a14 <HAL_RCC_OscConfig+0x79c>)
 800298e:	400a      	ands	r2, r1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7fe fe57 	bl	8001644 <HAL_GetTick>
 8002996:	0003      	movs	r3, r0
 8002998:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fe52 	bl	8001644 <HAL_GetTick>
 80029a0:	0002      	movs	r2, r0
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e02a      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	049b      	lsls	r3, r3, #18
 80029b6:	4013      	ands	r3, r2
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x724>
 80029ba:	e022      	b.n	8002a02 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCC_OscConfig+0x794>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	025b      	lsls	r3, r3, #9
 80029d4:	401a      	ands	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	429a      	cmp	r2, r3
 80029dc:	d10f      	bne.n	80029fe <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	23f0      	movs	r3, #240	; 0xf0
 80029e2:	039b      	lsls	r3, r3, #14
 80029e4:	401a      	ands	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	23c0      	movs	r3, #192	; 0xc0
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	401a      	ands	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b00a      	add	sp, #40	; 0x28
 8002a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	ff02ffff 	.word	0xff02ffff
 8002a14:	feffffff 	.word	0xfeffffff

08002a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b5b0      	push	{r4, r5, r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e10d      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b88      	ldr	r3, [pc, #544]	; (8002c50 <HAL_RCC_ClockConfig+0x238>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2201      	movs	r2, #1
 8002a32:	4013      	ands	r3, r2
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d911      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b85      	ldr	r3, [pc, #532]	; (8002c50 <HAL_RCC_ClockConfig+0x238>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4393      	bics	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	4b82      	ldr	r3, [pc, #520]	; (8002c50 <HAL_RCC_ClockConfig+0x238>)
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4c:	4b80      	ldr	r3, [pc, #512]	; (8002c50 <HAL_RCC_ClockConfig+0x238>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2201      	movs	r2, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d001      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0f4      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2202      	movs	r2, #2
 8002a64:	4013      	ands	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b7a      	ldr	r3, [pc, #488]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	22f0      	movs	r2, #240	; 0xf0
 8002a6e:	4393      	bics	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	4b77      	ldr	r3, [pc, #476]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	d100      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x70>
 8002a86:	e089      	b.n	8002b9c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a90:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	029b      	lsls	r3, r3, #10
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d120      	bne.n	8002ade <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0d3      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	049b      	lsls	r3, r3, #18
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d114      	bne.n	8002ade <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0c7      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac0:	4b64      	ldr	r3, [pc, #400]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d109      	bne.n	8002ade <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0bc      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ace:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0b4      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ade:	4b5d      	ldr	r3, [pc, #372]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002aee:	430a      	orrs	r2, r1
 8002af0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af2:	f7fe fda7 	bl	8001644 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d111      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b02:	e009      	b.n	8002b18 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe fd9e 	bl	8001644 <HAL_GetTick>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_RCC_ClockConfig+0x240>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e097      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b18:	4b4e      	ldr	r3, [pc, #312]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	220c      	movs	r2, #12
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d1ef      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xec>
 8002b24:	e03a      	b.n	8002b9c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d111      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b2e:	e009      	b.n	8002b44 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b30:	f7fe fd88 	bl	8001644 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_RCC_ClockConfig+0x240>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e081      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b44:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	220c      	movs	r2, #12
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d1ef      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x118>
 8002b50:	e024      	b.n	8002b9c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d11b      	bne.n	8002b92 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5a:	e009      	b.n	8002b70 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f7fe fd72 	bl	8001644 <HAL_GetTick>
 8002b60:	0002      	movs	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	4a3c      	ldr	r2, [pc, #240]	; (8002c58 <HAL_RCC_ClockConfig+0x240>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e06b      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b70:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	220c      	movs	r2, #12
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d1ef      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x144>
 8002b7c:	e00e      	b.n	8002b9c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7e:	f7fe fd61 	bl	8001644 <HAL_GetTick>
 8002b82:	0002      	movs	r2, r0
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	4a33      	ldr	r2, [pc, #204]	; (8002c58 <HAL_RCC_ClockConfig+0x240>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e05a      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	220c      	movs	r2, #12
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <HAL_RCC_ClockConfig+0x238>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d211      	bcs.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_RCC_ClockConfig+0x238>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	4393      	bics	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_ClockConfig+0x238>)
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <HAL_RCC_ClockConfig+0x238>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e03c      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <HAL_RCC_ClockConfig+0x244>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <HAL_RCC_ClockConfig+0x248>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	00da      	lsls	r2, r3, #3
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0c:	f000 f82e 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c10:	0001      	movs	r1, r0
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_RCC_ClockConfig+0x23c>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	220f      	movs	r2, #15
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	4a11      	ldr	r2, [pc, #68]	; (8002c64 <HAL_RCC_ClockConfig+0x24c>)
 8002c1e:	5cd3      	ldrb	r3, [r2, r3]
 8002c20:	000a      	movs	r2, r1
 8002c22:	40da      	lsrs	r2, r3
 8002c24:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_ClockConfig+0x250>)
 8002c26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002c28:	250b      	movs	r5, #11
 8002c2a:	197c      	adds	r4, r7, r5
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fe fcd5 	bl	80015dc <HAL_InitTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002c36:	197b      	adds	r3, r7, r5
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002c3e:	230b      	movs	r3, #11
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b004      	add	sp, #16
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	40022000 	.word	0x40022000
 8002c54:	40021000 	.word	0x40021000
 8002c58:	00001388 	.word	0x00001388
 8002c5c:	fffff8ff 	.word	0xfffff8ff
 8002c60:	ffffc7ff 	.word	0xffffc7ff
 8002c64:	08009b8c 	.word	0x08009b8c
 8002c68:	20000000 	.word	0x20000000

08002c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d00e      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d00f      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d157      	bne.n	8002d3a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c8a:	4b35      	ldr	r3, [pc, #212]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	4013      	ands	r3, r2
 8002c92:	d002      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002c94:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c96:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002c98:	e05d      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002c9a:	4b33      	ldr	r3, [pc, #204]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c9c:	613b      	str	r3, [r7, #16]
      break;
 8002c9e:	e05a      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ca0:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x100>)
 8002ca2:	613b      	str	r3, [r7, #16]
      break;
 8002ca4:	e057      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	0c9b      	lsrs	r3, r3, #18
 8002caa:	220f      	movs	r2, #15
 8002cac:	4013      	ands	r3, r2
 8002cae:	4a30      	ldr	r2, [pc, #192]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cb0:	5cd3      	ldrb	r3, [r2, r3]
 8002cb2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	0d9b      	lsrs	r3, r3, #22
 8002cb8:	2203      	movs	r2, #3
 8002cba:	4013      	ands	r3, r2
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	025b      	lsls	r3, r3, #9
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d00f      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	000a      	movs	r2, r1
 8002cd0:	0152      	lsls	r2, r2, #5
 8002cd2:	1a52      	subs	r2, r2, r1
 8002cd4:	0193      	lsls	r3, r2, #6
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	185b      	adds	r3, r3, r1
 8002cdc:	025b      	lsls	r3, r3, #9
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fd fa19 	bl	8000118 <__udivsi3>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e023      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cec:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d00f      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	000a      	movs	r2, r1
 8002cfa:	0152      	lsls	r2, r2, #5
 8002cfc:	1a52      	subs	r2, r2, r1
 8002cfe:	0193      	lsls	r3, r2, #6
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	185b      	adds	r3, r3, r1
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7fd fa04 	bl	8000118 <__udivsi3>
 8002d10:	0003      	movs	r3, r0
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e00e      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	000a      	movs	r2, r1
 8002d1a:	0152      	lsls	r2, r2, #5
 8002d1c:	1a52      	subs	r2, r2, r1
 8002d1e:	0193      	lsls	r3, r2, #6
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	185b      	adds	r3, r3, r1
 8002d26:	029b      	lsls	r3, r3, #10
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7fd f9f4 	bl	8000118 <__udivsi3>
 8002d30:	0003      	movs	r3, r0
 8002d32:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	613b      	str	r3, [r7, #16]
      break;
 8002d38:	e00d      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	0b5b      	lsrs	r3, r3, #13
 8002d40:	2207      	movs	r2, #7
 8002d42:	4013      	ands	r3, r2
 8002d44:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	0212      	lsls	r2, r2, #8
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	0013      	movs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
      break;
 8002d54:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d56:	693b      	ldr	r3, [r7, #16]
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b006      	add	sp, #24
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40021000 	.word	0x40021000
 8002d64:	003d0900 	.word	0x003d0900
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	007a1200 	.word	0x007a1200
 8002d70:	08009ba4 	.word	0x08009ba4

08002d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f7ff fff2 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002d90:	0001      	movs	r1, r0
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	2207      	movs	r2, #7
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	40d9      	lsrs	r1, r3
 8002da2:	000b      	movs	r3, r1
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08009b9c 	.word	0x08009b9c

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002db8:	f7ff ffdc 	bl	8002d74 <HAL_RCC_GetHCLKFreq>
 8002dbc:	0001      	movs	r1, r0
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	0adb      	lsrs	r3, r3, #11
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	40d9      	lsrs	r1, r3
 8002dce:	000b      	movs	r3, r1
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08009b9c 	.word	0x08009b9c

08002de0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2220      	movs	r2, #32
 8002dee:	4013      	ands	r3, r2
 8002df0:	d100      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002df2:	e0c7      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002df4:	2317      	movs	r3, #23
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfc:	4b99      	ldr	r3, [pc, #612]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	055b      	lsls	r3, r3, #21
 8002e04:	4013      	ands	r3, r2
 8002e06:	d10a      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b96      	ldr	r3, [pc, #600]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e0c:	4b95      	ldr	r3, [pc, #596]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	0549      	lsls	r1, r1, #21
 8002e12:	430a      	orrs	r2, r1
 8002e14:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002e16:	2317      	movs	r3, #23
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b92      	ldr	r3, [pc, #584]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4013      	ands	r3, r2
 8002e28:	d11a      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2a:	4b8f      	ldr	r3, [pc, #572]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b8e      	ldr	r3, [pc, #568]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002e30:	2180      	movs	r1, #128	; 0x80
 8002e32:	0049      	lsls	r1, r1, #1
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e38:	f7fe fc04 	bl	8001644 <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	e008      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e42:	f7fe fbff 	bl	8001644 <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b64      	cmp	r3, #100	; 0x64
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e102      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	4b84      	ldr	r3, [pc, #528]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002e60:	4b80      	ldr	r3, [pc, #512]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	23c0      	movs	r3, #192	; 0xc0
 8002e66:	039b      	lsls	r3, r3, #14
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	23c0      	movs	r3, #192	; 0xc0
 8002e72:	039b      	lsls	r3, r3, #14
 8002e74:	4013      	ands	r3, r2
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d013      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	23c0      	movs	r3, #192	; 0xc0
 8002e82:	029b      	lsls	r3, r3, #10
 8002e84:	401a      	ands	r2, r3
 8002e86:	23c0      	movs	r3, #192	; 0xc0
 8002e88:	029b      	lsls	r3, r3, #10
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e8e:	4b75      	ldr	r3, [pc, #468]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	029b      	lsls	r3, r3, #10
 8002e96:	401a      	ands	r2, r3
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	029b      	lsls	r3, r3, #10
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0da      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea8:	23c0      	movs	r3, #192	; 0xc0
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	4013      	ands	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d03b      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	23c0      	movs	r3, #192	; 0xc0
 8002ebc:	029b      	lsls	r3, r3, #10
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d033      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d02e      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ed0:	4b64      	ldr	r3, [pc, #400]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed4:	4a65      	ldr	r2, [pc, #404]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eda:	4b62      	ldr	r3, [pc, #392]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ede:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	0309      	lsls	r1, r1, #12
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee8:	4b5e      	ldr	r3, [pc, #376]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eec:	4b5d      	ldr	r3, [pc, #372]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002eee:	4960      	ldr	r1, [pc, #384]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002ef4:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	d014      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fb9e 	bl	8001644 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f0c:	e009      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe fb99 	bl	8001644 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	4a56      	ldr	r2, [pc, #344]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e09b      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f22:	4b50      	ldr	r3, [pc, #320]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d0ef      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	23c0      	movs	r3, #192	; 0xc0
 8002f34:	029b      	lsls	r3, r3, #10
 8002f36:	401a      	ands	r2, r3
 8002f38:	23c0      	movs	r3, #192	; 0xc0
 8002f3a:	029b      	lsls	r3, r3, #10
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d10c      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002f40:	4b48      	ldr	r3, [pc, #288]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a4c      	ldr	r2, [pc, #304]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	23c0      	movs	r3, #192	; 0xc0
 8002f50:	039b      	lsls	r3, r3, #14
 8002f52:	401a      	ands	r2, r3
 8002f54:	4b43      	ldr	r3, [pc, #268]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	4b42      	ldr	r3, [pc, #264]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f5c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	23c0      	movs	r3, #192	; 0xc0
 8002f64:	029b      	lsls	r3, r3, #10
 8002f66:	401a      	ands	r2, r3
 8002f68:	4b3e      	ldr	r3, [pc, #248]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f6e:	2317      	movs	r3, #23
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f78:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f7c:	4b39      	ldr	r3, [pc, #228]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f7e:	493f      	ldr	r1, [pc, #252]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f80:	400a      	ands	r2, r1
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f8e:	4b35      	ldr	r3, [pc, #212]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	2203      	movs	r2, #3
 8002f94:	4393      	bics	r3, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	4393      	bics	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	4a2c      	ldr	r2, [pc, #176]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	4a25      	ldr	r2, [pc, #148]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4013      	ands	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800300a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300c:	4a17      	ldr	r2, [pc, #92]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800300e:	4013      	ands	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003018:	430a      	orrs	r2, r1
 800301a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2240      	movs	r2, #64	; 0x40
 8003022:	4013      	ands	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	4a17      	ldr	r2, [pc, #92]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800302c:	4013      	ands	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1a      	ldr	r2, [r3, #32]
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003036:	430a      	orrs	r2, r1
 8003038:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	4013      	ands	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003044:	4b07      	ldr	r3, [pc, #28]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003048:	4a10      	ldr	r2, [pc, #64]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003054:	430a      	orrs	r2, r1
 8003056:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b006      	add	sp, #24
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	40021000 	.word	0x40021000
 8003068:	40007000 	.word	0x40007000
 800306c:	fffcffff 	.word	0xfffcffff
 8003070:	fff7ffff 	.word	0xfff7ffff
 8003074:	00001388 	.word	0x00001388
 8003078:	ffcfffff 	.word	0xffcfffff
 800307c:	efffffff 	.word	0xefffffff
 8003080:	fffff3ff 	.word	0xfffff3ff
 8003084:	ffffcfff 	.word	0xffffcfff
 8003088:	fbffffff 	.word	0xfbffffff
 800308c:	fff3ffff 	.word	0xfff3ffff

08003090 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e08e      	b.n	80031c0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2221      	movs	r2, #33	; 0x21
 80030a6:	5c9b      	ldrb	r3, [r3, r2]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d107      	bne.n	80030be <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7fd fedf 	bl	8000e7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2221      	movs	r2, #33	; 0x21
 80030c2:	2102      	movs	r1, #2
 80030c4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	22ca      	movs	r2, #202	; 0xca
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2253      	movs	r2, #83	; 0x53
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 fc54 	bl	8003986 <RTC_EnterInitMode>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	22ff      	movs	r2, #255	; 0xff
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2221      	movs	r2, #33	; 0x21
 80030ee:	2104      	movs	r1, #4
 80030f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e064      	b.n	80031c0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4931      	ldr	r1, [pc, #196]	; (80031c8 <HAL_RTC_Init+0x138>)
 8003102:	400a      	ands	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68d2      	ldr	r2, [r2, #12]
 800312c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6919      	ldr	r1, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	041a      	lsls	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2180      	movs	r1, #128	; 0x80
 800314e:	438a      	bics	r2, r1
 8003150:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2103      	movs	r1, #3
 800315e:	438a      	bics	r2, r1
 8003160:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2220      	movs	r2, #32
 8003182:	4013      	ands	r3, r2
 8003184:	d113      	bne.n	80031ae <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 fbd5 	bl	8003938 <HAL_RTC_WaitForSynchro>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d00d      	beq.n	80031ae <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2221      	movs	r2, #33	; 0x21
 800319e:	2104      	movs	r1, #4
 80031a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e008      	b.n	80031c0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	22ff      	movs	r2, #255	; 0xff
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2221      	movs	r2, #33	; 0x21
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031be:	2300      	movs	r3, #0
  }
}
 80031c0:	0018      	movs	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	ff8fffbf 	.word	0xff8fffbf

080031cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	5c9b      	ldrb	r3, [r3, r2]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_RTC_SetTime+0x1a>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e0ad      	b.n	8003342 <HAL_RTC_SetTime+0x176>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2221      	movs	r2, #33	; 0x21
 80031f2:	2102      	movs	r1, #2
 80031f4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d125      	bne.n	8003248 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2240      	movs	r2, #64	; 0x40
 8003204:	4013      	ands	r3, r2
 8003206:	d102      	bne.n	800320e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	0018      	movs	r0, r3
 8003214:	f000 fbe1 	bl	80039da <RTC_ByteToBcd2>
 8003218:	0003      	movs	r3, r0
 800321a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	0018      	movs	r0, r3
 8003222:	f000 fbda 	bl	80039da <RTC_ByteToBcd2>
 8003226:	0003      	movs	r3, r0
 8003228:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800322a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	789b      	ldrb	r3, [r3, #2]
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fbd2 	bl	80039da <RTC_ByteToBcd2>
 8003236:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003238:	0022      	movs	r2, r4
 800323a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	78db      	ldrb	r3, [r3, #3]
 8003240:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e017      	b.n	8003278 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2240      	movs	r2, #64	; 0x40
 8003250:	4013      	ands	r3, r2
 8003252:	d102      	bne.n	800325a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003266:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800326c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	78db      	ldrb	r3, [r3, #3]
 8003272:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	22ca      	movs	r2, #202	; 0xca
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2253      	movs	r2, #83	; 0x53
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	0018      	movs	r0, r3
 800328c:	f000 fb7b 	bl	8003986 <RTC_EnterInitMode>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d00d      	beq.n	80032b0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	22ff      	movs	r2, #255	; 0xff
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2221      	movs	r2, #33	; 0x21
 80032a0:	2104      	movs	r1, #4
 80032a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	2100      	movs	r1, #0
 80032aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e048      	b.n	8003342 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4925      	ldr	r1, [pc, #148]	; (800334c <HAL_RTC_SetTime+0x180>)
 80032b8:	400a      	ands	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4922      	ldr	r1, [pc, #136]	; (8003350 <HAL_RTC_SetTime+0x184>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6899      	ldr	r1, [r3, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	431a      	orrs	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	438a      	bics	r2, r1
 80032f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2220      	movs	r2, #32
 80032fc:	4013      	ands	r3, r2
 80032fe:	d113      	bne.n	8003328 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	0018      	movs	r0, r3
 8003304:	f000 fb18 	bl	8003938 <HAL_RTC_WaitForSynchro>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d00d      	beq.n	8003328 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	22ff      	movs	r2, #255	; 0xff
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2221      	movs	r2, #33	; 0x21
 8003318:	2104      	movs	r1, #4
 800331a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	2100      	movs	r1, #0
 8003322:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e00c      	b.n	8003342 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	22ff      	movs	r2, #255	; 0xff
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2221      	movs	r2, #33	; 0x21
 8003334:	2101      	movs	r1, #1
 8003336:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	2100      	movs	r1, #0
 800333e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003340:	2300      	movs	r3, #0
  }
}
 8003342:	0018      	movs	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	b007      	add	sp, #28
 8003348:	bd90      	pop	{r4, r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	007f7f7f 	.word	0x007f7f7f
 8003350:	fffbffff 	.word	0xfffbffff

08003354 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	045b      	lsls	r3, r3, #17
 8003372:	0c5a      	lsrs	r2, r3, #17
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a22      	ldr	r2, [pc, #136]	; (8003408 <HAL_RTC_GetTime+0xb4>)
 8003380:	4013      	ands	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	b2db      	uxtb	r3, r3
 800338a:	223f      	movs	r2, #63	; 0x3f
 800338c:	4013      	ands	r3, r2
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	b2db      	uxtb	r3, r3
 800339a:	227f      	movs	r2, #127	; 0x7f
 800339c:	4013      	ands	r3, r2
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	227f      	movs	r2, #127	; 0x7f
 80033aa:	4013      	ands	r3, r2
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2240      	movs	r2, #64	; 0x40
 80033ba:	4013      	ands	r3, r2
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11a      	bne.n	80033fe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 fb2d 	bl	8003a2c <RTC_Bcd2ToByte>
 80033d2:	0003      	movs	r3, r0
 80033d4:	001a      	movs	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 fb24 	bl	8003a2c <RTC_Bcd2ToByte>
 80033e4:	0003      	movs	r3, r0
 80033e6:	001a      	movs	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	789b      	ldrb	r3, [r3, #2]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 fb1b 	bl	8003a2c <RTC_Bcd2ToByte>
 80033f6:	0003      	movs	r3, r0
 80033f8:	001a      	movs	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b006      	add	sp, #24
 8003406:	bd80      	pop	{r7, pc}
 8003408:	007f7f7f 	.word	0x007f7f7f

0800340c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	5c9b      	ldrb	r3, [r3, r2]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_RTC_SetDate+0x1a>
 8003422:	2302      	movs	r3, #2
 8003424:	e099      	b.n	800355a <HAL_RTC_SetDate+0x14e>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2221      	movs	r2, #33	; 0x21
 8003432:	2102      	movs	r1, #2
 8003434:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10e      	bne.n	800345a <HAL_RTC_SetDate+0x4e>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	001a      	movs	r2, r3
 8003442:	2310      	movs	r3, #16
 8003444:	4013      	ands	r3, r2
 8003446:	d008      	beq.n	800345a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	2210      	movs	r2, #16
 800344e:	4393      	bics	r3, r2
 8003450:	b2db      	uxtb	r3, r3
 8003452:	330a      	adds	r3, #10
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d11c      	bne.n	800349a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	78db      	ldrb	r3, [r3, #3]
 8003464:	0018      	movs	r0, r3
 8003466:	f000 fab8 	bl	80039da <RTC_ByteToBcd2>
 800346a:	0003      	movs	r3, r0
 800346c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	785b      	ldrb	r3, [r3, #1]
 8003472:	0018      	movs	r0, r3
 8003474:	f000 fab1 	bl	80039da <RTC_ByteToBcd2>
 8003478:	0003      	movs	r3, r0
 800347a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800347c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	789b      	ldrb	r3, [r3, #2]
 8003482:	0018      	movs	r0, r3
 8003484:	f000 faa9 	bl	80039da <RTC_ByteToBcd2>
 8003488:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800348a:	0022      	movs	r2, r4
 800348c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e00e      	b.n	80034b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	78db      	ldrb	r3, [r3, #3]
 800349e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	785b      	ldrb	r3, [r3, #1]
 80034a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80034a6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80034ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	22ca      	movs	r2, #202	; 0xca
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2253      	movs	r2, #83	; 0x53
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 fa5b 	bl	8003986 <RTC_EnterInitMode>
 80034d0:	1e03      	subs	r3, r0, #0
 80034d2:	d00d      	beq.n	80034f0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	22ff      	movs	r2, #255	; 0xff
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2221      	movs	r2, #33	; 0x21
 80034e0:	2104      	movs	r1, #4
 80034e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	2100      	movs	r1, #0
 80034ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e034      	b.n	800355a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	491b      	ldr	r1, [pc, #108]	; (8003564 <HAL_RTC_SetDate+0x158>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	438a      	bics	r2, r1
 800350a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2220      	movs	r2, #32
 8003514:	4013      	ands	r3, r2
 8003516:	d113      	bne.n	8003540 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 fa0c 	bl	8003938 <HAL_RTC_WaitForSynchro>
 8003520:	1e03      	subs	r3, r0, #0
 8003522:	d00d      	beq.n	8003540 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	22ff      	movs	r2, #255	; 0xff
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2221      	movs	r2, #33	; 0x21
 8003530:	2104      	movs	r1, #4
 8003532:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e00c      	b.n	800355a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	22ff      	movs	r2, #255	; 0xff
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2221      	movs	r2, #33	; 0x21
 800354c:	2101      	movs	r1, #1
 800354e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
  }
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b007      	add	sp, #28
 8003560:	bd90      	pop	{r4, r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	00ffff3f 	.word	0x00ffff3f

08003568 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a21      	ldr	r2, [pc, #132]	; (8003600 <HAL_RTC_GetDate+0x98>)
 800357c:	4013      	ands	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	b2db      	uxtb	r3, r3
 8003590:	221f      	movs	r2, #31
 8003592:	4013      	ands	r3, r2
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	223f      	movs	r2, #63	; 0x3f
 80035a0:	4013      	ands	r3, r2
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	0b5b      	lsrs	r3, r3, #13
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2207      	movs	r2, #7
 80035b0:	4013      	ands	r3, r2
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11a      	bne.n	80035f4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	78db      	ldrb	r3, [r3, #3]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 fa32 	bl	8003a2c <RTC_Bcd2ToByte>
 80035c8:	0003      	movs	r3, r0
 80035ca:	001a      	movs	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f000 fa29 	bl	8003a2c <RTC_Bcd2ToByte>
 80035da:	0003      	movs	r3, r0
 80035dc:	001a      	movs	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	789b      	ldrb	r3, [r3, #2]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 fa20 	bl	8003a2c <RTC_Bcd2ToByte>
 80035ec:	0003      	movs	r3, r0
 80035ee:	001a      	movs	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	0018      	movs	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b006      	add	sp, #24
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	00ffff3f 	.word	0x00ffff3f

08003604 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	5c9b      	ldrb	r3, [r3, r2]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_RTC_SetAlarm_IT+0x1a>
 800361a:	2302      	movs	r3, #2
 800361c:	e130      	b.n	8003880 <HAL_RTC_SetAlarm_IT+0x27c>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2221      	movs	r2, #33	; 0x21
 800362a:	2102      	movs	r1, #2
 800362c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d136      	bne.n	80036a2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	4013      	ands	r3, r2
 800363e:	d102      	bne.n	8003646 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f9c5 	bl	80039da <RTC_ByteToBcd2>
 8003650:	0003      	movs	r3, r0
 8003652:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 f9be 	bl	80039da <RTC_ByteToBcd2>
 800365e:	0003      	movs	r3, r0
 8003660:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003662:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	789b      	ldrb	r3, [r3, #2]
 8003668:	0018      	movs	r0, r3
 800366a:	f000 f9b6 	bl	80039da <RTC_ByteToBcd2>
 800366e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003670:	0022      	movs	r2, r4
 8003672:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	78db      	ldrb	r3, [r3, #3]
 8003678:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800367a:	431a      	orrs	r2, r3
 800367c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2220      	movs	r2, #32
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	0018      	movs	r0, r3
 8003686:	f000 f9a8 	bl	80039da <RTC_ByteToBcd2>
 800368a:	0003      	movs	r3, r0
 800368c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800368e:	0022      	movs	r2, r4
 8003690:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003696:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800369c:	4313      	orrs	r3, r2
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	e022      	b.n	80036e8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2240      	movs	r2, #64	; 0x40
 80036aa:	4013      	ands	r3, r2
 80036ac:	d102      	bne.n	80036b4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2200      	movs	r2, #0
 80036b2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80036c0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80036c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	78db      	ldrb	r3, [r3, #3]
 80036cc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80036ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2120      	movs	r1, #32
 80036d4:	5c5b      	ldrb	r3, [r3, r1]
 80036d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80036d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80036de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	22ca      	movs	r2, #202	; 0xca
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2253      	movs	r2, #83	; 0x53
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	429a      	cmp	r2, r3
 800370e:	d14e      	bne.n	80037ae <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	495b      	ldr	r1, [pc, #364]	; (8003888 <HAL_RTC_SetAlarm_IT+0x284>)
 800371c:	400a      	ands	r2, r1
 800371e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	22ff      	movs	r2, #255	; 0xff
 8003728:	401a      	ands	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4957      	ldr	r1, [pc, #348]	; (800388c <HAL_RTC_SetAlarm_IT+0x288>)
 8003730:	430a      	orrs	r2, r1
 8003732:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003734:	f7fd ff86 	bl	8001644 <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800373c:	e016      	b.n	800376c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800373e:	f7fd ff81 	bl	8001644 <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	1ad2      	subs	r2, r2, r3
 8003748:	23fa      	movs	r3, #250	; 0xfa
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d90d      	bls.n	800376c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	22ff      	movs	r2, #255	; 0xff
 8003756:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2221      	movs	r2, #33	; 0x21
 800375c:	2103      	movs	r1, #3
 800375e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	2100      	movs	r1, #0
 8003766:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e089      	b.n	8003880 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	4013      	ands	r3, r2
 8003776:	d0e2      	beq.n	800373e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	0049      	lsls	r1, r1, #1
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	0149      	lsls	r1, r1, #5
 80037a8:	430a      	orrs	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	e04d      	b.n	800384a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4935      	ldr	r1, [pc, #212]	; (8003890 <HAL_RTC_SetAlarm_IT+0x28c>)
 80037ba:	400a      	ands	r2, r1
 80037bc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	401a      	ands	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4931      	ldr	r1, [pc, #196]	; (8003894 <HAL_RTC_SetAlarm_IT+0x290>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80037d2:	f7fd ff37 	bl	8001644 <HAL_GetTick>
 80037d6:	0003      	movs	r3, r0
 80037d8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80037da:	e016      	b.n	800380a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037dc:	f7fd ff32 	bl	8001644 <HAL_GetTick>
 80037e0:	0002      	movs	r2, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad2      	subs	r2, r2, r3
 80037e6:	23fa      	movs	r3, #250	; 0xfa
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d90d      	bls.n	800380a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	22ff      	movs	r2, #255	; 0xff
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2221      	movs	r2, #33	; 0x21
 80037fa:	2103      	movs	r1, #3
 80037fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e03a      	b.n	8003880 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2202      	movs	r2, #2
 8003812:	4013      	ands	r3, r2
 8003814:	d0e2      	beq.n	80037dc <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2180      	movs	r1, #128	; 0x80
 8003832:	0089      	lsls	r1, r1, #2
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	0189      	lsls	r1, r1, #6
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RTC_SetAlarm_IT+0x294>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_RTC_SetAlarm_IT+0x294>)
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	0289      	lsls	r1, r1, #10
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <HAL_RTC_SetAlarm_IT+0x294>)
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_RTC_SetAlarm_IT+0x294>)
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	0289      	lsls	r1, r1, #10
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	22ff      	movs	r2, #255	; 0xff
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2221      	movs	r2, #33	; 0x21
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	2100      	movs	r1, #0
 800387c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	b009      	add	sp, #36	; 0x24
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	fffffeff 	.word	0xfffffeff
 800388c:	fffffe7f 	.word	0xfffffe7f
 8003890:	fffffdff 	.word	0xfffffdff
 8003894:	fffffd7f 	.word	0xfffffd7f
 8003898:	40010400 	.word	0x40010400

0800389c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	015b      	lsls	r3, r3, #5
 80038ae:	4013      	ands	r3, r2
 80038b0:	d014      	beq.n	80038dc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4013      	ands	r3, r2
 80038be:	d00d      	beq.n	80038dc <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7fc ff80 	bl	80007c8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	401a      	ands	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4915      	ldr	r1, [pc, #84]	; (800392c <HAL_RTC_AlarmIRQHandler+0x90>)
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	019b      	lsls	r3, r3, #6
 80038e6:	4013      	ands	r3, r2
 80038e8:	d014      	beq.n	8003914 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4013      	ands	r3, r2
 80038f6:	d00d      	beq.n	8003914 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 fa06 	bl	8003d0c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	22ff      	movs	r2, #255	; 0xff
 8003908:	401a      	ands	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4908      	ldr	r1, [pc, #32]	; (8003930 <HAL_RTC_AlarmIRQHandler+0x94>)
 8003910:	430a      	orrs	r2, r1
 8003912:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_RTC_AlarmIRQHandler+0x98>)
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	0292      	lsls	r2, r2, #10
 800391a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2221      	movs	r2, #33	; 0x21
 8003920:	2101      	movs	r1, #1
 8003922:	5499      	strb	r1, [r3, r2]
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}
 800392c:	fffffe7f 	.word	0xfffffe7f
 8003930:	fffffd7f 	.word	0xfffffd7f
 8003934:	40010400 	.word	0x40010400

08003938 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	21a0      	movs	r1, #160	; 0xa0
 800394c:	438a      	bics	r2, r1
 800394e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003950:	f7fd fe78 	bl	8001644 <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003958:	e00a      	b.n	8003970 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800395a:	f7fd fe73 	bl	8001644 <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	23fa      	movs	r3, #250	; 0xfa
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d901      	bls.n	8003970 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e006      	b.n	800397e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	4013      	ands	r3, r2
 800397a:	d0ee      	beq.n	800395a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b004      	add	sp, #16
 8003984:	bd80      	pop	{r7, pc}

08003986 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	4013      	ands	r3, r2
 8003998:	d11a      	bne.n	80039d0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2201      	movs	r2, #1
 80039a0:	4252      	negs	r2, r2
 80039a2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80039a4:	f7fd fe4e 	bl	8001644 <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80039ac:	e00a      	b.n	80039c4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80039ae:	f7fd fe49 	bl	8001644 <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1ad2      	subs	r2, r2, r3
 80039b8:	23fa      	movs	r3, #250	; 0xfa
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	429a      	cmp	r2, r3
 80039be:	d901      	bls.n	80039c4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e006      	b.n	80039d2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	4013      	ands	r3, r2
 80039ce:	d0ee      	beq.n	80039ae <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}

080039da <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	0002      	movs	r2, r0
 80039e2:	1dfb      	adds	r3, r7, #7
 80039e4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80039ea:	230b      	movs	r3, #11
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	1dfa      	adds	r2, r7, #7
 80039f0:	7812      	ldrb	r2, [r2, #0]
 80039f2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80039f4:	e008      	b.n	8003a08 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3301      	adds	r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80039fc:	220b      	movs	r2, #11
 80039fe:	18bb      	adds	r3, r7, r2
 8003a00:	18ba      	adds	r2, r7, r2
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	3a0a      	subs	r2, #10
 8003a06:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8003a08:	230b      	movs	r3, #11
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	d8f1      	bhi.n	80039f6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	230b      	movs	r3, #11
 8003a1c:	18fb      	adds	r3, r7, r3
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	b2db      	uxtb	r3, r3
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b004      	add	sp, #16
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	0002      	movs	r2, r0
 8003a34:	1dfb      	adds	r3, r7, #7
 8003a36:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003a38:	1dfb      	adds	r3, r7, #7
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	001a      	movs	r2, r3
 8003a42:	0013      	movs	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	189b      	adds	r3, r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	1dfb      	adds	r3, r7, #7
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	210f      	movs	r1, #15
 8003a56:	400b      	ands	r3, r1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	18d3      	adds	r3, r2, r3
 8003a5c:	b2db      	uxtb	r3, r3
}
 8003a5e:	0018      	movs	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b004      	add	sp, #16
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	5c9b      	ldrb	r3, [r3, r2]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e0ad      	b.n	8003bde <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	2101      	movs	r1, #1
 8003a88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2221      	movs	r2, #33	; 0x21
 8003a8e:	2102      	movs	r1, #2
 8003a90:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	22ca      	movs	r2, #202	; 0xca
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2253      	movs	r2, #83	; 0x53
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4013      	ands	r3, r2
 8003aae:	d021      	beq.n	8003af4 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fdc8 	bl	8001644 <HAL_GetTick>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003ab8:	e016      	b.n	8003ae8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003aba:	f7fd fdc3 	bl	8001644 <HAL_GetTick>
 8003abe:	0002      	movs	r2, r0
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	1ad2      	subs	r2, r2, r3
 8003ac4:	23fa      	movs	r3, #250	; 0xfa
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d90d      	bls.n	8003ae8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	22ff      	movs	r2, #255	; 0xff
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2221      	movs	r2, #33	; 0x21
 8003ad8:	2103      	movs	r1, #3
 8003ada:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e07a      	b.n	8003bde <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2204      	movs	r2, #4
 8003af0:	4013      	ands	r3, r2
 8003af2:	d1e2      	bne.n	8003aba <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	493a      	ldr	r1, [pc, #232]	; (8003be8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4936      	ldr	r1, [pc, #216]	; (8003bec <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b18:	f7fd fd94 	bl	8001644 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003b20:	e016      	b.n	8003b50 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b22:	f7fd fd8f 	bl	8001644 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	1ad2      	subs	r2, r2, r3
 8003b2c:	23fa      	movs	r3, #250	; 0xfa
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d90d      	bls.n	8003b50 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	22ff      	movs	r2, #255	; 0xff
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	2103      	movs	r1, #3
 8003b42:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e046      	b.n	8003bde <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2204      	movs	r2, #4
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d0e2      	beq.n	8003b22 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2107      	movs	r1, #7
 8003b70:	438a      	bics	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6899      	ldr	r1, [r3, #8]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	0349      	lsls	r1, r1, #13
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003b92:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	0349      	lsls	r1, r1, #13
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	01c9      	lsls	r1, r1, #7
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	00c9      	lsls	r1, r1, #3
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	22ff      	movs	r2, #255	; 0xff
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2221      	movs	r2, #33	; 0x21
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b006      	add	sp, #24
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	fffffbff 	.word	0xfffffbff
 8003bec:	fffffb7f 	.word	0xfffffb7f
 8003bf0:	40010400 	.word	0x40010400

08003bf4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	5c9b      	ldrb	r3, [r3, r2]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e04e      	b.n	8003ca8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	2101      	movs	r1, #1
 8003c10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2221      	movs	r2, #33	; 0x21
 8003c16:	2102      	movs	r1, #2
 8003c18:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	22ca      	movs	r2, #202	; 0xca
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2253      	movs	r2, #83	; 0x53
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	491e      	ldr	r1, [pc, #120]	; (8003cb0 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8003c36:	400a      	ands	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	491b      	ldr	r1, [pc, #108]	; (8003cb4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8003c46:	400a      	ands	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003c4a:	f7fd fcfb 	bl	8001644 <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003c52:	e016      	b.n	8003c82 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c54:	f7fd fcf6 	bl	8001644 <HAL_GetTick>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad2      	subs	r2, r2, r3
 8003c5e:	23fa      	movs	r3, #250	; 0xfa
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d90d      	bls.n	8003c82 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	22ff      	movs	r2, #255	; 0xff
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2221      	movs	r2, #33	; 0x21
 8003c72:	2103      	movs	r1, #3
 8003c74:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e012      	b.n	8003ca8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d0e2      	beq.n	8003c54 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2221      	movs	r2, #33	; 0x21
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	fffffbff 	.word	0xfffffbff
 8003cb4:	ffffbfff 	.word	0xffffbfff

08003cb8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d00d      	beq.n	8003cea <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f005 f8d9 	bl	8008e88 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	22ff      	movs	r2, #255	; 0xff
 8003cde:	401a      	ands	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4907      	ldr	r1, [pc, #28]	; (8003d04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003cea:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8003cec:	2280      	movs	r2, #128	; 0x80
 8003cee:	0352      	lsls	r2, r2, #13
 8003cf0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2221      	movs	r2, #33	; 0x21
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	fffffb7f 	.word	0xfffffb7f
 8003d08:	40010400 	.word	0x40010400

08003d0c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e059      	b.n	8003de2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2251      	movs	r2, #81	; 0x51
 8003d38:	5c9b      	ldrb	r3, [r3, r2]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d107      	bne.n	8003d50 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2250      	movs	r2, #80	; 0x50
 8003d44:	2100      	movs	r1, #0
 8003d46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7fd f924 	bl	8000f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2251      	movs	r2, #81	; 0x51
 8003d54:	2102      	movs	r1, #2
 8003d56:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2140      	movs	r1, #64	; 0x40
 8003d64:	438a      	bics	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6999      	ldr	r1, [r3, #24]
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	0011      	movs	r1, r2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	0c1b      	lsrs	r3, r3, #16
 8003db0:	2204      	movs	r2, #4
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4907      	ldr	r1, [pc, #28]	; (8003dec <HAL_SPI_Init+0xd0>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2251      	movs	r2, #81	; 0x51
 8003ddc:	2101      	movs	r1, #1
 8003dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	fffff7ff 	.word	0xfffff7ff

08003df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e01e      	b.n	8003e40 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2239      	movs	r2, #57	; 0x39
 8003e06:	5c9b      	ldrb	r3, [r3, r2]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2238      	movs	r2, #56	; 0x38
 8003e12:	2100      	movs	r1, #0
 8003e14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7fd fa8f 	bl	800133c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2239      	movs	r2, #57	; 0x39
 8003e22:	2102      	movs	r1, #2
 8003e24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	0019      	movs	r1, r3
 8003e30:	0010      	movs	r0, r2
 8003e32:	f000 f8c7 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2239      	movs	r2, #57	; 0x39
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b002      	add	sp, #8
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2238      	movs	r2, #56	; 0x38
 8003e56:	5c9b      	ldrb	r3, [r3, r2]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_ConfigClockSource+0x18>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0ab      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x170>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2238      	movs	r2, #56	; 0x38
 8003e64:	2101      	movs	r1, #1
 8003e66:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2239      	movs	r2, #57	; 0x39
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2277      	movs	r2, #119	; 0x77
 8003e7c:	4393      	bics	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a4f      	ldr	r2, [pc, #316]	; (8003fc0 <HAL_TIM_ConfigClockSource+0x178>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d100      	bne.n	8003e9a <HAL_TIM_ConfigClockSource+0x52>
 8003e98:	e06b      	b.n	8003f72 <HAL_TIM_ConfigClockSource+0x12a>
 8003e9a:	d80e      	bhi.n	8003eba <HAL_TIM_ConfigClockSource+0x72>
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d100      	bne.n	8003ea2 <HAL_TIM_ConfigClockSource+0x5a>
 8003ea0:	e077      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x14a>
 8003ea2:	d803      	bhi.n	8003eac <HAL_TIM_ConfigClockSource+0x64>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d100      	bne.n	8003eaa <HAL_TIM_ConfigClockSource+0x62>
 8003ea8:	e073      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003eaa:	e07c      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d100      	bne.n	8003eb2 <HAL_TIM_ConfigClockSource+0x6a>
 8003eb0:	e06f      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x14a>
 8003eb2:	2b30      	cmp	r3, #48	; 0x30
 8003eb4:	d100      	bne.n	8003eb8 <HAL_TIM_ConfigClockSource+0x70>
 8003eb6:	e06c      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003eb8:	e075      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003eba:	2b70      	cmp	r3, #112	; 0x70
 8003ebc:	d00e      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x94>
 8003ebe:	d804      	bhi.n	8003eca <HAL_TIM_ConfigClockSource+0x82>
 8003ec0:	2b50      	cmp	r3, #80	; 0x50
 8003ec2:	d036      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0xea>
 8003ec4:	2b60      	cmp	r3, #96	; 0x60
 8003ec6:	d044      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003ec8:	e06d      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	0152      	lsls	r2, r2, #5
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d068      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0x15c>
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	0192      	lsls	r2, r2, #6
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d017      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003eda:	e064      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f000 f942 	bl	8004174 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2277      	movs	r2, #119	; 0x77
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
      break;
 8003f08:	e04d      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f000 f92b 	bl	8004174 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	01c9      	lsls	r1, r1, #7
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]
      break;
 8003f30:	e039      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	001a      	movs	r2, r3
 8003f40:	f000 f89e 	bl	8004080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2150      	movs	r1, #80	; 0x50
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f000 f8f8 	bl	8004140 <TIM_ITRx_SetConfig>
      break;
 8003f50:	e029      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	001a      	movs	r2, r3
 8003f60:	f000 f8bc 	bl	80040dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2160      	movs	r1, #96	; 0x60
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 f8e8 	bl	8004140 <TIM_ITRx_SetConfig>
      break;
 8003f70:	e019      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	001a      	movs	r2, r3
 8003f80:	f000 f87e 	bl	8004080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2140      	movs	r1, #64	; 0x40
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 f8d8 	bl	8004140 <TIM_ITRx_SetConfig>
      break;
 8003f90:	e009      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	0010      	movs	r0, r2
 8003f9e:	f000 f8cf 	bl	8004140 <TIM_ITRx_SetConfig>
      break;
 8003fa2:	e000      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003fa4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2239      	movs	r2, #57	; 0x39
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2238      	movs	r2, #56	; 0x38
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	ffff00ff 	.word	0xffff00ff

08003fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	05db      	lsls	r3, r3, #23
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d00b      	beq.n	8003ff6 <TIM_Base_SetConfig+0x32>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a23      	ldr	r2, [pc, #140]	; (8004070 <TIM_Base_SetConfig+0xac>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <TIM_Base_SetConfig+0x32>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a22      	ldr	r2, [pc, #136]	; (8004074 <TIM_Base_SetConfig+0xb0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_Base_SetConfig+0x32>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	; (8004078 <TIM_Base_SetConfig+0xb4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2270      	movs	r2, #112	; 0x70
 8003ffa:	4393      	bics	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	05db      	lsls	r3, r3, #23
 800400e:	429a      	cmp	r2, r3
 8004010:	d00b      	beq.n	800402a <TIM_Base_SetConfig+0x66>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a16      	ldr	r2, [pc, #88]	; (8004070 <TIM_Base_SetConfig+0xac>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <TIM_Base_SetConfig+0x66>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a15      	ldr	r2, [pc, #84]	; (8004074 <TIM_Base_SetConfig+0xb0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_Base_SetConfig+0x66>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <TIM_Base_SetConfig+0xb4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d108      	bne.n	800403c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a13      	ldr	r2, [pc, #76]	; (800407c <TIM_Base_SetConfig+0xb8>)
 800402e:	4013      	ands	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	4393      	bics	r3, r2
 8004042:	001a      	movs	r2, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	615a      	str	r2, [r3, #20]
}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	b004      	add	sp, #16
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40000400 	.word	0x40000400
 8004074:	40010800 	.word	0x40010800
 8004078:	40011400 	.word	0x40011400
 800407c:	fffffcff 	.word	0xfffffcff

08004080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	2201      	movs	r2, #1
 8004098:	4393      	bics	r3, r2
 800409a:	001a      	movs	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	22f0      	movs	r2, #240	; 0xf0
 80040aa:	4393      	bics	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	220a      	movs	r2, #10
 80040bc:	4393      	bics	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b006      	add	sp, #24
 80040da:	bd80      	pop	{r7, pc}

080040dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	2210      	movs	r2, #16
 80040ee:	4393      	bics	r3, r2
 80040f0:	001a      	movs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <TIM_TI2_ConfigInputStage+0x60>)
 8004106:	4013      	ands	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	031b      	lsls	r3, r3, #12
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	22a0      	movs	r2, #160	; 0xa0
 8004118:	4393      	bics	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	46bd      	mov	sp, r7
 8004136:	b006      	add	sp, #24
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	ffff0fff 	.word	0xffff0fff

08004140 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2270      	movs	r2, #112	; 0x70
 8004154:	4393      	bics	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	2207      	movs	r2, #7
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	609a      	str	r2, [r3, #8]
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b004      	add	sp, #16
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <TIM_ETR_SetConfig+0x3c>)
 800418c:	4013      	ands	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	021a      	lsls	r2, r3, #8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	431a      	orrs	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b006      	add	sp, #24
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	ffff00ff 	.word	0xffff00ff

080041b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2238      	movs	r2, #56	; 0x38
 80041c2:	5c9b      	ldrb	r3, [r3, r2]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e032      	b.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2238      	movs	r2, #56	; 0x38
 80041d0:	2101      	movs	r1, #1
 80041d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2239      	movs	r2, #57	; 0x39
 80041d8:	2102      	movs	r1, #2
 80041da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2270      	movs	r2, #112	; 0x70
 80041f0:	4393      	bics	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2280      	movs	r2, #128	; 0x80
 8004202:	4393      	bics	r3, r2
 8004204:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4313      	orrs	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2239      	movs	r2, #57	; 0x39
 8004224:	2101      	movs	r1, #1
 8004226:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2238      	movs	r2, #56	; 0x38
 800422c:	2100      	movs	r1, #0
 800422e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b004      	add	sp, #16
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e044      	b.n	80042d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2270      	movs	r2, #112	; 0x70
 800425a:	2100      	movs	r1, #0
 800425c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f7fd f8eb 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2224      	movs	r2, #36	; 0x24
 800426a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2101      	movs	r1, #1
 8004278:	438a      	bics	r2, r1
 800427a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	0018      	movs	r0, r3
 8004280:	f000 fabe 	bl	8004800 <UART_SetConfig>
 8004284:	0003      	movs	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e024      	b.n	80042d8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0018      	movs	r0, r3
 800429a:	f000 fde5 	bl	8004e68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	490d      	ldr	r1, [pc, #52]	; (80042e0 <HAL_UART_Init+0xa4>)
 80042aa:	400a      	ands	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	212a      	movs	r1, #42	; 0x2a
 80042ba:	438a      	bics	r2, r1
 80042bc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2101      	movs	r1, #1
 80042ca:	430a      	orrs	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f000 fe7d 	bl	8004fd0 <UART_CheckIdleState>
 80042d6:	0003      	movs	r3, r0
}
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	b002      	add	sp, #8
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	ffffb7ff 	.word	0xffffb7ff

080042e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	1dbb      	adds	r3, r7, #6
 80042f2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d000      	beq.n	80042fe <HAL_UART_Transmit+0x1a>
 80042fc:	e094      	b.n	8004428 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_UART_Transmit+0x28>
 8004304:	1dbb      	adds	r3, r7, #6
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e08c      	b.n	800442a <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	015b      	lsls	r3, r3, #5
 8004318:	429a      	cmp	r2, r3
 800431a:	d109      	bne.n	8004330 <HAL_UART_Transmit+0x4c>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2201      	movs	r2, #1
 8004328:	4013      	ands	r3, r2
 800432a:	d001      	beq.n	8004330 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e07c      	b.n	800442a <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2270      	movs	r2, #112	; 0x70
 8004334:	5c9b      	ldrb	r3, [r3, r2]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_UART_Transmit+0x5a>
 800433a:	2302      	movs	r3, #2
 800433c:	e075      	b.n	800442a <HAL_UART_Transmit+0x146>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2270      	movs	r2, #112	; 0x70
 8004342:	2101      	movs	r1, #1
 8004344:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2221      	movs	r2, #33	; 0x21
 8004350:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004352:	f7fd f977 	bl	8001644 <HAL_GetTick>
 8004356:	0003      	movs	r3, r0
 8004358:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1dba      	adds	r2, r7, #6
 800435e:	2150      	movs	r1, #80	; 0x50
 8004360:	8812      	ldrh	r2, [r2, #0]
 8004362:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1dba      	adds	r2, r7, #6
 8004368:	2152      	movs	r1, #82	; 0x52
 800436a:	8812      	ldrh	r2, [r2, #0]
 800436c:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	015b      	lsls	r3, r3, #5
 8004376:	429a      	cmp	r2, r3
 8004378:	d108      	bne.n	800438c <HAL_UART_Transmit+0xa8>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e003      	b.n	8004394 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004394:	e02c      	b.n	80043f0 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	0013      	movs	r3, r2
 80043a0:	2200      	movs	r2, #0
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	f000 fe5a 	bl	800505c <UART_WaitOnFlagUntilTimeout>
 80043a8:	1e03      	subs	r3, r0, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e03c      	b.n	800442a <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	001a      	movs	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	05d2      	lsls	r2, r2, #23
 80043c2:	0dd2      	lsrs	r2, r2, #23
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	3302      	adds	r3, #2
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e007      	b.n	80043de <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3301      	adds	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2252      	movs	r2, #82	; 0x52
 80043e2:	5a9b      	ldrh	r3, [r3, r2]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b299      	uxth	r1, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2252      	movs	r2, #82	; 0x52
 80043ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2252      	movs	r2, #82	; 0x52
 80043f4:	5a9b      	ldrh	r3, [r3, r2]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1cc      	bne.n	8004396 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	0013      	movs	r3, r2
 8004406:	2200      	movs	r2, #0
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	f000 fe27 	bl	800505c <UART_WaitOnFlagUntilTimeout>
 800440e:	1e03      	subs	r3, r0, #0
 8004410:	d001      	beq.n	8004416 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e009      	b.n	800442a <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2270      	movs	r2, #112	; 0x70
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b008      	add	sp, #32
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	1dbb      	adds	r3, r7, #6
 8004440:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004446:	2b20      	cmp	r3, #32
 8004448:	d000      	beq.n	800444c <HAL_UART_Receive_IT+0x18>
 800444a:	e09f      	b.n	800458c <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_UART_Receive_IT+0x26>
 8004452:	1dbb      	adds	r3, r7, #6
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e097      	b.n	800458e <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	015b      	lsls	r3, r3, #5
 8004466:	429a      	cmp	r2, r3
 8004468:	d109      	bne.n	800447e <HAL_UART_Receive_IT+0x4a>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d105      	bne.n	800447e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2201      	movs	r2, #1
 8004476:	4013      	ands	r3, r2
 8004478:	d001      	beq.n	800447e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e087      	b.n	800458e <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2270      	movs	r2, #112	; 0x70
 8004482:	5c9b      	ldrb	r3, [r3, r2]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_UART_Receive_IT+0x58>
 8004488:	2302      	movs	r3, #2
 800448a:	e080      	b.n	800458e <HAL_UART_Receive_IT+0x15a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2270      	movs	r2, #112	; 0x70
 8004490:	2101      	movs	r1, #1
 8004492:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1dba      	adds	r2, r7, #6
 800449e:	2158      	movs	r1, #88	; 0x58
 80044a0:	8812      	ldrh	r2, [r2, #0]
 80044a2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1dba      	adds	r2, r7, #6
 80044a8:	215a      	movs	r1, #90	; 0x5a
 80044aa:	8812      	ldrh	r2, [r2, #0]
 80044ac:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	015b      	lsls	r3, r3, #5
 80044bc:	429a      	cmp	r2, r3
 80044be:	d10d      	bne.n	80044dc <HAL_UART_Receive_IT+0xa8>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <HAL_UART_Receive_IT+0x9e>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	225c      	movs	r2, #92	; 0x5c
 80044cc:	4932      	ldr	r1, [pc, #200]	; (8004598 <HAL_UART_Receive_IT+0x164>)
 80044ce:	5299      	strh	r1, [r3, r2]
 80044d0:	e02e      	b.n	8004530 <HAL_UART_Receive_IT+0xfc>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	225c      	movs	r2, #92	; 0x5c
 80044d6:	21ff      	movs	r1, #255	; 0xff
 80044d8:	5299      	strh	r1, [r3, r2]
 80044da:	e029      	b.n	8004530 <HAL_UART_Receive_IT+0xfc>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10d      	bne.n	8004500 <HAL_UART_Receive_IT+0xcc>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <HAL_UART_Receive_IT+0xc2>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	225c      	movs	r2, #92	; 0x5c
 80044f0:	21ff      	movs	r1, #255	; 0xff
 80044f2:	5299      	strh	r1, [r3, r2]
 80044f4:	e01c      	b.n	8004530 <HAL_UART_Receive_IT+0xfc>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	225c      	movs	r2, #92	; 0x5c
 80044fa:	217f      	movs	r1, #127	; 0x7f
 80044fc:	5299      	strh	r1, [r3, r2]
 80044fe:	e017      	b.n	8004530 <HAL_UART_Receive_IT+0xfc>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	055b      	lsls	r3, r3, #21
 8004508:	429a      	cmp	r2, r3
 800450a:	d10d      	bne.n	8004528 <HAL_UART_Receive_IT+0xf4>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <HAL_UART_Receive_IT+0xea>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	225c      	movs	r2, #92	; 0x5c
 8004518:	217f      	movs	r1, #127	; 0x7f
 800451a:	5299      	strh	r1, [r3, r2]
 800451c:	e008      	b.n	8004530 <HAL_UART_Receive_IT+0xfc>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	225c      	movs	r2, #92	; 0x5c
 8004522:	213f      	movs	r1, #63	; 0x3f
 8004524:	5299      	strh	r1, [r3, r2]
 8004526:	e003      	b.n	8004530 <HAL_UART_Receive_IT+0xfc>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	225c      	movs	r2, #92	; 0x5c
 800452c:	2100      	movs	r1, #0
 800452e:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2222      	movs	r2, #34	; 0x22
 800453a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2101      	movs	r1, #1
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	015b      	lsls	r3, r3, #5
 8004554:	429a      	cmp	r2, r3
 8004556:	d107      	bne.n	8004568 <HAL_UART_Receive_IT+0x134>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a0e      	ldr	r2, [pc, #56]	; (800459c <HAL_UART_Receive_IT+0x168>)
 8004564:	661a      	str	r2, [r3, #96]	; 0x60
 8004566:	e002      	b.n	800456e <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a0d      	ldr	r2, [pc, #52]	; (80045a0 <HAL_UART_Receive_IT+0x16c>)
 800456c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2270      	movs	r2, #112	; 0x70
 8004572:	2100      	movs	r1, #0
 8004574:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2190      	movs	r1, #144	; 0x90
 8004582:	0049      	lsls	r1, r1, #1
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e000      	b.n	800458e <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
  }
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b004      	add	sp, #16
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	000001ff 	.word	0x000001ff
 800459c:	08005251 	.word	0x08005251
 80045a0:	08005195 	.word	0x08005195

080045a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	220f      	movs	r2, #15
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d112      	bne.n	80045f8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2220      	movs	r2, #32
 80045d6:	4013      	ands	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2220      	movs	r2, #32
 80045de:	4013      	ands	r3, r2
 80045e0:	d00a      	beq.n	80045f8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d100      	bne.n	80045ec <HAL_UART_IRQHandler+0x48>
 80045ea:	e0f6      	b.n	80047da <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	0010      	movs	r0, r2
 80045f4:	4798      	blx	r3
      }
      return;
 80045f6:	e0f0      	b.n	80047da <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d100      	bne.n	8004600 <HAL_UART_IRQHandler+0x5c>
 80045fe:	e0b8      	b.n	8004772 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2201      	movs	r2, #1
 8004604:	4013      	ands	r3, r2
 8004606:	d105      	bne.n	8004614 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	2390      	movs	r3, #144	; 0x90
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	4013      	ands	r3, r2
 8004610:	d100      	bne.n	8004614 <HAL_UART_IRQHandler+0x70>
 8004612:	e0ae      	b.n	8004772 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	2201      	movs	r2, #1
 8004618:	4013      	ands	r3, r2
 800461a:	d00e      	beq.n	800463a <HAL_UART_IRQHandler+0x96>
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	4013      	ands	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2201      	movs	r2, #1
 800462c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004632:	2201      	movs	r2, #1
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2202      	movs	r2, #2
 800463e:	4013      	ands	r3, r2
 8004640:	d00d      	beq.n	800465e <HAL_UART_IRQHandler+0xba>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2201      	movs	r2, #1
 8004646:	4013      	ands	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2202      	movs	r2, #2
 8004650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004656:	2204      	movs	r2, #4
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2204      	movs	r2, #4
 8004662:	4013      	ands	r3, r2
 8004664:	d00d      	beq.n	8004682 <HAL_UART_IRQHandler+0xde>
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2201      	movs	r2, #1
 800466a:	4013      	ands	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2204      	movs	r2, #4
 8004674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467a:	2202      	movs	r2, #2
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2208      	movs	r2, #8
 8004686:	4013      	ands	r3, r2
 8004688:	d011      	beq.n	80046ae <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2220      	movs	r2, #32
 800468e:	4013      	ands	r3, r2
 8004690:	d103      	bne.n	800469a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2201      	movs	r2, #1
 8004696:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004698:	d009      	beq.n	80046ae <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2208      	movs	r2, #8
 80046a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a6:	2208      	movs	r2, #8
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d100      	bne.n	80046b8 <HAL_UART_IRQHandler+0x114>
 80046b6:	e092      	b.n	80047de <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	2220      	movs	r2, #32
 80046bc:	4013      	ands	r3, r2
 80046be:	d00c      	beq.n	80046da <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2220      	movs	r2, #32
 80046c4:	4013      	ands	r3, r2
 80046c6:	d008      	beq.n	80046da <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	0010      	movs	r0, r2
 80046d8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046de:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2240      	movs	r2, #64	; 0x40
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d003      	beq.n	80046f6 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2208      	movs	r2, #8
 80046f2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046f4:	d033      	beq.n	800475e <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 fcf9 	bl	80050f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2240      	movs	r2, #64	; 0x40
 8004706:	4013      	ands	r3, r2
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d123      	bne.n	8004754 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2140      	movs	r1, #64	; 0x40
 8004718:	438a      	bics	r2, r1
 800471a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004720:	2b00      	cmp	r3, #0
 8004722:	d012      	beq.n	800474a <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004728:	4a30      	ldr	r2, [pc, #192]	; (80047ec <HAL_UART_IRQHandler+0x248>)
 800472a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004730:	0018      	movs	r0, r3
 8004732:	f7fd fae9 	bl	8001d08 <HAL_DMA_Abort_IT>
 8004736:	1e03      	subs	r3, r0, #0
 8004738:	d019      	beq.n	800476e <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004744:	0018      	movs	r0, r3
 8004746:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	e011      	b.n	800476e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f003 fea5 	bl	800849c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004752:	e00c      	b.n	800476e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	0018      	movs	r0, r3
 8004758:	f003 fea0 	bl	800849c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	e007      	b.n	800476e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0018      	movs	r0, r3
 8004762:	f003 fe9b 	bl	800849c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800476c:	e037      	b.n	80047de <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476e:	46c0      	nop			; (mov r8, r8)
    return;
 8004770:	e035      	b.n	80047de <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	035b      	lsls	r3, r3, #13
 8004778:	4013      	ands	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_UART_IRQHandler+0x1f6>
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	03db      	lsls	r3, r3, #15
 8004782:	4013      	ands	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	0352      	lsls	r2, r2, #13
 800478e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	0018      	movs	r0, r3
 8004794:	f004 f9c4 	bl	8008b20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004798:	e024      	b.n	80047e4 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	2280      	movs	r2, #128	; 0x80
 800479e:	4013      	ands	r3, r2
 80047a0:	d00d      	beq.n	80047be <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	4013      	ands	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d017      	beq.n	80047e2 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	0010      	movs	r0, r2
 80047ba:	4798      	blx	r3
    }
    return;
 80047bc:	e011      	b.n	80047e2 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	4013      	ands	r3, r2
 80047c4:	d00e      	beq.n	80047e4 <HAL_UART_IRQHandler+0x240>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2240      	movs	r2, #64	; 0x40
 80047ca:	4013      	ands	r3, r2
 80047cc:	d00a      	beq.n	80047e4 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 fcc4 	bl	800515e <UART_EndTransmit_IT>
    return;
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	e004      	b.n	80047e4 <HAL_UART_IRQHandler+0x240>
      return;
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	e002      	b.n	80047e4 <HAL_UART_IRQHandler+0x240>
    return;
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	e000      	b.n	80047e4 <HAL_UART_IRQHandler+0x240>
    return;
 80047e2:	46c0      	nop			; (mov r8, r8)
  }

}
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b008      	add	sp, #32
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	08005131 	.word	0x08005131

080047f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004800:	b5b0      	push	{r4, r5, r7, lr}
 8004802:	b08e      	sub	sp, #56	; 0x38
 8004804:	af00      	add	r7, sp, #0
 8004806:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004808:	231b      	movs	r3, #27
 800480a:	2218      	movs	r2, #24
 800480c:	4694      	mov	ip, r2
 800480e:	44bc      	add	ip, r7
 8004810:	4463      	add	r3, ip
 8004812:	2210      	movs	r2, #16
 8004814:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8004816:	2300      	movs	r3, #0
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800481a:	2313      	movs	r3, #19
 800481c:	2218      	movs	r2, #24
 800481e:	4694      	mov	ip, r2
 8004820:	44bc      	add	ip, r7
 8004822:	4463      	add	r3, ip
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004828:	2300      	movs	r3, #0
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	431a      	orrs	r2, r3
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4aca      	ldr	r2, [pc, #808]	; (8004b74 <UART_SetConfig+0x374>)
 800484c:	4013      	ands	r3, r2
 800484e:	0019      	movs	r1, r3
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004856:	430a      	orrs	r2, r1
 8004858:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4ac5      	ldr	r2, [pc, #788]	; (8004b78 <UART_SetConfig+0x378>)
 8004862:	4013      	ands	r3, r2
 8004864:	0019      	movs	r1, r3
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4abf      	ldr	r2, [pc, #764]	; (8004b7c <UART_SetConfig+0x37c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004888:	4313      	orrs	r3, r2
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4abb      	ldr	r2, [pc, #748]	; (8004b80 <UART_SetConfig+0x380>)
 8004894:	4013      	ands	r3, r2
 8004896:	0019      	movs	r1, r3
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4ab7      	ldr	r2, [pc, #732]	; (8004b84 <UART_SetConfig+0x384>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d134      	bne.n	8004916 <UART_SetConfig+0x116>
 80048ac:	4bb6      	ldr	r3, [pc, #728]	; (8004b88 <UART_SetConfig+0x388>)
 80048ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b0:	2203      	movs	r2, #3
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d015      	beq.n	80048e4 <UART_SetConfig+0xe4>
 80048b8:	d304      	bcc.n	80048c4 <UART_SetConfig+0xc4>
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d00a      	beq.n	80048d4 <UART_SetConfig+0xd4>
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d018      	beq.n	80048f4 <UART_SetConfig+0xf4>
 80048c2:	e01f      	b.n	8004904 <UART_SetConfig+0x104>
 80048c4:	231b      	movs	r3, #27
 80048c6:	2218      	movs	r2, #24
 80048c8:	4694      	mov	ip, r2
 80048ca:	44bc      	add	ip, r7
 80048cc:	4463      	add	r3, ip
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e0c5      	b.n	8004a60 <UART_SetConfig+0x260>
 80048d4:	231b      	movs	r3, #27
 80048d6:	2218      	movs	r2, #24
 80048d8:	4694      	mov	ip, r2
 80048da:	44bc      	add	ip, r7
 80048dc:	4463      	add	r3, ip
 80048de:	2202      	movs	r2, #2
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	e0bd      	b.n	8004a60 <UART_SetConfig+0x260>
 80048e4:	231b      	movs	r3, #27
 80048e6:	2218      	movs	r2, #24
 80048e8:	4694      	mov	ip, r2
 80048ea:	44bc      	add	ip, r7
 80048ec:	4463      	add	r3, ip
 80048ee:	2204      	movs	r2, #4
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	e0b5      	b.n	8004a60 <UART_SetConfig+0x260>
 80048f4:	231b      	movs	r3, #27
 80048f6:	2218      	movs	r2, #24
 80048f8:	4694      	mov	ip, r2
 80048fa:	44bc      	add	ip, r7
 80048fc:	4463      	add	r3, ip
 80048fe:	2208      	movs	r2, #8
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e0ad      	b.n	8004a60 <UART_SetConfig+0x260>
 8004904:	231b      	movs	r3, #27
 8004906:	2218      	movs	r2, #24
 8004908:	4694      	mov	ip, r2
 800490a:	44bc      	add	ip, r7
 800490c:	4463      	add	r3, ip
 800490e:	2210      	movs	r2, #16
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	e0a4      	b.n	8004a60 <UART_SetConfig+0x260>
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a9c      	ldr	r2, [pc, #624]	; (8004b8c <UART_SetConfig+0x38c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d137      	bne.n	8004990 <UART_SetConfig+0x190>
 8004920:	4b99      	ldr	r3, [pc, #612]	; (8004b88 <UART_SetConfig+0x388>)
 8004922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004924:	220c      	movs	r2, #12
 8004926:	4013      	ands	r3, r2
 8004928:	2b04      	cmp	r3, #4
 800492a:	d018      	beq.n	800495e <UART_SetConfig+0x15e>
 800492c:	d802      	bhi.n	8004934 <UART_SetConfig+0x134>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <UART_SetConfig+0x13e>
 8004932:	e024      	b.n	800497e <UART_SetConfig+0x17e>
 8004934:	2b08      	cmp	r3, #8
 8004936:	d00a      	beq.n	800494e <UART_SetConfig+0x14e>
 8004938:	2b0c      	cmp	r3, #12
 800493a:	d018      	beq.n	800496e <UART_SetConfig+0x16e>
 800493c:	e01f      	b.n	800497e <UART_SetConfig+0x17e>
 800493e:	231b      	movs	r3, #27
 8004940:	2218      	movs	r2, #24
 8004942:	4694      	mov	ip, r2
 8004944:	44bc      	add	ip, r7
 8004946:	4463      	add	r3, ip
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e088      	b.n	8004a60 <UART_SetConfig+0x260>
 800494e:	231b      	movs	r3, #27
 8004950:	2218      	movs	r2, #24
 8004952:	4694      	mov	ip, r2
 8004954:	44bc      	add	ip, r7
 8004956:	4463      	add	r3, ip
 8004958:	2202      	movs	r2, #2
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e080      	b.n	8004a60 <UART_SetConfig+0x260>
 800495e:	231b      	movs	r3, #27
 8004960:	2218      	movs	r2, #24
 8004962:	4694      	mov	ip, r2
 8004964:	44bc      	add	ip, r7
 8004966:	4463      	add	r3, ip
 8004968:	2204      	movs	r2, #4
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	e078      	b.n	8004a60 <UART_SetConfig+0x260>
 800496e:	231b      	movs	r3, #27
 8004970:	2218      	movs	r2, #24
 8004972:	4694      	mov	ip, r2
 8004974:	44bc      	add	ip, r7
 8004976:	4463      	add	r3, ip
 8004978:	2208      	movs	r2, #8
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e070      	b.n	8004a60 <UART_SetConfig+0x260>
 800497e:	231b      	movs	r3, #27
 8004980:	2218      	movs	r2, #24
 8004982:	4694      	mov	ip, r2
 8004984:	44bc      	add	ip, r7
 8004986:	4463      	add	r3, ip
 8004988:	2210      	movs	r2, #16
 800498a:	701a      	strb	r2, [r3, #0]
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	e067      	b.n	8004a60 <UART_SetConfig+0x260>
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a7e      	ldr	r2, [pc, #504]	; (8004b90 <UART_SetConfig+0x390>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d107      	bne.n	80049aa <UART_SetConfig+0x1aa>
 800499a:	231b      	movs	r3, #27
 800499c:	2218      	movs	r2, #24
 800499e:	4694      	mov	ip, r2
 80049a0:	44bc      	add	ip, r7
 80049a2:	4463      	add	r3, ip
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	e05a      	b.n	8004a60 <UART_SetConfig+0x260>
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a79      	ldr	r2, [pc, #484]	; (8004b94 <UART_SetConfig+0x394>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d107      	bne.n	80049c4 <UART_SetConfig+0x1c4>
 80049b4:	231b      	movs	r3, #27
 80049b6:	2218      	movs	r2, #24
 80049b8:	4694      	mov	ip, r2
 80049ba:	44bc      	add	ip, r7
 80049bc:	4463      	add	r3, ip
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	e04d      	b.n	8004a60 <UART_SetConfig+0x260>
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a6c      	ldr	r2, [pc, #432]	; (8004b7c <UART_SetConfig+0x37c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d141      	bne.n	8004a52 <UART_SetConfig+0x252>
 80049ce:	4b6e      	ldr	r3, [pc, #440]	; (8004b88 <UART_SetConfig+0x388>)
 80049d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049d2:	23c0      	movs	r3, #192	; 0xc0
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	4013      	ands	r3, r2
 80049d8:	2280      	movs	r2, #128	; 0x80
 80049da:	00d2      	lsls	r2, r2, #3
 80049dc:	4293      	cmp	r3, r2
 80049de:	d01f      	beq.n	8004a20 <UART_SetConfig+0x220>
 80049e0:	2280      	movs	r2, #128	; 0x80
 80049e2:	00d2      	lsls	r2, r2, #3
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d802      	bhi.n	80049ee <UART_SetConfig+0x1ee>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <UART_SetConfig+0x200>
 80049ec:	e028      	b.n	8004a40 <UART_SetConfig+0x240>
 80049ee:	2280      	movs	r2, #128	; 0x80
 80049f0:	0112      	lsls	r2, r2, #4
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00c      	beq.n	8004a10 <UART_SetConfig+0x210>
 80049f6:	22c0      	movs	r2, #192	; 0xc0
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d018      	beq.n	8004a30 <UART_SetConfig+0x230>
 80049fe:	e01f      	b.n	8004a40 <UART_SetConfig+0x240>
 8004a00:	231b      	movs	r3, #27
 8004a02:	2218      	movs	r2, #24
 8004a04:	4694      	mov	ip, r2
 8004a06:	44bc      	add	ip, r7
 8004a08:	4463      	add	r3, ip
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e027      	b.n	8004a60 <UART_SetConfig+0x260>
 8004a10:	231b      	movs	r3, #27
 8004a12:	2218      	movs	r2, #24
 8004a14:	4694      	mov	ip, r2
 8004a16:	44bc      	add	ip, r7
 8004a18:	4463      	add	r3, ip
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e01f      	b.n	8004a60 <UART_SetConfig+0x260>
 8004a20:	231b      	movs	r3, #27
 8004a22:	2218      	movs	r2, #24
 8004a24:	4694      	mov	ip, r2
 8004a26:	44bc      	add	ip, r7
 8004a28:	4463      	add	r3, ip
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e017      	b.n	8004a60 <UART_SetConfig+0x260>
 8004a30:	231b      	movs	r3, #27
 8004a32:	2218      	movs	r2, #24
 8004a34:	4694      	mov	ip, r2
 8004a36:	44bc      	add	ip, r7
 8004a38:	4463      	add	r3, ip
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e00f      	b.n	8004a60 <UART_SetConfig+0x260>
 8004a40:	231b      	movs	r3, #27
 8004a42:	2218      	movs	r2, #24
 8004a44:	4694      	mov	ip, r2
 8004a46:	44bc      	add	ip, r7
 8004a48:	4463      	add	r3, ip
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	e006      	b.n	8004a60 <UART_SetConfig+0x260>
 8004a52:	231b      	movs	r3, #27
 8004a54:	2218      	movs	r2, #24
 8004a56:	4694      	mov	ip, r2
 8004a58:	44bc      	add	ip, r7
 8004a5a:	4463      	add	r3, ip
 8004a5c:	2210      	movs	r2, #16
 8004a5e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a45      	ldr	r2, [pc, #276]	; (8004b7c <UART_SetConfig+0x37c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d000      	beq.n	8004a6c <UART_SetConfig+0x26c>
 8004a6a:	e09d      	b.n	8004ba8 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a6c:	231b      	movs	r3, #27
 8004a6e:	2218      	movs	r2, #24
 8004a70:	4694      	mov	ip, r2
 8004a72:	44bc      	add	ip, r7
 8004a74:	4463      	add	r3, ip
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d00d      	beq.n	8004a98 <UART_SetConfig+0x298>
 8004a7c:	dc02      	bgt.n	8004a84 <UART_SetConfig+0x284>
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <UART_SetConfig+0x28e>
 8004a82:	e01d      	b.n	8004ac0 <UART_SetConfig+0x2c0>
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d012      	beq.n	8004aae <UART_SetConfig+0x2ae>
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d015      	beq.n	8004ab8 <UART_SetConfig+0x2b8>
 8004a8c:	e018      	b.n	8004ac0 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004a8e:	f7fe f97b 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004a92:	0003      	movs	r3, r0
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a96:	e01b      	b.n	8004ad0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a98:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <UART_SetConfig+0x388>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d002      	beq.n	8004aa8 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <UART_SetConfig+0x398>)
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8004aa6:	e013      	b.n	8004ad0 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004aa8:	4b3c      	ldr	r3, [pc, #240]	; (8004b9c <UART_SetConfig+0x39c>)
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004aac:	e010      	b.n	8004ad0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004aae:	f7fe f8dd 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ab6:	e00b      	b.n	8004ad0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004abe:	e007      	b.n	8004ad0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004ac0:	2313      	movs	r3, #19
 8004ac2:	2218      	movs	r2, #24
 8004ac4:	4694      	mov	ip, r2
 8004ac6:	44bc      	add	ip, r7
 8004ac8:	4463      	add	r3, ip
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]
        break;
 8004ace:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d100      	bne.n	8004ad8 <UART_SetConfig+0x2d8>
 8004ad6:	e1a6      	b.n	8004e26 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	0013      	movs	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d305      	bcc.n	8004af4 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d907      	bls.n	8004b04 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8004af4:	2313      	movs	r3, #19
 8004af6:	2218      	movs	r2, #24
 8004af8:	4694      	mov	ip, r2
 8004afa:	44bc      	add	ip, r7
 8004afc:	4463      	add	r3, ip
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e190      	b.n	8004e26 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	6939      	ldr	r1, [r7, #16]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	000b      	movs	r3, r1
 8004b12:	0e1b      	lsrs	r3, r3, #24
 8004b14:	0010      	movs	r0, r2
 8004b16:	0205      	lsls	r5, r0, #8
 8004b18:	431d      	orrs	r5, r3
 8004b1a:	000b      	movs	r3, r1
 8004b1c:	021c      	lsls	r4, r3, #8
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	085b      	lsrs	r3, r3, #1
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	68f9      	ldr	r1, [r7, #12]
 8004b2e:	1900      	adds	r0, r0, r4
 8004b30:	4169      	adcs	r1, r5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f7fb fb9a 	bl	8000278 <__aeabi_uldivmod>
 8004b44:	0003      	movs	r3, r0
 8004b46:	000c      	movs	r4, r1
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <UART_SetConfig+0x3a0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d908      	bls.n	8004b64 <UART_SetConfig+0x364>
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <UART_SetConfig+0x3a4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d804      	bhi.n	8004b64 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	e160      	b.n	8004e26 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8004b64:	2313      	movs	r3, #19
 8004b66:	2218      	movs	r2, #24
 8004b68:	4694      	mov	ip, r2
 8004b6a:	44bc      	add	ip, r7
 8004b6c:	4463      	add	r3, ip
 8004b6e:	2201      	movs	r2, #1
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	e158      	b.n	8004e26 <UART_SetConfig+0x626>
 8004b74:	efff69f3 	.word	0xefff69f3
 8004b78:	ffffcfff 	.word	0xffffcfff
 8004b7c:	40004800 	.word	0x40004800
 8004b80:	fffff4ff 	.word	0xfffff4ff
 8004b84:	40013800 	.word	0x40013800
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40004400 	.word	0x40004400
 8004b90:	40004c00 	.word	0x40004c00
 8004b94:	40005000 	.word	0x40005000
 8004b98:	003d0900 	.word	0x003d0900
 8004b9c:	00f42400 	.word	0x00f42400
 8004ba0:	000002ff 	.word	0x000002ff
 8004ba4:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d000      	beq.n	8004bb6 <UART_SetConfig+0x3b6>
 8004bb4:	e0a9      	b.n	8004d0a <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8004bb6:	231b      	movs	r3, #27
 8004bb8:	2218      	movs	r2, #24
 8004bba:	4694      	mov	ip, r2
 8004bbc:	44bc      	add	ip, r7
 8004bbe:	4463      	add	r3, ip
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d86d      	bhi.n	8004ca2 <UART_SetConfig+0x4a2>
 8004bc6:	009a      	lsls	r2, r3, #2
 8004bc8:	4b9f      	ldr	r3, [pc, #636]	; (8004e48 <UART_SetConfig+0x648>)
 8004bca:	18d3      	adds	r3, r2, r3
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004bd0:	f7fe f8da 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	005a      	lsls	r2, r3, #1
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085b      	lsrs	r3, r3, #1
 8004bde:	18d2      	adds	r2, r2, r3
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0019      	movs	r1, r3
 8004be6:	0010      	movs	r0, r2
 8004be8:	f7fb fa96 	bl	8000118 <__udivsi3>
 8004bec:	0003      	movs	r3, r0
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bf2:	e05e      	b.n	8004cb2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004bf4:	f7fe f8de 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	005a      	lsls	r2, r3, #1
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	18d2      	adds	r2, r2, r3
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	0019      	movs	r1, r3
 8004c0a:	0010      	movs	r0, r2
 8004c0c:	f7fb fa84 	bl	8000118 <__udivsi3>
 8004c10:	0003      	movs	r3, r0
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c16:	e04c      	b.n	8004cb2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c18:	4b8c      	ldr	r3, [pc, #560]	; (8004e4c <UART_SetConfig+0x64c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d00e      	beq.n	8004c40 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	4a89      	ldr	r2, [pc, #548]	; (8004e50 <UART_SetConfig+0x650>)
 8004c2a:	189a      	adds	r2, r3, r2
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	0019      	movs	r1, r3
 8004c32:	0010      	movs	r0, r2
 8004c34:	f7fb fa70 	bl	8000118 <__udivsi3>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004c3e:	e038      	b.n	8004cb2 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	4a83      	ldr	r2, [pc, #524]	; (8004e54 <UART_SetConfig+0x654>)
 8004c48:	189a      	adds	r2, r3, r2
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	0019      	movs	r1, r3
 8004c50:	0010      	movs	r0, r2
 8004c52:	f7fb fa61 	bl	8000118 <__udivsi3>
 8004c56:	0003      	movs	r3, r0
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c5c:	e029      	b.n	8004cb2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004c5e:	f7fe f805 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8004c62:	0003      	movs	r3, r0
 8004c64:	005a      	lsls	r2, r3, #1
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	18d2      	adds	r2, r2, r3
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	0019      	movs	r1, r3
 8004c74:	0010      	movs	r0, r2
 8004c76:	f7fb fa4f 	bl	8000118 <__udivsi3>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c80:	e017      	b.n	8004cb2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	2280      	movs	r2, #128	; 0x80
 8004c8a:	0252      	lsls	r2, r2, #9
 8004c8c:	189a      	adds	r2, r3, r2
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	0019      	movs	r1, r3
 8004c94:	0010      	movs	r0, r2
 8004c96:	f7fb fa3f 	bl	8000118 <__udivsi3>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ca0:	e007      	b.n	8004cb2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004ca2:	2313      	movs	r3, #19
 8004ca4:	2218      	movs	r2, #24
 8004ca6:	4694      	mov	ip, r2
 8004ca8:	44bc      	add	ip, r7
 8004caa:	4463      	add	r3, ip
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
        break;
 8004cb0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	2b0f      	cmp	r3, #15
 8004cb6:	d920      	bls.n	8004cfa <UART_SetConfig+0x4fa>
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	4a67      	ldr	r2, [pc, #412]	; (8004e58 <UART_SetConfig+0x658>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d81c      	bhi.n	8004cfa <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	200a      	movs	r0, #10
 8004cc6:	2418      	movs	r4, #24
 8004cc8:	193b      	adds	r3, r7, r4
 8004cca:	181b      	adds	r3, r3, r0
 8004ccc:	210f      	movs	r1, #15
 8004cce:	438a      	bics	r2, r1
 8004cd0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2207      	movs	r2, #7
 8004cda:	4013      	ands	r3, r2
 8004cdc:	b299      	uxth	r1, r3
 8004cde:	193b      	adds	r3, r7, r4
 8004ce0:	181b      	adds	r3, r3, r0
 8004ce2:	193a      	adds	r2, r7, r4
 8004ce4:	1812      	adds	r2, r2, r0
 8004ce6:	8812      	ldrh	r2, [r2, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	193a      	adds	r2, r7, r4
 8004cf2:	1812      	adds	r2, r2, r0
 8004cf4:	8812      	ldrh	r2, [r2, #0]
 8004cf6:	60da      	str	r2, [r3, #12]
 8004cf8:	e095      	b.n	8004e26 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8004cfa:	2313      	movs	r3, #19
 8004cfc:	2218      	movs	r2, #24
 8004cfe:	4694      	mov	ip, r2
 8004d00:	44bc      	add	ip, r7
 8004d02:	4463      	add	r3, ip
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e08d      	b.n	8004e26 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8004d0a:	231b      	movs	r3, #27
 8004d0c:	2218      	movs	r2, #24
 8004d0e:	4694      	mov	ip, r2
 8004d10:	44bc      	add	ip, r7
 8004d12:	4463      	add	r3, ip
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d86a      	bhi.n	8004df0 <UART_SetConfig+0x5f0>
 8004d1a:	009a      	lsls	r2, r3, #2
 8004d1c:	4b4f      	ldr	r3, [pc, #316]	; (8004e5c <UART_SetConfig+0x65c>)
 8004d1e:	18d3      	adds	r3, r2, r3
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d24:	f7fe f830 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	18d2      	adds	r2, r2, r3
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	0019      	movs	r1, r3
 8004d38:	0010      	movs	r0, r2
 8004d3a:	f7fb f9ed 	bl	8000118 <__udivsi3>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d44:	e05c      	b.n	8004e00 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d46:	f7fe f835 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	18d2      	adds	r2, r2, r3
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	0019      	movs	r1, r3
 8004d5a:	0010      	movs	r0, r2
 8004d5c:	f7fb f9dc 	bl	8000118 <__udivsi3>
 8004d60:	0003      	movs	r3, r0
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d66:	e04b      	b.n	8004e00 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d68:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <UART_SetConfig+0x64c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	4a39      	ldr	r2, [pc, #228]	; (8004e60 <UART_SetConfig+0x660>)
 8004d7a:	189a      	adds	r2, r3, r2
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	0019      	movs	r1, r3
 8004d82:	0010      	movs	r0, r2
 8004d84:	f7fb f9c8 	bl	8000118 <__udivsi3>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004d8e:	e037      	b.n	8004e00 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	4a33      	ldr	r2, [pc, #204]	; (8004e64 <UART_SetConfig+0x664>)
 8004d98:	189a      	adds	r2, r3, r2
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	0019      	movs	r1, r3
 8004da0:	0010      	movs	r0, r2
 8004da2:	f7fb f9b9 	bl	8000118 <__udivsi3>
 8004da6:	0003      	movs	r3, r0
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dac:	e028      	b.n	8004e00 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004dae:	f7fd ff5d 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8004db2:	0002      	movs	r2, r0
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	18d2      	adds	r2, r2, r3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	0019      	movs	r1, r3
 8004dc2:	0010      	movs	r0, r2
 8004dc4:	f7fb f9a8 	bl	8000118 <__udivsi3>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dce:	e017      	b.n	8004e00 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	2280      	movs	r2, #128	; 0x80
 8004dd8:	0212      	lsls	r2, r2, #8
 8004dda:	189a      	adds	r2, r3, r2
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	0019      	movs	r1, r3
 8004de2:	0010      	movs	r0, r2
 8004de4:	f7fb f998 	bl	8000118 <__udivsi3>
 8004de8:	0003      	movs	r3, r0
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dee:	e007      	b.n	8004e00 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004df0:	2313      	movs	r3, #19
 8004df2:	2218      	movs	r2, #24
 8004df4:	4694      	mov	ip, r2
 8004df6:	44bc      	add	ip, r7
 8004df8:	4463      	add	r3, ip
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
        break;
 8004dfe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	2b0f      	cmp	r3, #15
 8004e04:	d908      	bls.n	8004e18 <UART_SetConfig+0x618>
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <UART_SetConfig+0x658>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d804      	bhi.n	8004e18 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e14:	60da      	str	r2, [r3, #12]
 8004e16:	e006      	b.n	8004e26 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8004e18:	2313      	movs	r3, #19
 8004e1a:	2218      	movs	r2, #24
 8004e1c:	4694      	mov	ip, r2
 8004e1e:	44bc      	add	ip, r7
 8004e20:	4463      	add	r3, ip
 8004e22:	2201      	movs	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e32:	2313      	movs	r3, #19
 8004e34:	2218      	movs	r2, #24
 8004e36:	4694      	mov	ip, r2
 8004e38:	44bc      	add	ip, r7
 8004e3a:	4463      	add	r3, ip
 8004e3c:	781b      	ldrb	r3, [r3, #0]
}
 8004e3e:	0018      	movs	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b00e      	add	sp, #56	; 0x38
 8004e44:	bdb0      	pop	{r4, r5, r7, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	08009bb0 	.word	0x08009bb0
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	007a1200 	.word	0x007a1200
 8004e54:	01e84800 	.word	0x01e84800
 8004e58:	0000ffff 	.word	0x0000ffff
 8004e5c:	08009bd4 	.word	0x08009bd4
 8004e60:	003d0900 	.word	0x003d0900
 8004e64:	00f42400 	.word	0x00f42400

08004e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2201      	movs	r2, #1
 8004e76:	4013      	ands	r3, r2
 8004e78:	d00b      	beq.n	8004e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4a4a      	ldr	r2, [pc, #296]	; (8004fac <UART_AdvFeatureConfig+0x144>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	0019      	movs	r1, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2202      	movs	r2, #2
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4a43      	ldr	r2, [pc, #268]	; (8004fb0 <UART_AdvFeatureConfig+0x148>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2204      	movs	r2, #4
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a3b      	ldr	r2, [pc, #236]	; (8004fb4 <UART_AdvFeatureConfig+0x14c>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2208      	movs	r2, #8
 8004edc:	4013      	ands	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4a34      	ldr	r2, [pc, #208]	; (8004fb8 <UART_AdvFeatureConfig+0x150>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	0019      	movs	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2210      	movs	r2, #16
 8004efe:	4013      	ands	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a2c      	ldr	r2, [pc, #176]	; (8004fbc <UART_AdvFeatureConfig+0x154>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2220      	movs	r2, #32
 8004f20:	4013      	ands	r3, r2
 8004f22:	d00b      	beq.n	8004f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <UART_AdvFeatureConfig+0x158>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	0019      	movs	r1, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	2240      	movs	r2, #64	; 0x40
 8004f42:	4013      	ands	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <UART_AdvFeatureConfig+0x15c>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	0019      	movs	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	035b      	lsls	r3, r3, #13
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d10b      	bne.n	8004f82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <UART_AdvFeatureConfig+0x160>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	0019      	movs	r1, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d00b      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4a0e      	ldr	r2, [pc, #56]	; (8004fcc <UART_AdvFeatureConfig+0x164>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	0019      	movs	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
  }
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b002      	add	sp, #8
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	fffdffff 	.word	0xfffdffff
 8004fb0:	fffeffff 	.word	0xfffeffff
 8004fb4:	fffbffff 	.word	0xfffbffff
 8004fb8:	ffff7fff 	.word	0xffff7fff
 8004fbc:	ffffefff 	.word	0xffffefff
 8004fc0:	ffffdfff 	.word	0xffffdfff
 8004fc4:	ffefffff 	.word	0xffefffff
 8004fc8:	ff9fffff 	.word	0xff9fffff
 8004fcc:	fff7ffff 	.word	0xfff7ffff

08004fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fde:	f7fc fb31 	bl	8001644 <HAL_GetTick>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2208      	movs	r2, #8
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d10d      	bne.n	8005010 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	0399      	lsls	r1, r3, #14
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4b16      	ldr	r3, [pc, #88]	; (8005058 <UART_CheckIdleState+0x88>)
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	0013      	movs	r3, r2
 8005002:	2200      	movs	r2, #0
 8005004:	f000 f82a 	bl	800505c <UART_WaitOnFlagUntilTimeout>
 8005008:	1e03      	subs	r3, r0, #0
 800500a:	d001      	beq.n	8005010 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e01f      	b.n	8005050 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2204      	movs	r2, #4
 8005018:	4013      	ands	r3, r2
 800501a:	2b04      	cmp	r3, #4
 800501c:	d10d      	bne.n	800503a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	03d9      	lsls	r1, r3, #15
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <UART_CheckIdleState+0x88>)
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	0013      	movs	r3, r2
 800502c:	2200      	movs	r2, #0
 800502e:	f000 f815 	bl	800505c <UART_WaitOnFlagUntilTimeout>
 8005032:	1e03      	subs	r3, r0, #0
 8005034:	d001      	beq.n	800503a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e00a      	b.n	8005050 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2270      	movs	r2, #112	; 0x70
 800504a:	2100      	movs	r1, #0
 800504c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	0018      	movs	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	b004      	add	sp, #16
 8005056:	bd80      	pop	{r7, pc}
 8005058:	01ffffff 	.word	0x01ffffff

0800505c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	1dfb      	adds	r3, r7, #7
 800506a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506c:	e029      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	3301      	adds	r3, #1
 8005072:	d026      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005074:	f7fc fae6 	bl	8001644 <HAL_GetTick>
 8005078:	0002      	movs	r2, r0
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11b      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4915      	ldr	r1, [pc, #84]	; (80050ec <UART_WaitOnFlagUntilTimeout+0x90>)
 8005096:	400a      	ands	r2, r1
 8005098:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2101      	movs	r1, #1
 80050a6:	438a      	bics	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2270      	movs	r2, #112	; 0x70
 80050ba:	2100      	movs	r1, #0
 80050bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e00f      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	425a      	negs	r2, r3
 80050d2:	4153      	adcs	r3, r2
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	001a      	movs	r2, r3
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d0c6      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	0018      	movs	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b004      	add	sp, #16
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	fffffe5f 	.word	0xfffffe5f

080050f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	490a      	ldr	r1, [pc, #40]	; (800512c <UART_EndRxTransfer+0x3c>)
 8005104:	400a      	ands	r2, r1
 8005106:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2101      	movs	r1, #1
 8005114:	438a      	bics	r2, r1
 8005116:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}
 800512c:	fffffedf 	.word	0xfffffedf

08005130 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	225a      	movs	r2, #90	; 0x5a
 8005142:	2100      	movs	r1, #0
 8005144:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2252      	movs	r2, #82	; 0x52
 800514a:	2100      	movs	r1, #0
 800514c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	0018      	movs	r0, r3
 8005152:	f003 f9a3 	bl	800849c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b004      	add	sp, #16
 800515c:	bd80      	pop	{r7, pc}

0800515e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2140      	movs	r1, #64	; 0x40
 8005172:	438a      	bics	r2, r1
 8005174:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	0018      	movs	r0, r3
 8005186:	f7ff fb33 	bl	80047f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800519c:	230e      	movs	r3, #14
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	215c      	movs	r1, #92	; 0x5c
 80051a4:	5a52      	ldrh	r2, [r2, r1]
 80051a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ac:	2b22      	cmp	r3, #34	; 0x22
 80051ae:	d140      	bne.n	8005232 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b6:	210c      	movs	r1, #12
 80051b8:	187b      	adds	r3, r7, r1
 80051ba:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051bc:	187b      	adds	r3, r7, r1
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	230e      	movs	r3, #14
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b2d9      	uxtb	r1, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	400a      	ands	r2, r1
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	225a      	movs	r2, #90	; 0x5a
 80051e2:	5a9b      	ldrh	r3, [r3, r2]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b299      	uxth	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	225a      	movs	r2, #90	; 0x5a
 80051ee:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	225a      	movs	r2, #90	; 0x5a
 80051f4:	5a9b      	ldrh	r3, [r3, r2]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d122      	bne.n	8005242 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4911      	ldr	r1, [pc, #68]	; (800524c <UART_RxISR_8BIT+0xb8>)
 8005208:	400a      	ands	r2, r1
 800520a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2101      	movs	r1, #1
 8005218:	438a      	bics	r2, r1
 800521a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	0018      	movs	r0, r3
 800522c:	f003 f94a 	bl	80084c4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005230:	e007      	b.n	8005242 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699a      	ldr	r2, [r3, #24]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2108      	movs	r1, #8
 800523e:	430a      	orrs	r2, r1
 8005240:	619a      	str	r2, [r3, #24]
}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	b004      	add	sp, #16
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	fffffedf 	.word	0xfffffedf

08005250 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005258:	230e      	movs	r3, #14
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	215c      	movs	r1, #92	; 0x5c
 8005260:	5a52      	ldrh	r2, [r2, r1]
 8005262:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005268:	2b22      	cmp	r3, #34	; 0x22
 800526a:	d140      	bne.n	80052ee <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005272:	210c      	movs	r1, #12
 8005274:	187b      	adds	r3, r7, r1
 8005276:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800527e:	187b      	adds	r3, r7, r1
 8005280:	220e      	movs	r2, #14
 8005282:	18ba      	adds	r2, r7, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	8812      	ldrh	r2, [r2, #0]
 8005288:	4013      	ands	r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	1c9a      	adds	r2, r3, #2
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	225a      	movs	r2, #90	; 0x5a
 800529e:	5a9b      	ldrh	r3, [r3, r2]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b299      	uxth	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	225a      	movs	r2, #90	; 0x5a
 80052aa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	225a      	movs	r2, #90	; 0x5a
 80052b0:	5a9b      	ldrh	r3, [r3, r2]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d122      	bne.n	80052fe <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4911      	ldr	r1, [pc, #68]	; (8005308 <UART_RxISR_16BIT+0xb8>)
 80052c4:	400a      	ands	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2101      	movs	r1, #1
 80052d4:	438a      	bics	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	0018      	movs	r0, r3
 80052e8:	f003 f8ec 	bl	80084c4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ec:	e007      	b.n	80052fe <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2108      	movs	r1, #8
 80052fa:	430a      	orrs	r2, r1
 80052fc:	619a      	str	r2, [r3, #24]
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b004      	add	sp, #16
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	fffffedf 	.word	0xfffffedf

0800530c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	6019      	str	r1, [r3, #0]
 8005318:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	2317      	movs	r3, #23
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2270      	movs	r2, #112	; 0x70
 8005326:	5c9b      	ldrb	r3, [r3, r2]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800532c:	2302      	movs	r3, #2
 800532e:	e04b      	b.n	80053c8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xbc>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2270      	movs	r2, #112	; 0x70
 8005334:	2101      	movs	r1, #1
 8005336:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2224      	movs	r2, #36	; 0x24
 800533c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2101      	movs	r1, #1
 800534a:	438a      	bics	r2, r1
 800534c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8005356:	4013      	ands	r3, r2
 8005358:	0019      	movs	r1, r3
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d105      	bne.n	800537a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800536e:	1d3b      	adds	r3, r7, #4
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	6819      	ldr	r1, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	f000 f84f 	bl	8005418 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2101      	movs	r1, #1
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800538a:	f7fc f95b 	bl	8001644 <HAL_GetTick>
 800538e:	0003      	movs	r3, r0
 8005390:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	03d9      	lsls	r1, r3, #15
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	0013      	movs	r3, r2
 80053a0:	2200      	movs	r2, #0
 80053a2:	f7ff fe5b 	bl	800505c <UART_WaitOnFlagUntilTimeout>
 80053a6:	1e03      	subs	r3, r0, #0
 80053a8:	d004      	beq.n	80053b4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa8>
  {
    status = HAL_TIMEOUT;
 80053aa:	2317      	movs	r3, #23
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	2203      	movs	r2, #3
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	e002      	b.n	80053ba <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2270      	movs	r2, #112	; 0x70
 80053be:	2100      	movs	r1, #0
 80053c0:	5499      	strb	r1, [r3, r2]

  return status;
 80053c2:	2317      	movs	r3, #23
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	781b      	ldrb	r3, [r3, #0]
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b006      	add	sp, #24
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	ffcfffff 	.word	0xffcfffff
 80053d4:	01ffffff 	.word	0x01ffffff

080053d8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2270      	movs	r2, #112	; 0x70
 80053e4:	5c9b      	ldrb	r3, [r3, r2]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_UARTEx_EnableStopMode+0x16>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e010      	b.n	8005410 <HAL_UARTEx_EnableStopMode+0x38>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2270      	movs	r2, #112	; 0x70
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2102      	movs	r1, #2
 8005402:	430a      	orrs	r2, r1
 8005404:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2270      	movs	r2, #112	; 0x70
 800540a:	2100      	movs	r1, #0
 800540c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b002      	add	sp, #8
 8005416:	bd80      	pop	{r7, pc}

08005418 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	6019      	str	r1, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2210      	movs	r2, #16
 800542e:	4393      	bics	r3, r2
 8005430:	001a      	movs	r2, r3
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	889b      	ldrh	r3, [r3, #4]
 8005436:	0019      	movs	r1, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	0a19      	lsrs	r1, r3, #8
 800544a:	1d3b      	adds	r3, r7, #4
 800544c:	799b      	ldrb	r3, [r3, #6]
 800544e:	061a      	lsls	r2, r3, #24
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	b004      	add	sp, #16
 800545e:	bd80      	pop	{r7, pc}

08005460 <eeprom_write>:
/**
 * Store a data block into eeprom with the given len in byte
 * Specify a version of the data to be stored. This will be used
 * as a verification at read.
 */
bool eeprom_write(void * data, uint16_t len, uint8_t version) {
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b089      	sub	sp, #36	; 0x24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	0008      	movs	r0, r1
 800546a:	0011      	movs	r1, r2
 800546c:	1cbb      	adds	r3, r7, #2
 800546e:	1c02      	adds	r2, r0, #0
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	1c7b      	adds	r3, r7, #1
 8005474:	1c0a      	adds	r2, r1, #0
 8005476:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	t.magic = ITDT_EEPROM_MAGIC;
 8005478:	2410      	movs	r4, #16
 800547a:	193b      	adds	r3, r7, r4
 800547c:	4a17      	ldr	r2, [pc, #92]	; (80054dc <eeprom_write+0x7c>)
 800547e:	801a      	strh	r2, [r3, #0]
	t.size = len;
 8005480:	193b      	adds	r3, r7, r4
 8005482:	1cba      	adds	r2, r7, #2
 8005484:	8812      	ldrh	r2, [r2, #0]
 8005486:	809a      	strh	r2, [r3, #4]
	t.version = version;
 8005488:	193b      	adds	r3, r7, r4
 800548a:	1c7a      	adds	r2, r7, #1
 800548c:	7812      	ldrb	r2, [r2, #0]
 800548e:	709a      	strb	r2, [r3, #2]
	t.crc32 = itsdk_computeCRC32((uint8_t*)data, len);
 8005490:	1cbb      	adds	r3, r7, #2
 8005492:	881a      	ldrh	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	0011      	movs	r1, r2
 8005498:	0018      	movs	r0, r3
 800549a:	f002 f8ff 	bl	800769c <itsdk_computeCRC32>
 800549e:	0002      	movs	r2, r0
 80054a0:	193b      	adds	r3, r7, r4
 80054a2:	609a      	str	r2, [r3, #8]

	uint32_t offset = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 80054a8:	230c      	movs	r3, #12
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	0018      	movs	r0, r3
 80054ae:	f000 f879 	bl	80055a4 <eeprom_getConfigOffset>

	// Write the data header
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 80054b2:	68f9      	ldr	r1, [r7, #12]
 80054b4:	193a      	adds	r2, r7, r4
 80054b6:	2310      	movs	r3, #16
 80054b8:	2000      	movs	r0, #0
 80054ba:	f003 f85d 	bl	8008578 <_eeprom_write>
	// Write data
	_eeprom_write(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3310      	adds	r3, #16
 80054c2:	0019      	movs	r1, r3
 80054c4:	1cbb      	adds	r3, r7, #2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	2000      	movs	r0, #0
 80054cc:	f003 f854 	bl	8008578 <_eeprom_write>

	_LOG_EEPROM(("[NVM][I] Write %d bytes crc %0X\r\n",len,t.crc32));

	return true;
 80054d0:	2301      	movs	r3, #1
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b009      	add	sp, #36	; 0x24
 80054d8:	bd90      	pop	{r4, r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	ffffa5fc 	.word	0xffffa5fc

080054e0 <eeprom_read>:
 * In the EEPROM we have
 * ---> SecureStore
 * ---> ErrorReport
 * ---> Configuration
 */
bool eeprom_read(void * data, uint16_t len, uint8_t version, uint8_t * versionR) {
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b08b      	sub	sp, #44	; 0x2c
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	0008      	movs	r0, r1
 80054ea:	0011      	movs	r1, r2
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	230a      	movs	r3, #10
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	1c02      	adds	r2, r0, #0
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	2309      	movs	r3, #9
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	1c0a      	adds	r2, r1, #0
 80054fc:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	uint32_t offset = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
	eeprom_getConfigOffset(&offset);
 8005502:	2310      	movs	r3, #16
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	0018      	movs	r0, r3
 8005508:	f000 f84c 	bl	80055a4 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 800550c:	6939      	ldr	r1, [r7, #16]
 800550e:	2414      	movs	r4, #20
 8005510:	193a      	adds	r2, r7, r4
 8005512:	2310      	movs	r3, #16
 8005514:	2000      	movs	r0, #0
 8005516:	f003 f8c3 	bl	80086a0 <_eeprom_read>

	// Verify different element
	if ( t.magic != ITDT_EEPROM_MAGIC ) {
 800551a:	193b      	adds	r3, r7, r4
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <eeprom_read+0xc0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <eeprom_read+0x4e>
		_LOG_EEPROM(("[NVM][I] Read invalid magic\r\n"));
		*versionR=0;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
		return false;
 800552a:	2300      	movs	r3, #0
 800552c:	e033      	b.n	8005596 <eeprom_read+0xb6>
	}
	*versionR=t.version;
 800552e:	2114      	movs	r1, #20
 8005530:	187b      	adds	r3, r7, r1
 8005532:	789a      	ldrb	r2, [r3, #2]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	701a      	strb	r2, [r3, #0]
	if ( t.size != len ) {
 8005538:	187b      	adds	r3, r7, r1
 800553a:	889b      	ldrh	r3, [r3, #4]
 800553c:	220a      	movs	r2, #10
 800553e:	18ba      	adds	r2, r7, r2
 8005540:	8812      	ldrh	r2, [r2, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d001      	beq.n	800554a <eeprom_read+0x6a>
		_LOG_EEPROM(("[NVM][I] Read invalid size (%d vs %d)\r\n",len,t.size));
		return false;
 8005546:	2300      	movs	r3, #0
 8005548:	e025      	b.n	8005596 <eeprom_read+0xb6>
	}
	if ( t.version != version ) {
 800554a:	2314      	movs	r3, #20
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	789b      	ldrb	r3, [r3, #2]
 8005550:	2209      	movs	r2, #9
 8005552:	18ba      	adds	r2, r7, r2
 8005554:	7812      	ldrb	r2, [r2, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d001      	beq.n	800555e <eeprom_read+0x7e>
		_LOG_EEPROM(("[NVM][I] Read invalid version (%d vs %d)\r\n",version,t.version));
		return false;
 800555a:	2300      	movs	r3, #0
 800555c:	e01b      	b.n	8005596 <eeprom_read+0xb6>
	}

	// Read the data
	_eeprom_read(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	3310      	adds	r3, #16
 8005562:	0019      	movs	r1, r3
 8005564:	240a      	movs	r4, #10
 8005566:	193b      	adds	r3, r7, r4
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	2000      	movs	r0, #0
 800556e:	f003 f897 	bl	80086a0 <_eeprom_read>
	uint32_t _crc = itsdk_computeCRC32((uint8_t*)data, len);
 8005572:	193b      	adds	r3, r7, r4
 8005574:	881a      	ldrh	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	0011      	movs	r1, r2
 800557a:	0018      	movs	r0, r3
 800557c:	f002 f88e 	bl	800769c <itsdk_computeCRC32>
 8005580:	0003      	movs	r3, r0
 8005582:	627b      	str	r3, [r7, #36]	; 0x24

	if ( t.crc32 != _crc ) {
 8005584:	2314      	movs	r3, #20
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <eeprom_read+0xb4>
		_LOG_EEPROM(("[NVM][I] Read invalid crc\r\n"));
		return false;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <eeprom_read+0xb6>
	}

	return true;
 8005594:	2301      	movs	r3, #1
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b00b      	add	sp, #44	; 0x2c
 800559c:	bd90      	pop	{r4, r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	0000a5fc 	.word	0x0000a5fc

080055a4 <eeprom_getConfigOffset>:

/**
 * Compute the EEProm Config offset
 * Memory have SecureStore then Log then Sigfox config, then Device config
 */
bool eeprom_getConfigOffset(uint32_t * _offset) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t sstore=0, ssError=0, sSigfox=0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
  #if ITSDK_WITH_SECURESTORE == __ENABLE
	itsdk_secstore_getStoreSize(&sstore);
 80055b8:	2310      	movs	r3, #16
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	0018      	movs	r0, r3
 80055be:	f000 f99e 	bl	80058fe <itsdk_secstore_getStoreSize>
  #endif
  #if (ITSDK_WITH_ERROR_RPT == __ENABLE) && (ITSDK_ERROR_USE_EPROM == __ENABLE)
	itsdk_error_getSize(&ssError);
 80055c2:	230c      	movs	r3, #12
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	0018      	movs	r0, r3
 80055c8:	f001 fdf4 	bl	80071b4 <itsdk_error_getSize>
  #endif
  #if (ITSDK_WITH_SIGFOX_LIB == __ENABLE)
	itsdk_sigfox_getNvmSize(&sSigfox);
  #endif
  *_offset += sstore + ssError + sSigfox;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	6939      	ldr	r1, [r7, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	18c9      	adds	r1, r1, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	18cb      	adds	r3, r1, r3
 80055da:	18d2      	adds	r2, r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
  return true;
 80055e0:	2301      	movs	r3, #1
}
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b006      	add	sp, #24
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <itsdk_config_sdk_resetToFactory>:

/**
 * The SDK config initialization function
 */
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	static itsdk_config_ret_e itsdk_config_sdk_resetToFactory() {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
		itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 80055f0:	4b19      	ldr	r3, [pc, #100]	; (8005658 <itsdk_config_sdk_resetToFactory+0x6c>)
 80055f2:	2216      	movs	r2, #22
 80055f4:	701a      	strb	r2, [r3, #0]
		itsdk_config.sdk.size = sizeof(itsdk_configuration_internal_t);
 80055f6:	4b18      	ldr	r3, [pc, #96]	; (8005658 <itsdk_config_sdk_resetToFactory+0x6c>)
 80055f8:	2218      	movs	r2, #24
 80055fa:	805a      	strh	r2, [r3, #2]
		// ----------- Network choice ----------------------------------------------------
		#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.activeNetwork = ITSDK_DEFAULT_NETWORK;
 80055fc:	4b16      	ldr	r3, [pc, #88]	; (8005658 <itsdk_config_sdk_resetToFactory+0x6c>)
 80055fe:	2202      	movs	r2, #2
 8005600:	80da      	strh	r2, [r3, #6]
		#endif
		// ----------- LoRaWan settings --------------------------------------------------
		#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.lorawan.adrMode = ITSDK_LORAWAN_ADR;
 8005602:	4b15      	ldr	r3, [pc, #84]	; (8005658 <itsdk_config_sdk_resetToFactory+0x6c>)
 8005604:	7a9a      	ldrb	r2, [r3, #10]
 8005606:	213f      	movs	r1, #63	; 0x3f
 8005608:	400a      	ands	r2, r1
 800560a:	1c11      	adds	r1, r2, #0
 800560c:	2240      	movs	r2, #64	; 0x40
 800560e:	430a      	orrs	r2, r1
 8005610:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.devEuiType = ITSDK_LORAWAN_DEVEUI_SRC;
 8005612:	4b11      	ldr	r3, [pc, #68]	; (8005658 <itsdk_config_sdk_resetToFactory+0x6c>)
 8005614:	7a9a      	ldrb	r2, [r3, #10]
 8005616:	2130      	movs	r1, #48	; 0x30
 8005618:	438a      	bics	r2, r1
 800561a:	1c11      	adds	r1, r2, #0
 800561c:	2210      	movs	r2, #16
 800561e:	430a      	orrs	r2, r1
 8005620:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.joinMode = ITSDK_LORAWAN_ACTIVATION;
 8005622:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <itsdk_config_sdk_resetToFactory+0x6c>)
 8005624:	7a9a      	ldrb	r2, [r3, #10]
 8005626:	2103      	movs	r1, #3
 8005628:	438a      	bics	r2, r1
 800562a:	1c11      	adds	r1, r2, #0
 800562c:	2201      	movs	r2, #1
 800562e:	430a      	orrs	r2, r1
 8005630:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.networkType = ITSDK_LORAWAN_NETWORKTYPE;
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <itsdk_config_sdk_resetToFactory+0x6c>)
 8005634:	7a9a      	ldrb	r2, [r3, #10]
 8005636:	210c      	movs	r1, #12
 8005638:	438a      	bics	r2, r1
 800563a:	1c11      	adds	r1, r2, #0
 800563c:	2204      	movs	r2, #4
 800563e:	430a      	orrs	r2, r1
 8005640:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.retries = ITSDK_LORAWAN_CNF_RETRY;
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <itsdk_config_sdk_resetToFactory+0x6c>)
 8005644:	2203      	movs	r2, #3
 8005646:	72da      	strb	r2, [r3, #11]
		itsdk_config.sdk.activeRegion = ITSDK_DEFAULT_REGION;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <itsdk_config_sdk_resetToFactory+0x6c>)
 800564a:	2220      	movs	r2, #32
 800564c:	811a      	strh	r2, [r3, #8]
		  bcopy(pac,itsdk_config.sdk.sigfox.initialPac,8);
		  itsdk_config.sdk.sigfox.deviceId = ITSDK_SIGFOX_ID;
		#endif

		#endif
		return CONFIG_RESTORED_FROM_FACTORY;
 800564e:	2302      	movs	r3, #2
	}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	20000404 	.word	0x20000404

0800565c <itsdk_config_app_resetToFactory>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overrided
		 */
		__weak itsdk_config_ret_e itsdk_config_app_resetToFactory() {
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <itsdk_config_app_resetToFactory+0x1c>)
 8005662:	2201      	movs	r2, #1
 8005664:	761a      	strb	r2, [r3, #24]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <itsdk_config_app_resetToFactory+0x20>)
 8005668:	2100      	movs	r1, #0
 800566a:	0018      	movs	r0, r3
 800566c:	f001 fd02 	bl	8007074 <itsdk_error_report>
			return CONFIG_FAILED;
 8005670:	2303      	movs	r3, #3
		}
 8005672:	0018      	movs	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000404 	.word	0x20000404
 800567c:	40000070 	.word	0x40000070

08005680 <itsdk_config_loadConfiguration>:
 * Load the configuration from the NVM, eventually from factory default when the NVM is disabled
 * The Configuration will be restored from default when the version have changed.
 * The factory init functions will be called.
 * When a Application defined configuration exists the initialization function needs to be override.
 */
itsdk_config_ret_e itsdk_config_loadConfiguration(itsdk_config_load_mode_e mode) {
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	0002      	movs	r2, r0
 8005688:	1dfb      	adds	r3, r7, #7
 800568a:	701a      	strb	r2, [r3, #0]
	__console_configMng.next = NULL;
	itsdk_console_registerCommand(&__console_configMng);
#endif

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  uint8_t v= ITSDK_CONFIGURATION_MNG_VERSION;
 800568c:	230d      	movs	r3, #13
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	2201      	movs	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
  uint8_t hasChanged = 0;
 8005694:	230f      	movs	r3, #15
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
  if ( mode != CONFIG_FORCE_TO_FACTORY && eeprom_read(&itsdk_config, sizeof(itsdk_configuration_nvm_t), 1,&v) ) {
 800569c:	1dfb      	adds	r3, r7, #7
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d038      	beq.n	8005716 <itsdk_config_loadConfiguration+0x96>
 80056a4:	230d      	movs	r3, #13
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	4833      	ldr	r0, [pc, #204]	; (8005778 <itsdk_config_loadConfiguration+0xf8>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	211c      	movs	r1, #28
 80056ae:	f7ff ff17 	bl	80054e0 <eeprom_read>
 80056b2:	1e03      	subs	r3, r0, #0
 80056b4:	d02f      	beq.n	8005716 <itsdk_config_loadConfiguration+0x96>
	  uint8_t force = 0;
 80056b6:	230e      	movs	r3, #14
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
	  // The data are correctly loaded
	  if ( itsdk_config.sdk.version != ITSDK_CONFIGURATION_SDK_VERSION ) {
 80056be:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <itsdk_config_loadConfiguration+0xf8>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b16      	cmp	r3, #22
 80056c4:	d012      	beq.n	80056ec <itsdk_config_loadConfiguration+0x6c>
		  // SDK version has changed
		  if ( itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) {
 80056c6:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <itsdk_config_loadConfiguration+0xf8>)
 80056c8:	885b      	ldrh	r3, [r3, #2]
 80056ca:	2b18      	cmp	r3, #24
 80056cc:	d003      	beq.n	80056d6 <itsdk_config_loadConfiguration+0x56>
			  force = 1;
 80056ce:	230e      	movs	r3, #14
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	2201      	movs	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
		  }
		  itsdk_config_sdk_resetToFactory();
 80056d6:	f7ff ff89 	bl	80055ec <itsdk_config_sdk_resetToFactory>
		  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,1);
 80056da:	4b28      	ldr	r3, [pc, #160]	; (800577c <itsdk_config_loadConfiguration+0xfc>)
 80056dc:	2101      	movs	r1, #1
 80056de:	0018      	movs	r0, r3
 80056e0:	f001 fcc8 	bl	8007074 <itsdk_error_report>
		  hasChanged=1;
 80056e4:	230f      	movs	r3, #15
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	2201      	movs	r2, #1
 80056ea:	701a      	strb	r2, [r3, #0]
	  }
	  #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  if ( force || itsdk_config.app.version != ITSDK_CONFIGURATION_APP_VERSION ) {
 80056ec:	230e      	movs	r3, #14
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <itsdk_config_loadConfiguration+0x7e>
 80056f6:	4b20      	ldr	r3, [pc, #128]	; (8005778 <itsdk_config_loadConfiguration+0xf8>)
 80056f8:	7e1b      	ldrb	r3, [r3, #24]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d019      	beq.n	8005732 <itsdk_config_loadConfiguration+0xb2>
		  itsdk_config_app_resetToFactory();
 80056fe:	f7ff ffad 	bl	800565c <itsdk_config_app_resetToFactory>
		  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,2);
 8005702:	4b1e      	ldr	r3, [pc, #120]	; (800577c <itsdk_config_loadConfiguration+0xfc>)
 8005704:	2102      	movs	r1, #2
 8005706:	0018      	movs	r0, r3
 8005708:	f001 fcb4 	bl	8007074 <itsdk_error_report>
		  hasChanged=1;
 800570c:	230f      	movs	r3, #15
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
  if ( mode != CONFIG_FORCE_TO_FACTORY && eeprom_read(&itsdk_config, sizeof(itsdk_configuration_nvm_t), 1,&v) ) {
 8005714:	e00d      	b.n	8005732 <itsdk_config_loadConfiguration+0xb2>
	  }
	  #endif
  } else {
	  hasChanged=1;
 8005716:	230f      	movs	r3, #15
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	2201      	movs	r2, #1
 800571c:	701a      	strb	r2, [r3, #0]
#endif
	#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	  // The data are not valid - reset to factory default
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 800571e:	4b17      	ldr	r3, [pc, #92]	; (800577c <itsdk_config_loadConfiguration+0xfc>)
 8005720:	2103      	movs	r1, #3
 8005722:	0018      	movs	r0, r3
 8005724:	f001 fca6 	bl	8007074 <itsdk_error_report>
	  itsdk_config_sdk_resetToFactory();
 8005728:	f7ff ff60 	bl	80055ec <itsdk_config_sdk_resetToFactory>
	 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  itsdk_config_app_resetToFactory();
 800572c:	f7ff ff96 	bl	800565c <itsdk_config_app_resetToFactory>
 8005730:	e000      	b.n	8005734 <itsdk_config_loadConfiguration+0xb4>
  if ( mode != CONFIG_FORCE_TO_FACTORY && eeprom_read(&itsdk_config, sizeof(itsdk_configuration_nvm_t), 1,&v) ) {
 8005732:	46c0      	nop			; (mov r8, r8)
	 #endif
    #endif
#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  }
  if ( hasChanged != 0 ) {
 8005734:	230f      	movs	r3, #15
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00f      	beq.n	800575e <itsdk_config_loadConfiguration+0xde>
     eeprom_write(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <itsdk_config_loadConfiguration+0xf8>)
 8005740:	2201      	movs	r2, #1
 8005742:	211c      	movs	r1, #28
 8005744:	0018      	movs	r0, r3
 8005746:	f7ff fe8b 	bl	8005460 <eeprom_write>
	  bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
	  return CONFIG_LOADED;
  }
#endif
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
  bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <itsdk_config_loadConfiguration+0x100>)
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <itsdk_config_loadConfiguration+0xf8>)
 800574e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005750:	c313      	stmia	r3!, {r0, r1, r4}
 8005752:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005754:	c313      	stmia	r3!, {r0, r1, r4}
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	601a      	str	r2, [r3, #0]
#endif
  return CONFIG_RESTORED_FROM_FACTORY;
 800575a:	2302      	movs	r3, #2
 800575c:	e008      	b.n	8005770 <itsdk_config_loadConfiguration+0xf0>
	  bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 800575e:	4b08      	ldr	r3, [pc, #32]	; (8005780 <itsdk_config_loadConfiguration+0x100>)
 8005760:	4a05      	ldr	r2, [pc, #20]	; (8005778 <itsdk_config_loadConfiguration+0xf8>)
 8005762:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005764:	c313      	stmia	r3!, {r0, r1, r4}
 8005766:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005768:	c313      	stmia	r3!, {r0, r1, r4}
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	601a      	str	r2, [r3, #0]
	  return CONFIG_LOADED;
 800576e:	2301      	movs	r3, #1
}
 8005770:	0018      	movs	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	b005      	add	sp, #20
 8005776:	bd90      	pop	{r4, r7, pc}
 8005778:	20000404 	.word	0x20000404
 800577c:	50000071 	.word	0x50000071
 8005780:	200003e8 	.word	0x200003e8

08005784 <itsdk_state_init>:
#if ITSDK_WITH_CONSOLE == __ENABLE
#include <it_sdk/console/console.h>
#endif
itsdk_state_t itsdk_state;

void itsdk_state_init() {
 8005784:	b5b0      	push	{r4, r5, r7, lr}
 8005786:	af00      	add	r7, sp, #0
	itsdk_state.lastWakeUpTimeUs = 0;
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <itsdk_state_init+0x2c>)
 800578a:	2300      	movs	r3, #0
 800578c:	2400      	movs	r4, #0
 800578e:	6093      	str	r3, [r2, #8]
 8005790:	60d4      	str	r4, [r2, #12]
	itsdk_state.lastResetCause = itsdk_getResetCause();
 8005792:	f002 fd0d 	bl	80081b0 <itsdk_getResetCause>
 8005796:	0003      	movs	r3, r0
 8005798:	001a      	movs	r2, r3
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <itsdk_state_init+0x2c>)
 800579c:	701a      	strb	r2, [r3, #0]

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	itsdk_state.activeNetwork = (uint8_t)itsdk_config.sdk.activeNetwork;
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <itsdk_state_init+0x30>)
 80057a0:	88db      	ldrh	r3, [r3, #6]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <itsdk_state_init+0x2c>)
 80057a6:	705a      	strb	r2, [r3, #1]
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

	return;
 80057a8:	46c0      	nop			; (mov r8, r8)
}
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bdb0      	pop	{r4, r5, r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	20000420 	.word	0x20000420
 80057b4:	20000404 	.word	0x20000404

080057b8 <_itsdk_secstore_getOffset>:
/**
 * Compute the offset of a block in the EEPROM Memory for a given
 * Entry ID.
 *
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getOffset(uint32_t * offset, uint8_t * blockId, itsdk_secStoreBlocks_e block ) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	1dfb      	adds	r3, r7, #7
 80057c4:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreBlocks_t * fakeStore = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
	uint32_t _offset;
	switch (block) {
 80057ca:	1dfb      	adds	r3, r7, #7
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b13      	cmp	r3, #19
 80057d0:	d83d      	bhi.n	800584e <_itsdk_secstore_getOffset+0x96>
 80057d2:	009a      	lsls	r2, r3, #2
 80057d4:	4b27      	ldr	r3, [pc, #156]	; (8005874 <_itsdk_secstore_getOffset+0xbc>)
 80057d6:	18d3      	adds	r3, r2, r3
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	469f      	mov	pc, r3
	case ITSDK_SS_CONSOLEKEY:
		_offset = (uint32_t)&fakeStore->consolePasswd;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	617b      	str	r3, [r7, #20]
		break;
 80057e0:	e037      	b.n	8005852 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_SIGFOXKEY:
	  #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->sigfoxKey;
	  #else
		return SS_FAILED_NOTEXISTING;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e041      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	case ITSDK_SS_LORA_ABP_NETIDDEVID:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netID_devID;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	3310      	adds	r3, #16
 80057ea:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80057ec:	e031      	b.n	8005852 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYF:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeyf;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3320      	adds	r3, #32
 80057f2:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80057f4:	e02d      	b.n	8005852 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYS:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeys;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3330      	adds	r3, #48	; 0x30
 80057fa:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 80057fc:	e029      	b.n	8005852 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netSkey;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3340      	adds	r3, #64	; 0x40
 8005802:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8005804:	e025      	b.n	8005852 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_APPSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.appSkey;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3350      	adds	r3, #80	; 0x50
 800580a:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 800580c:	e021      	b.n	8005852 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.devEUI_appAUI;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	3310      	adds	r3, #16
 8005812:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8005814:	e01d      	b.n	8005852 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_APPKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.appKey;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	3320      	adds	r3, #32
 800581a:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 800581c:	e019      	b.n	8005852 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_NWKKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.nwkKey;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	3330      	adds	r3, #48	; 0x30
 8005822:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8005824:	e015      	b.n	8005852 <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_AES_MASTERK:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0 ) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && (( ITSDK_LORAWAN_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0) )
		_offset = (uint32_t)&fakeStore->aesMasterKey;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8005826:	2301      	movs	r3, #1
 8005828:	e01f      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_AES_SHARED_NONCE_SPECKKEY:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0 ))
		_offset = (uint32_t)&fakeStore->encryptSharedNonceSpeck;
  	  #else
		return SS_FAILED_NOTEXISTING;
 800582a:	2301      	movs	r3, #1
 800582c:	e01d      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER0:
	  #if ITSDK_SECSTORE_USRBLOCK >= 1
		_offset = (uint32_t)&fakeStore->user[0];
  	  #else
		return SS_FAILED_NOTEXISTING;
 800582e:	2301      	movs	r3, #1
 8005830:	e01b      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER1:
	  #if ITSDK_SECSTORE_USRBLOCK >= 2
		_offset = (uint32_t)&fakeStore->user[1];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8005832:	2301      	movs	r3, #1
 8005834:	e019      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER2:
	  #if ITSDK_SECSTORE_USRBLOCK >= 3
		_offset = (uint32_t)&fakeStore->user[2];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8005836:	2301      	movs	r3, #1
 8005838:	e017      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER3:
	  #if ITSDK_SECSTORE_USRBLOCK >= 4
		_offset = (uint32_t)&fakeStore->user[3];
  	  #else
		return SS_FAILED_NOTEXISTING;
 800583a:	2301      	movs	r3, #1
 800583c:	e015      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER4:
	  #if ITSDK_SECSTORE_USRBLOCK >= 5
		_offset = (uint32_t)&fakeStore->user[4];
  	  #else
		return SS_FAILED_NOTEXISTING;
 800583e:	2301      	movs	r3, #1
 8005840:	e013      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER5:
	  #if ITSDK_SECSTORE_USRBLOCK >= 6
		_offset = (uint32_t)&fakeStore->user[5];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8005842:	2301      	movs	r3, #1
 8005844:	e011      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER6:
	  #if ITSDK_SECSTORE_USRBLOCK >= 7
		_offset = (uint32_t)&fakeStore->user[6];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8005846:	2301      	movs	r3, #1
 8005848:	e00f      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER7:
	  #if ITSDK_SECSTORE_USRBLOCK >= 8
		_offset = (uint32_t)&fakeStore->user[7];
  	  #else
		return SS_FAILED_NOTEXISTING;
 800584a:	2301      	movs	r3, #1
 800584c:	e00d      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	default:
		return SS_FAILED_NOTEXISTING;
 800584e:	2301      	movs	r3, #1
 8005850:	e00b      	b.n	800586a <_itsdk_secstore_getOffset+0xb2>

	}
	*blockId = (_offset/16);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	701a      	strb	r2, [r3, #0]
	_offset+=sizeof(itsdk_secStoreHead_t);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	3310      	adds	r3, #16
 8005860:	617b      	str	r3, [r7, #20]
	*offset=_offset;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8005868:	2300      	movs	r3, #0
}
 800586a:	0018      	movs	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	b006      	add	sp, #24
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	08009bf8 	.word	0x08009bf8

08005878 <_itsdk_secstore_getEntries>:

/**
 * Evaluate the number of block entries regarding the configuration
 * The size is a static value.
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getEntries(uint8_t * entries) {
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	uint8_t _entries=1;	// at lease the console
 8005880:	210f      	movs	r1, #15
 8005882:	187b      	adds	r3, r7, r1
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
   #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
	_entries++;
   #endif
   #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
   _entries+=5;
 8005888:	187b      	adds	r3, r7, r1
 800588a:	187a      	adds	r2, r7, r1
 800588c:	7812      	ldrb	r2, [r2, #0]
 800588e:	3205      	adds	r2, #5
 8005890:	701a      	strb	r2, [r3, #0]
   #endif
   #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
	_entries+=2;
   #endif
	_entries+=ITSDK_SECSTORE_USRBLOCK;
 8005892:	187b      	adds	r3, r7, r1
 8005894:	187a      	adds	r2, r7, r1
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	701a      	strb	r2, [r3, #0]
	*entries=_entries;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	187a      	adds	r2, r7, r1
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	701a      	strb	r2, [r3, #0]
	return SS_SUCCESS;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	0018      	movs	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b004      	add	sp, #16
 80058aa:	bd80      	pop	{r7, pc}

080058ac <_itsdk_secstore_controlHeader>:

static itsdk_secStoreReturn_e _itsdk_secstore_controlHeader(itsdk_secStoreHead_t * _head) {
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
	// Read the header
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) _head, sizeof(itsdk_secStoreHead_t));
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	2310      	movs	r3, #16
 80058b8:	2100      	movs	r1, #0
 80058ba:	2000      	movs	r0, #0
 80058bc:	f002 fef0 	bl	80086a0 <_eeprom_read>
	// Control the header validity
	if ( _head->magic1 != ITSDK_SECSTORE_EEPROM_MAGIC ) return SS_FAILED_NOTINITIALIZED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	220f      	movs	r2, #15
 80058c6:	4013      	ands	r3, r2
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b0c      	cmp	r3, #12
 80058cc:	d001      	beq.n	80058d2 <_itsdk_secstore_controlHeader+0x26>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e011      	b.n	80058f6 <_itsdk_secstore_controlHeader+0x4a>
	uint8_t _count;
	_itsdk_secstore_getEntries(&_count);
 80058d2:	240f      	movs	r4, #15
 80058d4:	193b      	adds	r3, r7, r4
 80058d6:	0018      	movs	r0, r3
 80058d8:	f7ff ffce 	bl	8005878 <_itsdk_secstore_getEntries>
	if ( _head->blockCount != _count) return SS_FAILED_NOTINITIALIZED;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	061b      	lsls	r3, r3, #24
 80058e2:	0f1b      	lsrs	r3, r3, #28
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	001a      	movs	r2, r3
 80058e8:	193b      	adds	r3, r7, r4
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <_itsdk_secstore_controlHeader+0x48>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e000      	b.n	80058f6 <_itsdk_secstore_controlHeader+0x4a>
	return SS_SUCCESS;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	0018      	movs	r0, r3
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b005      	add	sp, #20
 80058fc:	bd90      	pop	{r4, r7, pc}

080058fe <itsdk_secstore_getStoreSize>:

/**
 * Return the store size in byte.
 * This function is use to determine the configuration starting address => after the secureStore
 */
itsdk_secStoreReturn_e itsdk_secstore_getStoreSize(uint32_t * sz) {
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
	*sz=sizeof(itsdk_secStoreHead_t)+sizeof(itsdk_secStoreBlocks_t);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2270      	movs	r2, #112	; 0x70
 800590a:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 800590c:	2300      	movs	r3, #0
}
 800590e:	0018      	movs	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	b002      	add	sp, #8
 8005914:	bd80      	pop	{r7, pc}

08005916 <itsdk_secstore_generateMasterKey>:
 * For this reason the transformation executed here is going to be simple.
 * Params:
 *   dynamicKey is 12B long
 *   masterKey is 16B long
 */
__weak void itsdk_secstore_generateMasterKey(uint8_t * dynamicKey,uint8_t * masterKey) {
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]

	// we are creating a 16B array from the elements available
	uint8_t _devId[4];
	itsdk_getUniqId(_devId,4);
 8005920:	2308      	movs	r3, #8
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	2104      	movs	r1, #4
 8005926:	0018      	movs	r0, r3
 8005928:	f002 fc9a 	bl	8008260 <itsdk_getUniqId>

	for ( int i = 0 ; i < 16 ; i++ ) {
 800592c:	2300      	movs	r3, #0
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	e081      	b.n	8005a36 <itsdk_secstore_generateMasterKey+0x120>
		if ( i < 2 ) {											// 0, 1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b01      	cmp	r3, #1
 8005936:	dc21      	bgt.n	800597c <itsdk_secstore_generateMasterKey+0x66>
			masterKey[i] = _devId[i];
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	18d3      	adds	r3, r2, r3
 800593e:	2208      	movs	r2, #8
 8005940:	18b9      	adds	r1, r7, r2
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	188a      	adds	r2, r1, r2
 8005946:	7812      	ldrb	r2, [r2, #0]
 8005948:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i];
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	18d3      	adds	r3, r2, r3
 8005950:	7819      	ldrb	r1, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	18d3      	adds	r3, r2, r3
 8005958:	781a      	ldrb	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6838      	ldr	r0, [r7, #0]
 800595e:	18c3      	adds	r3, r0, r3
 8005960:	404a      	eors	r2, r1
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
			masterKey[i] += (ITSDK_PROTECT_KEY >> 9) & 0xFF;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	18d3      	adds	r3, r2, r3
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	18cb      	adds	r3, r1, r3
 8005974:	3a33      	subs	r2, #51	; 0x33
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	e059      	b.n	8005a30 <itsdk_secstore_generateMasterKey+0x11a>
		} else if ( i < 14 ) {									// 2 .. 13
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b0d      	cmp	r3, #13
 8005980:	dc33      	bgt.n	80059ea <itsdk_secstore_generateMasterKey+0xd4>
			masterKey[i] = dynamicKey[i-2];
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3b02      	subs	r3, #2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	18d2      	adds	r2, r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	18cb      	adds	r3, r1, r3
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= _devId[i & 3];
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	18d3      	adds	r3, r2, r3
 800599a:	7819      	ldrb	r1, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2203      	movs	r2, #3
 80059a0:	4013      	ands	r3, r2
 80059a2:	2208      	movs	r2, #8
 80059a4:	18ba      	adds	r2, r7, r2
 80059a6:	5cd2      	ldrb	r2, [r2, r3]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6838      	ldr	r0, [r7, #0]
 80059ac:	18c3      	adds	r3, r0, r3
 80059ae:	404a      	eors	r2, r1
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= (ITSDK_PROTECT_KEY >> 13) & 0xFF;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	18d3      	adds	r3, r2, r3
 80059ba:	781a      	ldrb	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	18cb      	adds	r3, r1, r3
 80059c2:	212c      	movs	r1, #44	; 0x2c
 80059c4:	404a      	eors	r2, r1
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= masterKey[i-1];
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	18d3      	adds	r3, r2, r3
 80059d0:	7819      	ldrb	r1, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	18d3      	adds	r3, r2, r3
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6838      	ldr	r0, [r7, #0]
 80059e0:	18c3      	adds	r3, r0, r3
 80059e2:	404a      	eors	r2, r1
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e022      	b.n	8005a30 <itsdk_secstore_generateMasterKey+0x11a>
		} else {												 // 14 .. 15
			masterKey[i] = _devId[3-(15-i)];
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3b0c      	subs	r3, #12
 80059ee:	001a      	movs	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	18cb      	adds	r3, r1, r3
 80059f6:	2108      	movs	r1, #8
 80059f8:	1879      	adds	r1, r7, r1
 80059fa:	5c8a      	ldrb	r2, [r1, r2]
 80059fc:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i-5];
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	18d3      	adds	r3, r2, r3
 8005a04:	7819      	ldrb	r1, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b05      	subs	r3, #5
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	18d3      	adds	r3, r2, r3
 8005a0e:	781a      	ldrb	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6838      	ldr	r0, [r7, #0]
 8005a14:	18c3      	adds	r3, r0, r3
 8005a16:	404a      	eors	r2, r1
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
			masterKey[i] -= (ITSDK_PROTECT_KEY >> 6) & 0xFF;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	18d3      	adds	r3, r2, r3
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	18cb      	adds	r3, r1, r3
 8005a2a:	3a6f      	subs	r2, #111	; 0x6f
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 16 ; i++ ) {
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3301      	adds	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b0f      	cmp	r3, #15
 8005a3a:	dc00      	bgt.n	8005a3e <itsdk_secstore_generateMasterKey+0x128>
 8005a3c:	e779      	b.n	8005932 <itsdk_secstore_generateMasterKey+0x1c>
		}
	}
	itsdk_encrypt_cifferKey(masterKey,16);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2110      	movs	r1, #16
 8005a42:	0018      	movs	r0, r3
 8005a44:	f000 f9be 	bl	8005dc4 <itsdk_encrypt_cifferKey>
}
 8005a48:	46c0      	nop			; (mov r8, r8)
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b004      	add	sp, #16
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <itsdk_secstore_readBlock>:

/**
 * Read the given block and returns the decrypted value into the buffer
 */
itsdk_secStoreReturn_e itsdk_secstore_readBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8005a50:	b590      	push	{r4, r7, lr}
 8005a52:	b08d      	sub	sp, #52	; 0x34
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	0002      	movs	r2, r0
 8005a58:	6039      	str	r1, [r7, #0]
 8005a5a:	1dfb      	adds	r3, r7, #7
 8005a5c:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control Header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8005a5e:	2320      	movs	r3, #32
 8005a60:	18fb      	adds	r3, r7, r3
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7ff ff22 	bl	80058ac <_itsdk_secstore_controlHeader>
 8005a68:	1e03      	subs	r3, r0, #0
 8005a6a:	d001      	beq.n	8005a70 <itsdk_secstore_readBlock+0x20>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e038      	b.n	8005ae2 <itsdk_secstore_readBlock+0x92>

	// Control the blockId validity
	uint32_t _offset = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8005a74:	211b      	movs	r1, #27
 8005a76:	187b      	adds	r3, r7, r1
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8005a7c:	1dfb      	adds	r3, r7, #7
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	1879      	adds	r1, r7, r1
 8005a82:	231c      	movs	r3, #28
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7ff fe96 	bl	80057b8 <_itsdk_secstore_getOffset>
 8005a8c:	1e03      	subs	r3, r0, #0
 8005a8e:	d001      	beq.n	8005a94 <itsdk_secstore_readBlock+0x44>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e026      	b.n	8005ae2 <itsdk_secstore_readBlock+0x92>

	// Control the blockId have been initialized
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) return SS_FAILED_NOTSET;
 8005a94:	2320      	movs	r3, #32
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	231b      	movs	r3, #27
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	411a      	asrs	r2, r3
 8005aaa:	0013      	movs	r3, r2
 8005aac:	2201      	movs	r2, #1
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d101      	bne.n	8005ab6 <itsdk_secstore_readBlock+0x66>
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e015      	b.n	8005ae2 <itsdk_secstore_readBlock+0x92>

	// Read block
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8005ab6:	69f9      	ldr	r1, [r7, #28]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	2310      	movs	r3, #16
 8005abc:	2000      	movs	r0, #0
 8005abe:	f002 fdef 	bl	80086a0 <_eeprom_read>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8005ac2:	2408      	movs	r4, #8
 8005ac4:	193a      	adds	r2, r7, r4
 8005ac6:	2320      	movs	r3, #32
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	3304      	adds	r3, #4
 8005acc:	0011      	movs	r1, r2
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f7ff ff21 	bl	8005916 <itsdk_secstore_generateMasterKey>

	// Decode with AES-128
	itsdk_aes_ecb_decrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8005ad4:	193b      	adds	r3, r7, r4
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6838      	ldr	r0, [r7, #0]
 8005ada:	2210      	movs	r2, #16
 8005adc:	f000 f932 	bl	8005d44 <itsdk_aes_ecb_decrypt_128B>

	return SS_SUCCESS;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b00d      	add	sp, #52	; 0x34
 8005ae8:	bd90      	pop	{r4, r7, pc}

08005aea <itsdk_secstore_writeBlock>:

/**
 * Encrypt and Write the given block into the store
 */
itsdk_secStoreReturn_e itsdk_secstore_writeBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8005aea:	b5b0      	push	{r4, r5, r7, lr}
 8005aec:	b08c      	sub	sp, #48	; 0x30
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	0002      	movs	r2, r0
 8005af2:	6039      	str	r1, [r7, #0]
 8005af4:	1dfb      	adds	r3, r7, #7
 8005af6:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8005af8:	2320      	movs	r3, #32
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7ff fed5 	bl	80058ac <_itsdk_secstore_controlHeader>
 8005b02:	1e03      	subs	r3, r0, #0
 8005b04:	d001      	beq.n	8005b0a <itsdk_secstore_writeBlock+0x20>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e061      	b.n	8005bce <itsdk_secstore_writeBlock+0xe4>

	// Control the blockId validity
	uint32_t _offset = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8005b0e:	211b      	movs	r1, #27
 8005b10:	187b      	adds	r3, r7, r1
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8005b16:	1dfb      	adds	r3, r7, #7
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	1879      	adds	r1, r7, r1
 8005b1c:	231c      	movs	r3, #28
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	0018      	movs	r0, r3
 8005b22:	f7ff fe49 	bl	80057b8 <_itsdk_secstore_getOffset>
 8005b26:	1e03      	subs	r3, r0, #0
 8005b28:	d001      	beq.n	8005b2e <itsdk_secstore_writeBlock+0x44>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e04f      	b.n	8005bce <itsdk_secstore_writeBlock+0xe4>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8005b2e:	2408      	movs	r4, #8
 8005b30:	193a      	adds	r2, r7, r4
 8005b32:	2520      	movs	r5, #32
 8005b34:	197b      	adds	r3, r7, r5
 8005b36:	3304      	adds	r3, #4
 8005b38:	0011      	movs	r1, r2
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7ff feeb 	bl	8005916 <itsdk_secstore_generateMasterKey>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8005b40:	193b      	adds	r3, r7, r4
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6838      	ldr	r0, [r7, #0]
 8005b46:	2210      	movs	r2, #16
 8005b48:	f000 f8b8 	bl	8005cbc <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8005b4c:	69f9      	ldr	r1, [r7, #28]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	2310      	movs	r3, #16
 8005b52:	2000      	movs	r0, #0
 8005b54:	f002 fd10 	bl	8008578 <_eeprom_write>

	// Update the header
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) {
 8005b58:	197b      	adds	r3, r7, r5
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	0c1b      	lsrs	r3, r3, #16
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	001a      	movs	r2, r3
 8005b64:	231b      	movs	r3, #27
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	411a      	asrs	r2, r3
 8005b6c:	0013      	movs	r3, r2
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4013      	ands	r3, r2
 8005b72:	d12b      	bne.n	8005bcc <itsdk_secstore_writeBlock+0xe2>
		_head.blockUsed |= ( 1 << _id );
 8005b74:	2520      	movs	r5, #32
 8005b76:	197b      	adds	r3, r7, r5
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	b21a      	sxth	r2, r3
 8005b82:	231b      	movs	r3, #27
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	0019      	movs	r1, r3
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	408b      	lsls	r3, r1
 8005b8e:	b21b      	sxth	r3, r3
 8005b90:	4313      	orrs	r3, r2
 8005b92:	b21b      	sxth	r3, r3
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	197b      	adds	r3, r7, r5
 8005b98:	3301      	adds	r3, #1
 8005b9a:	21ff      	movs	r1, #255	; 0xff
 8005b9c:	4011      	ands	r1, r2
 8005b9e:	000c      	movs	r4, r1
 8005ba0:	7819      	ldrb	r1, [r3, #0]
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	4001      	ands	r1, r0
 8005ba6:	1c08      	adds	r0, r1, #0
 8005ba8:	1c21      	adds	r1, r4, #0
 8005baa:	4301      	orrs	r1, r0
 8005bac:	7019      	strb	r1, [r3, #0]
 8005bae:	0a12      	lsrs	r2, r2, #8
 8005bb0:	b290      	uxth	r0, r2
 8005bb2:	785a      	ldrb	r2, [r3, #1]
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	400a      	ands	r2, r1
 8005bb8:	1c11      	adds	r1, r2, #0
 8005bba:	1c02      	adds	r2, r0, #0
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	705a      	strb	r2, [r3, #1]
		_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8005bc0:	197a      	adds	r2, r7, r5
 8005bc2:	2310      	movs	r3, #16
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f002 fcd6 	bl	8008578 <_eeprom_write>
	}

	return SS_SUCCESS;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	0018      	movs	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b00c      	add	sp, #48	; 0x30
 8005bd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005bd8 <itsdk_secstore_init>:


/**
 * Init the Secure Store - create the store structure with the default values
 */
itsdk_secStoreReturn_e itsdk_secstore_init() {
 8005bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bda:	b08d      	sub	sp, #52	; 0x34
 8005bdc:	af00      	add	r7, sp, #0
	// Create the header
	itsdk_secStoreHead_t	_head;
	_head.magic1 = ITSDK_SECSTORE_EEPROM_MAGIC;
 8005bde:	2020      	movs	r0, #32
 8005be0:	0004      	movs	r4, r0
 8005be2:	183b      	adds	r3, r7, r0
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	210f      	movs	r1, #15
 8005be8:	438a      	bics	r2, r1
 8005bea:	1c11      	adds	r1, r2, #0
 8005bec:	220c      	movs	r2, #12
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	701a      	strb	r2, [r3, #0]
	uint8_t	count;
	_itsdk_secstore_getEntries(&count);
 8005bf2:	251f      	movs	r5, #31
 8005bf4:	197b      	adds	r3, r7, r5
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7ff fe3e 	bl	8005878 <_itsdk_secstore_getEntries>
	_head.blockCount=count;
 8005bfc:	197b      	adds	r3, r7, r5
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	1c1a      	adds	r2, r3, #0
 8005c02:	230f      	movs	r3, #15
 8005c04:	4013      	ands	r3, r2
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	193b      	adds	r3, r7, r4
 8005c0a:	0110      	lsls	r0, r2, #4
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	210f      	movs	r1, #15
 8005c10:	400a      	ands	r2, r1
 8005c12:	1c11      	adds	r1, r2, #0
 8005c14:	1c02      	adds	r2, r0, #0
 8005c16:	430a      	orrs	r2, r1
 8005c18:	701a      	strb	r2, [r3, #0]
	_head.blockUsed = 0x1;
 8005c1a:	0020      	movs	r0, r4
 8005c1c:	193b      	adds	r3, r7, r4
 8005c1e:	3301      	adds	r3, #1
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	2100      	movs	r1, #0
 8005c24:	400a      	ands	r2, r1
 8005c26:	1c11      	adds	r1, r2, #0
 8005c28:	2201      	movs	r2, #1
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	785a      	ldrb	r2, [r3, #1]
 8005c30:	2100      	movs	r1, #0
 8005c32:	400a      	ands	r2, r1
 8005c34:	705a      	strb	r2, [r3, #1]
	uint8_t _buff[12] = ITSDK_SECSTORE_DEFKEY;
 8005c36:	2110      	movs	r1, #16
 8005c38:	187b      	adds	r3, r7, r1
 8005c3a:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <itsdk_secstore_init+0xb8>)
 8005c3c:	ca70      	ldmia	r2!, {r4, r5, r6}
 8005c3e:	c370      	stmia	r3!, {r4, r5, r6}
	memcpy(_head.dynamicKey,_buff,12);
 8005c40:	183b      	adds	r3, r7, r0
 8005c42:	187a      	adds	r2, r7, r1
 8005c44:	3304      	adds	r3, #4
 8005c46:	ca32      	ldmia	r2!, {r1, r4, r5}
 8005c48:	c332      	stmia	r3!, {r1, r4, r5}

	// Store it
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8005c4a:	183a      	adds	r2, r7, r0
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	2100      	movs	r1, #0
 8005c50:	2000      	movs	r0, #0
 8005c52:	f002 fc91 	bl	8008578 <_eeprom_write>

	// Init the console login
	uint8_t _buff2[16] = ITSDK_SECSTORE_CONSOLEKEY;
 8005c56:	0039      	movs	r1, r7
 8005c58:	4a0e      	ldr	r2, [pc, #56]	; (8005c94 <itsdk_secstore_init+0xbc>)
 8005c5a:	000b      	movs	r3, r1
 8005c5c:	ca11      	ldmia	r2!, {r0, r4}
 8005c5e:	c311      	stmia	r3!, {r0, r4}
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	2309      	movs	r3, #9
 8005c66:	18cb      	adds	r3, r1, r3
 8005c68:	2207      	movs	r2, #7
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f003 fad1 	bl	8009214 <memset>
	itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY,_buff2);
 8005c72:	003b      	movs	r3, r7
 8005c74:	0019      	movs	r1, r3
 8005c76:	2000      	movs	r0, #0
 8005c78:	f7ff ff37 	bl	8005aea <itsdk_secstore_writeBlock>
	bzero(_buff2,16);
 8005c7c:	003b      	movs	r3, r7
 8005c7e:	2110      	movs	r1, #16
 8005c80:	0018      	movs	r0, r3
 8005c82:	f003 fa7b 	bl	800917c <bzero>

	return SS_SUCCESS;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b00d      	add	sp, #52	; 0x34
 8005c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c90:	08009ae4 	.word	0x08009ae4
 8005c94:	08009af0 	.word	0x08009af0

08005c98 <itsdk_secstore_isInit>:

/**
 * Return SS_SUCCESS when the secure Store is already initialized
 */
itsdk_secStoreReturn_e itsdk_secstore_isInit() {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
	itsdk_secStoreHead_t	_head;
	// Control header validity
	return _itsdk_secstore_controlHeader(&_head);
 8005c9e:	003b      	movs	r3, r7
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7ff fe03 	bl	80058ac <_itsdk_secstore_controlHeader>
 8005ca6:	0003      	movs	r3, r0
}
 8005ca8:	0018      	movs	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b004      	add	sp, #16
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <itsdk_secStore_RegisterConsole>:
}
static itsdk_console_chain_t __console_secStore;

#endif // ITSDK_WITH_CONSOLE

itsdk_secStoreReturn_e itsdk_secStore_RegisterConsole() {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
	__console_secStore.console_private = _itsdk_secStore_consolePriv;
	__console_secStore.console_public = NULL;
	__console_secStore.next = NULL;
	itsdk_console_registerCommand(&__console_secStore);
#endif
	return SS_SUCCESS;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <itsdk_aes_ecb_encrypt_128B>:
void itsdk_aes_ecb_encrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 8005cbc:	b5b0      	push	{r4, r5, r7, lr}
 8005cbe:	b0b8      	sub	sp, #224	; 0xe0
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	1dfb      	adds	r3, r7, #7
 8005cca:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2110      	movs	r1, #16
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f000 f8cd 	bl	8005e70 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 8005cd6:	24d0      	movs	r4, #208	; 0xd0
 8005cd8:	193a      	adds	r2, r7, r4
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	0010      	movs	r0, r2
 8005cde:	0019      	movs	r1, r3
 8005ce0:	2310      	movs	r3, #16
 8005ce2:	001a      	movs	r2, r3
 8005ce4:	f003 fa7a 	bl	80091dc <memcpy>
	bzero(ctx.Iv,16);
 8005ce8:	2510      	movs	r5, #16
 8005cea:	197b      	adds	r3, r7, r5
 8005cec:	33b0      	adds	r3, #176	; 0xb0
 8005cee:	2110      	movs	r1, #16
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f003 fa43 	bl	800917c <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	197b      	adds	r3, r7, r5
 8005cfa:	0011      	movs	r1, r2
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f000 f9c5 	bl	800608c <tiny_AES_init_ctx>
	tiny_AES_CBC_encrypt_buffer(&ctx, aesResult, 16);
 8005d02:	1939      	adds	r1, r7, r4
 8005d04:	197b      	adds	r3, r7, r5
 8005d06:	2210      	movs	r2, #16
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f001 f8d8 	bl	8006ebe <tiny_AES_CBC_encrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2110      	movs	r1, #16
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 f856 	bl	8005dc4 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	193b      	adds	r3, r7, r4
 8005d1c:	0010      	movs	r0, r2
 8005d1e:	0019      	movs	r1, r3
 8005d20:	2310      	movs	r3, #16
 8005d22:	001a      	movs	r2, r3
 8005d24:	f003 fa5a 	bl	80091dc <memcpy>
	bzero(aesResult,16);
 8005d28:	193b      	adds	r3, r7, r4
 8005d2a:	2110      	movs	r1, #16
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f003 fa25 	bl	800917c <bzero>
	bzero(&ctx,sizeof(struct AES_ctx));
 8005d32:	197b      	adds	r3, r7, r5
 8005d34:	21c0      	movs	r1, #192	; 0xc0
 8005d36:	0018      	movs	r0, r3
 8005d38:	f003 fa20 	bl	800917c <bzero>
}
 8005d3c:	46c0      	nop			; (mov r8, r8)
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b038      	add	sp, #224	; 0xe0
 8005d42:	bdb0      	pop	{r4, r5, r7, pc}

08005d44 <itsdk_aes_ecb_decrypt_128B>:
void itsdk_aes_ecb_decrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 8005d44:	b5b0      	push	{r4, r5, r7, lr}
 8005d46:	b0b8      	sub	sp, #224	; 0xe0
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	1dfb      	adds	r3, r7, #7
 8005d52:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2110      	movs	r1, #16
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f000 f889 	bl	8005e70 <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 8005d5e:	24d0      	movs	r4, #208	; 0xd0
 8005d60:	193a      	adds	r2, r7, r4
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	0010      	movs	r0, r2
 8005d66:	0019      	movs	r1, r3
 8005d68:	2310      	movs	r3, #16
 8005d6a:	001a      	movs	r2, r3
 8005d6c:	f003 fa36 	bl	80091dc <memcpy>
	bzero(ctx.Iv,16);
 8005d70:	2510      	movs	r5, #16
 8005d72:	197b      	adds	r3, r7, r5
 8005d74:	33b0      	adds	r3, #176	; 0xb0
 8005d76:	2110      	movs	r1, #16
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f003 f9ff 	bl	800917c <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	197b      	adds	r3, r7, r5
 8005d82:	0011      	movs	r1, r2
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 f981 	bl	800608c <tiny_AES_init_ctx>
	tiny_AES_CBC_decrypt_buffer(&ctx, aesResult, 16);
 8005d8a:	1939      	adds	r1, r7, r4
 8005d8c:	197b      	adds	r3, r7, r5
 8005d8e:	2210      	movs	r2, #16
 8005d90:	0018      	movs	r0, r3
 8005d92:	f001 f8c3 	bl	8006f1c <tiny_AES_CBC_decrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2110      	movs	r1, #16
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f000 f812 	bl	8005dc4 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	193b      	adds	r3, r7, r4
 8005da4:	0010      	movs	r0, r2
 8005da6:	0019      	movs	r1, r3
 8005da8:	2310      	movs	r3, #16
 8005daa:	001a      	movs	r2, r3
 8005dac:	f003 fa16 	bl	80091dc <memcpy>
	bzero(aesResult,16);
 8005db0:	193b      	adds	r3, r7, r4
 8005db2:	2110      	movs	r1, #16
 8005db4:	0018      	movs	r0, r3
 8005db6:	f003 f9e1 	bl	800917c <bzero>
}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b038      	add	sp, #224	; 0xe0
 8005dc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005dc4 <itsdk_encrypt_cifferKey>:
/**
 * Protect inMemory key with a simple XOR with a hardcoded
 * 32b value. Not good at all but always better than clear
 * text key in memory.
 */
void itsdk_encrypt_cifferKey(uint8_t * key, int len) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]

	if ( (len & 3 ) > 0 ) {
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dd06      	ble.n	8005de6 <itsdk_encrypt_cifferKey+0x22>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_ENCRYP_INVALID_DATALEN,(uint16_t)len);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <itsdk_encrypt_cifferKey+0xa8>)
 8005dde:	0019      	movs	r1, r3
 8005de0:	0010      	movs	r0, r2
 8005de2:	f001 f947 	bl	8007074 <itsdk_error_report>
	}
	for ( int i = 0 ; i < len ; i+=4 ) {
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e037      	b.n	8005e5c <itsdk_encrypt_cifferKey+0x98>
		key[i]   ^= (ITSDK_PROTECT_KEY & 0xFF000000) >> 24;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	18d3      	adds	r3, r2, r3
 8005df2:	781a      	ldrb	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	18cb      	adds	r3, r1, r3
 8005dfa:	2159      	movs	r1, #89	; 0x59
 8005dfc:	4249      	negs	r1, r1
 8005dfe:	404a      	eors	r2, r1
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]
		key[i+1] ^= (ITSDK_PROTECT_KEY & 0x00FF0000) >> 16;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	18d3      	adds	r3, r2, r3
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3301      	adds	r3, #1
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	18cb      	adds	r3, r1, r3
 8005e16:	2145      	movs	r1, #69	; 0x45
 8005e18:	404a      	eors	r2, r1
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]
		key[i+2] ^= (ITSDK_PROTECT_KEY & 0x0000FF00) >> 8;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3302      	adds	r3, #2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	18d3      	adds	r3, r2, r3
 8005e26:	781a      	ldrb	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3302      	adds	r3, #2
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	18cb      	adds	r3, r1, r3
 8005e30:	2165      	movs	r1, #101	; 0x65
 8005e32:	4249      	negs	r1, r1
 8005e34:	404a      	eors	r2, r1
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]
		key[i+3] ^= (ITSDK_PROTECT_KEY & 0x000000FF);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3303      	adds	r3, #3
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	18d3      	adds	r3, r2, r3
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3303      	adds	r3, #3
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	18cb      	adds	r3, r1, r3
 8005e4c:	213d      	movs	r1, #61	; 0x3d
 8005e4e:	4249      	negs	r1, r1
 8005e50:	404a      	eors	r2, r1
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < len ; i+=4 ) {
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	dbc3      	blt.n	8005dec <itsdk_encrypt_cifferKey+0x28>
	}
}
 8005e64:	46c0      	nop			; (mov r8, r8)
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b004      	add	sp, #16
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	d0000020 	.word	0xd0000020

08005e70 <itsdk_encrypt_unCifferKey>:

/**
 * Un protect inMemory key.
 */
void itsdk_encrypt_unCifferKey(uint8_t * key, int len) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	itsdk_encrypt_cifferKey(key,len);
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	0011      	movs	r1, r2
 8005e80:	0018      	movs	r0, r3
 8005e82:	f7ff ff9f 	bl	8005dc4 <itsdk_encrypt_cifferKey>
}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b002      	add	sp, #8
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <itsdk_encrypt_resetFactoryDefaults>:
	}
	bzero(buffer,16);
	return ENCRYPT_RETURN_SUCESS;
}
#else
itsdk_encrypt_return_t itsdk_encrypt_resetFactoryDefaults(bool force) {
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	0002      	movs	r2, r0
 8005e96:	1dfb      	adds	r3, r7, #7
 8005e98:	701a      	strb	r2, [r3, #0]
	return ENCRYPT_RETURN_SUCESS;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b002      	add	sp, #8
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	e030      	b.n	8005f16 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	18d2      	adds	r2, r2, r3
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	18cb      	adds	r3, r1, r3
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	3301      	adds	r3, #1
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	18d2      	adds	r2, r2, r3
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	18cb      	adds	r3, r1, r3
 8005edc:	7812      	ldrb	r2, [r2, #0]
 8005ede:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	18d2      	adds	r2, r2, r3
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	3302      	adds	r3, #2
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	18cb      	adds	r3, r1, r3
 8005ef4:	7812      	ldrb	r2, [r2, #0]
 8005ef6:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	3303      	adds	r3, #3
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	18d2      	adds	r2, r2, r3
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	3303      	adds	r3, #3
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	18cb      	adds	r3, r1, r3
 8005f0c:	7812      	ldrb	r2, [r2, #0]
 8005f0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	3301      	adds	r3, #1
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d9cb      	bls.n	8005eb4 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	e0a4      	b.n	800606c <KeyExpansion+0x1c8>
  {
    {
      k = (i - 1) * 4;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4a55      	ldr	r2, [pc, #340]	; (800607c <KeyExpansion+0x1d8>)
 8005f26:	4694      	mov	ip, r2
 8005f28:	4463      	add	r3, ip
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	18d3      	adds	r3, r2, r3
 8005f34:	781a      	ldrb	r2, [r3, #0]
 8005f36:	210c      	movs	r1, #12
 8005f38:	187b      	adds	r3, r7, r1
 8005f3a:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	18d3      	adds	r3, r2, r3
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	187b      	adds	r3, r7, r1
 8005f48:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	18d3      	adds	r3, r2, r3
 8005f52:	781a      	ldrb	r2, [r3, #0]
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	3303      	adds	r3, #3
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	18d3      	adds	r3, r2, r3
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	187b      	adds	r3, r7, r1
 8005f64:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2203      	movs	r2, #3
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d13b      	bne.n	8005fe6 <KeyExpansion+0x142>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8005f6e:	2117      	movs	r1, #23
 8005f70:	187b      	adds	r3, r7, r1
 8005f72:	200c      	movs	r0, #12
 8005f74:	183a      	adds	r2, r7, r0
 8005f76:	7812      	ldrb	r2, [r2, #0]
 8005f78:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 8005f7a:	183b      	adds	r3, r7, r0
 8005f7c:	785a      	ldrb	r2, [r3, #1]
 8005f7e:	183b      	adds	r3, r7, r0
 8005f80:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 8005f82:	183b      	adds	r3, r7, r0
 8005f84:	789a      	ldrb	r2, [r3, #2]
 8005f86:	183b      	adds	r3, r7, r0
 8005f88:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 8005f8a:	183b      	adds	r3, r7, r0
 8005f8c:	78da      	ldrb	r2, [r3, #3]
 8005f8e:	183b      	adds	r3, r7, r0
 8005f90:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 8005f92:	183b      	adds	r3, r7, r0
 8005f94:	187a      	adds	r2, r7, r1
 8005f96:	7812      	ldrb	r2, [r2, #0]
 8005f98:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8005f9a:	183b      	adds	r3, r7, r0
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	001a      	movs	r2, r3
 8005fa0:	4b37      	ldr	r3, [pc, #220]	; (8006080 <KeyExpansion+0x1dc>)
 8005fa2:	5c9a      	ldrb	r2, [r3, r2]
 8005fa4:	183b      	adds	r3, r7, r0
 8005fa6:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 8005fa8:	183b      	adds	r3, r7, r0
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	001a      	movs	r2, r3
 8005fae:	4b34      	ldr	r3, [pc, #208]	; (8006080 <KeyExpansion+0x1dc>)
 8005fb0:	5c9a      	ldrb	r2, [r3, r2]
 8005fb2:	183b      	adds	r3, r7, r0
 8005fb4:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 8005fb6:	183b      	adds	r3, r7, r0
 8005fb8:	789b      	ldrb	r3, [r3, #2]
 8005fba:	001a      	movs	r2, r3
 8005fbc:	4b30      	ldr	r3, [pc, #192]	; (8006080 <KeyExpansion+0x1dc>)
 8005fbe:	5c9a      	ldrb	r2, [r3, r2]
 8005fc0:	183b      	adds	r3, r7, r0
 8005fc2:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 8005fc4:	183b      	adds	r3, r7, r0
 8005fc6:	78db      	ldrb	r3, [r3, #3]
 8005fc8:	001a      	movs	r2, r3
 8005fca:	4b2d      	ldr	r3, [pc, #180]	; (8006080 <KeyExpansion+0x1dc>)
 8005fcc:	5c9a      	ldrb	r2, [r3, r2]
 8005fce:	183b      	adds	r3, r7, r0
 8005fd0:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8005fd2:	183b      	adds	r3, r7, r0
 8005fd4:	781a      	ldrb	r2, [r3, #0]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	089b      	lsrs	r3, r3, #2
 8005fda:	492a      	ldr	r1, [pc, #168]	; (8006084 <KeyExpansion+0x1e0>)
 8005fdc:	5ccb      	ldrb	r3, [r1, r3]
 8005fde:	4053      	eors	r3, r2
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	183b      	adds	r3, r7, r0
 8005fe4:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4a26      	ldr	r2, [pc, #152]	; (8006088 <KeyExpansion+0x1e4>)
 8005ff0:	4694      	mov	ip, r2
 8005ff2:	4463      	add	r3, ip
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	18d3      	adds	r3, r2, r3
 8005ffe:	7819      	ldrb	r1, [r3, #0]
 8006000:	240c      	movs	r4, #12
 8006002:	193b      	adds	r3, r7, r4
 8006004:	781a      	ldrb	r2, [r3, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	18c3      	adds	r3, r0, r3
 800600c:	404a      	eors	r2, r1
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	3301      	adds	r3, #1
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	18d3      	adds	r3, r2, r3
 800601a:	7819      	ldrb	r1, [r3, #0]
 800601c:	193b      	adds	r3, r7, r4
 800601e:	785a      	ldrb	r2, [r3, #1]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	3301      	adds	r3, #1
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	18c3      	adds	r3, r0, r3
 8006028:	404a      	eors	r2, r1
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	3302      	adds	r3, #2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	18d3      	adds	r3, r2, r3
 8006036:	7819      	ldrb	r1, [r3, #0]
 8006038:	193b      	adds	r3, r7, r4
 800603a:	789a      	ldrb	r2, [r3, #2]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	3302      	adds	r3, #2
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	18c3      	adds	r3, r0, r3
 8006044:	404a      	eors	r2, r1
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	3303      	adds	r3, #3
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	18d3      	adds	r3, r2, r3
 8006052:	7819      	ldrb	r1, [r3, #0]
 8006054:	193b      	adds	r3, r7, r4
 8006056:	78da      	ldrb	r2, [r3, #3]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	3303      	adds	r3, #3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	18c3      	adds	r3, r0, r3
 8006060:	404a      	eors	r2, r1
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3301      	adds	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b2b      	cmp	r3, #43	; 0x2b
 8006070:	d800      	bhi.n	8006074 <KeyExpansion+0x1d0>
 8006072:	e756      	b.n	8005f22 <KeyExpansion+0x7e>
  }
}
 8006074:	46c0      	nop			; (mov r8, r8)
 8006076:	46bd      	mov	sp, r7
 8006078:	b009      	add	sp, #36	; 0x24
 800607a:	bd90      	pop	{r4, r7, pc}
 800607c:	3fffffff 	.word	0x3fffffff
 8006080:	08009c48 	.word	0x08009c48
 8006084:	08009e48 	.word	0x08009e48
 8006088:	3ffffffc 	.word	0x3ffffffc

0800608c <tiny_AES_init_ctx>:

void tiny_AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	0011      	movs	r1, r2
 800609c:	0018      	movs	r0, r3
 800609e:	f7ff ff01 	bl	8005ea4 <KeyExpansion>
}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b002      	add	sp, #8
 80060a8:	bd80      	pop	{r7, pc}

080060aa <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 80060aa:	b5b0      	push	{r4, r5, r7, lr}
 80060ac:	b086      	sub	sp, #24
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	230f      	movs	r3, #15
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	1c02      	adds	r2, r0, #0
 80060ba:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80060bc:	2317      	movs	r3, #23
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	2200      	movs	r2, #0
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e038      	b.n	8006138 <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 80060c6:	2316      	movs	r3, #22
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	2200      	movs	r2, #0
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	e028      	b.n	8006122 <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 80060d0:	2517      	movs	r5, #23
 80060d2:	197b      	adds	r3, r7, r5
 80060d4:	781a      	ldrb	r2, [r3, #0]
 80060d6:	2416      	movs	r4, #22
 80060d8:	193b      	adds	r3, r7, r4
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	0092      	lsls	r2, r2, #2
 80060e0:	188a      	adds	r2, r1, r2
 80060e2:	5cd0      	ldrb	r0, [r2, r3]
 80060e4:	230f      	movs	r3, #15
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009a      	lsls	r2, r3, #2
 80060ec:	197b      	adds	r3, r7, r5
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	18d3      	adds	r3, r2, r3
 80060f2:	009a      	lsls	r2, r3, #2
 80060f4:	193b      	adds	r3, r7, r4
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	18d3      	adds	r3, r2, r3
 80060fa:	001a      	movs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	7819      	ldrb	r1, [r3, #0]
 8006102:	197b      	adds	r3, r7, r5
 8006104:	781a      	ldrb	r2, [r3, #0]
 8006106:	193b      	adds	r3, r7, r4
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	4041      	eors	r1, r0
 800610c:	b2c8      	uxtb	r0, r1
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	0092      	lsls	r2, r2, #2
 8006112:	188a      	adds	r2, r1, r2
 8006114:	1c01      	adds	r1, r0, #0
 8006116:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8006118:	193b      	adds	r3, r7, r4
 800611a:	193a      	adds	r2, r7, r4
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	3201      	adds	r2, #1
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	2316      	movs	r3, #22
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d9d1      	bls.n	80060d0 <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 800612c:	2217      	movs	r2, #23
 800612e:	18bb      	adds	r3, r7, r2
 8006130:	18ba      	adds	r2, r7, r2
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	3201      	adds	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	2317      	movs	r3, #23
 800613a:	18fb      	adds	r3, r7, r3
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b03      	cmp	r3, #3
 8006140:	d9c1      	bls.n	80060c6 <AddRoundKey+0x1c>
    }
  }
}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	46bd      	mov	sp, r7
 8006146:	b006      	add	sp, #24
 8006148:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800614c <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 800614c:	b5b0      	push	{r4, r5, r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8006154:	230f      	movs	r3, #15
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e02a      	b.n	80061b4 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 800615e:	230e      	movs	r3, #14
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	e01a      	b.n	800619e <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8006168:	240e      	movs	r4, #14
 800616a:	193b      	adds	r3, r7, r4
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	250f      	movs	r5, #15
 8006170:	197b      	adds	r3, r7, r5
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	0092      	lsls	r2, r2, #2
 8006178:	188a      	adds	r2, r1, r2
 800617a:	5cd3      	ldrb	r3, [r2, r3]
 800617c:	0018      	movs	r0, r3
 800617e:	193b      	adds	r3, r7, r4
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	197b      	adds	r3, r7, r5
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	4910      	ldr	r1, [pc, #64]	; (80061c8 <SubBytes+0x7c>)
 8006188:	5c08      	ldrb	r0, [r1, r0]
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	0092      	lsls	r2, r2, #2
 800618e:	188a      	adds	r2, r1, r2
 8006190:	1c01      	adds	r1, r0, #0
 8006192:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8006194:	193b      	adds	r3, r7, r4
 8006196:	193a      	adds	r2, r7, r4
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	3201      	adds	r2, #1
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	230e      	movs	r3, #14
 80061a0:	18fb      	adds	r3, r7, r3
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d9df      	bls.n	8006168 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 80061a8:	220f      	movs	r2, #15
 80061aa:	18bb      	adds	r3, r7, r2
 80061ac:	18ba      	adds	r2, r7, r2
 80061ae:	7812      	ldrb	r2, [r2, #0]
 80061b0:	3201      	adds	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	230f      	movs	r3, #15
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d9cf      	bls.n	800615e <SubBytes+0x12>
    }
  }
}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b004      	add	sp, #16
 80061c4:	bdb0      	pop	{r4, r5, r7, pc}
 80061c6:	46c0      	nop			; (mov r8, r8)
 80061c8:	08009c48 	.word	0x08009c48

080061cc <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 80061d4:	210f      	movs	r1, #15
 80061d6:	187b      	adds	r3, r7, r1
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	7852      	ldrb	r2, [r2, #1]
 80061dc:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	795a      	ldrb	r2, [r3, #5]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	7a5a      	ldrb	r2, [r3, #9]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	7b5a      	ldrb	r2, [r3, #13]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	187a      	adds	r2, r7, r1
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 80061fe:	187b      	adds	r3, r7, r1
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	7892      	ldrb	r2, [r2, #2]
 8006204:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	7a9a      	ldrb	r2, [r3, #10]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	187a      	adds	r2, r7, r1
 8006212:	7812      	ldrb	r2, [r2, #0]
 8006214:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8006216:	187b      	adds	r3, r7, r1
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	7992      	ldrb	r2, [r2, #6]
 800621c:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7b9a      	ldrb	r2, [r3, #14]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	187a      	adds	r2, r7, r1
 800622a:	7812      	ldrb	r2, [r2, #0]
 800622c:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 800622e:	187b      	adds	r3, r7, r1
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	78d2      	ldrb	r2, [r2, #3]
 8006234:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	7bda      	ldrb	r2, [r3, #15]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	7ada      	ldrb	r2, [r3, #11]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	79da      	ldrb	r2, [r3, #7]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	187a      	adds	r2, r7, r1
 8006252:	7812      	ldrb	r2, [r2, #0]
 8006254:	71da      	strb	r2, [r3, #7]
}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	46bd      	mov	sp, r7
 800625a:	b004      	add	sp, #16
 800625c:	bd80      	pop	{r7, pc}

0800625e <xtime>:

static uint8_t xtime(uint8_t x)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	0002      	movs	r2, r0
 8006266:	1dfb      	adds	r3, r7, #7
 8006268:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800626a:	1dfb      	adds	r3, r7, #7
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	b25a      	sxtb	r2, r3
 8006272:	1dfb      	adds	r3, r7, #7
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	09db      	lsrs	r3, r3, #7
 8006278:	b2db      	uxtb	r3, r3
 800627a:	1c19      	adds	r1, r3, #0
 800627c:	1c0b      	adds	r3, r1, #0
 800627e:	18db      	adds	r3, r3, r3
 8006280:	185b      	adds	r3, r3, r1
 8006282:	1c19      	adds	r1, r3, #0
 8006284:	00c8      	lsls	r0, r1, #3
 8006286:	1c19      	adds	r1, r3, #0
 8006288:	1c03      	adds	r3, r0, #0
 800628a:	18cb      	adds	r3, r1, r3
 800628c:	b2db      	uxtb	r3, r3
 800628e:	b25b      	sxtb	r3, r3
 8006290:	4053      	eors	r3, r2
 8006292:	b25b      	sxtb	r3, r3
 8006294:	b2db      	uxtb	r3, r3
}
 8006296:	0018      	movs	r0, r3
 8006298:	46bd      	mov	sp, r7
 800629a:	b002      	add	sp, #8
 800629c:	bd80      	pop	{r7, pc}

0800629e <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 800629e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 80062a6:	230f      	movs	r3, #15
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	2200      	movs	r2, #0
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e0f0      	b.n	8006492 <MixColumns+0x1f4>
  {
    t   = (*state)[i][0];
 80062b0:	250f      	movs	r5, #15
 80062b2:	197b      	adds	r3, r7, r5
 80062b4:	7819      	ldrb	r1, [r3, #0]
 80062b6:	230e      	movs	r3, #14
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	0089      	lsls	r1, r1, #2
 80062be:	5c8a      	ldrb	r2, [r1, r2]
 80062c0:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 80062c2:	197b      	adds	r3, r7, r5
 80062c4:	781a      	ldrb	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0092      	lsls	r2, r2, #2
 80062ca:	5cd2      	ldrb	r2, [r2, r3]
 80062cc:	197b      	adds	r3, r7, r5
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	18cb      	adds	r3, r1, r3
 80062d6:	3301      	adds	r3, #1
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	4053      	eors	r3, r2
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	197b      	adds	r3, r7, r5
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	18cb      	adds	r3, r1, r3
 80062e8:	3302      	adds	r3, #2
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	4053      	eors	r3, r2
 80062ee:	b2d9      	uxtb	r1, r3
 80062f0:	197b      	adds	r3, r7, r5
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	18d3      	adds	r3, r2, r3
 80062fa:	3303      	adds	r3, #3
 80062fc:	781a      	ldrb	r2, [r3, #0]
 80062fe:	230d      	movs	r3, #13
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	404a      	eors	r2, r1
 8006304:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8006306:	197b      	adds	r3, r7, r5
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	0092      	lsls	r2, r2, #2
 800630e:	5cd1      	ldrb	r1, [r2, r3]
 8006310:	197b      	adds	r3, r7, r5
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	18d3      	adds	r3, r2, r3
 800631a:	3301      	adds	r3, #1
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	200c      	movs	r0, #12
 8006320:	183b      	adds	r3, r7, r0
 8006322:	404a      	eors	r2, r1
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	183c      	adds	r4, r7, r0
 8006328:	0006      	movs	r6, r0
 800632a:	183b      	adds	r3, r7, r0
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	0018      	movs	r0, r3
 8006330:	f7ff ff95 	bl	800625e <xtime>
 8006334:	0003      	movs	r3, r0
 8006336:	7023      	strb	r3, [r4, #0]
 8006338:	197b      	adds	r3, r7, r5
 800633a:	781a      	ldrb	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	0092      	lsls	r2, r2, #2
 8006340:	5cd1      	ldrb	r1, [r2, r3]
 8006342:	0030      	movs	r0, r6
 8006344:	183a      	adds	r2, r7, r0
 8006346:	230d      	movs	r3, #13
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	4053      	eors	r3, r2
 8006350:	b2db      	uxtb	r3, r3
 8006352:	197a      	adds	r2, r7, r5
 8006354:	7812      	ldrb	r2, [r2, #0]
 8006356:	404b      	eors	r3, r1
 8006358:	b2d9      	uxtb	r1, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0092      	lsls	r2, r2, #2
 800635e:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8006360:	197b      	adds	r3, r7, r5
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	18d3      	adds	r3, r2, r3
 800636a:	3301      	adds	r3, #1
 800636c:	7819      	ldrb	r1, [r3, #0]
 800636e:	197b      	adds	r3, r7, r5
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	18d3      	adds	r3, r2, r3
 8006378:	3302      	adds	r3, #2
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	183b      	adds	r3, r7, r0
 800637e:	404a      	eors	r2, r1
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	183c      	adds	r4, r7, r0
 8006384:	0006      	movs	r6, r0
 8006386:	183b      	adds	r3, r7, r0
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	0018      	movs	r0, r3
 800638c:	f7ff ff67 	bl	800625e <xtime>
 8006390:	0003      	movs	r3, r0
 8006392:	7023      	strb	r3, [r4, #0]
 8006394:	197b      	adds	r3, r7, r5
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	18d3      	adds	r3, r2, r3
 800639e:	3301      	adds	r3, #1
 80063a0:	7819      	ldrb	r1, [r3, #0]
 80063a2:	0030      	movs	r0, r6
 80063a4:	183a      	adds	r2, r7, r0
 80063a6:	230d      	movs	r3, #13
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	4053      	eors	r3, r2
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	197b      	adds	r3, r7, r5
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	404a      	eors	r2, r1
 80063b8:	b2d1      	uxtb	r1, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	18d3      	adds	r3, r2, r3
 80063c0:	3301      	adds	r3, #1
 80063c2:	1c0a      	adds	r2, r1, #0
 80063c4:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80063c6:	197b      	adds	r3, r7, r5
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	18d3      	adds	r3, r2, r3
 80063d0:	3302      	adds	r3, #2
 80063d2:	7819      	ldrb	r1, [r3, #0]
 80063d4:	197b      	adds	r3, r7, r5
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	18d3      	adds	r3, r2, r3
 80063de:	3303      	adds	r3, #3
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	183b      	adds	r3, r7, r0
 80063e4:	404a      	eors	r2, r1
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	183c      	adds	r4, r7, r0
 80063ea:	0006      	movs	r6, r0
 80063ec:	183b      	adds	r3, r7, r0
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7ff ff34 	bl	800625e <xtime>
 80063f6:	0003      	movs	r3, r0
 80063f8:	7023      	strb	r3, [r4, #0]
 80063fa:	197b      	adds	r3, r7, r5
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	18d3      	adds	r3, r2, r3
 8006404:	3302      	adds	r3, #2
 8006406:	7819      	ldrb	r1, [r3, #0]
 8006408:	0030      	movs	r0, r6
 800640a:	183a      	adds	r2, r7, r0
 800640c:	230d      	movs	r3, #13
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	4053      	eors	r3, r2
 8006416:	b2da      	uxtb	r2, r3
 8006418:	197b      	adds	r3, r7, r5
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	404a      	eors	r2, r1
 800641e:	b2d1      	uxtb	r1, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	18d3      	adds	r3, r2, r3
 8006426:	3302      	adds	r3, #2
 8006428:	1c0a      	adds	r2, r1, #0
 800642a:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800642c:	197b      	adds	r3, r7, r5
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	18d3      	adds	r3, r2, r3
 8006436:	3303      	adds	r3, #3
 8006438:	7819      	ldrb	r1, [r3, #0]
 800643a:	183b      	adds	r3, r7, r0
 800643c:	220e      	movs	r2, #14
 800643e:	18ba      	adds	r2, r7, r2
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	404a      	eors	r2, r1
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	183c      	adds	r4, r7, r0
 8006448:	0006      	movs	r6, r0
 800644a:	183b      	adds	r3, r7, r0
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	0018      	movs	r0, r3
 8006450:	f7ff ff05 	bl	800625e <xtime>
 8006454:	0003      	movs	r3, r0
 8006456:	7023      	strb	r3, [r4, #0]
 8006458:	197b      	adds	r3, r7, r5
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	18d3      	adds	r3, r2, r3
 8006462:	3303      	adds	r3, #3
 8006464:	7819      	ldrb	r1, [r3, #0]
 8006466:	19ba      	adds	r2, r7, r6
 8006468:	230d      	movs	r3, #13
 800646a:	18fb      	adds	r3, r7, r3
 800646c:	7812      	ldrb	r2, [r2, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4053      	eors	r3, r2
 8006472:	b2da      	uxtb	r2, r3
 8006474:	197b      	adds	r3, r7, r5
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	404a      	eors	r2, r1
 800647a:	b2d1      	uxtb	r1, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	18d3      	adds	r3, r2, r3
 8006482:	3303      	adds	r3, #3
 8006484:	1c0a      	adds	r2, r1, #0
 8006486:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8006488:	197b      	adds	r3, r7, r5
 800648a:	197a      	adds	r2, r7, r5
 800648c:	7812      	ldrb	r2, [r2, #0]
 800648e:	3201      	adds	r2, #1
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	230f      	movs	r3, #15
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d800      	bhi.n	800649e <MixColumns+0x200>
 800649c:	e708      	b.n	80062b0 <MixColumns+0x12>
  }
}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b005      	add	sp, #20
 80064a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064a6 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80064a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	e3c3      	b.n	8006c3c <InvMixColumns+0x796>
  {
    a = (*state)[i][0];
 80064b4:	260b      	movs	r6, #11
 80064b6:	19bb      	adds	r3, r7, r6
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	0089      	lsls	r1, r1, #2
 80064be:	5c8a      	ldrb	r2, [r1, r2]
 80064c0:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 80064c2:	250a      	movs	r5, #10
 80064c4:	197b      	adds	r3, r7, r5
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	188a      	adds	r2, r1, r2
 80064ce:	3201      	adds	r2, #1
 80064d0:	7812      	ldrb	r2, [r2, #0]
 80064d2:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 80064d4:	2409      	movs	r4, #9
 80064d6:	193b      	adds	r3, r7, r4
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	0092      	lsls	r2, r2, #2
 80064de:	188a      	adds	r2, r1, r2
 80064e0:	3202      	adds	r2, #2
 80064e2:	7812      	ldrb	r2, [r2, #0]
 80064e4:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 80064e6:	2308      	movs	r3, #8
 80064e8:	18fb      	adds	r3, r7, r3
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	0092      	lsls	r2, r2, #2
 80064f0:	188a      	adds	r2, r1, r2
 80064f2:	3203      	adds	r2, #3
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 80064f8:	19bb      	adds	r3, r7, r6
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7ff feae 	bl	800625e <xtime>
 8006502:	0003      	movs	r3, r0
 8006504:	0018      	movs	r0, r3
 8006506:	f7ff feaa 	bl	800625e <xtime>
 800650a:	0003      	movs	r3, r0
 800650c:	0018      	movs	r0, r3
 800650e:	f7ff fea6 	bl	800625e <xtime>
 8006512:	0003      	movs	r3, r0
 8006514:	0018      	movs	r0, r3
 8006516:	f7ff fea2 	bl	800625e <xtime>
 800651a:	197b      	adds	r3, r7, r5
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	0018      	movs	r0, r3
 8006520:	f7ff fe9d 	bl	800625e <xtime>
 8006524:	0003      	movs	r3, r0
 8006526:	0018      	movs	r0, r3
 8006528:	f7ff fe99 	bl	800625e <xtime>
 800652c:	197b      	adds	r3, r7, r5
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	0018      	movs	r0, r3
 8006532:	f7ff fe94 	bl	800625e <xtime>
 8006536:	0003      	movs	r3, r0
 8006538:	0018      	movs	r0, r3
 800653a:	f7ff fe90 	bl	800625e <xtime>
 800653e:	0003      	movs	r3, r0
 8006540:	0018      	movs	r0, r3
 8006542:	f7ff fe8c 	bl	800625e <xtime>
 8006546:	0003      	movs	r3, r0
 8006548:	0018      	movs	r0, r3
 800654a:	f7ff fe88 	bl	800625e <xtime>
 800654e:	193b      	adds	r3, r7, r4
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	0018      	movs	r0, r3
 8006554:	f7ff fe83 	bl	800625e <xtime>
 8006558:	193b      	adds	r3, r7, r4
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	0018      	movs	r0, r3
 800655e:	f7ff fe7e 	bl	800625e <xtime>
 8006562:	0003      	movs	r3, r0
 8006564:	0018      	movs	r0, r3
 8006566:	f7ff fe7a 	bl	800625e <xtime>
 800656a:	0003      	movs	r3, r0
 800656c:	0018      	movs	r0, r3
 800656e:	f7ff fe76 	bl	800625e <xtime>
 8006572:	0003      	movs	r3, r0
 8006574:	0018      	movs	r0, r3
 8006576:	f7ff fe72 	bl	800625e <xtime>
 800657a:	2308      	movs	r3, #8
 800657c:	001c      	movs	r4, r3
 800657e:	18fb      	adds	r3, r7, r3
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	0018      	movs	r0, r3
 8006584:	f7ff fe6b 	bl	800625e <xtime>
 8006588:	0023      	movs	r3, r4
 800658a:	001c      	movs	r4, r3
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	0018      	movs	r0, r3
 8006592:	f7ff fe64 	bl	800625e <xtime>
 8006596:	0003      	movs	r3, r0
 8006598:	0018      	movs	r0, r3
 800659a:	f7ff fe60 	bl	800625e <xtime>
 800659e:	0023      	movs	r3, r4
 80065a0:	18fb      	adds	r3, r7, r3
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	0018      	movs	r0, r3
 80065a6:	f7ff fe5a 	bl	800625e <xtime>
 80065aa:	0003      	movs	r3, r0
 80065ac:	0018      	movs	r0, r3
 80065ae:	f7ff fe56 	bl	800625e <xtime>
 80065b2:	0003      	movs	r3, r0
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7ff fe52 	bl	800625e <xtime>
 80065ba:	0003      	movs	r3, r0
 80065bc:	0018      	movs	r0, r3
 80065be:	f7ff fe4e 	bl	800625e <xtime>
 80065c2:	19bb      	adds	r3, r7, r6
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7ff fe49 	bl	800625e <xtime>
 80065cc:	0003      	movs	r3, r0
 80065ce:	001c      	movs	r4, r3
 80065d0:	19bb      	adds	r3, r7, r6
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	0018      	movs	r0, r3
 80065d6:	f7ff fe42 	bl	800625e <xtime>
 80065da:	0003      	movs	r3, r0
 80065dc:	0018      	movs	r0, r3
 80065de:	f7ff fe3e 	bl	800625e <xtime>
 80065e2:	0003      	movs	r3, r0
 80065e4:	4063      	eors	r3, r4
 80065e6:	b2dc      	uxtb	r4, r3
 80065e8:	19bb      	adds	r3, r7, r6
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7ff fe36 	bl	800625e <xtime>
 80065f2:	0003      	movs	r3, r0
 80065f4:	0018      	movs	r0, r3
 80065f6:	f7ff fe32 	bl	800625e <xtime>
 80065fa:	0003      	movs	r3, r0
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7ff fe2e 	bl	800625e <xtime>
 8006602:	0003      	movs	r3, r0
 8006604:	4063      	eors	r3, r4
 8006606:	b2dc      	uxtb	r4, r3
 8006608:	197b      	adds	r3, r7, r5
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	0018      	movs	r0, r3
 800660e:	f7ff fe26 	bl	800625e <xtime>
 8006612:	0003      	movs	r3, r0
 8006614:	001a      	movs	r2, r3
 8006616:	0029      	movs	r1, r5
 8006618:	197b      	adds	r3, r7, r5
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	4053      	eors	r3, r2
 800661e:	b2dd      	uxtb	r5, r3
 8006620:	187b      	adds	r3, r7, r1
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	0018      	movs	r0, r3
 8006626:	f7ff fe1a 	bl	800625e <xtime>
 800662a:	0003      	movs	r3, r0
 800662c:	0018      	movs	r0, r3
 800662e:	f7ff fe16 	bl	800625e <xtime>
 8006632:	0003      	movs	r3, r0
 8006634:	0018      	movs	r0, r3
 8006636:	f7ff fe12 	bl	800625e <xtime>
 800663a:	0003      	movs	r3, r0
 800663c:	406b      	eors	r3, r5
 800663e:	b2db      	uxtb	r3, r3
 8006640:	4063      	eors	r3, r4
 8006642:	b2dc      	uxtb	r4, r3
 8006644:	2309      	movs	r3, #9
 8006646:	001d      	movs	r5, r3
 8006648:	18fb      	adds	r3, r7, r3
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	0018      	movs	r0, r3
 800664e:	f7ff fe06 	bl	800625e <xtime>
 8006652:	0003      	movs	r3, r0
 8006654:	0018      	movs	r0, r3
 8006656:	f7ff fe02 	bl	800625e <xtime>
 800665a:	0003      	movs	r3, r0
 800665c:	001a      	movs	r2, r3
 800665e:	002b      	movs	r3, r5
 8006660:	0018      	movs	r0, r3
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	4053      	eors	r3, r2
 8006668:	b2dd      	uxtb	r5, r3
 800666a:	0003      	movs	r3, r0
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	0018      	movs	r0, r3
 8006672:	f7ff fdf4 	bl	800625e <xtime>
 8006676:	0003      	movs	r3, r0
 8006678:	0018      	movs	r0, r3
 800667a:	f7ff fdf0 	bl	800625e <xtime>
 800667e:	0003      	movs	r3, r0
 8006680:	0018      	movs	r0, r3
 8006682:	f7ff fdec 	bl	800625e <xtime>
 8006686:	0003      	movs	r3, r0
 8006688:	406b      	eors	r3, r5
 800668a:	b2db      	uxtb	r3, r3
 800668c:	4063      	eors	r3, r4
 800668e:	b2dc      	uxtb	r4, r3
 8006690:	2308      	movs	r3, #8
 8006692:	001d      	movs	r5, r3
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	0018      	movs	r0, r3
 800669a:	f7ff fde0 	bl	800625e <xtime>
 800669e:	0003      	movs	r3, r0
 80066a0:	0018      	movs	r0, r3
 80066a2:	f7ff fddc 	bl	800625e <xtime>
 80066a6:	0003      	movs	r3, r0
 80066a8:	0018      	movs	r0, r3
 80066aa:	f7ff fdd8 	bl	800625e <xtime>
 80066ae:	0003      	movs	r3, r0
 80066b0:	001a      	movs	r2, r3
 80066b2:	002b      	movs	r3, r5
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	4053      	eors	r3, r2
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	4063      	eors	r3, r4
 80066be:	b2d9      	uxtb	r1, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	0092      	lsls	r2, r2, #2
 80066c6:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80066c8:	19bb      	adds	r3, r7, r6
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	0018      	movs	r0, r3
 80066ce:	f7ff fdc6 	bl	800625e <xtime>
 80066d2:	19bb      	adds	r3, r7, r6
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	0018      	movs	r0, r3
 80066d8:	f7ff fdc1 	bl	800625e <xtime>
 80066dc:	0003      	movs	r3, r0
 80066de:	0018      	movs	r0, r3
 80066e0:	f7ff fdbd 	bl	800625e <xtime>
 80066e4:	19bb      	adds	r3, r7, r6
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	0018      	movs	r0, r3
 80066ea:	f7ff fdb8 	bl	800625e <xtime>
 80066ee:	0003      	movs	r3, r0
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7ff fdb4 	bl	800625e <xtime>
 80066f6:	0003      	movs	r3, r0
 80066f8:	0018      	movs	r0, r3
 80066fa:	f7ff fdb0 	bl	800625e <xtime>
 80066fe:	0003      	movs	r3, r0
 8006700:	0018      	movs	r0, r3
 8006702:	f7ff fdac 	bl	800625e <xtime>
 8006706:	210a      	movs	r1, #10
 8006708:	000d      	movs	r5, r1
 800670a:	187b      	adds	r3, r7, r1
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	0018      	movs	r0, r3
 8006710:	f7ff fda5 	bl	800625e <xtime>
 8006714:	0003      	movs	r3, r0
 8006716:	0018      	movs	r0, r3
 8006718:	f7ff fda1 	bl	800625e <xtime>
 800671c:	0003      	movs	r3, r0
 800671e:	0018      	movs	r0, r3
 8006720:	f7ff fd9d 	bl	800625e <xtime>
 8006724:	0003      	movs	r3, r0
 8006726:	0018      	movs	r0, r3
 8006728:	f7ff fd99 	bl	800625e <xtime>
 800672c:	2409      	movs	r4, #9
 800672e:	193b      	adds	r3, r7, r4
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	0018      	movs	r0, r3
 8006734:	f7ff fd93 	bl	800625e <xtime>
 8006738:	0003      	movs	r3, r0
 800673a:	0018      	movs	r0, r3
 800673c:	f7ff fd8f 	bl	800625e <xtime>
 8006740:	193b      	adds	r3, r7, r4
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	0018      	movs	r0, r3
 8006746:	f7ff fd8a 	bl	800625e <xtime>
 800674a:	0003      	movs	r3, r0
 800674c:	0018      	movs	r0, r3
 800674e:	f7ff fd86 	bl	800625e <xtime>
 8006752:	0003      	movs	r3, r0
 8006754:	0018      	movs	r0, r3
 8006756:	f7ff fd82 	bl	800625e <xtime>
 800675a:	0003      	movs	r3, r0
 800675c:	0018      	movs	r0, r3
 800675e:	f7ff fd7e 	bl	800625e <xtime>
 8006762:	2308      	movs	r3, #8
 8006764:	001c      	movs	r4, r3
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	0018      	movs	r0, r3
 800676c:	f7ff fd77 	bl	800625e <xtime>
 8006770:	0023      	movs	r3, r4
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	0018      	movs	r0, r3
 8006778:	f7ff fd71 	bl	800625e <xtime>
 800677c:	0003      	movs	r3, r0
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff fd6d 	bl	800625e <xtime>
 8006784:	0003      	movs	r3, r0
 8006786:	0018      	movs	r0, r3
 8006788:	f7ff fd69 	bl	800625e <xtime>
 800678c:	0003      	movs	r3, r0
 800678e:	0018      	movs	r0, r3
 8006790:	f7ff fd65 	bl	800625e <xtime>
 8006794:	19bb      	adds	r3, r7, r6
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	0018      	movs	r0, r3
 800679a:	f7ff fd60 	bl	800625e <xtime>
 800679e:	0003      	movs	r3, r0
 80067a0:	0018      	movs	r0, r3
 80067a2:	f7ff fd5c 	bl	800625e <xtime>
 80067a6:	0003      	movs	r3, r0
 80067a8:	0018      	movs	r0, r3
 80067aa:	f7ff fd58 	bl	800625e <xtime>
 80067ae:	0003      	movs	r3, r0
 80067b0:	001a      	movs	r2, r3
 80067b2:	19bb      	adds	r3, r7, r6
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	4053      	eors	r3, r2
 80067b8:	b2dc      	uxtb	r4, r3
 80067ba:	197b      	adds	r3, r7, r5
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	0018      	movs	r0, r3
 80067c0:	f7ff fd4d 	bl	800625e <xtime>
 80067c4:	0003      	movs	r3, r0
 80067c6:	001d      	movs	r5, r3
 80067c8:	230a      	movs	r3, #10
 80067ca:	18fb      	adds	r3, r7, r3
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f7ff fd45 	bl	800625e <xtime>
 80067d4:	0003      	movs	r3, r0
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7ff fd41 	bl	800625e <xtime>
 80067dc:	0003      	movs	r3, r0
 80067de:	406b      	eors	r3, r5
 80067e0:	b2dd      	uxtb	r5, r3
 80067e2:	230a      	movs	r3, #10
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	0018      	movs	r0, r3
 80067ea:	f7ff fd38 	bl	800625e <xtime>
 80067ee:	0003      	movs	r3, r0
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7ff fd34 	bl	800625e <xtime>
 80067f6:	0003      	movs	r3, r0
 80067f8:	0018      	movs	r0, r3
 80067fa:	f7ff fd30 	bl	800625e <xtime>
 80067fe:	0003      	movs	r3, r0
 8006800:	406b      	eors	r3, r5
 8006802:	b2db      	uxtb	r3, r3
 8006804:	4063      	eors	r3, r4
 8006806:	b2dc      	uxtb	r4, r3
 8006808:	2209      	movs	r2, #9
 800680a:	0015      	movs	r5, r2
 800680c:	18bb      	adds	r3, r7, r2
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	0018      	movs	r0, r3
 8006812:	f7ff fd24 	bl	800625e <xtime>
 8006816:	0003      	movs	r3, r0
 8006818:	001a      	movs	r2, r3
 800681a:	0029      	movs	r1, r5
 800681c:	187b      	adds	r3, r7, r1
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	4053      	eors	r3, r2
 8006822:	b2dd      	uxtb	r5, r3
 8006824:	187b      	adds	r3, r7, r1
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	0018      	movs	r0, r3
 800682a:	f7ff fd18 	bl	800625e <xtime>
 800682e:	0003      	movs	r3, r0
 8006830:	0018      	movs	r0, r3
 8006832:	f7ff fd14 	bl	800625e <xtime>
 8006836:	0003      	movs	r3, r0
 8006838:	0018      	movs	r0, r3
 800683a:	f7ff fd10 	bl	800625e <xtime>
 800683e:	0003      	movs	r3, r0
 8006840:	406b      	eors	r3, r5
 8006842:	b2db      	uxtb	r3, r3
 8006844:	4063      	eors	r3, r4
 8006846:	b2dc      	uxtb	r4, r3
 8006848:	2208      	movs	r2, #8
 800684a:	0015      	movs	r5, r2
 800684c:	18bb      	adds	r3, r7, r2
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	0018      	movs	r0, r3
 8006852:	f7ff fd04 	bl	800625e <xtime>
 8006856:	0003      	movs	r3, r0
 8006858:	0018      	movs	r0, r3
 800685a:	f7ff fd00 	bl	800625e <xtime>
 800685e:	0003      	movs	r3, r0
 8006860:	001a      	movs	r2, r3
 8006862:	0028      	movs	r0, r5
 8006864:	183b      	adds	r3, r7, r0
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	4053      	eors	r3, r2
 800686a:	b2dd      	uxtb	r5, r3
 800686c:	0002      	movs	r2, r0
 800686e:	18bb      	adds	r3, r7, r2
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	0018      	movs	r0, r3
 8006874:	f7ff fcf3 	bl	800625e <xtime>
 8006878:	0003      	movs	r3, r0
 800687a:	0018      	movs	r0, r3
 800687c:	f7ff fcef 	bl	800625e <xtime>
 8006880:	0003      	movs	r3, r0
 8006882:	0018      	movs	r0, r3
 8006884:	f7ff fceb 	bl	800625e <xtime>
 8006888:	0003      	movs	r3, r0
 800688a:	406b      	eors	r3, r5
 800688c:	b2db      	uxtb	r3, r3
 800688e:	4063      	eors	r3, r4
 8006890:	b2d9      	uxtb	r1, r3
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	18d3      	adds	r3, r2, r3
 800689a:	3301      	adds	r3, #1
 800689c:	1c0a      	adds	r2, r1, #0
 800689e:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 80068a0:	19bb      	adds	r3, r7, r6
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7ff fcda 	bl	800625e <xtime>
 80068aa:	19bb      	adds	r3, r7, r6
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	0018      	movs	r0, r3
 80068b0:	f7ff fcd5 	bl	800625e <xtime>
 80068b4:	0003      	movs	r3, r0
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7ff fcd1 	bl	800625e <xtime>
 80068bc:	0003      	movs	r3, r0
 80068be:	0018      	movs	r0, r3
 80068c0:	f7ff fccd 	bl	800625e <xtime>
 80068c4:	0003      	movs	r3, r0
 80068c6:	0018      	movs	r0, r3
 80068c8:	f7ff fcc9 	bl	800625e <xtime>
 80068cc:	250a      	movs	r5, #10
 80068ce:	197b      	adds	r3, r7, r5
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	0018      	movs	r0, r3
 80068d4:	f7ff fcc3 	bl	800625e <xtime>
 80068d8:	197b      	adds	r3, r7, r5
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	0018      	movs	r0, r3
 80068de:	f7ff fcbe 	bl	800625e <xtime>
 80068e2:	0003      	movs	r3, r0
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7ff fcba 	bl	800625e <xtime>
 80068ea:	197b      	adds	r3, r7, r5
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	0018      	movs	r0, r3
 80068f0:	f7ff fcb5 	bl	800625e <xtime>
 80068f4:	0003      	movs	r3, r0
 80068f6:	0018      	movs	r0, r3
 80068f8:	f7ff fcb1 	bl	800625e <xtime>
 80068fc:	0003      	movs	r3, r0
 80068fe:	0018      	movs	r0, r3
 8006900:	f7ff fcad 	bl	800625e <xtime>
 8006904:	0003      	movs	r3, r0
 8006906:	0018      	movs	r0, r3
 8006908:	f7ff fca9 	bl	800625e <xtime>
 800690c:	2109      	movs	r1, #9
 800690e:	187b      	adds	r3, r7, r1
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	0018      	movs	r0, r3
 8006914:	f7ff fca3 	bl	800625e <xtime>
 8006918:	0003      	movs	r3, r0
 800691a:	0018      	movs	r0, r3
 800691c:	f7ff fc9f 	bl	800625e <xtime>
 8006920:	0003      	movs	r3, r0
 8006922:	0018      	movs	r0, r3
 8006924:	f7ff fc9b 	bl	800625e <xtime>
 8006928:	0003      	movs	r3, r0
 800692a:	0018      	movs	r0, r3
 800692c:	f7ff fc97 	bl	800625e <xtime>
 8006930:	2408      	movs	r4, #8
 8006932:	193b      	adds	r3, r7, r4
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	0018      	movs	r0, r3
 8006938:	f7ff fc91 	bl	800625e <xtime>
 800693c:	0003      	movs	r3, r0
 800693e:	0018      	movs	r0, r3
 8006940:	f7ff fc8d 	bl	800625e <xtime>
 8006944:	193b      	adds	r3, r7, r4
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	0018      	movs	r0, r3
 800694a:	f7ff fc88 	bl	800625e <xtime>
 800694e:	0003      	movs	r3, r0
 8006950:	0018      	movs	r0, r3
 8006952:	f7ff fc84 	bl	800625e <xtime>
 8006956:	0003      	movs	r3, r0
 8006958:	0018      	movs	r0, r3
 800695a:	f7ff fc80 	bl	800625e <xtime>
 800695e:	0003      	movs	r3, r0
 8006960:	0018      	movs	r0, r3
 8006962:	f7ff fc7c 	bl	800625e <xtime>
 8006966:	19bb      	adds	r3, r7, r6
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	0018      	movs	r0, r3
 800696c:	f7ff fc77 	bl	800625e <xtime>
 8006970:	0003      	movs	r3, r0
 8006972:	0018      	movs	r0, r3
 8006974:	f7ff fc73 	bl	800625e <xtime>
 8006978:	0003      	movs	r3, r0
 800697a:	001a      	movs	r2, r3
 800697c:	19bb      	adds	r3, r7, r6
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	4053      	eors	r3, r2
 8006982:	b2dc      	uxtb	r4, r3
 8006984:	19bb      	adds	r3, r7, r6
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	0018      	movs	r0, r3
 800698a:	f7ff fc68 	bl	800625e <xtime>
 800698e:	0003      	movs	r3, r0
 8006990:	0018      	movs	r0, r3
 8006992:	f7ff fc64 	bl	800625e <xtime>
 8006996:	0003      	movs	r3, r0
 8006998:	0018      	movs	r0, r3
 800699a:	f7ff fc60 	bl	800625e <xtime>
 800699e:	0003      	movs	r3, r0
 80069a0:	4063      	eors	r3, r4
 80069a2:	b2dc      	uxtb	r4, r3
 80069a4:	197b      	adds	r3, r7, r5
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	0018      	movs	r0, r3
 80069aa:	f7ff fc58 	bl	800625e <xtime>
 80069ae:	0003      	movs	r3, r0
 80069b0:	0018      	movs	r0, r3
 80069b2:	f7ff fc54 	bl	800625e <xtime>
 80069b6:	0003      	movs	r3, r0
 80069b8:	0018      	movs	r0, r3
 80069ba:	f7ff fc50 	bl	800625e <xtime>
 80069be:	0003      	movs	r3, r0
 80069c0:	001a      	movs	r2, r3
 80069c2:	197b      	adds	r3, r7, r5
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	4053      	eors	r3, r2
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	4063      	eors	r3, r4
 80069cc:	b2dc      	uxtb	r4, r3
 80069ce:	2109      	movs	r1, #9
 80069d0:	187b      	adds	r3, r7, r1
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7ff fc42 	bl	800625e <xtime>
 80069da:	0003      	movs	r3, r0
 80069dc:	001d      	movs	r5, r3
 80069de:	2109      	movs	r1, #9
 80069e0:	187b      	adds	r3, r7, r1
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	0018      	movs	r0, r3
 80069e6:	f7ff fc3a 	bl	800625e <xtime>
 80069ea:	0003      	movs	r3, r0
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7ff fc36 	bl	800625e <xtime>
 80069f2:	0003      	movs	r3, r0
 80069f4:	406b      	eors	r3, r5
 80069f6:	b2dd      	uxtb	r5, r3
 80069f8:	2109      	movs	r1, #9
 80069fa:	187b      	adds	r3, r7, r1
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	0018      	movs	r0, r3
 8006a00:	f7ff fc2d 	bl	800625e <xtime>
 8006a04:	0003      	movs	r3, r0
 8006a06:	0018      	movs	r0, r3
 8006a08:	f7ff fc29 	bl	800625e <xtime>
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7ff fc25 	bl	800625e <xtime>
 8006a14:	0003      	movs	r3, r0
 8006a16:	406b      	eors	r3, r5
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	4063      	eors	r3, r4
 8006a1c:	b2dc      	uxtb	r4, r3
 8006a1e:	2308      	movs	r3, #8
 8006a20:	001d      	movs	r5, r3
 8006a22:	18fb      	adds	r3, r7, r3
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	0018      	movs	r0, r3
 8006a28:	f7ff fc19 	bl	800625e <xtime>
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	001a      	movs	r2, r3
 8006a30:	0028      	movs	r0, r5
 8006a32:	183b      	adds	r3, r7, r0
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	4053      	eors	r3, r2
 8006a38:	b2dd      	uxtb	r5, r3
 8006a3a:	0003      	movs	r3, r0
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7ff fc0c 	bl	800625e <xtime>
 8006a46:	0003      	movs	r3, r0
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f7ff fc08 	bl	800625e <xtime>
 8006a4e:	0003      	movs	r3, r0
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7ff fc04 	bl	800625e <xtime>
 8006a56:	0003      	movs	r3, r0
 8006a58:	406b      	eors	r3, r5
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	4063      	eors	r3, r4
 8006a5e:	b2d9      	uxtb	r1, r3
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	18d3      	adds	r3, r2, r3
 8006a68:	3302      	adds	r3, #2
 8006a6a:	1c0a      	adds	r2, r1, #0
 8006a6c:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8006a6e:	19bb      	adds	r3, r7, r6
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	0018      	movs	r0, r3
 8006a74:	f7ff fbf3 	bl	800625e <xtime>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f7ff fbef 	bl	800625e <xtime>
 8006a80:	19bb      	adds	r3, r7, r6
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	0018      	movs	r0, r3
 8006a86:	f7ff fbea 	bl	800625e <xtime>
 8006a8a:	0003      	movs	r3, r0
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f7ff fbe6 	bl	800625e <xtime>
 8006a92:	0003      	movs	r3, r0
 8006a94:	0018      	movs	r0, r3
 8006a96:	f7ff fbe2 	bl	800625e <xtime>
 8006a9a:	0003      	movs	r3, r0
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7ff fbde 	bl	800625e <xtime>
 8006aa2:	250a      	movs	r5, #10
 8006aa4:	197b      	adds	r3, r7, r5
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7ff fbd8 	bl	800625e <xtime>
 8006aae:	197b      	adds	r3, r7, r5
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f7ff fbd3 	bl	800625e <xtime>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7ff fbcf 	bl	800625e <xtime>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7ff fbcb 	bl	800625e <xtime>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	0018      	movs	r0, r3
 8006acc:	f7ff fbc7 	bl	800625e <xtime>
 8006ad0:	2109      	movs	r1, #9
 8006ad2:	000c      	movs	r4, r1
 8006ad4:	187b      	adds	r3, r7, r1
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7ff fbc0 	bl	800625e <xtime>
 8006ade:	193b      	adds	r3, r7, r4
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f7ff fbbb 	bl	800625e <xtime>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7ff fbb7 	bl	800625e <xtime>
 8006af0:	193b      	adds	r3, r7, r4
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f7ff fbb2 	bl	800625e <xtime>
 8006afa:	0003      	movs	r3, r0
 8006afc:	0018      	movs	r0, r3
 8006afe:	f7ff fbae 	bl	800625e <xtime>
 8006b02:	0003      	movs	r3, r0
 8006b04:	0018      	movs	r0, r3
 8006b06:	f7ff fbaa 	bl	800625e <xtime>
 8006b0a:	0003      	movs	r3, r0
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7ff fba6 	bl	800625e <xtime>
 8006b12:	2308      	movs	r3, #8
 8006b14:	18fb      	adds	r3, r7, r3
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f7ff fba0 	bl	800625e <xtime>
 8006b1e:	0003      	movs	r3, r0
 8006b20:	0018      	movs	r0, r3
 8006b22:	f7ff fb9c 	bl	800625e <xtime>
 8006b26:	0003      	movs	r3, r0
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7ff fb98 	bl	800625e <xtime>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7ff fb94 	bl	800625e <xtime>
 8006b36:	19bb      	adds	r3, r7, r6
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f7ff fb8f 	bl	800625e <xtime>
 8006b40:	0003      	movs	r3, r0
 8006b42:	001a      	movs	r2, r3
 8006b44:	19bb      	adds	r3, r7, r6
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	4053      	eors	r3, r2
 8006b4a:	b2dc      	uxtb	r4, r3
 8006b4c:	19bb      	adds	r3, r7, r6
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f7ff fb84 	bl	800625e <xtime>
 8006b56:	0003      	movs	r3, r0
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f7ff fb80 	bl	800625e <xtime>
 8006b5e:	0003      	movs	r3, r0
 8006b60:	0018      	movs	r0, r3
 8006b62:	f7ff fb7c 	bl	800625e <xtime>
 8006b66:	0003      	movs	r3, r0
 8006b68:	4063      	eors	r3, r4
 8006b6a:	b2dc      	uxtb	r4, r3
 8006b6c:	197b      	adds	r3, r7, r5
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	0018      	movs	r0, r3
 8006b72:	f7ff fb74 	bl	800625e <xtime>
 8006b76:	0003      	movs	r3, r0
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f7ff fb70 	bl	800625e <xtime>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	001a      	movs	r2, r3
 8006b82:	0029      	movs	r1, r5
 8006b84:	197b      	adds	r3, r7, r5
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	4053      	eors	r3, r2
 8006b8a:	b2dd      	uxtb	r5, r3
 8006b8c:	187b      	adds	r3, r7, r1
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	0018      	movs	r0, r3
 8006b92:	f7ff fb64 	bl	800625e <xtime>
 8006b96:	0003      	movs	r3, r0
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7ff fb60 	bl	800625e <xtime>
 8006b9e:	0003      	movs	r3, r0
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7ff fb5c 	bl	800625e <xtime>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	406b      	eors	r3, r5
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	4063      	eors	r3, r4
 8006bae:	b2dc      	uxtb	r4, r3
 8006bb0:	2509      	movs	r5, #9
 8006bb2:	197b      	adds	r3, r7, r5
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f7ff fb51 	bl	800625e <xtime>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f7ff fb4d 	bl	800625e <xtime>
 8006bc4:	0003      	movs	r3, r0
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f7ff fb49 	bl	800625e <xtime>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	001a      	movs	r2, r3
 8006bd0:	197b      	adds	r3, r7, r5
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4053      	eors	r3, r2
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	4063      	eors	r3, r4
 8006bda:	b2dc      	uxtb	r4, r3
 8006bdc:	2608      	movs	r6, #8
 8006bde:	19bb      	adds	r3, r7, r6
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	0018      	movs	r0, r3
 8006be4:	f7ff fb3b 	bl	800625e <xtime>
 8006be8:	0003      	movs	r3, r0
 8006bea:	001d      	movs	r5, r3
 8006bec:	19bb      	adds	r3, r7, r6
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7ff fb34 	bl	800625e <xtime>
 8006bf6:	0003      	movs	r3, r0
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f7ff fb30 	bl	800625e <xtime>
 8006bfe:	0003      	movs	r3, r0
 8006c00:	406b      	eors	r3, r5
 8006c02:	b2dd      	uxtb	r5, r3
 8006c04:	19bb      	adds	r3, r7, r6
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f7ff fb28 	bl	800625e <xtime>
 8006c0e:	0003      	movs	r3, r0
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7ff fb24 	bl	800625e <xtime>
 8006c16:	0003      	movs	r3, r0
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f7ff fb20 	bl	800625e <xtime>
 8006c1e:	0003      	movs	r3, r0
 8006c20:	406b      	eors	r3, r5
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	4063      	eors	r3, r4
 8006c26:	b2d9      	uxtb	r1, r3
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	18d3      	adds	r3, r2, r3
 8006c30:	3303      	adds	r3, #3
 8006c32:	1c0a      	adds	r2, r1, #0
 8006c34:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	dc00      	bgt.n	8006c44 <InvMixColumns+0x79e>
 8006c42:	e437      	b.n	80064b4 <InvMixColumns+0xe>
  }
}
 8006c44:	46c0      	nop			; (mov r8, r8)
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b005      	add	sp, #20
 8006c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c4c <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8006c4c:	b5b0      	push	{r4, r5, r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8006c54:	230f      	movs	r3, #15
 8006c56:	18fb      	adds	r3, r7, r3
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	e02a      	b.n	8006cb4 <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8006c5e:	230e      	movs	r3, #14
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	e01a      	b.n	8006c9e <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8006c68:	240e      	movs	r4, #14
 8006c6a:	193b      	adds	r3, r7, r4
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	250f      	movs	r5, #15
 8006c70:	197b      	adds	r3, r7, r5
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	0092      	lsls	r2, r2, #2
 8006c78:	188a      	adds	r2, r1, r2
 8006c7a:	5cd3      	ldrb	r3, [r2, r3]
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	193b      	adds	r3, r7, r4
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	197b      	adds	r3, r7, r5
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	4910      	ldr	r1, [pc, #64]	; (8006cc8 <InvSubBytes+0x7c>)
 8006c88:	5c08      	ldrb	r0, [r1, r0]
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	0092      	lsls	r2, r2, #2
 8006c8e:	188a      	adds	r2, r1, r2
 8006c90:	1c01      	adds	r1, r0, #0
 8006c92:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8006c94:	193b      	adds	r3, r7, r4
 8006c96:	193a      	adds	r2, r7, r4
 8006c98:	7812      	ldrb	r2, [r2, #0]
 8006c9a:	3201      	adds	r2, #1
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	230e      	movs	r3, #14
 8006ca0:	18fb      	adds	r3, r7, r3
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d9df      	bls.n	8006c68 <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8006ca8:	220f      	movs	r2, #15
 8006caa:	18bb      	adds	r3, r7, r2
 8006cac:	18ba      	adds	r2, r7, r2
 8006cae:	7812      	ldrb	r2, [r2, #0]
 8006cb0:	3201      	adds	r2, #1
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	230f      	movs	r3, #15
 8006cb6:	18fb      	adds	r3, r7, r3
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d9cf      	bls.n	8006c5e <InvSubBytes+0x12>
    }
  }
}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b004      	add	sp, #16
 8006cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	08009d48 	.word	0x08009d48

08006ccc <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 8006cd4:	210f      	movs	r1, #15
 8006cd6:	187b      	adds	r3, r7, r1
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7b52      	ldrb	r2, [r2, #13]
 8006cdc:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7a5a      	ldrb	r2, [r3, #9]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	795a      	ldrb	r2, [r3, #5]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	785a      	ldrb	r2, [r3, #1]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	187a      	adds	r2, r7, r1
 8006cfa:	7812      	ldrb	r2, [r2, #0]
 8006cfc:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8006cfe:	187b      	adds	r3, r7, r1
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	7892      	ldrb	r2, [r2, #2]
 8006d04:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7a9a      	ldrb	r2, [r3, #10]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	187a      	adds	r2, r7, r1
 8006d12:	7812      	ldrb	r2, [r2, #0]
 8006d14:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8006d16:	187b      	adds	r3, r7, r1
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	7992      	ldrb	r2, [r2, #6]
 8006d1c:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7b9a      	ldrb	r2, [r3, #14]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	187a      	adds	r2, r7, r1
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8006d2e:	187b      	adds	r3, r7, r1
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	78d2      	ldrb	r2, [r2, #3]
 8006d34:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	79da      	ldrb	r2, [r3, #7]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7ada      	ldrb	r2, [r3, #11]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	7bda      	ldrb	r2, [r3, #15]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	187a      	adds	r2, r7, r1
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	73da      	strb	r2, [r3, #15]
}
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b004      	add	sp, #16
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 8006d5e:	b590      	push	{r4, r7, lr}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8006d68:	240f      	movs	r4, #15
 8006d6a:	193b      	adds	r3, r7, r4
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	0019      	movs	r1, r3
 8006d76:	2000      	movs	r0, #0
 8006d78:	f7ff f997 	bl	80060aa <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 8006d7c:	193b      	adds	r3, r7, r4
 8006d7e:	2201      	movs	r2, #1
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	e018      	b.n	8006db6 <Cipher+0x58>
  {
    SubBytes(state);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	0018      	movs	r0, r3
 8006d88:	f7ff f9e0 	bl	800614c <SubBytes>
    ShiftRows(state);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7ff fa1c 	bl	80061cc <ShiftRows>
    MixColumns(state);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	0018      	movs	r0, r3
 8006d98:	f7ff fa81 	bl	800629e <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	240f      	movs	r4, #15
 8006da2:	193b      	adds	r3, r7, r4
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	0018      	movs	r0, r3
 8006da8:	f7ff f97f 	bl	80060aa <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 8006dac:	193b      	adds	r3, r7, r4
 8006dae:	193a      	adds	r2, r7, r4
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	3201      	adds	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	230f      	movs	r3, #15
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b09      	cmp	r3, #9
 8006dbe:	d9e1      	bls.n	8006d84 <Cipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f7ff f9c2 	bl	800614c <SubBytes>
  ShiftRows(state);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	0018      	movs	r0, r3
 8006dcc:	f7ff f9fe 	bl	80061cc <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	200a      	movs	r0, #10
 8006dd8:	f7ff f967 	bl	80060aa <AddRoundKey>
}
 8006ddc:	46c0      	nop			; (mov r8, r8)
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b005      	add	sp, #20
 8006de2:	bd90      	pop	{r4, r7, pc}

08006de4 <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8006dee:	240f      	movs	r4, #15
 8006df0:	193b      	adds	r3, r7, r4
 8006df2:	2200      	movs	r2, #0
 8006df4:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	0019      	movs	r1, r3
 8006dfc:	200a      	movs	r0, #10
 8006dfe:	f7ff f954 	bl	80060aa <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 8006e02:	193b      	adds	r3, r7, r4
 8006e04:	2209      	movs	r2, #9
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	e018      	b.n	8006e3c <InvCipher+0x58>
  {
    InvShiftRows(state);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7ff ff5d 	bl	8006ccc <InvShiftRows>
    InvSubBytes(state);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7ff ff19 	bl	8006c4c <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	240f      	movs	r4, #15
 8006e20:	193b      	adds	r3, r7, r4
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	0018      	movs	r0, r3
 8006e26:	f7ff f940 	bl	80060aa <AddRoundKey>
    InvMixColumns(state);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f7ff fb3a 	bl	80064a6 <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 8006e32:	193b      	adds	r3, r7, r4
 8006e34:	193a      	adds	r2, r7, r4
 8006e36:	7812      	ldrb	r2, [r2, #0]
 8006e38:	3a01      	subs	r2, #1
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	230f      	movs	r3, #15
 8006e3e:	18fb      	adds	r3, r7, r3
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e1      	bne.n	8006e0a <InvCipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f7ff ff3f 	bl	8006ccc <InvShiftRows>
  InvSubBytes(state);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	0018      	movs	r0, r3
 8006e52:	f7ff fefb 	bl	8006c4c <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	0019      	movs	r1, r3
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f7ff f924 	bl	80060aa <AddRoundKey>
}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	46bd      	mov	sp, r7
 8006e66:	b005      	add	sp, #20
 8006e68:	bd90      	pop	{r4, r7, pc}

08006e6a <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, uint8_t* Iv)
{
 8006e6a:	b590      	push	{r4, r7, lr}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8006e74:	230f      	movs	r3, #15
 8006e76:	18fb      	adds	r3, r7, r3
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	e016      	b.n	8006eac <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 8006e7e:	240f      	movs	r4, #15
 8006e80:	193b      	adds	r3, r7, r4
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	18d3      	adds	r3, r2, r3
 8006e88:	7819      	ldrb	r1, [r3, #0]
 8006e8a:	193b      	adds	r3, r7, r4
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	18d3      	adds	r3, r2, r3
 8006e92:	781a      	ldrb	r2, [r3, #0]
 8006e94:	193b      	adds	r3, r7, r4
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	18c3      	adds	r3, r0, r3
 8006e9c:	404a      	eors	r2, r1
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8006ea2:	193b      	adds	r3, r7, r4
 8006ea4:	193a      	adds	r2, r7, r4
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	3201      	adds	r2, #1
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	230f      	movs	r3, #15
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d9e3      	bls.n	8006e7e <XorWithIv+0x14>
  }
}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b005      	add	sp, #20
 8006ebc:	bd90      	pop	{r4, r7, pc}

08006ebe <tiny_AES_CBC_encrypt_buffer>:

void tiny_AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t *Iv = ctx->Iv;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	33b0      	adds	r3, #176	; 0xb0
 8006ece:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e013      	b.n	8006efe <tiny_AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	0011      	movs	r1, r2
 8006edc:	0018      	movs	r0, r3
 8006ede:	f7ff ffc4 	bl	8006e6a <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	0011      	movs	r1, r2
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f7ff ff38 	bl	8006d5e <Cipher>
    Iv = buf;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	3310      	adds	r3, #16
 8006ef6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	3310      	adds	r3, #16
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d3e7      	bcc.n	8006ed6 <tiny_AES_CBC_encrypt_buffer+0x18>
    //printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	33b0      	adds	r3, #176	; 0xb0
 8006f0a:	6939      	ldr	r1, [r7, #16]
 8006f0c:	2210      	movs	r2, #16
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f002 f964 	bl	80091dc <memcpy>
}
 8006f14:	46c0      	nop			; (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b006      	add	sp, #24
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <tiny_AES_CBC_decrypt_buffer>:

void tiny_AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
{
 8006f1c:	b590      	push	{r4, r7, lr}
 8006f1e:	b08b      	sub	sp, #44	; 0x2c
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2c:	e026      	b.n	8006f7c <tiny_AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8006f2e:	2414      	movs	r4, #20
 8006f30:	193a      	adds	r2, r7, r4
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	0010      	movs	r0, r2
 8006f36:	0019      	movs	r1, r3
 8006f38:	2310      	movs	r3, #16
 8006f3a:	001a      	movs	r2, r3
 8006f3c:	f002 f94e 	bl	80091dc <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	0011      	movs	r1, r2
 8006f46:	0018      	movs	r0, r3
 8006f48:	f7ff ff4c 	bl	8006de4 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	33b0      	adds	r3, #176	; 0xb0
 8006f50:	001a      	movs	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	0011      	movs	r1, r2
 8006f56:	0018      	movs	r0, r3
 8006f58:	f7ff ff87 	bl	8006e6a <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	33b0      	adds	r3, #176	; 0xb0
 8006f60:	001a      	movs	r2, r3
 8006f62:	193b      	adds	r3, r7, r4
 8006f64:	0010      	movs	r0, r2
 8006f66:	0019      	movs	r1, r3
 8006f68:	2310      	movs	r3, #16
 8006f6a:	001a      	movs	r2, r3
 8006f6c:	f002 f936 	bl	80091dc <memcpy>
    buf += AES_BLOCKLEN;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	3310      	adds	r3, #16
 8006f74:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	3310      	adds	r3, #16
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d3d4      	bcc.n	8006f2e <tiny_AES_CBC_decrypt_buffer+0x12>
  }

}
 8006f84:	46c0      	nop			; (mov r8, r8)
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b00b      	add	sp, #44	; 0x2c
 8006f8a:	bd90      	pop	{r4, r7, pc}

08006f8c <_itsdk_error_readHeader>:


/**
 * Get the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_readHeader(itsdk_error_head_t * header) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8006f98:	230c      	movs	r3, #12
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7fe fcae 	bl	80058fe <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 8006fa2:	68f9      	ldr	r1, [r7, #12]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f001 fb79 	bl	80086a0 <_eeprom_read>
	if ( header->magic != ITSDK_ERROR_STRUCT_MAGIC) return ITSDK_ERROR_FAILED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	4a05      	ldr	r2, [pc, #20]	; (8006fc8 <_itsdk_error_readHeader+0x3c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d001      	beq.n	8006fbc <_itsdk_error_readHeader+0x30>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <_itsdk_error_readHeader+0x32>
	return ITSDK_ERROR_SUCCESS;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b004      	add	sp, #16
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	0000ae73 	.word	0x0000ae73

08006fcc <_itsdk_error_writeHeader>:

/**
 * Update the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_writeHeader(itsdk_error_head_t * header) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8006fd8:	230c      	movs	r3, #12
 8006fda:	18fb      	adds	r3, r7, r3
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7fe fc8e 	bl	80058fe <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f001 fac5 	bl	8008578 <_eeprom_write>
	return ITSDK_ERROR_SUCCESS;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	b004      	add	sp, #16
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <_itsdk_error_write>:
/**
 * Write the error in the NVM.
 * This function can be override if the MCU EEPROM is not used for this purpose.
 *
 */
__weak itsdk_error_ret_e _itsdk_error_write(uint16_t blockId, itsdk_error_entry_t * entry) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	0002      	movs	r2, r0
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	1dbb      	adds	r3, r7, #6
 8007004:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 800700a:	230c      	movs	r3, #12
 800700c:	18fb      	adds	r3, r7, r3
 800700e:	0018      	movs	r0, r3
 8007010:	f7fe fc75 	bl	80058fe <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 8007014:	1dbb      	adds	r3, r7, #6
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	00da      	lsls	r2, r3, #3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	18d3      	adds	r3, r2, r3
	_eeprom_write(
 800701e:	3308      	adds	r3, #8
 8007020:	0019      	movs	r1, r3
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	2308      	movs	r3, #8
 8007026:	2000      	movs	r0, #0
 8007028:	f001 faa6 	bl	8008578 <_eeprom_write>
		(void *)entry, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 800702c:	2300      	movs	r3, #0
}
 800702e:	0018      	movs	r0, r3
 8007030:	46bd      	mov	sp, r7
 8007032:	b004      	add	sp, #16
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <itsdk_error_setup>:

/**
 * Init the error block structure if needed
 * This function is called on every device restart
 */
itsdk_error_ret_e itsdk_error_setup() {
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) {
 800703e:	003b      	movs	r3, r7
 8007040:	0018      	movs	r0, r3
 8007042:	f7ff ffa3 	bl	8006f8c <_itsdk_error_readHeader>
 8007046:	0003      	movs	r3, r0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d10c      	bne.n	8007066 <itsdk_error_setup+0x2e>
		// init the structure
		h.magic = ITSDK_ERROR_STRUCT_MAGIC;
 800704c:	003b      	movs	r3, r7
 800704e:	4a08      	ldr	r2, [pc, #32]	; (8007070 <itsdk_error_setup+0x38>)
 8007050:	801a      	strh	r2, [r3, #0]
		h.readPt = 0;
 8007052:	003b      	movs	r3, r7
 8007054:	2200      	movs	r2, #0
 8007056:	805a      	strh	r2, [r3, #2]
		h.writePt = 0;
 8007058:	003b      	movs	r3, r7
 800705a:	2200      	movs	r2, #0
 800705c:	809a      	strh	r2, [r3, #4]
		_itsdk_error_writeHeader(&h);
 800705e:	003b      	movs	r3, r7
 8007060:	0018      	movs	r0, r3
 8007062:	f7ff ffb3 	bl	8006fcc <_itsdk_error_writeHeader>
	__console_errorMng.console_public = NULL;
	__console_errorMng.next = NULL;
	itsdk_console_registerCommand(&__console_errorMng);
#endif

	return ITSDK_ERROR_SUCCESS;
 8007066:	2300      	movs	r3, #0
}
 8007068:	0018      	movs	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	b002      	add	sp, #8
 800706e:	bd80      	pop	{r7, pc}
 8007070:	ffffae73 	.word	0xffffae73

08007074 <itsdk_error_report>:
 * Register an error into the NVM
 * The error is enriched with the value when needed and written in the NVM
 * The NVM write can be override.
 * When the level is critical it loop forever after printing an error message
 */
itsdk_error_ret_e itsdk_error_report(uint32_t error,uint16_t value) {
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b089      	sub	sp, #36	; 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	000a      	movs	r2, r1
 800707e:	1cbb      	adds	r3, r7, #2
 8007080:	801a      	strh	r2, [r3, #0]
	// Add value into error when needed
	if ( ( error & ITSDK_ERROR_WITH_VALUE ) > 0 ) {
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	2380      	movs	r3, #128	; 0x80
 8007086:	055b      	lsls	r3, r3, #21
 8007088:	4013      	ands	r3, r2
 800708a:	d008      	beq.n	800709e <itsdk_error_report+0x2a>
		error |= (value << ITSDK_ERROR_VALUE_SHIFT) & ITSDK_ERROR_VALUE_MASK;
 800708c:	1cbb      	adds	r3, r7, #2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	001a      	movs	r2, r3
 8007094:	4b41      	ldr	r3, [pc, #260]	; (800719c <itsdk_error_report+0x128>)
 8007096:	4013      	ands	r3, r2
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4313      	orrs	r3, r2
 800709c:	607b      	str	r3, [r7, #4]
	}
	uint64_t time = itsdk_time_get_ms() / 1000;
 800709e:	f000 fce7 	bl	8007a70 <itsdk_time_get_ms>
 80070a2:	22fa      	movs	r2, #250	; 0xfa
 80070a4:	0092      	lsls	r2, r2, #2
 80070a6:	2300      	movs	r3, #0
 80070a8:	f7f9 f8e6 	bl	8000278 <__aeabi_uldivmod>
 80070ac:	0003      	movs	r3, r0
 80070ae:	000c      	movs	r4, r1
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	61fc      	str	r4, [r7, #28]
	itsdk_error_entry_t e;
	e.error = error;
 80070b4:	2110      	movs	r1, #16
 80070b6:	187b      	adds	r3, r7, r1
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	605a      	str	r2, [r3, #4]
	e.timeS = (uint32_t)time;
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	187b      	adds	r3, r7, r1
 80070c0:	601a      	str	r2, [r3, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 80070c2:	2308      	movs	r3, #8
 80070c4:	18fb      	adds	r3, r7, r3
 80070c6:	0018      	movs	r0, r3
 80070c8:	f7ff ff60 	bl	8006f8c <_itsdk_error_readHeader>
 80070cc:	0003      	movs	r3, r0
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <itsdk_error_report+0x62>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e05d      	b.n	8007192 <itsdk_error_report+0x11e>

	// Register error
	_itsdk_error_write(h.writePt, &e);
 80070d6:	2408      	movs	r4, #8
 80070d8:	193b      	adds	r3, r7, r4
 80070da:	889b      	ldrh	r3, [r3, #4]
 80070dc:	2210      	movs	r2, #16
 80070de:	18ba      	adds	r2, r7, r2
 80070e0:	0011      	movs	r1, r2
 80070e2:	0018      	movs	r0, r3
 80070e4:	f7ff ff88 	bl	8006ff8 <_itsdk_error_write>

	// Update the pointers
	h.writePt = (h.writePt + 1) % ITSDK_ERROR_BLOCKS;
 80070e8:	193b      	adds	r3, r7, r4
 80070ea:	889b      	ldrh	r3, [r3, #4]
 80070ec:	3301      	adds	r3, #1
 80070ee:	4a2c      	ldr	r2, [pc, #176]	; (80071a0 <itsdk_error_report+0x12c>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	d504      	bpl.n	80070fe <itsdk_error_report+0x8a>
 80070f4:	3b01      	subs	r3, #1
 80070f6:	2240      	movs	r2, #64	; 0x40
 80070f8:	4252      	negs	r2, r2
 80070fa:	4313      	orrs	r3, r2
 80070fc:	3301      	adds	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	2108      	movs	r1, #8
 8007102:	187b      	adds	r3, r7, r1
 8007104:	809a      	strh	r2, [r3, #4]
	if ( h.writePt == h.readPt ) {
 8007106:	187b      	adds	r3, r7, r1
 8007108:	889a      	ldrh	r2, [r3, #4]
 800710a:	187b      	adds	r3, r7, r1
 800710c:	885b      	ldrh	r3, [r3, #2]
 800710e:	429a      	cmp	r2, r3
 8007110:	d10f      	bne.n	8007132 <itsdk_error_report+0xbe>
		h.readPt = (h.readPt + 1) % ITSDK_ERROR_BLOCKS;
 8007112:	2308      	movs	r3, #8
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	885b      	ldrh	r3, [r3, #2]
 8007118:	3301      	adds	r3, #1
 800711a:	4a21      	ldr	r2, [pc, #132]	; (80071a0 <itsdk_error_report+0x12c>)
 800711c:	4013      	ands	r3, r2
 800711e:	d504      	bpl.n	800712a <itsdk_error_report+0xb6>
 8007120:	3b01      	subs	r3, #1
 8007122:	2240      	movs	r2, #64	; 0x40
 8007124:	4252      	negs	r2, r2
 8007126:	4313      	orrs	r3, r2
 8007128:	3301      	adds	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	2308      	movs	r3, #8
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	805a      	strh	r2, [r3, #2]
	}
	_itsdk_error_writeHeader(&h);
 8007132:	2308      	movs	r3, #8
 8007134:	18fb      	adds	r3, r7, r3
 8007136:	0018      	movs	r0, r3
 8007138:	f7ff ff48 	bl	8006fcc <_itsdk_error_writeHeader>


	// Manage critical level
	if ( (error & ITSDK_ERROR_LEVEL_FATAL ) == ITSDK_ERROR_LEVEL_FATAL ){
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	0f9b      	lsrs	r3, r3, #30
 8007140:	079a      	lsls	r2, r3, #30
 8007142:	23c0      	movs	r3, #192	; 0xc0
 8007144:	061b      	lsls	r3, r3, #24
 8007146:	429a      	cmp	r2, r3
 8007148:	d106      	bne.n	8007158 <itsdk_error_report+0xe4>
		log_error("[CRITICAL ERROR] 0x%08X\r\n",error);
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <itsdk_error_report+0x130>)
 800714e:	0011      	movs	r1, r2
 8007150:	0018      	movs	r0, r3
 8007152:	f000 f8f3 	bl	800733c <log_error>
		while(1);
 8007156:	e7fe      	b.n	8007156 <itsdk_error_report+0xe2>
	} else if ( (error & ITSDK_ERROR_LEVEL_ERROR ) == ITSDK_ERROR_LEVEL_ERROR ){
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	da06      	bge.n	800716c <itsdk_error_report+0xf8>
		log_error("[ERROR] 0x%08X\r\n",error);
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <itsdk_error_report+0x134>)
 8007162:	0011      	movs	r1, r2
 8007164:	0018      	movs	r0, r3
 8007166:	f000 f8e9 	bl	800733c <log_error>
 800716a:	e011      	b.n	8007190 <itsdk_error_report+0x11c>
	} else if ( (error & ITSDK_ERROR_LEVEL_WARN ) == ITSDK_ERROR_LEVEL_WARN ){
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	2380      	movs	r3, #128	; 0x80
 8007170:	05db      	lsls	r3, r3, #23
 8007172:	4013      	ands	r3, r2
 8007174:	d006      	beq.n	8007184 <itsdk_error_report+0x110>
		log_warn("[WARN] 0x%08X\r\n",error);
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <itsdk_error_report+0x138>)
 800717a:	0011      	movs	r1, r2
 800717c:	0018      	movs	r0, r3
 800717e:	f000 f923 	bl	80073c8 <log_warn>
 8007182:	e005      	b.n	8007190 <itsdk_error_report+0x11c>
	} else if ( (error & ITSDK_ERROR_LEVEL_INFO ) == ITSDK_ERROR_LEVEL_INFO ){
		log_info("[INFO] 0x%08X\r\n",error);
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <itsdk_error_report+0x13c>)
 8007188:	0011      	movs	r1, r2
 800718a:	0018      	movs	r0, r3
 800718c:	f000 f962 	bl	8007454 <log_info>
	}
	return ITSDK_ERROR_SUCCESS;
 8007190:	2300      	movs	r3, #0
}
 8007192:	0018      	movs	r0, r3
 8007194:	46bd      	mov	sp, r7
 8007196:	b009      	add	sp, #36	; 0x24
 8007198:	bd90      	pop	{r4, r7, pc}
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	0ffff000 	.word	0x0ffff000
 80071a0:	8000003f 	.word	0x8000003f
 80071a4:	08009b00 	.word	0x08009b00
 80071a8:	08009b1c 	.word	0x08009b1c
 80071ac:	08009b30 	.word	0x08009b30
 80071b0:	08009b40 	.word	0x08009b40

080071b4 <itsdk_error_getSize>:
}

/**
 * Get the size of the error blocks
 */
itsdk_error_ret_e itsdk_error_getSize(uint32_t * size) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	*size=sizeof(itsdk_error_t);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2282      	movs	r2, #130	; 0x82
 80071c0:	0092      	lsls	r2, r2, #2
 80071c2:	601a      	str	r2, [r3, #0]
	return ITSDK_ERROR_SUCCESS;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	0018      	movs	r0, r3
 80071c8:	46bd      	mov	sp, r7
 80071ca:	b002      	add	sp, #8
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <log_init>:
__t_log __log;

/**
 * Setup the logging level and target
 */
bool log_init(uint16_t config) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	0002      	movs	r2, r0
 80071d8:	1dbb      	adds	r3, r7, #6
 80071da:	801a      	strh	r2, [r3, #0]

  __log.logError  = (( config & LOGGER_CONFIG_ERROR_LVL_MASK  ) > 0)?1:0;
 80071dc:	1dbb      	adds	r3, r7, #6
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	4a51      	ldr	r2, [pc, #324]	; (8007328 <log_init+0x158>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	17da      	asrs	r2, r3, #31
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	0fdb      	lsrs	r3, r3, #31
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	4b4f      	ldr	r3, [pc, #316]	; (800732c <log_init+0x15c>)
 80071ee:	2101      	movs	r1, #1
 80071f0:	400a      	ands	r2, r1
 80071f2:	1890      	adds	r0, r2, r2
 80071f4:	781a      	ldrb	r2, [r3, #0]
 80071f6:	2102      	movs	r1, #2
 80071f8:	438a      	bics	r2, r1
 80071fa:	1c11      	adds	r1, r2, #0
 80071fc:	1c02      	adds	r2, r0, #0
 80071fe:	430a      	orrs	r2, r1
 8007200:	701a      	strb	r2, [r3, #0]
  __log.logWarn   = (( config & LOGGER_CONFIG_WARN_LVL_MASK   ) > 0)?1:0;
 8007202:	1dbb      	adds	r3, r7, #6
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	4a4a      	ldr	r2, [pc, #296]	; (8007330 <log_init+0x160>)
 8007208:	4013      	ands	r3, r2
 800720a:	17da      	asrs	r2, r3, #31
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	0fdb      	lsrs	r3, r3, #31
 8007210:	b2da      	uxtb	r2, r3
 8007212:	4b46      	ldr	r3, [pc, #280]	; (800732c <log_init+0x15c>)
 8007214:	2101      	movs	r1, #1
 8007216:	400a      	ands	r2, r1
 8007218:	0090      	lsls	r0, r2, #2
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	2104      	movs	r1, #4
 800721e:	438a      	bics	r2, r1
 8007220:	1c11      	adds	r1, r2, #0
 8007222:	1c02      	adds	r2, r0, #0
 8007224:	430a      	orrs	r2, r1
 8007226:	701a      	strb	r2, [r3, #0]
  __log.logInfo   = (( config & LOGGER_CONFIG_INFO_LVL_MASK   ) > 0)?1:0;
 8007228:	1dbb      	adds	r3, r7, #6
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	4a41      	ldr	r2, [pc, #260]	; (8007334 <log_init+0x164>)
 800722e:	4013      	ands	r3, r2
 8007230:	17da      	asrs	r2, r3, #31
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	0fdb      	lsrs	r3, r3, #31
 8007236:	b2da      	uxtb	r2, r3
 8007238:	4b3c      	ldr	r3, [pc, #240]	; (800732c <log_init+0x15c>)
 800723a:	2101      	movs	r1, #1
 800723c:	400a      	ands	r2, r1
 800723e:	00d0      	lsls	r0, r2, #3
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	2108      	movs	r1, #8
 8007244:	438a      	bics	r2, r1
 8007246:	1c11      	adds	r1, r2, #0
 8007248:	1c02      	adds	r2, r0, #0
 800724a:	430a      	orrs	r2, r1
 800724c:	701a      	strb	r2, [r3, #0]
  __log.logDebug  = (( config & LOGGER_CONFIG_DEBUG_LVL_MASK  ) > 0)?1:0;
 800724e:	1dbb      	adds	r3, r7, #6
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	4a39      	ldr	r2, [pc, #228]	; (8007338 <log_init+0x168>)
 8007254:	4013      	ands	r3, r2
 8007256:	17da      	asrs	r2, r3, #31
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	0fdb      	lsrs	r3, r3, #31
 800725c:	b2da      	uxtb	r2, r3
 800725e:	4b33      	ldr	r3, [pc, #204]	; (800732c <log_init+0x15c>)
 8007260:	2101      	movs	r1, #1
 8007262:	400a      	ands	r2, r1
 8007264:	0110      	lsls	r0, r2, #4
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	2110      	movs	r1, #16
 800726a:	438a      	bics	r2, r1
 800726c:	1c11      	adds	r1, r2, #0
 800726e:	1c02      	adds	r2, r0, #0
 8007270:	430a      	orrs	r2, r1
 8007272:	701a      	strb	r2, [r3, #0]
  __log.onSerial1 = (( config & LOGGER_CONFIG_SERIAL1_MASK    ) > 0)?1:0;
 8007274:	1dbb      	adds	r3, r7, #6
 8007276:	881a      	ldrh	r2, [r3, #0]
 8007278:	23f0      	movs	r3, #240	; 0xf0
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	4013      	ands	r3, r2
 800727e:	17da      	asrs	r2, r3, #31
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	0fdb      	lsrs	r3, r3, #31
 8007284:	b2da      	uxtb	r2, r3
 8007286:	4b29      	ldr	r3, [pc, #164]	; (800732c <log_init+0x15c>)
 8007288:	2101      	movs	r1, #1
 800728a:	400a      	ands	r2, r1
 800728c:	0150      	lsls	r0, r2, #5
 800728e:	781a      	ldrb	r2, [r3, #0]
 8007290:	2120      	movs	r1, #32
 8007292:	438a      	bics	r2, r1
 8007294:	1c11      	adds	r1, r2, #0
 8007296:	1c02      	adds	r2, r0, #0
 8007298:	430a      	orrs	r2, r1
 800729a:	701a      	strb	r2, [r3, #0]
  __log.onSerial2 = (( config & LOGGER_CONFIG_SERIAL2_MASK    ) > 0)?1:0;
 800729c:	1dbb      	adds	r3, r7, #6
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	22f0      	movs	r2, #240	; 0xf0
 80072a2:	4013      	ands	r3, r2
 80072a4:	17da      	asrs	r2, r3, #31
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	0fdb      	lsrs	r3, r3, #31
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	4b1f      	ldr	r3, [pc, #124]	; (800732c <log_init+0x15c>)
 80072ae:	2101      	movs	r1, #1
 80072b0:	400a      	ands	r2, r1
 80072b2:	0190      	lsls	r0, r2, #6
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	2140      	movs	r1, #64	; 0x40
 80072b8:	438a      	bics	r2, r1
 80072ba:	1c11      	adds	r1, r2, #0
 80072bc:	1c02      	adds	r2, r0, #0
 80072be:	430a      	orrs	r2, r1
 80072c0:	701a      	strb	r2, [r3, #0]
  __log.onDebug   = (( config & LOGGER_CONFIG_DEBUGLNK_MASK   ) > 0)?1:0;
 80072c2:	1dbb      	adds	r3, r7, #6
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	220f      	movs	r2, #15
 80072c8:	4013      	ands	r3, r2
 80072ca:	17da      	asrs	r2, r3, #31
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	0fdb      	lsrs	r3, r3, #31
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <log_init+0x15c>)
 80072d4:	01d0      	lsls	r0, r2, #7
 80072d6:	781a      	ldrb	r2, [r3, #0]
 80072d8:	217f      	movs	r1, #127	; 0x7f
 80072da:	400a      	ands	r2, r1
 80072dc:	1c11      	adds	r1, r2, #0
 80072de:	1c02      	adds	r2, r0, #0
 80072e0:	430a      	orrs	r2, r1
 80072e2:	701a      	strb	r2, [r3, #0]
  __log.onFile    = (( config & LOGGER_CONFIG_FILE_MASK       ) > 0)?1:0;
 80072e4:	1dbb      	adds	r3, r7, #6
 80072e6:	881a      	ldrh	r2, [r3, #0]
 80072e8:	23f0      	movs	r3, #240	; 0xf0
 80072ea:	021b      	lsls	r3, r3, #8
 80072ec:	4013      	ands	r3, r2
 80072ee:	17da      	asrs	r2, r3, #31
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	0fdb      	lsrs	r3, r3, #31
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	4b0d      	ldr	r3, [pc, #52]	; (800732c <log_init+0x15c>)
 80072f8:	2101      	movs	r1, #1
 80072fa:	400a      	ands	r2, r1
 80072fc:	0010      	movs	r0, r2
 80072fe:	785a      	ldrb	r2, [r3, #1]
 8007300:	2101      	movs	r1, #1
 8007302:	438a      	bics	r2, r1
 8007304:	1c11      	adds	r1, r2, #0
 8007306:	1c02      	adds	r2, r0, #0
 8007308:	430a      	orrs	r2, r1
 800730a:	705a      	strb	r2, [r3, #1]
  // Init the loggers
  if (__log.onFile) {
	  // Init file logger
	  // @TODO support file logger
  }
  __log.logConf = config;
 800730c:	4b07      	ldr	r3, [pc, #28]	; (800732c <log_init+0x15c>)
 800730e:	1dba      	adds	r2, r7, #6
 8007310:	8812      	ldrh	r2, [r2, #0]
 8007312:	805a      	strh	r2, [r3, #2]
  __log.ready = true;
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <log_init+0x15c>)
 8007316:	781a      	ldrb	r2, [r3, #0]
 8007318:	2101      	movs	r1, #1
 800731a:	430a      	orrs	r2, r1
 800731c:	701a      	strb	r2, [r3, #0]
  return true;
 800731e:	2301      	movs	r3, #1
}
 8007320:	0018      	movs	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	b002      	add	sp, #8
 8007326:	bd80      	pop	{r7, pc}
 8007328:	00001111 	.word	0x00001111
 800732c:	20000430 	.word	0x20000430
 8007330:	00002222 	.word	0x00002222
 8007334:	00004444 	.word	0x00004444
 8007338:	00008888 	.word	0x00008888

0800733c <log_error>:

/**
 * Log an error according to the configuration on the different
 * possible logger
 */
void log_error(char *format, ...) {
 800733c:	b40f      	push	{r0, r1, r2, r3}
 800733e:	b580      	push	{r7, lr}
 8007340:	b096      	sub	sp, #88	; 0x58
 8007342:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logError && __log.ready ) {
 8007344:	4b1f      	ldr	r3, [pc, #124]	; (80073c4 <log_error+0x88>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2202      	movs	r2, #2
 800734a:	4013      	ands	r3, r2
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d031      	beq.n	80073b6 <log_error+0x7a>
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <log_error+0x88>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2201      	movs	r2, #1
 8007358:	4013      	ands	r3, r2
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d02a      	beq.n	80073b6 <log_error+0x7a>
    va_start(args,format);
 8007360:	2364      	movs	r3, #100	; 0x64
 8007362:	18fb      	adds	r3, r7, r3
 8007364:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 8007366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800736a:	1d38      	adds	r0, r7, #4
 800736c:	2150      	movs	r1, #80	; 0x50
 800736e:	f001 ff85 	bl	800927c <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 8007372:	4b14      	ldr	r3, [pc, #80]	; (80073c4 <log_error+0x88>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2220      	movs	r2, #32
 8007378:	4013      	ands	r3, r2
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <log_error+0x4c>
      serial1_print(fmtBuffer);
 8007380:	1d3b      	adds	r3, r7, #4
 8007382:	0018      	movs	r0, r3
 8007384:	f001 f818 	bl	80083b8 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 8007388:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <log_error+0x88>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2240      	movs	r2, #64	; 0x40
 800738e:	4013      	ands	r3, r2
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <log_error+0x62>
      serial2_print(fmtBuffer);
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	0018      	movs	r0, r3
 800739a:	f001 f867 	bl	800846c <serial2_print>
    }

    if ( __log.onDebug  ) {
 800739e:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <log_error+0x88>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	227f      	movs	r2, #127	; 0x7f
 80073a4:	4393      	bics	r3, r2
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d004      	beq.n	80073b6 <log_error+0x7a>
      debug_print(DEBUG_PRINT_ERROR,fmtBuffer);
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	0019      	movs	r1, r3
 80073b0:	2003      	movs	r0, #3
 80073b2:	f001 f8d5 	bl	8008560 <debug_print>
      //logfile_print(fmtBuffer);
    }

  }
#endif
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b016      	add	sp, #88	; 0x58
 80073bc:	bc80      	pop	{r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	b004      	add	sp, #16
 80073c2:	4718      	bx	r3
 80073c4:	20000430 	.word	0x20000430

080073c8 <log_warn>:

/**
 * Log a warning according to the configuration on the different
 * possible logger
 */
void log_warn(char *format, ...) {
 80073c8:	b40f      	push	{r0, r1, r2, r3}
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b096      	sub	sp, #88	; 0x58
 80073ce:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logWarn  && __log.ready ) {
 80073d0:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <log_warn+0x88>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2204      	movs	r2, #4
 80073d6:	4013      	ands	r3, r2
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d031      	beq.n	8007442 <log_warn+0x7a>
 80073de:	4b1c      	ldr	r3, [pc, #112]	; (8007450 <log_warn+0x88>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2201      	movs	r2, #1
 80073e4:	4013      	ands	r3, r2
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d02a      	beq.n	8007442 <log_warn+0x7a>
    va_start(args,format);
 80073ec:	2364      	movs	r3, #100	; 0x64
 80073ee:	18fb      	adds	r3, r7, r3
 80073f0:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 80073f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073f6:	1d38      	adds	r0, r7, #4
 80073f8:	2150      	movs	r1, #80	; 0x50
 80073fa:	f001 ff3f 	bl	800927c <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <log_warn+0x88>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2220      	movs	r2, #32
 8007404:	4013      	ands	r3, r2
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <log_warn+0x4c>
    	serial1_print(fmtBuffer);
 800740c:	1d3b      	adds	r3, r7, #4
 800740e:	0018      	movs	r0, r3
 8007410:	f000 ffd2 	bl	80083b8 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 8007414:	4b0e      	ldr	r3, [pc, #56]	; (8007450 <log_warn+0x88>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2240      	movs	r2, #64	; 0x40
 800741a:	4013      	ands	r3, r2
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <log_warn+0x62>
    	serial2_print(fmtBuffer);
 8007422:	1d3b      	adds	r3, r7, #4
 8007424:	0018      	movs	r0, r3
 8007426:	f001 f821 	bl	800846c <serial2_print>
    }

    if ( __log.onDebug ) {
 800742a:	4b09      	ldr	r3, [pc, #36]	; (8007450 <log_warn+0x88>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	227f      	movs	r2, #127	; 0x7f
 8007430:	4393      	bics	r3, r2
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <log_warn+0x7a>
    	debug_print(DEBUG_PRINT_WARNING,fmtBuffer);
 8007438:	1d3b      	adds	r3, r7, #4
 800743a:	0019      	movs	r1, r3
 800743c:	2002      	movs	r0, #2
 800743e:	f001 f88f 	bl	8008560 <debug_print>
        // @ TODO logfile_printf("%lu [warn] ",time_get_ms());
        //logfile_print(fmtBuffer);
    }
  }
#endif
}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	46bd      	mov	sp, r7
 8007446:	b016      	add	sp, #88	; 0x58
 8007448:	bc80      	pop	{r7}
 800744a:	bc08      	pop	{r3}
 800744c:	b004      	add	sp, #16
 800744e:	4718      	bx	r3
 8007450:	20000430 	.word	0x20000430

08007454 <log_info>:

/**
 * Log a info according to the configuration on the different
 * possible logger
 */
void log_info(char *format, ...) {
 8007454:	b40f      	push	{r0, r1, r2, r3}
 8007456:	b580      	push	{r7, lr}
 8007458:	b096      	sub	sp, #88	; 0x58
 800745a:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logInfo  && __log.ready ) {
 800745c:	4b1f      	ldr	r3, [pc, #124]	; (80074dc <log_info+0x88>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2208      	movs	r2, #8
 8007462:	4013      	ands	r3, r2
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d031      	beq.n	80074ce <log_info+0x7a>
 800746a:	4b1c      	ldr	r3, [pc, #112]	; (80074dc <log_info+0x88>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2201      	movs	r2, #1
 8007470:	4013      	ands	r3, r2
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d02a      	beq.n	80074ce <log_info+0x7a>
    va_start(args,format);
 8007478:	2364      	movs	r3, #100	; 0x64
 800747a:	18fb      	adds	r3, r7, r3
 800747c:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 800747e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007480:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007482:	1d38      	adds	r0, r7, #4
 8007484:	2150      	movs	r1, #80	; 0x50
 8007486:	f001 fef9 	bl	800927c <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 800748a:	4b14      	ldr	r3, [pc, #80]	; (80074dc <log_info+0x88>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2220      	movs	r2, #32
 8007490:	4013      	ands	r3, r2
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <log_info+0x4c>
    	serial1_print(fmtBuffer);
 8007498:	1d3b      	adds	r3, r7, #4
 800749a:	0018      	movs	r0, r3
 800749c:	f000 ff8c 	bl	80083b8 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 80074a0:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <log_info+0x88>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2240      	movs	r2, #64	; 0x40
 80074a6:	4013      	ands	r3, r2
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <log_info+0x62>
    	serial2_print(fmtBuffer);
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	0018      	movs	r0, r3
 80074b2:	f000 ffdb 	bl	800846c <serial2_print>
    }

    if ( __log.onDebug ) {
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <log_info+0x88>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	227f      	movs	r2, #127	; 0x7f
 80074bc:	4393      	bics	r3, r2
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d004      	beq.n	80074ce <log_info+0x7a>
    	debug_print(DEBUG_PRINT_INFO, fmtBuffer);
 80074c4:	1d3b      	adds	r3, r7, #4
 80074c6:	0019      	movs	r1, r3
 80074c8:	2001      	movs	r0, #1
 80074ca:	f001 f849 	bl	8008560 <debug_print>
        // @ TODO logfile_printf("%lu [info] ",time_get_ms());
        //logfile_print(__log.fmtBuffer);
    }
  }
#endif
}
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b016      	add	sp, #88	; 0x58
 80074d4:	bc80      	pop	{r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	b004      	add	sp, #16
 80074da:	4718      	bx	r3
 80074dc:	20000430 	.word	0x20000430

080074e0 <itsdk_lorawan_resetFactoryDefaults>:
 * Configure the SecureStore with the Static values obtained from configLoRaWan.h
 * When force is false, the secure store will be refreshed only if there is no
 * configuration already setup.
 */
#if ITSDK_WITH_SECURESTORE == __ENABLE
itsdk_lorawan_return_t itsdk_lorawan_resetFactoryDefaults(bool force) {
 80074e0:	b5b0      	push	{r4, r5, r7, lr}
 80074e2:	b090      	sub	sp, #64	; 0x40
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	0002      	movs	r2, r0
 80074e8:	1dfb      	adds	r3, r7, #7
 80074ea:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[16];
	if ( force || itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 80074ec:	1dfb      	adds	r3, r7, #7
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d107      	bne.n	8007504 <itsdk_lorawan_resetFactoryDefaults+0x24>
 80074f4:	232c      	movs	r3, #44	; 0x2c
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	0019      	movs	r1, r3
 80074fa:	2007      	movs	r0, #7
 80074fc:	f7fe faa8 	bl	8005a50 <itsdk_secstore_readBlock>
 8007500:	1e03      	subs	r3, r0, #0
 8007502:	d038      	beq.n	8007576 <itsdk_lorawan_resetFactoryDefaults+0x96>
		uint8_t de[8] = ITSDK_LORAWAN_DEVEUI;
 8007504:	2324      	movs	r3, #36	; 0x24
 8007506:	18fb      	adds	r3, r7, r3
 8007508:	4a1d      	ldr	r2, [pc, #116]	; (8007580 <itsdk_lorawan_resetFactoryDefaults+0xa0>)
 800750a:	ca03      	ldmia	r2!, {r0, r1}
 800750c:	c303      	stmia	r3!, {r0, r1}
		uint8_t ap[8] = ITSDK_LORAWAN_APPEUI;
 800750e:	231c      	movs	r3, #28
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <itsdk_lorawan_resetFactoryDefaults+0xa4>)
 8007514:	ca03      	ldmia	r2!, {r0, r1}
 8007516:	c303      	stmia	r3!, {r0, r1}
		for ( int i = 0 ; i< 8 ; i++) {
 8007518:	2300      	movs	r3, #0
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800751c:	e016      	b.n	800754c <itsdk_lorawan_resetFactoryDefaults+0x6c>
			buffer[ITSDK_SECSTORE_OTAA_DEV_ID+i] = de[i];
 800751e:	2324      	movs	r3, #36	; 0x24
 8007520:	18fa      	adds	r2, r7, r3
 8007522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007524:	18d3      	adds	r3, r2, r3
 8007526:	7819      	ldrb	r1, [r3, #0]
 8007528:	202c      	movs	r0, #44	; 0x2c
 800752a:	183a      	adds	r2, r7, r0
 800752c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752e:	18d3      	adds	r3, r2, r3
 8007530:	1c0a      	adds	r2, r1, #0
 8007532:	701a      	strb	r2, [r3, #0]
			buffer[ITSDK_SECSTORE_OTAA_APP_ID+i] = ap[i];
 8007534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007536:	3308      	adds	r3, #8
 8007538:	221c      	movs	r2, #28
 800753a:	18b9      	adds	r1, r7, r2
 800753c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800753e:	188a      	adds	r2, r1, r2
 8007540:	7811      	ldrb	r1, [r2, #0]
 8007542:	183a      	adds	r2, r7, r0
 8007544:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i< 8 ; i++) {
 8007546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007548:	3301      	adds	r3, #1
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800754c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754e:	2b07      	cmp	r3, #7
 8007550:	dde5      	ble.n	800751e <itsdk_lorawan_resetFactoryDefaults+0x3e>
		}
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer);
 8007552:	232c      	movs	r3, #44	; 0x2c
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	0019      	movs	r1, r3
 8007558:	2007      	movs	r0, #7
 800755a:	f7fe fac6 	bl	8005aea <itsdk_secstore_writeBlock>

		uint8_t appkey[16] = ITSDK_LORAWAN_APPKEY;
 800755e:	210c      	movs	r1, #12
 8007560:	187b      	adds	r3, r7, r1
 8007562:	4a09      	ldr	r2, [pc, #36]	; (8007588 <itsdk_lorawan_resetFactoryDefaults+0xa8>)
 8007564:	ca31      	ldmia	r2!, {r0, r4, r5}
 8007566:	c331      	stmia	r3!, {r0, r4, r5}
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	601a      	str	r2, [r3, #0]
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_APPKEY, appkey);
 800756c:	187b      	adds	r3, r7, r1
 800756e:	0019      	movs	r1, r3
 8007570:	2008      	movs	r0, #8
 8007572:	f7fe faba 	bl	8005aea <itsdk_secstore_writeBlock>
	}
	return LORAWAN_RETURN_SUCESS;
 8007576:	2300      	movs	r3, #0
}
 8007578:	0018      	movs	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	b010      	add	sp, #64	; 0x40
 800757e:	bdb0      	pop	{r4, r5, r7, pc}
 8007580:	08009b50 	.word	0x08009b50
 8007584:	08009b58 	.word	0x08009b58
 8007588:	08009b60 	.word	0x08009b60

0800758c <lowPower_switch>:
/**
 * Switch to low power mode selected for the expected platform
 */
void __attribute__((optimize("O3"))) lowPower_switch() {

	if (__lowPowerState==LOWPRW_ENABLE) {
 800758c:	4b14      	ldr	r3, [pc, #80]	; (80075e0 <lowPower_switch+0x54>)
void __attribute__((optimize("O3"))) lowPower_switch() {
 800758e:	b570      	push	{r4, r5, r6, lr}
	if (__lowPowerState==LOWPRW_ENABLE) {
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d000      	beq.n	8007598 <lowPower_switch+0xc>
			}
			#endif
		}
	}

}
 8007596:	bd70      	pop	{r4, r5, r6, pc}
			if ( schedDur < duration ) duration = schedDur;
 8007598:	25f4      	movs	r5, #244	; 0xf4
			uint32_t schedDur = itdt_sched_nextRun();
 800759a:	f000 f981 	bl	80078a0 <itdt_sched_nextRun>
			if ( schedDur < duration ) duration = schedDur;
 800759e:	35ff      	adds	r5, #255	; 0xff
			uint32_t schedDur = itdt_sched_nextRun();
 80075a0:	0004      	movs	r4, r0
			if ( schedDur < duration ) duration = schedDur;
 80075a2:	42a8      	cmp	r0, r5
 80075a4:	d809      	bhi.n	80075ba <lowPower_switch+0x2e>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 80075a6:	f000 fb1d 	bl	8007be4 <itsdk_stimer_nextTimeoutMs>
 80075aa:	0003      	movs	r3, r0
 80075ac:	0020      	movs	r0, r4
 80075ae:	429c      	cmp	r4, r3
 80075b0:	d900      	bls.n	80075b4 <lowPower_switch+0x28>
 80075b2:	0018      	movs	r0, r3
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 80075b4:	2805      	cmp	r0, #5
 80075b6:	d9ee      	bls.n	8007596 <lowPower_switch+0xa>
 80075b8:	e005      	b.n	80075c6 <lowPower_switch+0x3a>
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 80075ba:	f000 fb13 	bl	8007be4 <itsdk_stimer_nextTimeoutMs>
			if ( maxDur < duration ) duration = maxDur;
 80075be:	42a8      	cmp	r0, r5
 80075c0:	d9f8      	bls.n	80075b4 <lowPower_switch+0x28>
			duration = ITSDK_LOWPOWER_RTC_MS;
 80075c2:	20fa      	movs	r0, #250	; 0xfa
 80075c4:	0040      	lsls	r0, r0, #1
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 80075c6:	2100      	movs	r1, #0
 80075c8:	f001 f92c 	bl	8008824 <stm32l_lowPowerSetup>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d1e2      	bne.n	8007596 <lowPower_switch+0xa>
				stm32l_lowPowerResume(STM32L_LOWPOWER_NORMAL_STOP);
 80075d0:	f001 f9a4 	bl	800891c <stm32l_lowPowerResume>
				itsdk_state.lastWakeUpTimeUs = itsdk_time_get_us();
 80075d4:	f000 fa5e 	bl	8007a94 <itsdk_time_get_us>
 80075d8:	4b02      	ldr	r3, [pc, #8]	; (80075e4 <lowPower_switch+0x58>)
 80075da:	6098      	str	r0, [r3, #8]
 80075dc:	60d9      	str	r1, [r3, #12]
}
 80075de:	e7da      	b.n	8007596 <lowPower_switch+0xa>
 80075e0:	200000ac 	.word	0x200000ac
 80075e4:	20000420 	.word	0x20000420

080075e8 <lowPower_enable>:

/**
 * Disable LowPower mode
 */
void lowPower_enable() {
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_ENABLE;
 80075ec:	4b02      	ldr	r3, [pc, #8]	; (80075f8 <lowPower_enable+0x10>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	200000ac 	.word	0x200000ac

080075fc <itsdk_setup>:
/**
 * The setup function is called on every MCU Reset but not on wakeup from sleep
 * This function init the SDK library and underlaying hardware.
 * Then it calls the project specific setup function
 */
void itsdk_setup() {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0

	itsdk_time_init();
 8007600:	f000 fa54 	bl	8007aac <itsdk_time_init>
	#if ITSDK_LOGGER_CONF > 0
	log_init(ITSDK_LOGGER_CONF);
 8007604:	20f0      	movs	r0, #240	; 0xf0
 8007606:	f7ff fde3 	bl	80071d0 <log_init>
	#endif
	#if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	  wdg_setupWithMaxMs(ITSDK_WDG_MS);
 800760a:	4b18      	ldr	r3, [pc, #96]	; (800766c <itsdk_setup+0x70>)
 800760c:	0018      	movs	r0, r3
 800760e:	f001 fd4d 	bl	80090ac <wdg_setupWithMaxMs>
	#endif
	serial1_init();
 8007612:	f000 fe8b 	bl	800832c <serial1_init>
	serial2_init();
 8007616:	f000 fee7 	bl	80083e8 <serial2_init>
	#if ITSDK_WITH_CONSOLE == __ENABLE
		itsdk_console_setup();
	#endif
	#if ITSDK_WITH_ERROR_RPT == __ENABLE
	  itsdk_error_setup();
 800761a:	f7ff fd0d 	bl	8007038 <itsdk_error_setup>
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_RESET,(uint16_t)itsdk_getResetCause());
 800761e:	f000 fdc7 	bl	80081b0 <itsdk_getResetCause>
 8007622:	0003      	movs	r3, r0
 8007624:	b29b      	uxth	r3, r3
 8007626:	4a12      	ldr	r2, [pc, #72]	; (8007670 <itsdk_setup+0x74>)
 8007628:	0019      	movs	r1, r3
 800762a:	0010      	movs	r0, r2
 800762c:	f7ff fd22 	bl	8007074 <itsdk_error_report>
	#endif
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  // Init the secure store if not yet initialized
	  if ( itsdk_secstore_isInit() != SS_SUCCESS ) {
 8007630:	f7fe fb32 	bl	8005c98 <itsdk_secstore_isInit>
 8007634:	1e03      	subs	r3, r0, #0
 8007636:	d008      	beq.n	800764a <itsdk_setup+0x4e>
		  itsdk_secstore_init();
 8007638:	f7fe face 	bl	8005bd8 <itsdk_secstore_init>
		  itsdk_encrypt_resetFactoryDefaults(true);
 800763c:	2001      	movs	r0, #1
 800763e:	f7fe fc26 	bl	8005e8e <itsdk_encrypt_resetFactoryDefaults>
		  #if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		    itsdk_lorawan_resetFactoryDefaults(true);
 8007642:	2001      	movs	r0, #1
 8007644:	f7ff ff4c 	bl	80074e0 <itsdk_lorawan_resetFactoryDefaults>
 8007648:	e002      	b.n	8007650 <itsdk_setup+0x54>
		  #endif
		  #if ITSDK_WITH_SIGFOX_LIB == __ENABLE
 		    itsdk_sigfox_resetFactoryDefaults(true);
		  #endif
	  } else {
	     itsdk_encrypt_resetFactoryDefaults(false);	// on first boot init the ss communication credentials
 800764a:	2000      	movs	r0, #0
 800764c:	f7fe fc1f 	bl	8005e8e <itsdk_encrypt_resetFactoryDefaults>
	  }
	  itsdk_secStore_RegisterConsole();
 8007650:	f7fe fb2e 	bl	8005cb0 <itsdk_secStore_RegisterConsole>
	#endif
	// load the configuration according to setting
	itsdk_config_loadConfiguration(CONFIG_NORMAL_LOAD);
 8007654:	2000      	movs	r0, #0
 8007656:	f7fe f813 	bl	8005680 <itsdk_config_loadConfiguration>
	itsdk_state_init();
 800765a:	f7fe f893 	bl	8005784 <itsdk_state_init>
	// Application setup
	project_setup();
 800765e:	f7f9 fb2b 	bl	8000cb8 <project_setup>
    #if ITSDK_WITH_ERROR_RPT == __ENABLE
      itsdk_cleanResetCause();
 8007662:	f000 fde3 	bl	800822c <itsdk_cleanResetCause>
    #endif

}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	00006d60 	.word	0x00006d60
 8007670:	10000001 	.word	0x10000001

08007674 <itsdk_loop>:
 * if the MCU have no lowpower mode. The function update the time component, call
 * all the recurrent SDK operations to be maintained.
 * When a scheduler has been activated it calls the scheduler task when needed.
 * Then is calls the project specific loop function.
 */
void itsdk_loop() {
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0

    #if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
 8007678:	f001 fd74 	bl	8009164 <wdg_refresh>
	#endif
	#if ITSDK_TIMER_SLOTS > 0
	   itsdk_stimer_run();
 800767c:	f000 fa56 	bl	8007b2c <itsdk_stimer_run>
	#endif
	#if ITSDK_SHEDULER_TASKS > 0
	   itdt_sched_execute();
 8007680:	f000 f860 	bl	8007744 <itdt_sched_execute>
	   accel_process_loop();
    #endif
	#if ITSDK_DRIVERS_WITH_GNSS_DRIVER == __ENABLE
	   gnss_process_loop(BOOL_FALSE);
	#endif
	project_loop();
 8007684:	f7f9 fb2a 	bl	8000cdc <project_loop>
	#if ITSDK_WITH_CONSOLE == __ENABLE
	   itsdk_console_loop();
	#endif
	#if ITSDK_TIMER_SLOTS > 0
		if ( itsdk_stimer_isLowPowerSwitchAutorized() ) {
 8007688:	f000 fa24 	bl	8007ad4 <itsdk_stimer_isLowPowerSwitchAutorized>
 800768c:	1e03      	subs	r3, r0, #0
 800768e:	d001      	beq.n	8007694 <itsdk_loop+0x20>
	#endif
			lowPower_switch();
 8007690:	f7ff ff7c 	bl	800758c <lowPower_switch>
	#if ITSDK_TIMER_SLOTS > 0
		}
	#endif
}
 8007694:	46c0      	nop			; (mov r8, r8)
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <itsdk_computeCRC32>:


/**
 * Return CRC32 value for data.
 */
uint32_t itsdk_computeCRC32(const uint8_t *data, uint16_t length) {
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	000a      	movs	r2, r1
 80076a6:	1cbb      	adds	r3, r7, #2
 80076a8:	801a      	strh	r2, [r3, #0]
  uint32_t crc = 0xffffffff;
 80076aa:	2301      	movs	r3, #1
 80076ac:	425b      	negs	r3, r3
 80076ae:	617b      	str	r3, [r7, #20]
  while (length--) {
 80076b0:	e039      	b.n	8007726 <itsdk_computeCRC32+0x8a>
    uint8_t c = *data++;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	220e      	movs	r2, #14
 80076ba:	18ba      	adds	r2, r7, r2
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	7013      	strb	r3, [r2, #0]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 80076c0:	2380      	movs	r3, #128	; 0x80
 80076c2:	613b      	str	r3, [r7, #16]
 80076c4:	e02c      	b.n	8007720 <itsdk_computeCRC32+0x84>
      bool bit = crc & 0x80000000;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	0fdb      	lsrs	r3, r3, #31
 80076ca:	07da      	lsls	r2, r3, #31
 80076cc:	230f      	movs	r3, #15
 80076ce:	18fb      	adds	r3, r7, r3
 80076d0:	1e51      	subs	r1, r2, #1
 80076d2:	418a      	sbcs	r2, r1
 80076d4:	701a      	strb	r2, [r3, #0]
      if (c & i) {
 80076d6:	230e      	movs	r3, #14
 80076d8:	18fb      	adds	r3, r7, r3
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	4013      	ands	r3, r2
 80076e0:	d00f      	beq.n	8007702 <itsdk_computeCRC32+0x66>
        bit = !bit;
 80076e2:	210f      	movs	r1, #15
 80076e4:	187b      	adds	r3, r7, r1
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	1e5a      	subs	r2, r3, #1
 80076ea:	4193      	sbcs	r3, r2
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2201      	movs	r2, #1
 80076f0:	4053      	eors	r3, r2
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	001a      	movs	r2, r3
 80076f6:	187b      	adds	r3, r7, r1
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	781a      	ldrb	r2, [r3, #0]
 80076fc:	2101      	movs	r1, #1
 80076fe:	400a      	ands	r2, r1
 8007700:	701a      	strb	r2, [r3, #0]
      }
      crc <<= 1;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	617b      	str	r3, [r7, #20]
      if (bit) {
 8007708:	230f      	movs	r3, #15
 800770a:	18fb      	adds	r3, r7, r3
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <itsdk_computeCRC32+0x7e>
        crc ^= 0x04c11db7;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <itsdk_computeCRC32+0xa4>)
 8007716:	4053      	eors	r3, r2
 8007718:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	085b      	lsrs	r3, r3, #1
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1cf      	bne.n	80076c6 <itsdk_computeCRC32+0x2a>
  while (length--) {
 8007726:	1cbb      	adds	r3, r7, #2
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	1cba      	adds	r2, r7, #2
 800772c:	1e59      	subs	r1, r3, #1
 800772e:	8011      	strh	r1, [r2, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1be      	bne.n	80076b2 <itsdk_computeCRC32+0x16>
      }
    }
  }
  return crc;
 8007734:	697b      	ldr	r3, [r7, #20]
}
 8007736:	0018      	movs	r0, r3
 8007738:	46bd      	mov	sp, r7
 800773a:	b006      	add	sp, #24
 800773c:	bd80      	pop	{r7, pc}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	04c11db7 	.word	0x04c11db7

08007744 <itdt_sched_execute>:
}

/**
 * Task executor
 */
void itdt_sched_execute() {
 8007744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0

	uint64_t t = itsdk_time_get_ms();
 800774a:	f000 f991 	bl	8007a70 <itsdk_time_get_ms>
 800774e:	0003      	movs	r3, r0
 8007750:	000c      	movs	r4, r1
 8007752:	60bb      	str	r3, [r7, #8]
 8007754:	60fc      	str	r4, [r7, #12]
	for (int i = 0 ; i < __sNum ; i++) {
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e091      	b.n	8007880 <itdt_sched_execute+0x13c>
		do {
			if ( __scheds[i].nextRun <= t ) {
 800775c:	4a4e      	ldr	r2, [pc, #312]	; (8007898 <itdt_sched_execute+0x154>)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	18d3      	adds	r3, r2, r3
 8007764:	685c      	ldr	r4, [r3, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	42a2      	cmp	r2, r4
 800776c:	d332      	bcc.n	80077d4 <itdt_sched_execute+0x90>
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	42a2      	cmp	r2, r4
 8007772:	d102      	bne.n	800777a <itdt_sched_execute+0x36>
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	d32c      	bcc.n	80077d4 <itdt_sched_execute+0x90>
				if ( !__scheds[i].halt ) {
 800777a:	4a47      	ldr	r2, [pc, #284]	; (8007898 <itdt_sched_execute+0x154>)
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2108      	movs	r1, #8
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	18d3      	adds	r3, r2, r3
 8007784:	185b      	adds	r3, r3, r1
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	079b      	lsls	r3, r3, #30
 800778a:	0fdb      	lsrs	r3, r3, #31
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <itdt_sched_execute+0x5c>
					_LOG_SCHED(("[sched] (%d) exec @%ld\r\n",i,t));
					(*__scheds[i].func)();
 8007792:	4a41      	ldr	r2, [pc, #260]	; (8007898 <itdt_sched_execute+0x154>)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	18d3      	adds	r3, r2, r3
 800779a:	330c      	adds	r3, #12
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4798      	blx	r3
				}
	 		    __scheds[i].nextRun += (uint64_t)__scheds[i].period;
 80077a0:	4a3d      	ldr	r2, [pc, #244]	; (8007898 <itdt_sched_execute+0x154>)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	18d3      	adds	r3, r2, r3
 80077a8:	685c      	ldr	r4, [r3, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	493a      	ldr	r1, [pc, #232]	; (8007898 <itdt_sched_execute+0x154>)
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	2008      	movs	r0, #8
 80077b2:	0112      	lsls	r2, r2, #4
 80077b4:	188a      	adds	r2, r1, r2
 80077b6:	1812      	adds	r2, r2, r0
 80077b8:	6812      	ldr	r2, [r2, #0]
 80077ba:	0212      	lsls	r2, r2, #8
 80077bc:	0a12      	lsrs	r2, r2, #8
 80077be:	0015      	movs	r5, r2
 80077c0:	2200      	movs	r2, #0
 80077c2:	0016      	movs	r6, r2
 80077c4:	195b      	adds	r3, r3, r5
 80077c6:	4174      	adcs	r4, r6
 80077c8:	4933      	ldr	r1, [pc, #204]	; (8007898 <itdt_sched_execute+0x154>)
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	0112      	lsls	r2, r2, #4
 80077ce:	188a      	adds	r2, r1, r2
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	6054      	str	r4, [r2, #4]
			}
		} while (!__scheds[i].skip && __scheds[i].nextRun <= t );
 80077d4:	4a30      	ldr	r2, [pc, #192]	; (8007898 <itdt_sched_execute+0x154>)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2108      	movs	r1, #8
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	18d3      	adds	r3, r2, r3
 80077de:	185b      	adds	r3, r3, r1
 80077e0:	78db      	ldrb	r3, [r3, #3]
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	0fdb      	lsrs	r3, r3, #31
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d12b      	bne.n	8007844 <itdt_sched_execute+0x100>
 80077ec:	4a2a      	ldr	r2, [pc, #168]	; (8007898 <itdt_sched_execute+0x154>)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	18d3      	adds	r3, r2, r3
 80077f4:	685c      	ldr	r4, [r3, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	42a2      	cmp	r2, r4
 80077fc:	d322      	bcc.n	8007844 <itdt_sched_execute+0x100>
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	42a2      	cmp	r2, r4
 8007802:	d1ab      	bne.n	800775c <itdt_sched_execute+0x18>
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	429a      	cmp	r2, r3
 8007808:	d31c      	bcc.n	8007844 <itdt_sched_execute+0x100>
 800780a:	e7a7      	b.n	800775c <itdt_sched_execute+0x18>
		while (__scheds[i].skip &&__scheds[i].nextRun <= t) __scheds[i].nextRun += __scheds[i].period;
 800780c:	4a22      	ldr	r2, [pc, #136]	; (8007898 <itdt_sched_execute+0x154>)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	18d3      	adds	r3, r2, r3
 8007814:	685c      	ldr	r4, [r3, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	491f      	ldr	r1, [pc, #124]	; (8007898 <itdt_sched_execute+0x154>)
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	2008      	movs	r0, #8
 800781e:	0112      	lsls	r2, r2, #4
 8007820:	188a      	adds	r2, r1, r2
 8007822:	1812      	adds	r2, r2, r0
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	0212      	lsls	r2, r2, #8
 8007828:	0a12      	lsrs	r2, r2, #8
 800782a:	603a      	str	r2, [r7, #0]
 800782c:	2200      	movs	r2, #0
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	185b      	adds	r3, r3, r1
 8007836:	4154      	adcs	r4, r2
 8007838:	4917      	ldr	r1, [pc, #92]	; (8007898 <itdt_sched_execute+0x154>)
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	0112      	lsls	r2, r2, #4
 800783e:	188a      	adds	r2, r1, r2
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	6054      	str	r4, [r2, #4]
 8007844:	4a14      	ldr	r2, [pc, #80]	; (8007898 <itdt_sched_execute+0x154>)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2108      	movs	r1, #8
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	18d3      	adds	r3, r2, r3
 800784e:	185b      	adds	r3, r3, r1
 8007850:	78db      	ldrb	r3, [r3, #3]
 8007852:	07db      	lsls	r3, r3, #31
 8007854:	0fdb      	lsrs	r3, r3, #31
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00e      	beq.n	800787a <itdt_sched_execute+0x136>
 800785c:	4a0e      	ldr	r2, [pc, #56]	; (8007898 <itdt_sched_execute+0x154>)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	18d3      	adds	r3, r2, r3
 8007864:	685c      	ldr	r4, [r3, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	42a2      	cmp	r2, r4
 800786c:	d305      	bcc.n	800787a <itdt_sched_execute+0x136>
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	42a2      	cmp	r2, r4
 8007872:	d1cb      	bne.n	800780c <itdt_sched_execute+0xc8>
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	429a      	cmp	r2, r3
 8007878:	d2c8      	bcs.n	800780c <itdt_sched_execute+0xc8>
	for (int i = 0 ; i < __sNum ; i++) {
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	3301      	adds	r3, #1
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <itdt_sched_execute+0x158>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	001a      	movs	r2, r3
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	4293      	cmp	r3, r2
 800788a:	da00      	bge.n	800788e <itdt_sched_execute+0x14a>
 800788c:	e766      	b.n	800775c <itdt_sched_execute+0x18>
		_LOG_SCHED(("[sched] (%d) next @%ld\r\n",i,__scheds[i].nextRun));
	}

}
 800788e:	46c0      	nop			; (mov r8, r8)
 8007890:	46bd      	mov	sp, r7
 8007892:	b007      	add	sp, #28
 8007894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	20000438 	.word	0x20000438
 800789c:	200000ad 	.word	0x200000ad

080078a0 <itdt_sched_nextRun>:
}

/**
 * Return time in ms to the next task running
 */
uint32_t itdt_sched_nextRun() {
 80078a0:	b590      	push	{r4, r7, lr}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
	uint64_t min = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	2400      	movs	r4, #0
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]
 80078b2:	e029      	b.n	8007908 <itdt_sched_nextRun+0x68>
		if (  !__scheds[i].halt && (min == 0 || min > __scheds[i].nextRun) ) {
 80078b4:	4a28      	ldr	r2, [pc, #160]	; (8007958 <itdt_sched_nextRun+0xb8>)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2108      	movs	r1, #8
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	18d3      	adds	r3, r2, r3
 80078be:	185b      	adds	r3, r3, r1
 80078c0:	78db      	ldrb	r3, [r3, #3]
 80078c2:	079b      	lsls	r3, r3, #30
 80078c4:	0fdb      	lsrs	r3, r3, #31
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11a      	bne.n	8007902 <itdt_sched_nextRun+0x62>
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	d00e      	beq.n	80078f2 <itdt_sched_nextRun+0x52>
 80078d4:	4a20      	ldr	r2, [pc, #128]	; (8007958 <itdt_sched_nextRun+0xb8>)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	18d3      	adds	r3, r2, r3
 80078dc:	685c      	ldr	r4, [r3, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	42a2      	cmp	r2, r4
 80078e4:	d805      	bhi.n	80078f2 <itdt_sched_nextRun+0x52>
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	42a2      	cmp	r2, r4
 80078ea:	d10a      	bne.n	8007902 <itdt_sched_nextRun+0x62>
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d907      	bls.n	8007902 <itdt_sched_nextRun+0x62>
			min = __scheds[i].nextRun;
 80078f2:	4a19      	ldr	r2, [pc, #100]	; (8007958 <itdt_sched_nextRun+0xb8>)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	18d3      	adds	r3, r2, r3
 80078fa:	685c      	ldr	r4, [r3, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	613b      	str	r3, [r7, #16]
 8007900:	617c      	str	r4, [r7, #20]
	for (int i = 0 ; i < __sNum ; i++) {
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	4b14      	ldr	r3, [pc, #80]	; (800795c <itdt_sched_nextRun+0xbc>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	001a      	movs	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4293      	cmp	r3, r2
 8007912:	dbcf      	blt.n	80078b4 <itdt_sched_nextRun+0x14>
		}
	}
	if ( min > 0 ) {
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	4313      	orrs	r3, r2
 800791a:	d017      	beq.n	800794c <itdt_sched_nextRun+0xac>
		uint64_t t = itsdk_time_get_ms();
 800791c:	f000 f8a8 	bl	8007a70 <itsdk_time_get_ms>
 8007920:	0003      	movs	r3, r0
 8007922:	000c      	movs	r4, r1
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	607c      	str	r4, [r7, #4]
		if ( min >= t ){
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	429a      	cmp	r2, r3
 800792e:	d80b      	bhi.n	8007948 <itdt_sched_nextRun+0xa8>
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	429a      	cmp	r2, r3
 8007936:	d103      	bne.n	8007940 <itdt_sched_nextRun+0xa0>
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	429a      	cmp	r2, r3
 800793e:	d803      	bhi.n	8007948 <itdt_sched_nextRun+0xa8>
			return (uint32_t)(min - t);
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	e003      	b.n	8007950 <itdt_sched_nextRun+0xb0>
		} else {
			return 0;
 8007948:	2300      	movs	r3, #0
 800794a:	e001      	b.n	8007950 <itdt_sched_nextRun+0xb0>
		}
	} else {
		return __INFINITE_32B; // max duration
 800794c:	2301      	movs	r3, #1
 800794e:	425b      	negs	r3, r3
	}
}
 8007950:	0018      	movs	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	b007      	add	sp, #28
 8007956:	bd90      	pop	{r4, r7, pc}
 8007958:	20000438 	.word	0x20000438
 800795c:	200000ad 	.word	0x200000ad

08007960 <itsdk_time_add_us>:


/**
 * Add the given number of uS to the uS global timer
 */
void itsdk_time_add_us(uint32_t us) {
 8007960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
	// apply correction
	#if ITSDK_CLK_CORRECTION != 0
	us = us + ( (int64_t)us * ITSDK_CLK_CORRECTION ) / 1000;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	2300      	movs	r3, #0
 800796e:	607b      	str	r3, [r7, #4]
 8007970:	22fa      	movs	r2, #250	; 0xfa
 8007972:	0092      	lsls	r2, r2, #2
 8007974:	2300      	movs	r3, #0
 8007976:	6838      	ldr	r0, [r7, #0]
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	f7f8 fc9d 	bl	80002b8 <__aeabi_lmul>
 800797e:	0003      	movs	r3, r0
 8007980:	000c      	movs	r4, r1
 8007982:	0018      	movs	r0, r3
 8007984:	0021      	movs	r1, r4
 8007986:	22fa      	movs	r2, #250	; 0xfa
 8007988:	0092      	lsls	r2, r2, #2
 800798a:	2300      	movs	r3, #0
 800798c:	f7f8 fc50 	bl	8000230 <__aeabi_ldivmod>
 8007990:	0003      	movs	r3, r0
 8007992:	000c      	movs	r4, r1
 8007994:	001a      	movs	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	189b      	adds	r3, r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
	#endif
	uint64_t n = __timeus + us;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	001d      	movs	r5, r3
 80079a0:	2300      	movs	r3, #0
 80079a2:	001e      	movs	r6, r3
 80079a4:	4b12      	ldr	r3, [pc, #72]	; (80079f0 <itsdk_time_add_us+0x90>)
 80079a6:	685c      	ldr	r4, [r3, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	195b      	adds	r3, r3, r5
 80079ac:	4174      	adcs	r4, r6
 80079ae:	613b      	str	r3, [r7, #16]
 80079b0:	617c      	str	r4, [r7, #20]
	if ( n < __timeus  ) {
 80079b2:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <itsdk_time_add_us+0x90>)
 80079b4:	685c      	ldr	r4, [r3, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	42a2      	cmp	r2, r4
 80079bc:	d305      	bcc.n	80079ca <itsdk_time_add_us+0x6a>
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	42a2      	cmp	r2, r4
 80079c2:	d10b      	bne.n	80079dc <itsdk_time_add_us+0x7c>
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d208      	bcs.n	80079dc <itsdk_time_add_us+0x7c>
		__time_has_overrun=1;
 80079ca:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <itsdk_time_add_us+0x94>)
 80079cc:	2201      	movs	r2, #1
 80079ce:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 80079d0:	4b09      	ldr	r3, [pc, #36]	; (80079f8 <itsdk_time_add_us+0x98>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <itsdk_time_add_us+0x98>)
 80079da:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 80079dc:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <itsdk_time_add_us+0x90>)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	697c      	ldr	r4, [r7, #20]
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	6054      	str	r4, [r2, #4]
}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	46bd      	mov	sp, r7
 80079ea:	b007      	add	sp, #28
 80079ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	200000b0 	.word	0x200000b0
 80079f4:	200000b8 	.word	0x200000b8
 80079f8:	200000b9 	.word	0x200000b9

080079fc <itsdk_time_set_ms>:

/**
 * Set current time in ms
 */
void itsdk_time_set_ms(uint64_t ms) {
 80079fc:	b590      	push	{r4, r7, lr}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6038      	str	r0, [r7, #0]
 8007a04:	6079      	str	r1, [r7, #4]
	uint64_t n = ms * 1000L;
 8007a06:	22fa      	movs	r2, #250	; 0xfa
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6838      	ldr	r0, [r7, #0]
 8007a0e:	6879      	ldr	r1, [r7, #4]
 8007a10:	f7f8 fc52 	bl	80002b8 <__aeabi_lmul>
 8007a14:	0003      	movs	r3, r0
 8007a16:	000c      	movs	r4, r1
 8007a18:	60bb      	str	r3, [r7, #8]
 8007a1a:	60fc      	str	r4, [r7, #12]
	if ( (__timeus - n) > 1000000L   ) {	// difference is > 1m assuming the counter has restarted
 8007a1c:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <itsdk_time_set_ms+0x64>)
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	68fc      	ldr	r4, [r7, #12]
 8007a26:	1ac9      	subs	r1, r1, r3
 8007a28:	41a2      	sbcs	r2, r4
 8007a2a:	000b      	movs	r3, r1
 8007a2c:	0014      	movs	r4, r2
 8007a2e:	2c00      	cmp	r4, #0
 8007a30:	d103      	bne.n	8007a3a <itsdk_time_set_ms+0x3e>
 8007a32:	d10b      	bne.n	8007a4c <itsdk_time_set_ms+0x50>
 8007a34:	4a0b      	ldr	r2, [pc, #44]	; (8007a64 <itsdk_time_set_ms+0x68>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d908      	bls.n	8007a4c <itsdk_time_set_ms+0x50>
		__time_has_overrun=1;
 8007a3a:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <itsdk_time_set_ms+0x6c>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <itsdk_time_set_ms+0x70>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	4b08      	ldr	r3, [pc, #32]	; (8007a6c <itsdk_time_set_ms+0x70>)
 8007a4a:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 8007a4c:	4a04      	ldr	r2, [pc, #16]	; (8007a60 <itsdk_time_set_ms+0x64>)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	68fc      	ldr	r4, [r7, #12]
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	6054      	str	r4, [r2, #4]
}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b005      	add	sp, #20
 8007a5c:	bd90      	pop	{r4, r7, pc}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	200000b0 	.word	0x200000b0
 8007a64:	000f4240 	.word	0x000f4240
 8007a68:	200000b8 	.word	0x200000b8
 8007a6c:	200000b9 	.word	0x200000b9

08007a70 <itsdk_time_get_ms>:

/**
 * Get current time in ms
 */
uint64_t itsdk_time_get_ms() {
 8007a70:	b5b0      	push	{r4, r5, r7, lr}
 8007a72:	af00      	add	r7, sp, #0
	return __timeus / 1000;
 8007a74:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <itsdk_time_get_ms+0x20>)
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	6859      	ldr	r1, [r3, #4]
 8007a7a:	22fa      	movs	r2, #250	; 0xfa
 8007a7c:	0092      	lsls	r2, r2, #2
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f7f8 fbfa 	bl	8000278 <__aeabi_uldivmod>
 8007a84:	0003      	movs	r3, r0
 8007a86:	000c      	movs	r4, r1
}
 8007a88:	0018      	movs	r0, r3
 8007a8a:	0021      	movs	r1, r4
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8007a90:	200000b0 	.word	0x200000b0

08007a94 <itsdk_time_get_us>:

/**
 * Get current time in us
 */
uint64_t itsdk_time_get_us() {
 8007a94:	b590      	push	{r4, r7, lr}
 8007a96:	af00      	add	r7, sp, #0
	return __timeus;
 8007a98:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <itsdk_time_get_us+0x14>)
 8007a9a:	685c      	ldr	r4, [r3, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
}
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	0021      	movs	r1, r4
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd90      	pop	{r4, r7, pc}
 8007aa6:	46c0      	nop			; (mov r8, r8)
 8007aa8:	200000b0 	.word	0x200000b0

08007aac <itsdk_time_init>:
}

/**
 * Init time functions
 */
void itsdk_time_init() {
 8007aac:	b5b0      	push	{r4, r5, r7, lr}
 8007aae:	af00      	add	r7, sp, #0
#if ITSDK_PLATFORM == __PLATFORM_STM32L0
  #if ITSDK_WITH_RTC != __RTC_NONE
	rtc_resetTime();
 8007ab0:	f001 f990 	bl	8008dd4 <rtc_resetTime>
	rtc_adjustTime();
 8007ab4:	f001 fa26 	bl	8008f04 <rtc_adjustTime>
  #endif
	systick_adjustTime();
 8007ab8:	f001 fa82 	bl	8008fc0 <systick_adjustTime>
  #if ITSDK_WITH_RTC != __RTC_NONE
	itsdk_time_set_ms(rtc_getTimestampMs());
 8007abc:	f001 f89c 	bl	8008bf8 <rtc_getTimestampMs>
 8007ac0:	0003      	movs	r3, r0
 8007ac2:	000c      	movs	r4, r1
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	0021      	movs	r1, r4
 8007ac8:	f7ff ff98 	bl	80079fc <itsdk_time_set_ms>
  #endif
#else
	#error "platform not supported"
#endif
}
 8007acc:	46c0      	nop			; (mov r8, r8)
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007ad4 <itsdk_stimer_isLowPowerSwitchAutorized>:
 * Some soft timers need to have a precise timing and are not supporting
 * the variation due to the deep sleep RTC duration.
 * An improvement will be to moderate the RTC sleep duration to the duration
 * of these timer to avoid the timing GAP. See it later.
 */
bool itsdk_stimer_isLowPowerSwitchAutorized() {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
	int i = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 8007ade:	e01b      	b.n	8007b18 <itsdk_stimer_isLowPowerSwitchAutorized+0x44>
		if (__stimer_slots[i].inUse && __stimer_slots[i].allowLowPower == false ) {
 8007ae0:	4911      	ldr	r1, [pc, #68]	; (8007b28 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	0013      	movs	r3, r2
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	189b      	adds	r3, r3, r2
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	5c5b      	ldrb	r3, [r3, r1]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00f      	beq.n	8007b12 <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
 8007af2:	490d      	ldr	r1, [pc, #52]	; (8007b28 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	0013      	movs	r3, r2
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	189b      	adds	r3, r3, r2
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	18cb      	adds	r3, r1, r3
 8007b00:	3301      	adds	r3, #1
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2201      	movs	r2, #1
 8007b06:	4053      	eors	r3, r2
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
			return false;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e006      	b.n	8007b20 <itsdk_stimer_isLowPowerSwitchAutorized+0x4c>
		}
		i++;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	3301      	adds	r3, #1
 8007b16:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	dde0      	ble.n	8007ae0 <itsdk_stimer_isLowPowerSwitchAutorized+0xc>
	}
	return true;
 8007b1e:	2301      	movs	r3, #1
}
 8007b20:	0018      	movs	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	b002      	add	sp, #8
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	200000c0 	.word	0x200000c0

08007b2c <itsdk_stimer_run>:

/**
 * Run the software timer execution. Call this function as much as
 * possible. At least on every wake-up from sleep
 */
void itsdk_stimer_run() {
 8007b2c:	b590      	push	{r4, r7, lr}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 8007b32:	f7ff ff9d 	bl	8007a70 <itsdk_time_get_ms>
 8007b36:	0003      	movs	r3, r0
 8007b38:	000c      	movs	r4, r1
 8007b3a:	603b      	str	r3, [r7, #0]
 8007b3c:	607c      	str	r4, [r7, #4]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e045      	b.n	8007bd0 <itsdk_stimer_run+0xa4>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs <= t ) {
 8007b44:	4926      	ldr	r1, [pc, #152]	; (8007be0 <itsdk_stimer_run+0xb4>)
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	0013      	movs	r3, r2
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	189b      	adds	r3, r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	5c5b      	ldrb	r3, [r3, r1]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d039      	beq.n	8007bca <itsdk_stimer_run+0x9e>
 8007b56:	4922      	ldr	r1, [pc, #136]	; (8007be0 <itsdk_stimer_run+0xb4>)
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	0013      	movs	r3, r2
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	189b      	adds	r3, r3, r2
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	18cb      	adds	r3, r1, r3
 8007b64:	3308      	adds	r3, #8
 8007b66:	685c      	ldr	r4, [r3, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	42a2      	cmp	r2, r4
 8007b6e:	d32c      	bcc.n	8007bca <itsdk_stimer_run+0x9e>
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	42a2      	cmp	r2, r4
 8007b74:	d102      	bne.n	8007b7c <itsdk_stimer_run+0x50>
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d326      	bcc.n	8007bca <itsdk_stimer_run+0x9e>
			__stimer_slots[i].inUse = false;
 8007b7c:	4918      	ldr	r1, [pc, #96]	; (8007be0 <itsdk_stimer_run+0xb4>)
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	0013      	movs	r3, r2
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	189b      	adds	r3, r3, r2
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	2200      	movs	r2, #0
 8007b8a:	545a      	strb	r2, [r3, r1]
			if (__stimer_slots[i].callback_func != NULL )
 8007b8c:	4914      	ldr	r1, [pc, #80]	; (8007be0 <itsdk_stimer_run+0xb4>)
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	0013      	movs	r3, r2
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	189b      	adds	r3, r3, r2
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	18cb      	adds	r3, r1, r3
 8007b9a:	3310      	adds	r3, #16
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d013      	beq.n	8007bca <itsdk_stimer_run+0x9e>
				__stimer_slots[i].callback_func(__stimer_slots[i].customValue);
 8007ba2:	490f      	ldr	r1, [pc, #60]	; (8007be0 <itsdk_stimer_run+0xb4>)
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	0013      	movs	r3, r2
 8007ba8:	005b      	lsls	r3, r3, #1
 8007baa:	189b      	adds	r3, r3, r2
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	18cb      	adds	r3, r1, r3
 8007bb0:	3310      	adds	r3, #16
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	480a      	ldr	r0, [pc, #40]	; (8007be0 <itsdk_stimer_run+0xb4>)
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	0013      	movs	r3, r2
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	189b      	adds	r3, r3, r2
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	18c3      	adds	r3, r0, r3
 8007bc2:	3314      	adds	r3, #20
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	4788      	blx	r1
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	ddb6      	ble.n	8007b44 <itsdk_stimer_run+0x18>
		}
	}
}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	b005      	add	sp, #20
 8007bdc:	bd90      	pop	{r4, r7, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	200000c0 	.word	0x200000c0

08007be4 <itsdk_stimer_nextTimeoutMs>:

/**
 * Compute the number of Ms from Now to the next Timer to expire.
 * return ITSDK_STIMER_INFINITE when none are in execution or in the future.
 */
uint32_t itsdk_stimer_nextTimeoutMs(){
 8007be4:	b590      	push	{r4, r7, lr}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 8007bea:	f7ff ff41 	bl	8007a70 <itsdk_time_get_ms>
 8007bee:	0003      	movs	r3, r0
 8007bf0:	000c      	movs	r4, r1
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	607c      	str	r4, [r7, #4]
	uint64_t min = __INFINITE_64B;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	425b      	negs	r3, r3
 8007bfa:	17dc      	asrs	r4, r3, #31
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	e03d      	b.n	8007c82 <itsdk_stimer_nextTimeoutMs+0x9e>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs >= t ) {
 8007c06:	492c      	ldr	r1, [pc, #176]	; (8007cb8 <itsdk_stimer_nextTimeoutMs+0xd4>)
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	0013      	movs	r3, r2
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	189b      	adds	r3, r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	5c5b      	ldrb	r3, [r3, r1]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d031      	beq.n	8007c7c <itsdk_stimer_nextTimeoutMs+0x98>
 8007c18:	4927      	ldr	r1, [pc, #156]	; (8007cb8 <itsdk_stimer_nextTimeoutMs+0xd4>)
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	0013      	movs	r3, r2
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	189b      	adds	r3, r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	18cb      	adds	r3, r1, r3
 8007c26:	3308      	adds	r3, #8
 8007c28:	685c      	ldr	r4, [r3, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	42a2      	cmp	r2, r4
 8007c30:	d824      	bhi.n	8007c7c <itsdk_stimer_nextTimeoutMs+0x98>
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	42a2      	cmp	r2, r4
 8007c36:	d102      	bne.n	8007c3e <itsdk_stimer_nextTimeoutMs+0x5a>
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d81e      	bhi.n	8007c7c <itsdk_stimer_nextTimeoutMs+0x98>
			if ( __stimer_slots[i].timeoutMs < min ) min = __stimer_slots[i].timeoutMs;
 8007c3e:	491e      	ldr	r1, [pc, #120]	; (8007cb8 <itsdk_stimer_nextTimeoutMs+0xd4>)
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	0013      	movs	r3, r2
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	189b      	adds	r3, r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	18cb      	adds	r3, r1, r3
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	685c      	ldr	r4, [r3, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	42a2      	cmp	r2, r4
 8007c56:	d805      	bhi.n	8007c64 <itsdk_stimer_nextTimeoutMs+0x80>
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	42a2      	cmp	r2, r4
 8007c5c:	d10e      	bne.n	8007c7c <itsdk_stimer_nextTimeoutMs+0x98>
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d90b      	bls.n	8007c7c <itsdk_stimer_nextTimeoutMs+0x98>
 8007c64:	4914      	ldr	r1, [pc, #80]	; (8007cb8 <itsdk_stimer_nextTimeoutMs+0xd4>)
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	0013      	movs	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	189b      	adds	r3, r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	18cb      	adds	r3, r1, r3
 8007c72:	3308      	adds	r3, #8
 8007c74:	685c      	ldr	r4, [r3, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	613b      	str	r3, [r7, #16]
 8007c7a:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	ddbe      	ble.n	8007c06 <itsdk_stimer_nextTimeoutMs+0x22>
		}
	}
	if ( min < __INFINITE_64B ) {
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	d102      	bne.n	8007c94 <itsdk_stimer_nextTimeoutMs+0xb0>
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	3301      	adds	r3, #1
 8007c92:	d00b      	beq.n	8007cac <itsdk_stimer_nextTimeoutMs+0xc8>
		min = min - t;
 8007c94:	6939      	ldr	r1, [r7, #16]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	687c      	ldr	r4, [r7, #4]
 8007c9c:	1ac9      	subs	r1, r1, r3
 8007c9e:	41a2      	sbcs	r2, r4
 8007ca0:	000b      	movs	r3, r1
 8007ca2:	0014      	movs	r4, r2
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	617c      	str	r4, [r7, #20]
		return min;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	e001      	b.n	8007cb0 <itsdk_stimer_nextTimeoutMs+0xcc>
	}
	return __INFINITE_32B;
 8007cac:	2301      	movs	r3, #1
 8007cae:	425b      	negs	r3, r3
}
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	b007      	add	sp, #28
 8007cb6:	bd90      	pop	{r4, r7, pc}
 8007cb8:	200000c0 	.word	0x200000c0

08007cbc <getPortFromBankId>:


/**
 * Convert the bankId used as a generic Id to the right GPIO structure
 */
GPIO_TypeDef * getPortFromBankId(uint8_t bankId) {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	0002      	movs	r2, r0
 8007cc4:	1dfb      	adds	r3, r7, #7
 8007cc6:	701a      	strb	r2, [r3, #0]
	switch ( bankId ) {
 8007cc8:	1dfb      	adds	r3, r7, #7
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b07      	cmp	r3, #7
 8007cce:	d811      	bhi.n	8007cf4 <getPortFromBankId+0x38>
 8007cd0:	009a      	lsls	r2, r3, #2
 8007cd2:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <getPortFromBankId+0x54>)
 8007cd4:	18d3      	adds	r3, r2, r3
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	469f      	mov	pc, r3
	case __BANK_A: return GPIOA;
 8007cda:	23a0      	movs	r3, #160	; 0xa0
 8007cdc:	05db      	lsls	r3, r3, #23
 8007cde:	e012      	b.n	8007d06 <getPortFromBankId+0x4a>
	case __BANK_B: return GPIOB;
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <getPortFromBankId+0x58>)
 8007ce2:	e010      	b.n	8007d06 <getPortFromBankId+0x4a>
	case __BANK_C: return GPIOC;
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <getPortFromBankId+0x5c>)
 8007ce6:	e00e      	b.n	8007d06 <getPortFromBankId+0x4a>
#if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D: return GPIOD;
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <getPortFromBankId+0x60>)
 8007cea:	e00c      	b.n	8007d06 <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E: return GPIOE;
 8007cec:	4b0c      	ldr	r3, [pc, #48]	; (8007d20 <getPortFromBankId+0x64>)
 8007cee:	e00a      	b.n	8007d06 <getPortFromBankId+0x4a>
#endif
	case __BANK_H: return GPIOH;
 8007cf0:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <getPortFromBankId+0x68>)
 8007cf2:	e008      	b.n	8007d06 <getPortFromBankId+0x4a>
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_GPIO_UNSUPPORTED_BANK,(uint16_t)bankId);
 8007cf4:	1dfb      	adds	r3, r7, #7
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	4a0b      	ldr	r2, [pc, #44]	; (8007d28 <getPortFromBankId+0x6c>)
 8007cfc:	0019      	movs	r1, r3
 8007cfe:	0010      	movs	r0, r2
 8007d00:	f7ff f9b8 	bl	8007074 <itsdk_error_report>
	}
	return NULL;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	0018      	movs	r0, r3
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	b002      	add	sp, #8
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	08009e54 	.word	0x08009e54
 8007d14:	50000400 	.word	0x50000400
 8007d18:	50000800 	.word	0x50000800
 8007d1c:	50000c00 	.word	0x50000c00
 8007d20:	50001000 	.word	0x50001000
 8007d24:	50001c00 	.word	0x50001c00
 8007d28:	d0000004 	.word	0xd0000004

08007d2c <gpio_configure_ext>:
void gpio_configure(uint8_t bank, uint16_t id, itsdk_gpio_type_t type ) {
	gpio_configure_ext(bank, id, type, ITSDK_GPIO_SPEED_LOW, ITSDK_GPIO_ALT_NONE );
}


void gpio_configure_ext(uint8_t bank, uint16_t id, itsdk_gpio_type_t type, itsdk_gpio_speed_t speed, itsdk_gpio_alternate_t alternate ) {
 8007d2c:	b5b0      	push	{r4, r5, r7, lr}
 8007d2e:	b08e      	sub	sp, #56	; 0x38
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	0005      	movs	r5, r0
 8007d34:	000c      	movs	r4, r1
 8007d36:	0010      	movs	r0, r2
 8007d38:	0019      	movs	r1, r3
 8007d3a:	1dfb      	adds	r3, r7, #7
 8007d3c:	1c2a      	adds	r2, r5, #0
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	1c22      	adds	r2, r4, #0
 8007d44:	801a      	strh	r2, [r3, #0]
 8007d46:	1dbb      	adds	r3, r7, #6
 8007d48:	1c02      	adds	r2, r0, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	1cfb      	adds	r3, r7, #3
 8007d4e:	1c0a      	adds	r2, r1, #0
 8007d50:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;

	switch ( bank ) {
 8007d52:	1dfb      	adds	r3, r7, #7
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b07      	cmp	r3, #7
 8007d58:	d852      	bhi.n	8007e00 <gpio_configure_ext+0xd4>
 8007d5a:	009a      	lsls	r2, r3, #2
 8007d5c:	4bc9      	ldr	r3, [pc, #804]	; (8008084 <gpio_configure_ext+0x358>)
 8007d5e:	18d3      	adds	r3, r2, r3
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	469f      	mov	pc, r3
	case __BANK_A:
		  __GPIOA_CLK_ENABLE();
 8007d64:	4bc8      	ldr	r3, [pc, #800]	; (8008088 <gpio_configure_ext+0x35c>)
 8007d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d68:	4bc7      	ldr	r3, [pc, #796]	; (8008088 <gpio_configure_ext+0x35c>)
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d70:	4bc5      	ldr	r3, [pc, #788]	; (8008088 <gpio_configure_ext+0x35c>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	2201      	movs	r2, #1
 8007d76:	4013      	ands	r3, r2
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	69fb      	ldr	r3, [r7, #28]
		  break;
 8007d7c:	e040      	b.n	8007e00 <gpio_configure_ext+0xd4>
	case __BANK_B:
		  __GPIOB_CLK_ENABLE();
 8007d7e:	4bc2      	ldr	r3, [pc, #776]	; (8008088 <gpio_configure_ext+0x35c>)
 8007d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d82:	4bc1      	ldr	r3, [pc, #772]	; (8008088 <gpio_configure_ext+0x35c>)
 8007d84:	2102      	movs	r1, #2
 8007d86:	430a      	orrs	r2, r1
 8007d88:	62da      	str	r2, [r3, #44]	; 0x2c
 8007d8a:	4bbf      	ldr	r3, [pc, #764]	; (8008088 <gpio_configure_ext+0x35c>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	2202      	movs	r2, #2
 8007d90:	4013      	ands	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
 8007d94:	69bb      	ldr	r3, [r7, #24]
		  break;
 8007d96:	e033      	b.n	8007e00 <gpio_configure_ext+0xd4>
	case __BANK_C:
		  __GPIOC_CLK_ENABLE();
 8007d98:	4bbb      	ldr	r3, [pc, #748]	; (8008088 <gpio_configure_ext+0x35c>)
 8007d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9c:	4bba      	ldr	r3, [pc, #744]	; (8008088 <gpio_configure_ext+0x35c>)
 8007d9e:	2104      	movs	r1, #4
 8007da0:	430a      	orrs	r2, r1
 8007da2:	62da      	str	r2, [r3, #44]	; 0x2c
 8007da4:	4bb8      	ldr	r3, [pc, #736]	; (8008088 <gpio_configure_ext+0x35c>)
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	2204      	movs	r2, #4
 8007daa:	4013      	ands	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]
 8007dae:	697b      	ldr	r3, [r7, #20]
		  break;
 8007db0:	e026      	b.n	8007e00 <gpio_configure_ext+0xd4>
    #if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D:
		  __GPIOD_CLK_ENABLE();
 8007db2:	4bb5      	ldr	r3, [pc, #724]	; (8008088 <gpio_configure_ext+0x35c>)
 8007db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db6:	4bb4      	ldr	r3, [pc, #720]	; (8008088 <gpio_configure_ext+0x35c>)
 8007db8:	2108      	movs	r1, #8
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8007dbe:	4bb2      	ldr	r3, [pc, #712]	; (8008088 <gpio_configure_ext+0x35c>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	2208      	movs	r2, #8
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	693b      	ldr	r3, [r7, #16]
		  break;
 8007dca:	e019      	b.n	8007e00 <gpio_configure_ext+0xd4>
	#endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E:
		  __GPIOE_CLK_ENABLE();
 8007dcc:	4bae      	ldr	r3, [pc, #696]	; (8008088 <gpio_configure_ext+0x35c>)
 8007dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd0:	4bad      	ldr	r3, [pc, #692]	; (8008088 <gpio_configure_ext+0x35c>)
 8007dd2:	2110      	movs	r1, #16
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8007dd8:	4bab      	ldr	r3, [pc, #684]	; (8008088 <gpio_configure_ext+0x35c>)
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	2210      	movs	r2, #16
 8007dde:	4013      	ands	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	68fb      	ldr	r3, [r7, #12]
		  break;
 8007de4:	e00c      	b.n	8007e00 <gpio_configure_ext+0xd4>
    #endif
	case __BANK_H:
		  __GPIOH_CLK_ENABLE();
 8007de6:	4ba8      	ldr	r3, [pc, #672]	; (8008088 <gpio_configure_ext+0x35c>)
 8007de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dea:	4ba7      	ldr	r3, [pc, #668]	; (8008088 <gpio_configure_ext+0x35c>)
 8007dec:	2180      	movs	r1, #128	; 0x80
 8007dee:	430a      	orrs	r2, r1
 8007df0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007df2:	4ba5      	ldr	r3, [pc, #660]	; (8008088 <gpio_configure_ext+0x35c>)
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	2280      	movs	r2, #128	; 0x80
 8007df8:	4013      	ands	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
		  break;
 8007dfe:	46c0      	nop			; (mov r8, r8)
	}

	GPIO_InitStruct.Pin = id;
 8007e00:	1d3b      	adds	r3, r7, #4
 8007e02:	881a      	ldrh	r2, [r3, #0]
 8007e04:	2320      	movs	r3, #32
 8007e06:	18fb      	adds	r3, r7, r3
 8007e08:	601a      	str	r2, [r3, #0]
	switch ( speed ) {
 8007e0a:	1cfb      	adds	r3, r7, #3
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <gpio_configure_ext+0xec>
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d005      	beq.n	8007e22 <gpio_configure_ext+0xf6>
 8007e16:	e009      	b.n	8007e2c <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_LOW:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e18:	2320      	movs	r3, #32
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	60da      	str	r2, [r3, #12]
		break;
 8007e20:	e004      	b.n	8007e2c <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_HIGH:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e22:	2320      	movs	r3, #32
 8007e24:	18fb      	adds	r3, r7, r3
 8007e26:	2203      	movs	r2, #3
 8007e28:	60da      	str	r2, [r3, #12]
		break;
 8007e2a:	46c0      	nop			; (mov r8, r8)

	}

	switch (type) {
 8007e2c:	1dbb      	adds	r3, r7, #6
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b13      	cmp	r3, #19
 8007e32:	d900      	bls.n	8007e36 <gpio_configure_ext+0x10a>
 8007e34:	e0a4      	b.n	8007f80 <gpio_configure_ext+0x254>
 8007e36:	009a      	lsls	r2, r3, #2
 8007e38:	4b94      	ldr	r3, [pc, #592]	; (800808c <gpio_configure_ext+0x360>)
 8007e3a:	18d3      	adds	r3, r2, r3
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	469f      	mov	pc, r3

	case GPIO_OUTPUT_PP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e40:	2120      	movs	r1, #32
 8007e42:	187b      	adds	r3, r7, r1
 8007e44:	2201      	movs	r2, #1
 8007e46:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e48:	187b      	adds	r3, r7, r1
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	609a      	str	r2, [r3, #8]
		break;
 8007e4e:	e097      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e50:	2120      	movs	r1, #32
 8007e52:	187b      	adds	r3, r7, r1
 8007e54:	2201      	movs	r2, #1
 8007e56:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e58:	187b      	adds	r3, r7, r1
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	609a      	str	r2, [r3, #8]
		break;
 8007e5e:	e08f      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e60:	2120      	movs	r1, #32
 8007e62:	187b      	adds	r3, r7, r1
 8007e64:	2201      	movs	r2, #1
 8007e66:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007e68:	187b      	adds	r3, r7, r1
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	609a      	str	r2, [r3, #8]
		break;
 8007e6e:	e087      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_OD:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007e70:	2120      	movs	r1, #32
 8007e72:	187b      	adds	r3, r7, r1
 8007e74:	2211      	movs	r2, #17
 8007e76:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e78:	187b      	adds	r3, r7, r1
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	609a      	str	r2, [r3, #8]
		break;
 8007e7e:	e07f      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INPUT:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e80:	2120      	movs	r1, #32
 8007e82:	187b      	adds	r3, r7, r1
 8007e84:	2200      	movs	r2, #0
 8007e86:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e88:	187b      	adds	r3, r7, r1
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	609a      	str	r2, [r3, #8]
		break;
 8007e8e:	e077      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e90:	2120      	movs	r1, #32
 8007e92:	187b      	adds	r3, r7, r1
 8007e94:	2200      	movs	r2, #0
 8007e96:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e98:	187b      	adds	r3, r7, r1
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	609a      	str	r2, [r3, #8]
		break;
 8007e9e:	e06f      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ea0:	2120      	movs	r1, #32
 8007ea2:	187b      	adds	r3, r7, r1
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007ea8:	187b      	adds	r3, r7, r1
 8007eaa:	2202      	movs	r2, #2
 8007eac:	609a      	str	r2, [r3, #8]
		break;
 8007eae:	e067      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007eb0:	2120      	movs	r1, #32
 8007eb2:	187b      	adds	r3, r7, r1
 8007eb4:	4a76      	ldr	r2, [pc, #472]	; (8008090 <gpio_configure_ext+0x364>)
 8007eb6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb8:	187b      	adds	r3, r7, r1
 8007eba:	2200      	movs	r2, #0
 8007ebc:	609a      	str	r2, [r3, #8]
		break;
 8007ebe:	e05f      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007ec0:	2120      	movs	r1, #32
 8007ec2:	187b      	adds	r3, r7, r1
 8007ec4:	4a72      	ldr	r2, [pc, #456]	; (8008090 <gpio_configure_ext+0x364>)
 8007ec6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007ec8:	187b      	adds	r3, r7, r1
 8007eca:	2202      	movs	r2, #2
 8007ecc:	609a      	str	r2, [r3, #8]
		break;
 8007ece:	e057      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007ed0:	2120      	movs	r1, #32
 8007ed2:	187b      	adds	r3, r7, r1
 8007ed4:	4a6e      	ldr	r2, [pc, #440]	; (8008090 <gpio_configure_ext+0x364>)
 8007ed6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ed8:	187b      	adds	r3, r7, r1
 8007eda:	2201      	movs	r2, #1
 8007edc:	609a      	str	r2, [r3, #8]
		break;
 8007ede:	e04f      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007ee0:	2120      	movs	r1, #32
 8007ee2:	187b      	adds	r3, r7, r1
 8007ee4:	4a6b      	ldr	r2, [pc, #428]	; (8008094 <gpio_configure_ext+0x368>)
 8007ee6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee8:	187b      	adds	r3, r7, r1
 8007eea:	2200      	movs	r2, #0
 8007eec:	609a      	str	r2, [r3, #8]
		break;
 8007eee:	e047      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007ef0:	2120      	movs	r1, #32
 8007ef2:	187b      	adds	r3, r7, r1
 8007ef4:	4a67      	ldr	r2, [pc, #412]	; (8008094 <gpio_configure_ext+0x368>)
 8007ef6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ef8:	187b      	adds	r3, r7, r1
 8007efa:	2201      	movs	r2, #1
 8007efc:	609a      	str	r2, [r3, #8]
		break;
 8007efe:	e03f      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007f00:	2120      	movs	r1, #32
 8007f02:	187b      	adds	r3, r7, r1
 8007f04:	4a63      	ldr	r2, [pc, #396]	; (8008094 <gpio_configure_ext+0x368>)
 8007f06:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007f08:	187b      	adds	r3, r7, r1
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	609a      	str	r2, [r3, #8]
		break;
 8007f0e:	e037      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_ANY:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007f10:	2120      	movs	r1, #32
 8007f12:	187b      	adds	r3, r7, r1
 8007f14:	4a60      	ldr	r2, [pc, #384]	; (8008098 <gpio_configure_ext+0x36c>)
 8007f16:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f18:	187b      	adds	r3, r7, r1
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	609a      	str	r2, [r3, #8]
		break;
 8007f1e:	e02f      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_ANALOG:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f20:	2120      	movs	r1, #32
 8007f22:	187b      	adds	r3, r7, r1
 8007f24:	2203      	movs	r2, #3
 8007f26:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f28:	187b      	adds	r3, r7, r1
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	609a      	str	r2, [r3, #8]
		break;
 8007f2e:	e027      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_OFF:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f30:	2120      	movs	r1, #32
 8007f32:	187b      	adds	r3, r7, r1
 8007f34:	2203      	movs	r2, #3
 8007f36:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f38:	187b      	adds	r3, r7, r1
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	609a      	str	r2, [r3, #8]
		break;
 8007f3e:	e01f      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_NOPULL:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f40:	2120      	movs	r1, #32
 8007f42:	187b      	adds	r3, r7, r1
 8007f44:	2202      	movs	r2, #2
 8007f46:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f48:	187b      	adds	r3, r7, r1
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	609a      	str	r2, [r3, #8]
	    break;
 8007f4e:	e017      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f50:	2120      	movs	r1, #32
 8007f52:	187b      	adds	r3, r7, r1
 8007f54:	2202      	movs	r2, #2
 8007f56:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f58:	187b      	adds	r3, r7, r1
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	609a      	str	r2, [r3, #8]
	    break;
 8007f5e:	e00f      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f60:	2120      	movs	r1, #32
 8007f62:	187b      	adds	r3, r7, r1
 8007f64:	2202      	movs	r2, #2
 8007f66:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007f68:	187b      	adds	r3, r7, r1
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	609a      	str	r2, [r3, #8]
	    break;
 8007f6e:	e007      	b.n	8007f80 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_OPENDRAIN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f70:	2120      	movs	r1, #32
 8007f72:	187b      	adds	r3, r7, r1
 8007f74:	2212      	movs	r2, #18
 8007f76:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f78:	187b      	adds	r3, r7, r1
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	609a      	str	r2, [r3, #8]
	    break;
 8007f7e:	46c0      	nop			; (mov r8, r8)

	}
	int err=0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	637b      	str	r3, [r7, #52]	; 0x34
	switch (type) {
 8007f84:	1dbb      	adds	r3, r7, #6
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	3b10      	subs	r3, #16
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d900      	bls.n	8007f90 <gpio_configure_ext+0x264>
 8007f8e:	e09d      	b.n	80080cc <gpio_configure_ext+0x3a0>
	case GPIO_ALTERNATE_PP_NOPULL:
	case GPIO_ALTERNATE_PP_PULLUP:
	case GPIO_ALTERNATE_PP_PULLDOWN:
	case GPIO_ALTERNATE_OPENDRAIN:
		switch (alternate) {
 8007f90:	2348      	movs	r3, #72	; 0x48
 8007f92:	18fb      	adds	r3, r7, r3
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d037      	beq.n	800800a <gpio_configure_ext+0x2de>
 8007f9a:	dc02      	bgt.n	8007fa2 <gpio_configure_ext+0x276>
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d007      	beq.n	8007fb0 <gpio_configure_ext+0x284>
				else err=1;
			#endif
			break;
		default:
		case ITSDK_GPIO_ALT_NONE:
			break;
 8007fa0:	e08c      	b.n	80080bc <gpio_configure_ext+0x390>
		switch (alternate) {
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d100      	bne.n	8007fa8 <gpio_configure_ext+0x27c>
 8007fa6:	e05d      	b.n	8008064 <gpio_configure_ext+0x338>
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d100      	bne.n	8007fae <gpio_configure_ext+0x282>
 8007fac:	e076      	b.n	800809c <gpio_configure_ext+0x370>
			break;
 8007fae:	e085      	b.n	80080bc <gpio_configure_ext+0x390>
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007fb0:	1dfb      	adds	r3, r7, #7
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10a      	bne.n	8007fce <gpio_configure_ext+0x2a2>
 8007fb8:	1d3b      	adds	r3, r7, #4
 8007fba:	881a      	ldrh	r2, [r3, #0]
 8007fbc:	2380      	movs	r3, #128	; 0x80
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d104      	bne.n	8007fce <gpio_configure_ext+0x2a2>
 8007fc4:	2320      	movs	r3, #32
 8007fc6:	18fb      	adds	r3, r7, r3
 8007fc8:	2202      	movs	r2, #2
 8007fca:	611a      	str	r2, [r3, #16]
 8007fcc:	e01c      	b.n	8008008 <gpio_configure_ext+0x2dc>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007fce:	1dfb      	adds	r3, r7, #7
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d108      	bne.n	8007fe8 <gpio_configure_ext+0x2bc>
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d104      	bne.n	8007fe8 <gpio_configure_ext+0x2bc>
 8007fde:	2320      	movs	r3, #32
 8007fe0:	18fb      	adds	r3, r7, r3
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	611a      	str	r2, [r3, #16]
 8007fe6:	e00f      	b.n	8008008 <gpio_configure_ext+0x2dc>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8007fe8:	1dfb      	adds	r3, r7, #7
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d108      	bne.n	8008002 <gpio_configure_ext+0x2d6>
 8007ff0:	1d3b      	adds	r3, r7, #4
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d104      	bne.n	8008002 <gpio_configure_ext+0x2d6>
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	18fb      	adds	r3, r7, r3
 8007ffc:	2205      	movs	r2, #5
 8007ffe:	611a      	str	r2, [r3, #16]
 8008000:	e002      	b.n	8008008 <gpio_configure_ext+0x2dc>
			else err=1;
 8008002:	2301      	movs	r3, #1
 8008004:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8008006:	e059      	b.n	80080bc <gpio_configure_ext+0x390>
 8008008:	e058      	b.n	80080bc <gpio_configure_ext+0x390>
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800800a:	1dfb      	adds	r3, r7, #7
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10a      	bne.n	8008028 <gpio_configure_ext+0x2fc>
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	881a      	ldrh	r2, [r3, #0]
 8008016:	2380      	movs	r3, #128	; 0x80
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	429a      	cmp	r2, r3
 800801c:	d104      	bne.n	8008028 <gpio_configure_ext+0x2fc>
 800801e:	2320      	movs	r3, #32
 8008020:	18fb      	adds	r3, r7, r3
 8008022:	2205      	movs	r2, #5
 8008024:	611a      	str	r2, [r3, #16]
 8008026:	e01c      	b.n	8008062 <gpio_configure_ext+0x336>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8008028:	1dfb      	adds	r3, r7, #7
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d108      	bne.n	8008042 <gpio_configure_ext+0x316>
 8008030:	1d3b      	adds	r3, r7, #4
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	2b20      	cmp	r3, #32
 8008036:	d104      	bne.n	8008042 <gpio_configure_ext+0x316>
 8008038:	2320      	movs	r3, #32
 800803a:	18fb      	adds	r3, r7, r3
 800803c:	2205      	movs	r2, #5
 800803e:	611a      	str	r2, [r3, #16]
 8008040:	e00f      	b.n	8008062 <gpio_configure_ext+0x336>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8008042:	1dfb      	adds	r3, r7, #7
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d108      	bne.n	800805c <gpio_configure_ext+0x330>
 800804a:	1d3b      	adds	r3, r7, #4
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d104      	bne.n	800805c <gpio_configure_ext+0x330>
 8008052:	2320      	movs	r3, #32
 8008054:	18fb      	adds	r3, r7, r3
 8008056:	2202      	movs	r2, #2
 8008058:	611a      	str	r2, [r3, #16]
 800805a:	e002      	b.n	8008062 <gpio_configure_ext+0x336>
			else err=1;
 800805c:	2301      	movs	r3, #1
 800805e:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8008060:	e02c      	b.n	80080bc <gpio_configure_ext+0x390>
 8008062:	e02b      	b.n	80080bc <gpio_configure_ext+0x390>
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8008064:	1dfb      	adds	r3, r7, #7
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d108      	bne.n	800807e <gpio_configure_ext+0x352>
 800806c:	1d3b      	adds	r3, r7, #4
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	2b20      	cmp	r3, #32
 8008072:	d104      	bne.n	800807e <gpio_configure_ext+0x352>
 8008074:	2320      	movs	r3, #32
 8008076:	18fb      	adds	r3, r7, r3
 8008078:	2200      	movs	r2, #0
 800807a:	611a      	str	r2, [r3, #16]
			break;
 800807c:	e01e      	b.n	80080bc <gpio_configure_ext+0x390>
				else err=1;
 800807e:	2301      	movs	r3, #1
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8008082:	e01b      	b.n	80080bc <gpio_configure_ext+0x390>
 8008084:	08009e74 	.word	0x08009e74
 8008088:	40021000 	.word	0x40021000
 800808c:	08009e94 	.word	0x08009e94
 8008090:	10110000 	.word	0x10110000
 8008094:	10210000 	.word	0x10210000
 8008098:	10310000 	.word	0x10310000
				if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800809c:	1dfb      	adds	r3, r7, #7
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d108      	bne.n	80080b6 <gpio_configure_ext+0x38a>
 80080a4:	1d3b      	adds	r3, r7, #4
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	2b20      	cmp	r3, #32
 80080aa:	d104      	bne.n	80080b6 <gpio_configure_ext+0x38a>
 80080ac:	2320      	movs	r3, #32
 80080ae:	18fb      	adds	r3, r7, r3
 80080b0:	2200      	movs	r2, #0
 80080b2:	611a      	str	r2, [r3, #16]
			break;
 80080b4:	e001      	b.n	80080ba <gpio_configure_ext+0x38e>
				else err=1;
 80080b6:	2301      	movs	r3, #1
 80080b8:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 80080ba:	46c0      	nop			; (mov r8, r8)
		}
		if (err>0) {
 80080bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dd06      	ble.n	80080d0 <gpio_configure_ext+0x3a4>
			log_error("Gpio - invalid alternate\r\n");
 80080c2:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <gpio_configure_ext+0x3c8>)
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7ff f939 	bl	800733c <log_error>
		}
		break;
 80080ca:	e001      	b.n	80080d0 <gpio_configure_ext+0x3a4>
	default:
		break;
 80080cc:	46c0      	nop			; (mov r8, r8)
 80080ce:	e000      	b.n	80080d2 <gpio_configure_ext+0x3a6>
		break;
 80080d0:	46c0      	nop			; (mov r8, r8)
	}


	HAL_GPIO_Init(getPortFromBankId(bank), &GPIO_InitStruct);
 80080d2:	1dfb      	adds	r3, r7, #7
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	0018      	movs	r0, r3
 80080d8:	f7ff fdf0 	bl	8007cbc <getPortFromBankId>
 80080dc:	0002      	movs	r2, r0
 80080de:	2320      	movs	r3, #32
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	0019      	movs	r1, r3
 80080e4:	0010      	movs	r0, r2
 80080e6:	f7f9 fe57 	bl	8001d98 <HAL_GPIO_Init>

}
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	46bd      	mov	sp, r7
 80080ee:	b00e      	add	sp, #56	; 0x38
 80080f0:	bdb0      	pop	{r4, r5, r7, pc}
 80080f2:	46c0      	nop			; (mov r8, r8)
 80080f4:	08009b70 	.word	0x08009b70

080080f8 <HAL_GPIO_EXTI_Callback>:
 * equal to 0.
 */
gpio_irq_chain_t __gpio_irq_chain = { NULL, 0, NULL };
gpio_irq_chain_t * __gpio_irq_wakeup = NULL;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	0002      	movs	r2, r0
 8008100:	1dbb      	adds	r3, r7, #6
 8008102:	801a      	strh	r2, [r3, #0]

	// When the __gpio_irq_wakeup handler is set this handler is called
	// Because we do not want the normal handler to be called until the
	// MCU is correctly configured when waking up from deep-sleep
	if (__gpio_irq_wakeup != NULL ) {
 8008104:	4b1b      	ldr	r3, [pc, #108]	; (8008174 <HAL_GPIO_EXTI_Callback+0x7c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00c      	beq.n	8008126 <HAL_GPIO_EXTI_Callback+0x2e>
		void (*p)(uint16_t p) = __gpio_irq_wakeup->irq_func;
 800810c:	4b19      	ldr	r3, [pc, #100]	; (8008174 <HAL_GPIO_EXTI_Callback+0x7c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	613b      	str	r3, [r7, #16]
		if ( p != NULL ) {
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <HAL_GPIO_EXTI_Callback+0x2e>
			p(GPIO_Pin);
 800811a:	1dbb      	adds	r3, r7, #6
 800811c:	881a      	ldrh	r2, [r3, #0]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	0010      	movs	r0, r2
 8008122:	4798      	blx	r3
			return;
 8008124:	e023      	b.n	800816e <HAL_GPIO_EXTI_Callback+0x76>
		}
	}
	// Normal non wake-up situation.
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 8008126:	4b14      	ldr	r3, [pc, #80]	; (8008178 <HAL_GPIO_EXTI_Callback+0x80>)
 8008128:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 800812a:	e019      	b.n	8008160 <HAL_GPIO_EXTI_Callback+0x68>
		void (*p)(uint16_t p) = c->irq_func;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60fb      	str	r3, [r7, #12]
		if ( p != NULL && (c->pinMask==0 || ((c->pinMask & GPIO_Pin) > 0) ) ) {
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d010      	beq.n	800815a <HAL_GPIO_EXTI_Callback+0x62>
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	889b      	ldrh	r3, [r3, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d007      	beq.n	8008150 <HAL_GPIO_EXTI_Callback+0x58>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	889b      	ldrh	r3, [r3, #4]
 8008144:	1dba      	adds	r2, r7, #6
 8008146:	8812      	ldrh	r2, [r2, #0]
 8008148:	4013      	ands	r3, r2
 800814a:	b29b      	uxth	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d004      	beq.n	800815a <HAL_GPIO_EXTI_Callback+0x62>
			p(GPIO_Pin);
 8008150:	1dbb      	adds	r3, r7, #6
 8008152:	881a      	ldrh	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	0010      	movs	r0, r2
 8008158:	4798      	blx	r3
		}
		c = c->next;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e2      	bne.n	800812c <HAL_GPIO_EXTI_Callback+0x34>
	}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <HAL_GPIO_EXTI_Callback+0x84>)
 8008168:	1dba      	adds	r2, r7, #6
 800816a:	8812      	ldrh	r2, [r2, #0]
 800816c:	615a      	str	r2, [r3, #20]
}
 800816e:	46bd      	mov	sp, r7
 8008170:	b006      	add	sp, #24
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20000144 	.word	0x20000144
 8008178:	20000138 	.word	0x20000138
 800817c:	40010400 	.word	0x40010400

08008180 <gpio_registerWakeUpAction>:

/**
 * Add an action on wake-up.
 * This action replace temporaly the exiting actions
 */
void gpio_registerWakeUpAction(gpio_irq_chain_t * chain) {
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	__gpio_irq_wakeup = chain;
 8008188:	4b03      	ldr	r3, [pc, #12]	; (8008198 <gpio_registerWakeUpAction+0x18>)
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	601a      	str	r2, [r3, #0]
}
 800818e:	46c0      	nop			; (mov r8, r8)
 8008190:	46bd      	mov	sp, r7
 8008192:	b002      	add	sp, #8
 8008194:	bd80      	pop	{r7, pc}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	20000144 	.word	0x20000144

0800819c <gpio_removeWakeUpAction>:

/**
 * Remove the action on wake-up.
 * This action restore the previously defined gpio actions
 */
void gpio_removeWakeUpAction() {
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
	__gpio_irq_wakeup = NULL;
 80081a0:	4b02      	ldr	r3, [pc, #8]	; (80081ac <gpio_removeWakeUpAction+0x10>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
}
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	20000144 	.word	0x20000144

080081b0 <itsdk_getResetCause>:
}

/**
 * Reset Cause
 */
itsdk_reset_cause_t itsdk_getResetCause() {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
	if ( RCC->CSR & RCC_CSR_LPWRRSTF ) return RESET_CAUSE_LOWPOWER;
 80081b4:	4b1c      	ldr	r3, [pc, #112]	; (8008228 <itsdk_getResetCause+0x78>)
 80081b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da01      	bge.n	80081c0 <itsdk_getResetCause+0x10>
 80081bc:	2306      	movs	r3, #6
 80081be:	e030      	b.n	8008222 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_WWDGRSTF ) return RESET_CAUSE_WWDG;
 80081c0:	4b19      	ldr	r3, [pc, #100]	; (8008228 <itsdk_getResetCause+0x78>)
 80081c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081c4:	2380      	movs	r3, #128	; 0x80
 80081c6:	05db      	lsls	r3, r3, #23
 80081c8:	4013      	ands	r3, r2
 80081ca:	d001      	beq.n	80081d0 <itsdk_getResetCause+0x20>
 80081cc:	2305      	movs	r3, #5
 80081ce:	e028      	b.n	8008222 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_IWDGRSTF ) return RESET_CAUSE_IWDG;
 80081d0:	4b15      	ldr	r3, [pc, #84]	; (8008228 <itsdk_getResetCause+0x78>)
 80081d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081d4:	2380      	movs	r3, #128	; 0x80
 80081d6:	059b      	lsls	r3, r3, #22
 80081d8:	4013      	ands	r3, r2
 80081da:	d001      	beq.n	80081e0 <itsdk_getResetCause+0x30>
 80081dc:	2304      	movs	r3, #4
 80081de:	e020      	b.n	8008222 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_SFTRSTF ) return RESET_CAUSE_SOFTWARE;
 80081e0:	4b11      	ldr	r3, [pc, #68]	; (8008228 <itsdk_getResetCause+0x78>)
 80081e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081e4:	2380      	movs	r3, #128	; 0x80
 80081e6:	055b      	lsls	r3, r3, #21
 80081e8:	4013      	ands	r3, r2
 80081ea:	d001      	beq.n	80081f0 <itsdk_getResetCause+0x40>
 80081ec:	2303      	movs	r3, #3
 80081ee:	e018      	b.n	8008222 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PORRSTF ) return RESET_CAUSE_POWER_ON;
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <itsdk_getResetCause+0x78>)
 80081f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081f4:	2380      	movs	r3, #128	; 0x80
 80081f6:	051b      	lsls	r3, r3, #20
 80081f8:	4013      	ands	r3, r2
 80081fa:	d001      	beq.n	8008200 <itsdk_getResetCause+0x50>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e010      	b.n	8008222 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PINRSTF ) return RESET_CAUSE_RESET_PIN;
 8008200:	4b09      	ldr	r3, [pc, #36]	; (8008228 <itsdk_getResetCause+0x78>)
 8008202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008204:	2380      	movs	r3, #128	; 0x80
 8008206:	04db      	lsls	r3, r3, #19
 8008208:	4013      	ands	r3, r2
 800820a:	d001      	beq.n	8008210 <itsdk_getResetCause+0x60>
 800820c:	2301      	movs	r3, #1
 800820e:	e008      	b.n	8008222 <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_OBLRSTF ) return RESET_CAUSE_LOWPOWER;
 8008210:	4b05      	ldr	r3, [pc, #20]	; (8008228 <itsdk_getResetCause+0x78>)
 8008212:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008214:	2380      	movs	r3, #128	; 0x80
 8008216:	049b      	lsls	r3, r3, #18
 8008218:	4013      	ands	r3, r2
 800821a:	d001      	beq.n	8008220 <itsdk_getResetCause+0x70>
 800821c:	2306      	movs	r3, #6
 800821e:	e000      	b.n	8008222 <itsdk_getResetCause+0x72>
	else return RESET_CAUSE_UNKNONW;
 8008220:	2307      	movs	r3, #7
}
 8008222:	0018      	movs	r0, r3
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40021000 	.word	0x40021000

0800822c <itsdk_cleanResetCause>:

void itsdk_cleanResetCause() {
 800822c:	b580      	push	{r7, lr}
 800822e:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_RMVF;
 8008230:	4b04      	ldr	r3, [pc, #16]	; (8008244 <itsdk_cleanResetCause+0x18>)
 8008232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008234:	4b03      	ldr	r3, [pc, #12]	; (8008244 <itsdk_cleanResetCause+0x18>)
 8008236:	2180      	movs	r1, #128	; 0x80
 8008238:	0409      	lsls	r1, r1, #16
 800823a:	430a      	orrs	r2, r1
 800823c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40021000 	.word	0x40021000

08008248 <itsdk_delayMs>:

/**
 * Delay in ms
 */
void itsdk_delayMs(uint32_t ms) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0018      	movs	r0, r3
 8008254:	f7f9 fa00 	bl	8001658 <HAL_Delay>
}
 8008258:	46c0      	nop			; (mov r8, r8)
 800825a:	46bd      	mov	sp, r7
 800825c:	b002      	add	sp, #8
 800825e:	bd80      	pop	{r7, pc}

08008260 <itsdk_getUniqId>:
/**
 * Generate a uniq ID based on the object ID. The id struct is
 * initialized based on this. This size of the id table is given
 * as a parameter. size is in Byte
 */
void itsdk_getUniqId(uint8_t * id, int8_t size){
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	000a      	movs	r2, r1
 800826a:	1cfb      	adds	r3, r7, #3
 800826c:	701a      	strb	r2, [r3, #0]

	uint32_t i = (( *( uint32_t* )STM32_ID1 ) << 16) + (( *( uint32_t* )STM32_ID2 )  << 8) + (*( uint32_t* )STM32_ID3 );
 800826e:	4b2c      	ldr	r3, [pc, #176]	; (8008320 <itsdk_getUniqId+0xc0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	041a      	lsls	r2, r3, #16
 8008274:	4b2b      	ldr	r3, [pc, #172]	; (8008324 <itsdk_getUniqId+0xc4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	18d2      	adds	r2, r2, r3
 800827c:	4b2a      	ldr	r3, [pc, #168]	; (8008328 <itsdk_getUniqId+0xc8>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	18d3      	adds	r3, r2, r3
 8008282:	60fb      	str	r3, [r7, #12]
	uint8_t l=0;
 8008284:	2317      	movs	r3, #23
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
	uint32_t s=i;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	613b      	str	r3, [r7, #16]
	while ( l < size ) {
 8008290:	e03a      	b.n	8008308 <itsdk_getUniqId+0xa8>
		if ( (l & 0x3) == 0 ) {
 8008292:	2317      	movs	r3, #23
 8008294:	18fb      	adds	r3, r7, r3
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2203      	movs	r2, #3
 800829a:	4013      	ands	r3, r2
 800829c:	d11f      	bne.n	80082de <itsdk_getUniqId+0x7e>
			switch ( (l >> 2) & 3 ) {
 800829e:	2317      	movs	r3, #23
 80082a0:	18fb      	adds	r3, r7, r3
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	089b      	lsrs	r3, r3, #2
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	001a      	movs	r2, r3
 80082aa:	2303      	movs	r3, #3
 80082ac:	4013      	ands	r3, r2
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d008      	beq.n	80082c4 <itsdk_getUniqId+0x64>
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d00b      	beq.n	80082ce <itsdk_getUniqId+0x6e>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10e      	bne.n	80082d8 <itsdk_getUniqId+0x78>
				case 0:	s = i ^ STM32_ID1; break;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4a18      	ldr	r2, [pc, #96]	; (8008320 <itsdk_getUniqId+0xc0>)
 80082be:	4053      	eors	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]
 80082c2:	e00d      	b.n	80082e0 <itsdk_getUniqId+0x80>
				case 1: s = i ^ STM32_ID2; break;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4a17      	ldr	r2, [pc, #92]	; (8008324 <itsdk_getUniqId+0xc4>)
 80082c8:	4053      	eors	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	e008      	b.n	80082e0 <itsdk_getUniqId+0x80>
				case 2: s = i ^ STM32_ID3; break;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4a15      	ldr	r2, [pc, #84]	; (8008328 <itsdk_getUniqId+0xc8>)
 80082d2:	4053      	eors	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
 80082d6:	e003      	b.n	80082e0 <itsdk_getUniqId+0x80>
				default:
				case 3: s = i; break;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	613b      	str	r3, [r7, #16]
 80082dc:	e000      	b.n	80082e0 <itsdk_getUniqId+0x80>
			}
		}
 80082de:	46c0      	nop			; (mov r8, r8)
		id[l] = ( s >> (8*(l&3))) & 0xFF;
 80082e0:	2017      	movs	r0, #23
 80082e2:	183b      	adds	r3, r7, r0
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2203      	movs	r2, #3
 80082e8:	4013      	ands	r3, r2
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	40da      	lsrs	r2, r3
 80082f0:	0011      	movs	r1, r2
 80082f2:	183b      	adds	r3, r7, r0
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	18d3      	adds	r3, r2, r3
 80082fa:	b2ca      	uxtb	r2, r1
 80082fc:	701a      	strb	r2, [r3, #0]
		l++;
 80082fe:	183b      	adds	r3, r7, r0
 8008300:	781a      	ldrb	r2, [r3, #0]
 8008302:	183b      	adds	r3, r7, r0
 8008304:	3201      	adds	r2, #1
 8008306:	701a      	strb	r2, [r3, #0]
	while ( l < size ) {
 8008308:	2317      	movs	r3, #23
 800830a:	18fb      	adds	r3, r7, r3
 800830c:	781a      	ldrb	r2, [r3, #0]
 800830e:	1cfb      	adds	r3, r7, #3
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	b25b      	sxtb	r3, r3
 8008314:	429a      	cmp	r2, r3
 8008316:	dbbc      	blt.n	8008292 <itsdk_getUniqId+0x32>
	}

}
 8008318:	46c0      	nop			; (mov r8, r8)
 800831a:	46bd      	mov	sp, r7
 800831c:	b006      	add	sp, #24
 800831e:	bd80      	pop	{r7, pc}
 8008320:	1ff80050 	.word	0x1ff80050
 8008324:	1ff80054 	.word	0x1ff80054
 8008328:	1ff80064 	.word	0x1ff80064

0800832c <serial1_init>:
int serial1Counter = 0;
int serial2Counter = 0;
/**
 * Init the Serial 1 extra configurations
 */
void serial1_init() {
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
#if ( ITSDK_WITH_UART_RXIRQ & __UART_USART1 ) > 0 || ( ITSDK_WITH_UART_RXIRQ & __UART_LPUART1 ) > 0
	#if ( ITSDK_WITH_UART_RXIRQ & __UART_LPUART1 ) > 0
		UART_HandleTypeDef * _uart = &hlpuart1;
	#elif  ( ITSDK_WITH_UART_RXIRQ & __UART_USART1 ) > 0
		UART_HandleTypeDef * _uart = &huart1;
 8008332:	4b1d      	ldr	r3, [pc, #116]	; (80083a8 <serial1_init+0x7c>)
 8008334:	607b      	str	r3, [r7, #4]
	#endif
    __HAL_UART_ENABLE_IT(_uart,UART_IT_ERR);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2101      	movs	r1, #1
 8008342:	430a      	orrs	r2, r1
 8008344:	609a      	str	r2, [r3, #8]
    __HAL_UART_ENABLE_IT(_uart,UART_IT_RXNE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2120      	movs	r1, #32
 8008352:	430a      	orrs	r2, r1
 8008354:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(_uart,UART_IT_TC);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2140      	movs	r1, #64	; 0x40
 8008362:	438a      	bics	r2, r1
 8008364:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(_uart,UART_IT_TXE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2180      	movs	r1, #128	; 0x80
 8008372:	438a      	bics	r2, r1
 8008374:	601a      	str	r2, [r3, #0]
    // Clear pending interrupt & co
    HAL_UART_Receive_IT(_uart, &byte, 1);
 8008376:	490d      	ldr	r1, [pc, #52]	; (80083ac <serial1_init+0x80>)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	0018      	movs	r0, r3
 800837e:	f7fc f859 	bl	8004434 <HAL_UART_Receive_IT>
    _uart->Instance->RDR;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _uart->Instance->ISR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69db      	ldr	r3, [r3, #28]
    _uart->Instance->ICR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6a1b      	ldr	r3, [r3, #32]
    // Reset circular buffer
    __serial1_bufferRd = 0;
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <serial1_init+0x84>)
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
    __serial1_bufferWr = 0;
 800839a:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <serial1_init+0x88>)
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]
#endif
}
 80083a0:	46c0      	nop			; (mov r8, r8)
 80083a2:	46bd      	mov	sp, r7
 80083a4:	b002      	add	sp, #8
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	200002e4 	.word	0x200002e4
 80083ac:	20000496 	.word	0x20000496
 80083b0:	200004d8 	.word	0x200004d8
 80083b4:	20000495 	.word	0x20000495

080083b8 <serial1_print>:
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_TC) == RESET);
  #endif
}

void serial1_print(char * msg) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #elif ( ITSDK_WITH_UART & __UART_USART1 ) > 0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	0018      	movs	r0, r3
 80083c4:	f7f7 fea0 	bl	8000108 <strlen>
 80083c8:	0003      	movs	r3, r0
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <serial1_print+0x28>)
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	4804      	ldr	r0, [pc, #16]	; (80083e4 <serial1_print+0x2c>)
 80083d2:	f7fb ff87 	bl	80042e4 <HAL_UART_Transmit>
  #endif
}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	46bd      	mov	sp, r7
 80083da:	b002      	add	sp, #8
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	0000ffff 	.word	0x0000ffff
 80083e4:	200002e4 	.word	0x200002e4

080083e8 <serial2_init>:
// ---------------------------------------------------------------------------

/**
 * Init the Serial 2 extra configurations
 */
void serial2_init() {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
#if  ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0
    __HAL_UART_ENABLE_IT(&huart2,UART_IT_ERR);
 80083ec:	4b1b      	ldr	r3, [pc, #108]	; (800845c <serial2_init+0x74>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	4b1a      	ldr	r3, [pc, #104]	; (800845c <serial2_init+0x74>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2101      	movs	r1, #1
 80083f8:	430a      	orrs	r2, r1
 80083fa:	609a      	str	r2, [r3, #8]
    __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 80083fc:	4b17      	ldr	r3, [pc, #92]	; (800845c <serial2_init+0x74>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4b16      	ldr	r3, [pc, #88]	; (800845c <serial2_init+0x74>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2120      	movs	r1, #32
 8008408:	430a      	orrs	r2, r1
 800840a:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart2,UART_IT_TC);
 800840c:	4b13      	ldr	r3, [pc, #76]	; (800845c <serial2_init+0x74>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <serial2_init+0x74>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2140      	movs	r1, #64	; 0x40
 8008418:	438a      	bics	r2, r1
 800841a:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart2,UART_IT_TXE);
 800841c:	4b0f      	ldr	r3, [pc, #60]	; (800845c <serial2_init+0x74>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b0e      	ldr	r3, [pc, #56]	; (800845c <serial2_init+0x74>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2180      	movs	r1, #128	; 0x80
 8008428:	438a      	bics	r2, r1
 800842a:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, &byte, 1);
 800842c:	490c      	ldr	r1, [pc, #48]	; (8008460 <serial2_init+0x78>)
 800842e:	4b0b      	ldr	r3, [pc, #44]	; (800845c <serial2_init+0x74>)
 8008430:	2201      	movs	r2, #1
 8008432:	0018      	movs	r0, r3
 8008434:	f7fb fffe 	bl	8004434 <HAL_UART_Receive_IT>
    huart2.Instance->RDR;
 8008438:	4b08      	ldr	r3, [pc, #32]	; (800845c <serial2_init+0x74>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    huart2.Instance->ISR;
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <serial2_init+0x74>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69db      	ldr	r3, [r3, #28]
    huart2.Instance->ICR;
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <serial2_init+0x74>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6a1b      	ldr	r3, [r3, #32]
    __serial2_bufferRd = 0;
 800844a:	4b06      	ldr	r3, [pc, #24]	; (8008464 <serial2_init+0x7c>)
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]
    __serial2_bufferWr = 0;
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <serial2_init+0x80>)
 8008452:	2200      	movs	r2, #0
 8008454:	701a      	strb	r2, [r3, #0]
#endif
}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000364 	.word	0x20000364
 8008460:	20000496 	.word	0x20000496
 8008464:	20000497 	.word	0x20000497
 8008468:	2000044d 	.word	0x2000044d

0800846c <serial2_print>:
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY)) == SET);
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_TC)) == RESET);
  #endif
}

void serial2_print(char * msg) {
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),0xFFFF);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	0018      	movs	r0, r3
 8008478:	f7f7 fe46 	bl	8000108 <strlen>
 800847c:	0003      	movs	r3, r0
 800847e:	b29a      	uxth	r2, r3
 8008480:	4b04      	ldr	r3, [pc, #16]	; (8008494 <serial2_print+0x28>)
 8008482:	6879      	ldr	r1, [r7, #4]
 8008484:	4804      	ldr	r0, [pc, #16]	; (8008498 <serial2_print+0x2c>)
 8008486:	f7fb ff2d 	bl	80042e4 <HAL_UART_Transmit>
  #endif
}
 800848a:	46c0      	nop			; (mov r8, r8)
 800848c:	46bd      	mov	sp, r7
 800848e:	b002      	add	sp, #8
 8008490:	bd80      	pop	{r7, pc}
 8008492:	46c0      	nop			; (mov r8, r8)
 8008494:	0000ffff 	.word	0x0000ffff
 8008498:	20000364 	.word	0x20000364

0800849c <HAL_UART_ErrorCallback>:
// Global interrupt management
// ---------------------------------------------------------------------------


#if defined ITSDK_WITH_UART_RXIRQ && ITSDK_WITH_UART_RXIRQ != __UART_NONE
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	// Clear the error flags
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2208      	movs	r2, #8
 80084aa:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2204      	movs	r2, #4
 80084b2:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2202      	movs	r2, #2
 80084ba:	621a      	str	r2, [r3, #32]
}
 80084bc:	46c0      	nop			; (mov r8, r8)
 80084be:	46bd      	mov	sp, r7
 80084c0:	b002      	add	sp, #8
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART1)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1d      	ldr	r2, [pc, #116]	; (8008548 <HAL_UART_RxCpltCallback+0x84>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d133      	bne.n	800853e <HAL_UART_RxCpltCallback+0x7a>
	  {
		  static indexOfReceive;
	    /* Transmit one byte with 100 ms timeout */
		  if ((char)byte == 'R'){
 80084d6:	4b1d      	ldr	r3, [pc, #116]	; (800854c <HAL_UART_RxCpltCallback+0x88>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b52      	cmp	r3, #82	; 0x52
 80084dc:	d102      	bne.n	80084e4 <HAL_UART_RxCpltCallback+0x20>
			  indexOfReceive = 0;
 80084de:	4b1c      	ldr	r3, [pc, #112]	; (8008550 <HAL_UART_RxCpltCallback+0x8c>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
		  }
		  tabResult[indexOfReceive] = byte;
 80084e4:	4b1a      	ldr	r3, [pc, #104]	; (8008550 <HAL_UART_RxCpltCallback+0x8c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a18      	ldr	r2, [pc, #96]	; (800854c <HAL_UART_RxCpltCallback+0x88>)
 80084ea:	7811      	ldrb	r1, [r2, #0]
 80084ec:	4a19      	ldr	r2, [pc, #100]	; (8008554 <HAL_UART_RxCpltCallback+0x90>)
 80084ee:	54d1      	strb	r1, [r2, r3]
		  indexOfReceive++;
 80084f0:	4b17      	ldr	r3, [pc, #92]	; (8008550 <HAL_UART_RxCpltCallback+0x8c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	4b16      	ldr	r3, [pc, #88]	; (8008550 <HAL_UART_RxCpltCallback+0x8c>)
 80084f8:	601a      	str	r2, [r3, #0]
	    /* Receive one byte in interrupt mode */
		  if (indexOfReceive!=5){
 80084fa:	4b15      	ldr	r3, [pc, #84]	; (8008550 <HAL_UART_RxCpltCallback+0x8c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d006      	beq.n	8008510 <HAL_UART_RxCpltCallback+0x4c>
			  HAL_UART_Receive_IT(&huart1, &byte, 1);
 8008502:	4912      	ldr	r1, [pc, #72]	; (800854c <HAL_UART_RxCpltCallback+0x88>)
 8008504:	4b14      	ldr	r3, [pc, #80]	; (8008558 <HAL_UART_RxCpltCallback+0x94>)
 8008506:	2201      	movs	r2, #1
 8008508:	0018      	movs	r0, r3
 800850a:	f7fb ff93 	bl	8004434 <HAL_UART_Receive_IT>
			  indexOfReceive = 0;
		  }

	  }

}
 800850e:	e016      	b.n	800853e <HAL_UART_RxCpltCallback+0x7a>
			  tabToPrint[0] = tabResult[0];
 8008510:	4b10      	ldr	r3, [pc, #64]	; (8008554 <HAL_UART_RxCpltCallback+0x90>)
 8008512:	781a      	ldrb	r2, [r3, #0]
 8008514:	4b11      	ldr	r3, [pc, #68]	; (800855c <HAL_UART_RxCpltCallback+0x98>)
 8008516:	701a      	strb	r2, [r3, #0]
			  tabToPrint[1] = tabResult[1];
 8008518:	4b0e      	ldr	r3, [pc, #56]	; (8008554 <HAL_UART_RxCpltCallback+0x90>)
 800851a:	785a      	ldrb	r2, [r3, #1]
 800851c:	4b0f      	ldr	r3, [pc, #60]	; (800855c <HAL_UART_RxCpltCallback+0x98>)
 800851e:	705a      	strb	r2, [r3, #1]
			  tabToPrint[2] = tabResult[2];
 8008520:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <HAL_UART_RxCpltCallback+0x90>)
 8008522:	789a      	ldrb	r2, [r3, #2]
 8008524:	4b0d      	ldr	r3, [pc, #52]	; (800855c <HAL_UART_RxCpltCallback+0x98>)
 8008526:	709a      	strb	r2, [r3, #2]
			  tabToPrint[3] = tabResult[3];
 8008528:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <HAL_UART_RxCpltCallback+0x90>)
 800852a:	78da      	ldrb	r2, [r3, #3]
 800852c:	4b0b      	ldr	r3, [pc, #44]	; (800855c <HAL_UART_RxCpltCallback+0x98>)
 800852e:	70da      	strb	r2, [r3, #3]
			  tabToPrint[4] = tabResult[4];
 8008530:	4b08      	ldr	r3, [pc, #32]	; (8008554 <HAL_UART_RxCpltCallback+0x90>)
 8008532:	791a      	ldrb	r2, [r3, #4]
 8008534:	4b09      	ldr	r3, [pc, #36]	; (800855c <HAL_UART_RxCpltCallback+0x98>)
 8008536:	711a      	strb	r2, [r3, #4]
			  indexOfReceive = 0;
 8008538:	4b05      	ldr	r3, [pc, #20]	; (8008550 <HAL_UART_RxCpltCallback+0x8c>)
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
}
 800853e:	46c0      	nop			; (mov r8, r8)
 8008540:	46bd      	mov	sp, r7
 8008542:	b002      	add	sp, #8
 8008544:	bd80      	pop	{r7, pc}
 8008546:	46c0      	nop			; (mov r8, r8)
 8008548:	40013800 	.word	0x40013800
 800854c:	20000496 	.word	0x20000496
 8008550:	20000148 	.word	0x20000148
 8008554:	20000448 	.word	0x20000448
 8008558:	200002e4 	.word	0x200002e4
 800855c:	20000490 	.word	0x20000490

08008560 <debug_print>:
// ---------------------------------------------------------------------------

void debug_flush() {
}

void debug_print(debug_print_type_e lvl, char * msg) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	0002      	movs	r2, r0
 8008568:	6039      	str	r1, [r7, #0]
 800856a:	1dfb      	adds	r3, r7, #7
 800856c:	701a      	strb	r2, [r3, #0]
	SEGGER_RTT_WriteString(0, msg);
	SEGGER_RTT_WriteString(0,RTT_CTRL_RESET);
	int v = strlen(msg);
	wasEndLine = ( msg[v-1] == '\r' || msg[v-1] == '\n' )?1:0;
#endif
}
 800856e:	46c0      	nop			; (mov r8, r8)
 8008570:	46bd      	mov	sp, r7
 8008572:	b002      	add	sp, #8
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <_eeprom_write>:
 * Offset allows to write 1 bank in multiple operation where offset is the pointer for bank start
 *  offset is aligned on 32b words
 * Actually bank is not supported, assuming is 0
 * @TODO : manage bank
 */
bool _eeprom_write(uint8_t bank, uint32_t offset, void * data, int len) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	607a      	str	r2, [r7, #4]
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	210f      	movs	r1, #15
 8008586:	187b      	adds	r3, r7, r1
 8008588:	1c02      	adds	r2, r0, #0
 800858a:	701a      	strb	r2, [r3, #0]
	uint8_t *  _data = (uint8_t *)data;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || len > EEPROM_SIZE) {
 8008590:	187b      	adds	r3, r7, r1
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d104      	bne.n	80085a2 <_eeprom_write+0x2a>
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	23c0      	movs	r3, #192	; 0xc0
 800859c:	015b      	lsls	r3, r3, #5
 800859e:	429a      	cmp	r2, r3
 80085a0:	dd06      	ble.n	80085b0 <_eeprom_write+0x38>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	4a39      	ldr	r2, [pc, #228]	; (800868c <_eeprom_write+0x114>)
 80085a8:	0019      	movs	r1, r3
 80085aa:	0010      	movs	r0, r2
 80085ac:	f7fe fd62 	bl	8007074 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4a37      	ldr	r2, [pc, #220]	; (8008690 <_eeprom_write+0x118>)
 80085b4:	4694      	mov	ip, r2
 80085b6:	4463      	add	r3, ip
 80085b8:	61fb      	str	r3, [r7, #28]

	// Unlock EEPROM
	if (FLASH->PECR & FLASH_PECR_PELOCK) {
 80085ba:	4b36      	ldr	r3, [pc, #216]	; (8008694 <_eeprom_write+0x11c>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	4013      	ands	r3, r2
 80085c2:	d005      	beq.n	80085d0 <_eeprom_write+0x58>
			FLASH->PEKEYR = FLASH_PEKEY1;
 80085c4:	4b33      	ldr	r3, [pc, #204]	; (8008694 <_eeprom_write+0x11c>)
 80085c6:	4a34      	ldr	r2, [pc, #208]	; (8008698 <_eeprom_write+0x120>)
 80085c8:	60da      	str	r2, [r3, #12]
			FLASH->PEKEYR = FLASH_PEKEY2;
 80085ca:	4b32      	ldr	r3, [pc, #200]	; (8008694 <_eeprom_write+0x11c>)
 80085cc:	4a33      	ldr	r2, [pc, #204]	; (800869c <_eeprom_write+0x124>)
 80085ce:	60da      	str	r2, [r3, #12]
	}
	// Copy data
	for (int i = 0; i < len; i += 4) {
 80085d0:	2300      	movs	r3, #0
 80085d2:	61bb      	str	r3, [r7, #24]
 80085d4:	e04b      	b.n	800866e <_eeprom_write+0xf6>
		v = _data[i] << 24;
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	18d3      	adds	r3, r2, r3
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	061b      	lsls	r3, r3, #24
 80085e0:	613b      	str	r3, [r7, #16]
		v+= (i+1 < len)?_data[i+1]<<16:0;
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	3301      	adds	r3, #1
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	dd07      	ble.n	80085fc <_eeprom_write+0x84>
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	3301      	adds	r3, #1
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	18d3      	adds	r3, r2, r3
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	041b      	lsls	r3, r3, #16
 80085f8:	001a      	movs	r2, r3
 80085fa:	e000      	b.n	80085fe <_eeprom_write+0x86>
 80085fc:	2200      	movs	r2, #0
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	189b      	adds	r3, r3, r2
 8008602:	613b      	str	r3, [r7, #16]
		v+= (i+2 < len)?_data[i+2]<<8:0;
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	3302      	adds	r3, #2
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	dd07      	ble.n	800861e <_eeprom_write+0xa6>
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	3302      	adds	r3, #2
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	18d3      	adds	r3, r2, r3
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	021b      	lsls	r3, r3, #8
 800861a:	001a      	movs	r2, r3
 800861c:	e000      	b.n	8008620 <_eeprom_write+0xa8>
 800861e:	2200      	movs	r2, #0
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	189b      	adds	r3, r3, r2
 8008624:	613b      	str	r3, [r7, #16]
		v+= (i+3 < len)?_data[i+3]:0;
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	3303      	adds	r3, #3
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	dd06      	ble.n	800863e <_eeprom_write+0xc6>
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	3303      	adds	r3, #3
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	18d3      	adds	r3, r2, r3
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	001a      	movs	r2, r3
 800863c:	e000      	b.n	8008640 <_eeprom_write+0xc8>
 800863e:	2200      	movs	r2, #0
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	189b      	adds	r3, r3, r2
 8008644:	613b      	str	r3, [r7, #16]
		if (v != __eepromRead(_eepromAddr)) __eepromWrite(_eepromAddr,v);
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	0018      	movs	r0, r3
 800864a:	f000 f893 	bl	8008774 <__eepromRead>
 800864e:	0002      	movs	r2, r0
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	4293      	cmp	r3, r2
 8008654:	d005      	beq.n	8008662 <_eeprom_write+0xea>
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	0011      	movs	r1, r2
 800865c:	0018      	movs	r0, r3
 800865e:	f000 f893 	bl	8008788 <__eepromWrite>
		_eepromAddr+=4;
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	3304      	adds	r3, #4
 8008666:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	3304      	adds	r3, #4
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	dbaf      	blt.n	80085d6 <_eeprom_write+0x5e>
	}
	// Lock EEPROM
	FLASH->PECR |= FLASH_PECR_PELOCK;
 8008676:	4b07      	ldr	r3, [pc, #28]	; (8008694 <_eeprom_write+0x11c>)
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	4b06      	ldr	r3, [pc, #24]	; (8008694 <_eeprom_write+0x11c>)
 800867c:	2101      	movs	r1, #1
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
	return true;
 8008682:	2301      	movs	r3, #1
}
 8008684:	0018      	movs	r0, r3
 8008686:	46bd      	mov	sp, r7
 8008688:	b008      	add	sp, #32
 800868a:	bd80      	pop	{r7, pc}
 800868c:	d0000030 	.word	0xd0000030
 8008690:	08080000 	.word	0x08080000
 8008694:	40022000 	.word	0x40022000
 8008698:	89abcdef 	.word	0x89abcdef
 800869c:	02030405 	.word	0x02030405

080086a0 <_eeprom_read>:

/**
 * Read a block of data from the EEPROM
 * Offset is to add an offset to bank start - Offset is aligned don 32b word
 */
bool _eeprom_read(uint8_t bank, uint32_t offset, void * data, int len) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	210f      	movs	r1, #15
 80086ae:	187b      	adds	r3, r7, r1
 80086b0:	1c02      	adds	r2, r0, #0
 80086b2:	701a      	strb	r2, [r3, #0]
	uint8_t  * _data = (uint8_t *)data;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || len > EEPROM_SIZE) {
 80086b8:	187b      	adds	r3, r7, r1
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d104      	bne.n	80086ca <_eeprom_read+0x2a>
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	23c0      	movs	r3, #192	; 0xc0
 80086c4:	015b      	lsls	r3, r3, #5
 80086c6:	429a      	cmp	r2, r3
 80086c8:	dd06      	ble.n	80086d8 <_eeprom_read+0x38>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	4a27      	ldr	r2, [pc, #156]	; (800876c <_eeprom_read+0xcc>)
 80086d0:	0019      	movs	r1, r3
 80086d2:	0010      	movs	r0, r2
 80086d4:	f7fe fcce 	bl	8007074 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	4a25      	ldr	r2, [pc, #148]	; (8008770 <_eeprom_read+0xd0>)
 80086dc:	4694      	mov	ip, r2
 80086de:	4463      	add	r3, ip
 80086e0:	61fb      	str	r3, [r7, #28]

	// Read data
	for (int i = 0; i < len; i += 4) {
 80086e2:	2300      	movs	r3, #0
 80086e4:	61bb      	str	r3, [r7, #24]
 80086e6:	e038      	b.n	800875a <_eeprom_read+0xba>
		v = __eepromRead(_eepromAddr);
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	0018      	movs	r0, r3
 80086ec:	f000 f842 	bl	8008774 <__eepromRead>
 80086f0:	0003      	movs	r3, r0
 80086f2:	613b      	str	r3, [r7, #16]
		_data[i]=(v & 0xFF000000) >> 24;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	0e19      	lsrs	r1, r3, #24
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	18d3      	adds	r3, r2, r3
 80086fe:	b2ca      	uxtb	r2, r1
 8008700:	701a      	strb	r2, [r3, #0]
		if ( i+1 < len) _data[i+1]=(v & 0x00FF0000) >> 16;
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	3301      	adds	r3, #1
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	429a      	cmp	r2, r3
 800870a:	dd07      	ble.n	800871c <_eeprom_read+0x7c>
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	0c19      	lsrs	r1, r3, #16
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	3301      	adds	r3, #1
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	18d3      	adds	r3, r2, r3
 8008718:	b2ca      	uxtb	r2, r1
 800871a:	701a      	strb	r2, [r3, #0]
		if ( i+2 < len) _data[i+2]=(v & 0x0000FF00) >> 8;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	3302      	adds	r3, #2
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	dd07      	ble.n	8008736 <_eeprom_read+0x96>
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	0a19      	lsrs	r1, r3, #8
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	3302      	adds	r3, #2
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	18d3      	adds	r3, r2, r3
 8008732:	b2ca      	uxtb	r2, r1
 8008734:	701a      	strb	r2, [r3, #0]
		if ( i+3 < len) _data[i+3]=(v & 0x000000FF);
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	3303      	adds	r3, #3
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	dd06      	ble.n	800874e <_eeprom_read+0xae>
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	3303      	adds	r3, #3
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	18d3      	adds	r3, r2, r3
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]
		_eepromAddr+=4;
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	3304      	adds	r3, #4
 8008752:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	3304      	adds	r3, #4
 8008758:	61bb      	str	r3, [r7, #24]
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	dbc2      	blt.n	80086e8 <_eeprom_read+0x48>
	}
	return true;
 8008762:	2301      	movs	r3, #1
}
 8008764:	0018      	movs	r0, r3
 8008766:	46bd      	mov	sp, r7
 8008768:	b008      	add	sp, #32
 800876a:	bd80      	pop	{r7, pc}
 800876c:	d0000030 	.word	0xd0000030
 8008770:	08080000 	.word	0x08080000

08008774 <__eepromRead>:


/**
 * Read a word in EEPROM area
 */
uint32_t __eepromRead(uint32_t addr) {
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	return (*(volatile uint32_t*)addr);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
}
 8008780:	0018      	movs	r0, r3
 8008782:	46bd      	mov	sp, r7
 8008784:	b002      	add	sp, #8
 8008786:	bd80      	pop	{r7, pc}

08008788 <__eepromWrite>:

/**
 * Write a word in EEPROM area
 * Return false when an error occured
 */
bool __eepromWrite(uint32_t addr, uint32_t v) {
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]

	uint16_t tmout = 10000;
 8008792:	230e      	movs	r3, #14
 8008794:	18fb      	adds	r3, r7, r3
 8008796:	4a20      	ldr	r2, [pc, #128]	; (8008818 <__eepromWrite+0x90>)
 8008798:	801a      	strh	r2, [r3, #0]
	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 800879a:	e005      	b.n	80087a8 <__eepromWrite+0x20>
 800879c:	210e      	movs	r1, #14
 800879e:	187b      	adds	r3, r7, r1
 80087a0:	881a      	ldrh	r2, [r3, #0]
 80087a2:	187b      	adds	r3, r7, r1
 80087a4:	3a01      	subs	r2, #1
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	4b1c      	ldr	r3, [pc, #112]	; (800881c <__eepromWrite+0x94>)
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	2201      	movs	r2, #1
 80087ae:	4013      	ands	r3, r2
 80087b0:	d004      	beq.n	80087bc <__eepromWrite+0x34>
 80087b2:	230e      	movs	r3, #14
 80087b4:	18fb      	adds	r3, r7, r3
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1ef      	bne.n	800879c <__eepromWrite+0x14>
	if ( tmout == 0 ) return false;
 80087bc:	230e      	movs	r3, #14
 80087be:	18fb      	adds	r3, r7, r3
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <__eepromWrite+0x42>
 80087c6:	2300      	movs	r3, #0
 80087c8:	e021      	b.n	800880e <__eepromWrite+0x86>

	// Clear the FTDW bit (data will be erased before write if it non zero)
	FLASH->PECR &= (uint32_t)(~(uint32_t)FLASH_PECR_FIX);
 80087ca:	4b14      	ldr	r3, [pc, #80]	; (800881c <__eepromWrite+0x94>)
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	4b13      	ldr	r3, [pc, #76]	; (800881c <__eepromWrite+0x94>)
 80087d0:	4913      	ldr	r1, [pc, #76]	; (8008820 <__eepromWrite+0x98>)
 80087d2:	400a      	ands	r2, r1
 80087d4:	605a      	str	r2, [r3, #4]

	*(volatile uint32_t *)addr = v;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	601a      	str	r2, [r3, #0]

	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 80087dc:	e005      	b.n	80087ea <__eepromWrite+0x62>
 80087de:	210e      	movs	r1, #14
 80087e0:	187b      	adds	r3, r7, r1
 80087e2:	881a      	ldrh	r2, [r3, #0]
 80087e4:	187b      	adds	r3, r7, r1
 80087e6:	3a01      	subs	r2, #1
 80087e8:	801a      	strh	r2, [r3, #0]
 80087ea:	4b0c      	ldr	r3, [pc, #48]	; (800881c <__eepromWrite+0x94>)
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	2201      	movs	r2, #1
 80087f0:	4013      	ands	r3, r2
 80087f2:	d004      	beq.n	80087fe <__eepromWrite+0x76>
 80087f4:	230e      	movs	r3, #14
 80087f6:	18fb      	adds	r3, r7, r3
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1ef      	bne.n	80087de <__eepromWrite+0x56>
	if ( tmout == 0 ) return false;
 80087fe:	230e      	movs	r3, #14
 8008800:	18fb      	adds	r3, r7, r3
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <__eepromWrite+0x84>
 8008808:	2300      	movs	r3, #0
 800880a:	e000      	b.n	800880e <__eepromWrite+0x86>

	return true;
 800880c:	2301      	movs	r3, #1
}
 800880e:	0018      	movs	r0, r3
 8008810:	46bd      	mov	sp, r7
 8008812:	b004      	add	sp, #16
 8008814:	bd80      	pop	{r7, pc}
 8008816:	46c0      	nop			; (mov r8, r8)
 8008818:	00002710 	.word	0x00002710
 800881c:	40022000 	.word	0x40022000
 8008820:	fffffeff 	.word	0xfffffeff

08008824 <stm32l_lowPowerSetup>:

/**
 * Setup the STM32L Low Power mode for the given amount of ms
 * 0xFFFFFFFF ms when no time limit
 */
stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerSetup(uint32_t durationMs, stm32_lowPowerMode_e mode) {
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	000c      	movs	r4, r1
 8008828:	b082      	sub	sp, #8
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// -------------------------------------------------------------
		// Configure the STM32L0x1 for switching to low power stop mode
		// -------------------------------------------------------------
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			if ( durationMs == __INFINITE_32B ) {
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d05e      	beq.n	80088ec <stm32l_lowPowerSetup+0xc8>
				#endif
			}
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
		    } else {
			   return STM32L_LOWPOWER_TOOSHORT;
 800882e:	2301      	movs	r3, #1
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
 8008830:	2805      	cmp	r0, #5
 8008832:	d958      	bls.n	80088e6 <stm32l_lowPowerSetup+0xc2>
 8008834:	b280      	uxth	r0, r0
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
 8008836:	f000 f981 	bl	8008b3c <rtc_configure4LowPower>
			}
		#endif
		HAL_SuspendTick();
 800883a:	f7f8 ff2f 	bl	800169c <HAL_SuspendTick>
	    __HAL_RCC_PWR_CLK_ENABLE();				// Enable Power Control clock
 800883e:	2380      	movs	r3, #128	; 0x80
 8008840:	4a2b      	ldr	r2, [pc, #172]	; (80088f0 <stm32l_lowPowerSetup+0xcc>)
 8008842:	055b      	lsls	r3, r3, #21
 8008844:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008846:	430b      	orrs	r3, r1
 8008848:	6393      	str	r3, [r2, #56]	; 0x38
 	    HAL_PWREx_EnableUltraLowPower();		// Ultra low power mode
 800884a:	f7f9 fd07 	bl	800225c <HAL_PWREx_EnableUltraLowPower>
 	    HAL_PWREx_EnableFastWakeUp();			// Fast wake-up for ultra low power mode
 800884e:	f7f9 fcf7 	bl	8002240 <HAL_PWREx_EnableFastWakeUp>

 	    if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 8008852:	2c00      	cmp	r4, #0
 8008854:	d13b      	bne.n	80088ce <stm32l_lowPowerSetup+0xaa>
				while(__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET){};
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART1 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET){};
 8008856:	2280      	movs	r2, #128	; 0x80
 8008858:	4b26      	ldr	r3, [pc, #152]	; (80088f4 <stm32l_lowPowerSetup+0xd0>)
 800885a:	0252      	lsls	r2, r2, #9
 800885c:	6819      	ldr	r1, [r3, #0]
 800885e:	69cb      	ldr	r3, [r1, #28]
 8008860:	4213      	tst	r3, r2
 8008862:	d1fc      	bne.n	800885e <stm32l_lowPowerSetup+0x3a>
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET){};
 8008864:	2180      	movs	r1, #128	; 0x80
 8008866:	4d24      	ldr	r5, [pc, #144]	; (80088f8 <stm32l_lowPowerSetup+0xd4>)
 8008868:	0249      	lsls	r1, r1, #9
 800886a:	682b      	ldr	r3, [r5, #0]
 800886c:	69da      	ldr	r2, [r3, #28]
 800886e:	420a      	tst	r2, r1
 8008870:	d1fc      	bne.n	800886c <stm32l_lowPowerSetup+0x48>
			#endif


			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART2 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET){}
 8008872:	2480      	movs	r4, #128	; 0x80
 8008874:	03e4      	lsls	r4, r4, #15
 8008876:	69da      	ldr	r2, [r3, #28]
 8008878:	4222      	tst	r2, r4
 800887a:	d0fc      	beq.n	8008876 <stm32l_lowPowerSetup+0x52>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 800887c:	23c0      	movs	r3, #192	; 0xc0

			_stm32l_disableGpios();					// Disable GPIOs based on configuration

			#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			  // Register interrupt handler
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
 800887e:	2604      	movs	r6, #4
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 8008880:	039b      	lsls	r3, r3, #14
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 8008882:	0019      	movs	r1, r3
 8008884:	9a01      	ldr	r2, [sp, #4]
 8008886:	0028      	movs	r0, r5
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 8008888:	9300      	str	r3, [sp, #0]
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 800888a:	f7fc fd3f 	bl	800530c <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800888e:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart2);
 8008890:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8008892:	689a      	ldr	r2, [r3, #8]
					__HAL_RCC_USART1_CLK_DISABLE();
 8008894:	4d16      	ldr	r5, [pc, #88]	; (80088f0 <stm32l_lowPowerSetup+0xcc>)
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8008896:	4314      	orrs	r4, r2
 8008898:	609c      	str	r4, [r3, #8]
				HAL_UARTEx_EnableStopMode(&huart2);
 800889a:	f7fc fd9d 	bl	80053d8 <HAL_UARTEx_EnableStopMode>
					__HAL_RCC_USART1_CLK_DISABLE();
 800889e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80088a0:	4a16      	ldr	r2, [pc, #88]	; (80088fc <stm32l_lowPowerSetup+0xd8>)
 80088a2:	4013      	ands	r3, r2
 80088a4:	636b      	str	r3, [r5, #52]	; 0x34
			_stm32l_disableGpios();					// Disable GPIOs based on configuration
 80088a6:	f000 f8cb 	bl	8008a40 <_stm32l_disableGpios>
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
 80088aa:	4a15      	ldr	r2, [pc, #84]	; (8008900 <stm32l_lowPowerSetup+0xdc>)
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
 80088ac:	4815      	ldr	r0, [pc, #84]	; (8008904 <stm32l_lowPowerSetup+0xe0>)
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	4333      	orrs	r3, r6
 80088b2:	6013      	str	r3, [r2, #0]
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
 80088b4:	f7ff fc64 	bl	8008180 <gpio_registerWakeUpAction>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_I2C2 ) > 0
				__HAL_RCC_I2C2_CLK_DISABLE();
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI1 ) > 0
				__HAL_RCC_SPI1_CLK_DISABLE();
 80088b8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80088ba:	4b13      	ldr	r3, [pc, #76]	; (8008908 <stm32l_lowPowerSetup+0xe4>)
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				__HAL_RCC_TIM21_CLK_DISABLE();
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_DISABLE();
 80088bc:	4913      	ldr	r1, [pc, #76]	; (800890c <stm32l_lowPowerSetup+0xe8>)
				__HAL_RCC_SPI1_CLK_DISABLE();
 80088be:	401a      	ands	r2, r3
 80088c0:	636a      	str	r2, [r5, #52]	; 0x34
				__HAL_RCC_TIM21_CLK_DISABLE();
 80088c2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80088c4:	43b2      	bics	r2, r6
 80088c6:	636a      	str	r2, [r5, #52]	; 0x34
				__HAL_RCC_ADC1_CLK_DISABLE();
 80088c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80088ca:	400b      	ands	r3, r1
 80088cc:	636b      	str	r3, [r5, #52]	; 0x34


 	    // Switch to STOPMode
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			__lowPower_wakeup_pin=0xFFFF;
 80088ce:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 80088d0:	24ff      	movs	r4, #255	; 0xff
			__lowPower_wakeup_pin=0xFFFF;
 80088d2:	4a0f      	ldr	r2, [pc, #60]	; (8008910 <stm32l_lowPowerSetup+0xec>)
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 80088d4:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <stm32l_lowPowerSetup+0xf0>)
			__lowPower_wakeup_pin=0xFFFF;
 80088d6:	4240      	negs	r0, r0
 80088d8:	8010      	strh	r0, [r2, #0]
		#endif
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80088da:	2101      	movs	r1, #1
 80088dc:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 80088de:	701c      	strb	r4, [r3, #0]
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80088e0:	f7f9 fc7a 	bl	80021d8 <HAL_PWR_EnterSTOPMode>
	}
	return STM32L_LOWPOWER_SUCCESS;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	0018      	movs	r0, r3
 80088e8:	b002      	add	sp, #8
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	480a      	ldr	r0, [pc, #40]	; (8008918 <stm32l_lowPowerSetup+0xf4>)
 80088ee:	e7a2      	b.n	8008836 <stm32l_lowPowerSetup+0x12>
 80088f0:	40021000 	.word	0x40021000
 80088f4:	200002e4 	.word	0x200002e4
 80088f8:	20000364 	.word	0x20000364
 80088fc:	ffffbfff 	.word	0xffffbfff
 8008900:	40007000 	.word	0x40007000
 8008904:	2000000c 	.word	0x2000000c
 8008908:	ffffefff 	.word	0xffffefff
 800890c:	fffffdff 	.word	0xfffffdff
 8008910:	2000014c 	.word	0x2000014c
 8008914:	20000009 	.word	0x20000009
 8008918:	00006d5b 	.word	0x00006d5b

0800891c <stm32l_lowPowerResume>:


stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerResume(stm32_lowPowerMode_e mode) {
 800891c:	b510      	push	{r4, lr}
 800891e:	0004      	movs	r4, r0
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// ------------------------------------------------------------
		// Restore from STOP MODE
		// ------------------------------------------------------------

		SystemClock_Config();
 8008920:	f7f8 f93a 	bl	8000b98 <SystemClock_Config>
		HAL_SuspendTick();
 8008924:	f7f8 feba 	bl	800169c <HAL_SuspendTick>
		#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			rtc_disable4LowPower();
 8008928:	f000 f91d 	bl	8008b66 <rtc_disable4LowPower>
		#endif

		if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 800892c:	2c00      	cmp	r4, #0
 800892e:	d003      	beq.n	8008938 <stm32l_lowPowerResume+0x1c>
	} else {
		log_info("|");
	}
	#endif

	HAL_ResumeTick();
 8008930:	f7f8 fec2 	bl	80016b8 <HAL_ResumeTick>
	return STM32L_LOWPOWER_SUCCESS;
}
 8008934:	2000      	movs	r0, #0
 8008936:	bd10      	pop	{r4, pc}
			stm32l_lowPowerRestoreGpioConfig();
 8008938:	f7f8 f86c 	bl	8000a14 <stm32l_lowPowerRestoreGpioConfig>
				HAL_SPI_MspInit(&hspi1);
 800893c:	4810      	ldr	r0, [pc, #64]	; (8008980 <stm32l_lowPowerResume+0x64>)
 800893e:	f7f8 fb2b 	bl	8000f98 <HAL_SPI_MspInit>
				HAL_TIM_Base_MspInit(&htim21);
 8008942:	4810      	ldr	r0, [pc, #64]	; (8008984 <stm32l_lowPowerResume+0x68>)
 8008944:	f7f8 fcfa 	bl	800133c <HAL_TIM_Base_MspInit>
				__HAL_RCC_ADC1_CLK_ENABLE();
 8008948:	2380      	movs	r3, #128	; 0x80
 800894a:	4a0f      	ldr	r2, [pc, #60]	; (8008988 <stm32l_lowPowerResume+0x6c>)
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8008950:	430b      	orrs	r3, r1
 8008952:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_ADCEx_EnableVREFINT();
 8008954:	f7f9 f8d6 	bl	8001b04 <HAL_ADCEx_EnableVREFINT>
				HAL_UART_MspInit(&huart1);
 8008958:	480c      	ldr	r0, [pc, #48]	; (800898c <stm32l_lowPowerResume+0x70>)
 800895a:	f7f8 fd6f 	bl	800143c <HAL_UART_MspInit>
				MX_USART1_UART_Init();
 800895e:	f7f8 fd05 	bl	800136c <MX_USART1_UART_Init>
			 gpio_removeWakeUpAction();
 8008962:	f7ff fc1b 	bl	800819c <gpio_removeWakeUpAction>
			 if ( __lowPower_wakeup_reason == LOWPWR_WAKEUP_GPIO && __lowPower_wakeup_pin != 0xFFFF ) {
 8008966:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <stm32l_lowPowerResume+0x74>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d1e0      	bne.n	8008930 <stm32l_lowPowerResume+0x14>
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <stm32l_lowPowerResume+0x78>)
 8008970:	4a09      	ldr	r2, [pc, #36]	; (8008998 <stm32l_lowPowerResume+0x7c>)
 8008972:	8818      	ldrh	r0, [r3, #0]
 8008974:	4290      	cmp	r0, r2
 8008976:	d0db      	beq.n	8008930 <stm32l_lowPowerResume+0x14>
				HAL_GPIO_EXTI_Callback(__lowPower_wakeup_pin);
 8008978:	f7ff fbbe 	bl	80080f8 <HAL_GPIO_EXTI_Callback>
 800897c:	e7d8      	b.n	8008930 <stm32l_lowPowerResume+0x14>
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	20000250 	.word	0x20000250
 8008984:	200002a8 	.word	0x200002a8
 8008988:	40021000 	.word	0x40021000
 800898c:	200002e4 	.word	0x200002e4
 8008990:	20000009 	.word	0x20000009
 8008994:	2000014c 	.word	0x2000014c
 8008998:	0000ffff 	.word	0x0000ffff

0800899c <__GpioAnalog>:

/**
 * Switch the GPIO to Low Power
 */
void __GpioAnalog(GPIO_TypeDef  *GPIOx, uint16_t pins)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	000a      	movs	r2, r1
 80089a6:	230a      	movs	r3, #10
 80089a8:	18fb      	adds	r3, r7, r3
 80089aa:	801a      	strh	r2, [r3, #0]
  uint32_t position = 0x00U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]

  // Configure the port pins //
  while ((pins >> position) != 0)
 80089b8:	e036      	b.n	8008a28 <__GpioAnalog+0x8c>
  {
    iocurrent = (pins) & (1U << position);
 80089ba:	230a      	movs	r3, #10
 80089bc:	18fb      	adds	r3, r7, r3
 80089be:	607b      	str	r3, [r7, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	2101      	movs	r1, #1
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	4091      	lsls	r1, r2
 80089ca:	000a      	movs	r2, r1
 80089cc:	4013      	ands	r3, r2
 80089ce:	61bb      	str	r3, [r7, #24]
    if(iocurrent)
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d025      	beq.n	8008a22 <__GpioAnalog+0x86>
    {
      // Configure IO Direction mode (Input, Output, Alternate or Analog)
      temp = GPIOx->MODER;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	617b      	str	r3, [r7, #20]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	2203      	movs	r2, #3
 80089e2:	409a      	lsls	r2, r3
 80089e4:	0013      	movs	r3, r2
 80089e6:	43da      	mvns	r2, r3
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	4013      	ands	r3, r2
 80089ec:	617b      	str	r3, [r7, #20]
      temp |= ((GPIO_MODE_ANALOG) << (position * 2U));
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	2203      	movs	r2, #3
 80089f4:	409a      	lsls	r2, r3
 80089f6:	0013      	movs	r3, r2
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = temp;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	601a      	str	r2, [r3, #0]

      // Activate the Pull-up or Pull down resistor for the current IO
      temp = GPIOx->PUPDR;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	617b      	str	r3, [r7, #20]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	2203      	movs	r2, #3
 8008a10:	409a      	lsls	r2, r3
 8008a12:	0013      	movs	r3, r2
 8008a14:	43da      	mvns	r2, r3
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	617b      	str	r3, [r7, #20]
      temp |= ((GPIO_NOPULL) << (position * 2U));
      GPIOx->PUPDR = temp;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	60da      	str	r2, [r3, #12]
    }
    position++;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	3301      	adds	r3, #1
 8008a26:	61fb      	str	r3, [r7, #28]
  while ((pins >> position) != 0)
 8008a28:	230a      	movs	r3, #10
 8008a2a:	18fb      	adds	r3, r7, r3
 8008a2c:	881a      	ldrh	r2, [r3, #0]
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	411a      	asrs	r2, r3
 8008a32:	1e13      	subs	r3, r2, #0
 8008a34:	d1c1      	bne.n	80089ba <__GpioAnalog+0x1e>
  }
}
 8008a36:	46c0      	nop			; (mov r8, r8)
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	b008      	add	sp, #32
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	46c0      	nop			; (mov r8, r8)

08008a40 <_stm32l_disableGpios>:

/**
 * Disable GPIOS for Low Power switching
 */
void _stm32l_disableGpios() {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
    /*       example because communication between ST-link and the device       		*/
    /*       under test is done through UART. All GPIO pins are disabled (set   		*/
    /*       to analog input mode) including  UART I/O pins.           					*/

#ifdef GPIOA
	__GpioAnalog(GPIOA,(~ITSDK_LOWPOWER_GPIO_A_KEEP) & (GPIOA_PIN_AVAILABLE));
 8008a44:	4a1c      	ldr	r2, [pc, #112]	; (8008ab8 <_stm32l_disableGpios+0x78>)
 8008a46:	23a0      	movs	r3, #160	; 0xa0
 8008a48:	05db      	lsls	r3, r3, #23
 8008a4a:	0011      	movs	r1, r2
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7ff ffa5 	bl	800899c <__GpioAnalog>
		__HAL_RCC_GPIOA_CLK_DISABLE();
	}
#endif

#ifdef GPIOB
	__GpioAnalog(GPIOB,(~ITSDK_LOWPOWER_GPIO_B_KEEP) & (GPIOB_PIN_AVAILABLE));
 8008a52:	4a1a      	ldr	r2, [pc, #104]	; (8008abc <_stm32l_disableGpios+0x7c>)
 8008a54:	4b1a      	ldr	r3, [pc, #104]	; (8008ac0 <_stm32l_disableGpios+0x80>)
 8008a56:	0011      	movs	r1, r2
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f7ff ff9f 	bl	800899c <__GpioAnalog>
		__HAL_RCC_GPIOB_CLK_DISABLE();
	}
#endif

#ifdef GPIOC
	__GpioAnalog(GPIOC,(~ITSDK_LOWPOWER_GPIO_C_KEEP) & (GPIOC_PIN_AVAILABLE));
 8008a5e:	4a19      	ldr	r2, [pc, #100]	; (8008ac4 <_stm32l_disableGpios+0x84>)
 8008a60:	4b19      	ldr	r3, [pc, #100]	; (8008ac8 <_stm32l_disableGpios+0x88>)
 8008a62:	0011      	movs	r1, r2
 8008a64:	0018      	movs	r0, r3
 8008a66:	f7ff ff99 	bl	800899c <__GpioAnalog>
		__HAL_RCC_GPIOC_CLK_DISABLE();
	}
#endif

#ifdef GPIOD
	__GpioAnalog(GPIOD,(~ITSDK_LOWPOWER_GPIO_D_KEEP) & (GPIOD_PIN_AVAILABLE));
 8008a6a:	4a18      	ldr	r2, [pc, #96]	; (8008acc <_stm32l_disableGpios+0x8c>)
 8008a6c:	4b18      	ldr	r3, [pc, #96]	; (8008ad0 <_stm32l_disableGpios+0x90>)
 8008a6e:	0011      	movs	r1, r2
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7ff ff93 	bl	800899c <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_D_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOD_CLK_DISABLE();
 8008a76:	4b17      	ldr	r3, [pc, #92]	; (8008ad4 <_stm32l_disableGpios+0x94>)
 8008a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7a:	4b16      	ldr	r3, [pc, #88]	; (8008ad4 <_stm32l_disableGpios+0x94>)
 8008a7c:	2108      	movs	r1, #8
 8008a7e:	438a      	bics	r2, r1
 8008a80:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOE
	__GpioAnalog(GPIOE,(~ITSDK_LOWPOWER_GPIO_E_KEEP) & (GPIOE_PIN_AVAILABLE));
 8008a82:	4a12      	ldr	r2, [pc, #72]	; (8008acc <_stm32l_disableGpios+0x8c>)
 8008a84:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <_stm32l_disableGpios+0x98>)
 8008a86:	0011      	movs	r1, r2
 8008a88:	0018      	movs	r0, r3
 8008a8a:	f7ff ff87 	bl	800899c <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_E_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOE_CLK_DISABLE();
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <_stm32l_disableGpios+0x94>)
 8008a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <_stm32l_disableGpios+0x94>)
 8008a94:	2110      	movs	r1, #16
 8008a96:	438a      	bics	r2, r1
 8008a98:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOH
	__GpioAnalog(GPIOH,(~ITSDK_LOWPOWER_GPIO_H_KEEP) & (GPIOH_PIN_AVAILABLE));
 8008a9a:	4a10      	ldr	r2, [pc, #64]	; (8008adc <_stm32l_disableGpios+0x9c>)
 8008a9c:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <_stm32l_disableGpios+0xa0>)
 8008a9e:	0011      	movs	r1, r2
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f7ff ff7b 	bl	800899c <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_H_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOH_CLK_DISABLE();
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <_stm32l_disableGpios+0x94>)
 8008aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <_stm32l_disableGpios+0x94>)
 8008aac:	2180      	movs	r1, #128	; 0x80
 8008aae:	438a      	bics	r2, r1
 8008ab0:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

}
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	0000fff3 	.word	0x0000fff3
 8008abc:	0000ff5f 	.word	0x0000ff5f
 8008ac0:	50000400 	.word	0x50000400
 8008ac4:	0000fff8 	.word	0x0000fff8
 8008ac8:	50000800 	.word	0x50000800
 8008acc:	0000ffff 	.word	0x0000ffff
 8008ad0:	50000c00 	.word	0x50000c00
 8008ad4:	40021000 	.word	0x40021000
 8008ad8:	50001000 	.word	0x50001000
 8008adc:	00000603 	.word	0x00000603
 8008ae0:	50001c00 	.word	0x50001c00

08008ae4 <__LP_GPIO_IRQHandler>:
 * once the mcu is reconfigured & ready
 */

#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0

void __LP_GPIO_IRQHandler(uint16_t GPIO_Pin) {
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	0002      	movs	r2, r0
 8008aec:	1dbb      	adds	r3, r7, #6
 8008aee:	801a      	strh	r2, [r3, #0]

  /* Clear Wake Up Flag */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8008af0:	4b08      	ldr	r3, [pc, #32]	; (8008b14 <__LP_GPIO_IRQHandler+0x30>)
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	4b07      	ldr	r3, [pc, #28]	; (8008b14 <__LP_GPIO_IRQHandler+0x30>)
 8008af6:	2104      	movs	r1, #4
 8008af8:	430a      	orrs	r2, r1
 8008afa:	601a      	str	r2, [r3, #0]
  __lowPower_wakeup_reason=LOWPWR_WAKEUP_GPIO;
 8008afc:	4b06      	ldr	r3, [pc, #24]	; (8008b18 <__LP_GPIO_IRQHandler+0x34>)
 8008afe:	2201      	movs	r2, #1
 8008b00:	701a      	strb	r2, [r3, #0]
  __lowPower_wakeup_pin = GPIO_Pin;
 8008b02:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <__LP_GPIO_IRQHandler+0x38>)
 8008b04:	1dba      	adds	r2, r7, #6
 8008b06:	8812      	ldrh	r2, [r2, #0]
 8008b08:	801a      	strh	r2, [r3, #0]

}
 8008b0a:	46c0      	nop			; (mov r8, r8)
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	b002      	add	sp, #8
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	40007000 	.word	0x40007000
 8008b18:	20000009 	.word	0x20000009
 8008b1c:	2000014c 	.word	0x2000014c

08008b20 <HAL_UARTEx_WakeupCallback>:

#endif

#if  ( ITSDK_LOWPOWER_MOD & ( __LOWPWR_MODE_WAKE_LPUART | __LOWPWR_MODE_WAKE_UART2 | __LOWPWR_MODE_WAKE_UART1 )  ) > 0
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
   __lowPower_wakeup_reason=LOWPWR_WAKEUP_UART;
 8008b28:	4b03      	ldr	r3, [pc, #12]	; (8008b38 <HAL_UARTEx_WakeupCallback+0x18>)
 8008b2a:	2203      	movs	r2, #3
 8008b2c:	701a      	strb	r2, [r3, #0]
}
 8008b2e:	46c0      	nop			; (mov r8, r8)
 8008b30:	46bd      	mov	sp, r7
 8008b32:	b002      	add	sp, #8
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	20000009 	.word	0x20000009

08008b3c <rtc_configure4LowPower>:


/**
 * Configure the RTC source clock for running LowPower
 */
void rtc_configure4LowPower(uint16_t ms) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	0002      	movs	r2, r0
 8008b44:	1dbb      	adds	r3, r7, #6
 8008b46:	801a      	strh	r2, [r3, #0]
		rtc_prepareSleepTime();
 8008b48:	f000 f97a 	bl	8008e40 <rtc_prepareSleepTime>
	if ( ms > 0 ) {
 8008b4c:	1dbb      	adds	r3, r7, #6
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <rtc_configure4LowPower+0x22>
		rtc_runRtcUntil(ms);
 8008b54:	1dbb      	adds	r3, r7, #6
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f000 f80d 	bl	8008b78 <rtc_runRtcUntil>
	}
}
 8008b5e:	46c0      	nop			; (mov r8, r8)
 8008b60:	46bd      	mov	sp, r7
 8008b62:	b002      	add	sp, #8
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <rtc_disable4LowPower>:

/**
 * Deactivate the WakeUpTimer for not having the IRQ looping
 */
void rtc_disable4LowPower() {
 8008b66:	b580      	push	{r7, lr}
 8008b68:	af00      	add	r7, sp, #0
	rtc_disableWakeUp();
 8008b6a:	f000 f839 	bl	8008be0 <rtc_disableWakeUp>
    rtc_updateTimeAfterSleepTime();
 8008b6e:	f000 f979 	bl	8008e64 <rtc_updateTimeAfterSleepTime>
}
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <rtc_runRtcUntil>:

/**
 * Run Rtc for a given time in ticks
 * Max is 16s
 */
void rtc_runRtcUntil(uint16_t ms) {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	0002      	movs	r2, r0
 8008b80:	1dbb      	adds	r3, r7, #6
 8008b82:	801a      	strh	r2, [r3, #0]
    rtc_runRtcUntilTicks(rtc_getTicksFromDuration((uint32_t)ms));
 8008b84:	1dbb      	adds	r3, r7, #6
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f000 f808 	bl	8008b9e <rtc_getTicksFromDuration>
 8008b8e:	0003      	movs	r3, r0
 8008b90:	0018      	movs	r0, r3
 8008b92:	f000 f815 	bl	8008bc0 <rtc_runRtcUntilTicks>
}
 8008b96:	46c0      	nop			; (mov r8, r8)
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	b002      	add	sp, #8
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <rtc_getTicksFromDuration>:

/*
 * Convert a duration in ticks (Wake-Up Clock only)
 */
uint32_t rtc_getTicksFromDuration(uint32_t ms) {
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
    return (ms * (ITSDK_RTC_CLKFREQ/16)) / 1000;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	02da      	lsls	r2, r3, #11
 8008baa:	23fa      	movs	r3, #250	; 0xfa
 8008bac:	0099      	lsls	r1, r3, #2
 8008bae:	0010      	movs	r0, r2
 8008bb0:	f7f7 fab2 	bl	8000118 <__udivsi3>
 8008bb4:	0003      	movs	r3, r0
}
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	b002      	add	sp, #8
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <rtc_runRtcUntilTicks>:
}

/**
 * Run the RTC for a given number of tics
 */
void rtc_runRtcUntilTicks(uint32_t ticks) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	4b04      	ldr	r3, [pc, #16]	; (8008bdc <rtc_runRtcUntilTicks+0x1c>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f7fa ff4a 	bl	8003a68 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8008bd4:	46c0      	nop			; (mov r8, r8)
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b002      	add	sp, #8
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	200001d4 	.word	0x200001d4

08008be0 <rtc_disableWakeUp>:


void rtc_disableWakeUp() {
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8008be4:	4b03      	ldr	r3, [pc, #12]	; (8008bf4 <rtc_disableWakeUp+0x14>)
 8008be6:	0018      	movs	r0, r3
 8008be8:	f7fb f804 	bl	8003bf4 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8008bec:	46c0      	nop			; (mov r8, r8)
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	200001d4 	.word	0x200001d4

08008bf8 <rtc_getTimestampMs>:

#ifndef __WE_HAVE_A_LOT_OF_FLASH
uint32_t __rtc_days = 0;			// day index since the begining
uint32_t __rtc_lastTick = 0;		// time in ms in the day
#endif
uint64_t rtc_getTimestampMs() {
 8008bf8:	b5b0      	push	{r4, r5, r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
	return rtc_getTimestampMsRaw(true);
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	f000 f807 	bl	8008c10 <rtc_getTimestampMsRaw>
 8008c02:	0003      	movs	r3, r0
 8008c04:	000c      	movs	r4, r1
}
 8008c06:	0018      	movs	r0, r3
 8008c08:	0021      	movs	r1, r4
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008c10 <rtc_getTimestampMsRaw>:

uint64_t rtc_getTimestampMsRaw(bool adjust) {
 8008c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c12:	b095      	sub	sp, #84	; 0x54
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	0003      	movs	r3, r0
 8008c18:	222f      	movs	r2, #47	; 0x2f
 8008c1a:	18ba      	adds	r2, r7, r2
 8008c1c:	7013      	strb	r3, [r2, #0]
	uint64_t ms = (timestamp*1000) + ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
#else
	RTC_TimeTypeDef _time;
	RTC_DateTypeDef _date;
	uint64_t ms;
	HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 8008c1e:	210c      	movs	r1, #12
 8008c20:	000c      	movs	r4, r1
 8008c22:	2328      	movs	r3, #40	; 0x28
 8008c24:	469c      	mov	ip, r3
 8008c26:	44bc      	add	ip, r7
 8008c28:	4461      	add	r1, ip
 8008c2a:	4b61      	ldr	r3, [pc, #388]	; (8008db0 <rtc_getTimestampMsRaw+0x1a0>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f7fa fb90 	bl	8003354 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BIN);
 8008c34:	2308      	movs	r3, #8
 8008c36:	2028      	movs	r0, #40	; 0x28
 8008c38:	183a      	adds	r2, r7, r0
 8008c3a:	18d1      	adds	r1, r2, r3
 8008c3c:	4b5c      	ldr	r3, [pc, #368]	; (8008db0 <rtc_getTimestampMsRaw+0x1a0>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7fa fc91 	bl	8003568 <HAL_RTC_GetDate>
	ms  = (uint32_t)_time.Hours*3600*1000;
 8008c46:	0021      	movs	r1, r4
 8008c48:	2028      	movs	r0, #40	; 0x28
 8008c4a:	183b      	adds	r3, r7, r0
 8008c4c:	185b      	adds	r3, r3, r1
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	001a      	movs	r2, r3
 8008c52:	4b58      	ldr	r3, [pc, #352]	; (8008db4 <rtc_getTimestampMsRaw+0x1a4>)
 8008c54:	4353      	muls	r3, r2
 8008c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c58:	2300      	movs	r3, #0
 8008c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Minutes*60*1000;
 8008c5c:	183a      	adds	r2, r7, r0
 8008c5e:	1853      	adds	r3, r2, r1
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	001a      	movs	r2, r3
 8008c64:	4b54      	ldr	r3, [pc, #336]	; (8008db8 <rtc_getTimestampMsRaw+0x1a8>)
 8008c66:	4353      	muls	r3, r2
 8008c68:	623b      	str	r3, [r7, #32]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c70:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8008c72:	6a38      	ldr	r0, [r7, #32]
 8008c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c76:	181b      	adds	r3, r3, r0
 8008c78:	414c      	adcs	r4, r1
 8008c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c7c:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Seconds*1000;
 8008c7e:	210c      	movs	r1, #12
 8008c80:	0008      	movs	r0, r1
 8008c82:	2328      	movs	r3, #40	; 0x28
 8008c84:	18fa      	adds	r2, r7, r3
 8008c86:	1853      	adds	r3, r2, r1
 8008c88:	789b      	ldrb	r3, [r3, #2]
 8008c8a:	001a      	movs	r2, r3
 8008c8c:	0013      	movs	r3, r2
 8008c8e:	015b      	lsls	r3, r3, #5
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	189b      	adds	r3, r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	61bb      	str	r3, [r7, #24]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8008ca2:	69b9      	ldr	r1, [r7, #24]
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	185b      	adds	r3, r3, r1
 8008ca8:	4154      	adcs	r4, r2
 8008caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cac:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
 8008cae:	0001      	movs	r1, r0
 8008cb0:	2028      	movs	r0, #40	; 0x28
 8008cb2:	183b      	adds	r3, r7, r0
 8008cb4:	185b      	adds	r3, r3, r1
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	183b      	adds	r3, r7, r0
 8008cba:	185b      	adds	r3, r3, r1
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	1ad2      	subs	r2, r2, r3
 8008cc0:	0013      	movs	r3, r2
 8008cc2:	015b      	lsls	r3, r3, #5
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	189b      	adds	r3, r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	001a      	movs	r2, r3
 8008cce:	183b      	adds	r3, r7, r0
 8008cd0:	185b      	adds	r3, r3, r1
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	0019      	movs	r1, r3
 8008cd6:	0010      	movs	r0, r2
 8008cd8:	f7f7 fa1e 	bl	8000118 <__udivsi3>
 8008cdc:	0003      	movs	r3, r0
 8008cde:	3301      	adds	r3, #1
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]
 8008ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce8:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8008cea:	6939      	ldr	r1, [r7, #16]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	185b      	adds	r3, r3, r1
 8008cf0:	4154      	adcs	r4, r2
 8008cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cf4:	64fc      	str	r4, [r7, #76]	; 0x4c

	if ( ms < __rtc_lastTick ) {
 8008cf6:	4b31      	ldr	r3, [pc, #196]	; (8008dbc <rtc_getTimestampMsRaw+0x1ac>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	001d      	movs	r5, r3
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	001e      	movs	r6, r3
 8008d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d02:	42b3      	cmp	r3, r6
 8008d04:	d305      	bcc.n	8008d12 <rtc_getTimestampMsRaw+0x102>
 8008d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d08:	42b3      	cmp	r3, r6
 8008d0a:	d107      	bne.n	8008d1c <rtc_getTimestampMsRaw+0x10c>
 8008d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d0e:	42ab      	cmp	r3, r5
 8008d10:	d204      	bcs.n	8008d1c <rtc_getTimestampMsRaw+0x10c>
		// day has changed
		__rtc_days++;
 8008d12:	4b2b      	ldr	r3, [pc, #172]	; (8008dc0 <rtc_getTimestampMsRaw+0x1b0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	4b29      	ldr	r3, [pc, #164]	; (8008dc0 <rtc_getTimestampMsRaw+0x1b0>)
 8008d1a:	601a      	str	r2, [r3, #0]
	}
	__rtc_lastTick = ms;
 8008d1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d1e:	4b27      	ldr	r3, [pc, #156]	; (8008dbc <rtc_getTimestampMsRaw+0x1ac>)
 8008d20:	601a      	str	r2, [r3, #0]
	ms = ( uint64_t )((uint64_t)__rtc_days*3600000L*24L)+(uint64_t)ms;
 8008d22:	4b27      	ldr	r3, [pc, #156]	; (8008dc0 <rtc_getTimestampMsRaw+0x1b0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60bb      	str	r3, [r7, #8]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	4a25      	ldr	r2, [pc, #148]	; (8008dc4 <rtc_getTimestampMsRaw+0x1b4>)
 8008d2e:	2300      	movs	r3, #0
 8008d30:	68b8      	ldr	r0, [r7, #8]
 8008d32:	68f9      	ldr	r1, [r7, #12]
 8008d34:	f7f7 fac0 	bl	80002b8 <__aeabi_lmul>
 8008d38:	0003      	movs	r3, r0
 8008d3a:	000c      	movs	r4, r1
 8008d3c:	0019      	movs	r1, r3
 8008d3e:	0022      	movs	r2, r4
 8008d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d42:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8008d44:	185b      	adds	r3, r3, r1
 8008d46:	4154      	adcs	r4, r2
 8008d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d4a:	64fc      	str	r4, [r7, #76]	; 0x4c
#endif
	// apply the RTC clock correction and add previous offset
	#if ITSDK_WITH_CLK_ADJUST > 0
		if (adjust && __rtc_init > 0) {
 8008d4c:	232f      	movs	r3, #47	; 0x2f
 8008d4e:	18fb      	adds	r3, r7, r3
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d024      	beq.n	8008da0 <rtc_getTimestampMsRaw+0x190>
 8008d56:	4b1c      	ldr	r3, [pc, #112]	; (8008dc8 <rtc_getTimestampMsRaw+0x1b8>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d020      	beq.n	8008da0 <rtc_getTimestampMsRaw+0x190>
			ms = (ms * (uint64_t)__rtc_currentRatio) / 1000L;
 8008d5e:	4b1b      	ldr	r3, [pc, #108]	; (8008dcc <rtc_getTimestampMsRaw+0x1bc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	2300      	movs	r3, #0
 8008d66:	607b      	str	r3, [r7, #4]
 8008d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6c:	6838      	ldr	r0, [r7, #0]
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	f7f7 faa2 	bl	80002b8 <__aeabi_lmul>
 8008d74:	0003      	movs	r3, r0
 8008d76:	000c      	movs	r4, r1
 8008d78:	0018      	movs	r0, r3
 8008d7a:	0021      	movs	r1, r4
 8008d7c:	22fa      	movs	r2, #250	; 0xfa
 8008d7e:	0092      	lsls	r2, r2, #2
 8008d80:	2300      	movs	r3, #0
 8008d82:	f7f7 fa79 	bl	8000278 <__aeabi_uldivmod>
 8008d86:	0003      	movs	r3, r0
 8008d88:	000c      	movs	r4, r1
 8008d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d8c:	64fc      	str	r4, [r7, #76]	; 0x4c
			ms += __rtc_offset;
 8008d8e:	4b10      	ldr	r3, [pc, #64]	; (8008dd0 <rtc_getTimestampMsRaw+0x1c0>)
 8008d90:	685c      	ldr	r4, [r3, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d98:	185b      	adds	r3, r3, r1
 8008d9a:	4154      	adcs	r4, r2
 8008d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d9e:	64fc      	str	r4, [r7, #76]	; 0x4c
		}
	#else
		ms = (adjust)?(ms * ITSDK_CLK_CORRECTION) / 1000L:ms;
	#endif
	return ms;
 8008da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 8008da4:	0018      	movs	r0, r3
 8008da6:	0021      	movs	r1, r4
 8008da8:	46bd      	mov	sp, r7
 8008daa:	b015      	add	sp, #84	; 0x54
 8008dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dae:	46c0      	nop			; (mov r8, r8)
 8008db0:	200001d4 	.word	0x200001d4
 8008db4:	0036ee80 	.word	0x0036ee80
 8008db8:	0000ea60 	.word	0x0000ea60
 8008dbc:	20000154 	.word	0x20000154
 8008dc0:	20000150 	.word	0x20000150
 8008dc4:	05265c00 	.word	0x05265c00
 8008dc8:	2000014e 	.word	0x2000014e
 8008dcc:	200004e0 	.word	0x200004e0
 8008dd0:	200004e8 	.word	0x200004e8

08008dd4 <rtc_resetTime>:


/**
 * Reset RTC to 00:00:00.00 at startup
 */
void rtc_resetTime() {
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
	RTC_DateTypeDef _date;
	_date.Year = 0;
 8008dda:	2114      	movs	r1, #20
 8008ddc:	187b      	adds	r3, r7, r1
 8008dde:	2200      	movs	r2, #0
 8008de0:	70da      	strb	r2, [r3, #3]
	_date.Month = 1;
 8008de2:	187b      	adds	r3, r7, r1
 8008de4:	2201      	movs	r2, #1
 8008de6:	705a      	strb	r2, [r3, #1]
	_date.Date = 1;
 8008de8:	187b      	adds	r3, r7, r1
 8008dea:	2201      	movs	r2, #1
 8008dec:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetDate(&hrtc,&_date,RTC_FORMAT_BIN);
 8008dee:	1879      	adds	r1, r7, r1
 8008df0:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <rtc_resetTime+0x64>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	0018      	movs	r0, r3
 8008df6:	f7fa fb09 	bl	800340c <HAL_RTC_SetDate>

	RTC_TimeTypeDef _time;
	_time.Hours 		 = 0x0;
 8008dfa:	003b      	movs	r3, r7
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
	_time.Minutes 		 = 0x0;
 8008e00:	003b      	movs	r3, r7
 8008e02:	2200      	movs	r2, #0
 8008e04:	705a      	strb	r2, [r3, #1]
	_time.Seconds 		 = 0x0;
 8008e06:	003b      	movs	r3, r7
 8008e08:	2200      	movs	r2, #0
 8008e0a:	709a      	strb	r2, [r3, #2]
	_time.SubSeconds  	 = 0x00;
 8008e0c:	003b      	movs	r3, r7
 8008e0e:	2200      	movs	r2, #0
 8008e10:	605a      	str	r2, [r3, #4]
	_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008e12:	003b      	movs	r3, r7
 8008e14:	2200      	movs	r2, #0
 8008e16:	60da      	str	r2, [r3, #12]
	_time.StoreOperation = RTC_STOREOPERATION_RESET;
 8008e18:	003b      	movs	r3, r7
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 8008e1e:	0039      	movs	r1, r7
 8008e20:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <rtc_resetTime+0x64>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	0018      	movs	r0, r3
 8008e26:	f7fa f9d1 	bl	80031cc <HAL_RTC_SetTime>
	__rtc_lastTick = 0;
 8008e2a:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <rtc_resetTime+0x68>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
}
 8008e30:	46c0      	nop			; (mov r8, r8)
 8008e32:	46bd      	mov	sp, r7
 8008e34:	b006      	add	sp, #24
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	200001d4 	.word	0x200001d4
 8008e3c:	20000154 	.word	0x20000154

08008e40 <rtc_prepareSleepTime>:

/**
 * Call before any sleep in case there is something to prepare with RTC
 * or others.
 */
void rtc_prepareSleepTime() {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
	__enable_systick=false;
 8008e44:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <rtc_prepareSleepTime+0x1c>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]

//	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN1 );
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN2 );

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8008e4a:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <rtc_prepareSleepTime+0x20>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <rtc_prepareSleepTime+0x20>)
 8008e50:	2104      	movs	r1, #4
 8008e52:	430a      	orrs	r2, r1
 8008e54:	601a      	str	r2, [r3, #0]
}
 8008e56:	46c0      	nop			; (mov r8, r8)
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20000018 	.word	0x20000018
 8008e60:	40007000 	.word	0x40007000

08008e64 <rtc_updateTimeAfterSleepTime>:


/**
 * Get the sleep duration based on RTC counter
 */
void rtc_updateTimeAfterSleepTime() {
 8008e64:	b5b0      	push	{r4, r5, r7, lr}
 8008e66:	af00      	add	r7, sp, #0

	itsdk_time_set_ms(rtc_getTimestampMs());
 8008e68:	f7ff fec6 	bl	8008bf8 <rtc_getTimestampMs>
 8008e6c:	0003      	movs	r3, r0
 8008e6e:	000c      	movs	r4, r1
 8008e70:	0018      	movs	r0, r3
 8008e72:	0021      	movs	r1, r4
 8008e74:	f7fe fdc2 	bl	80079fc <itsdk_time_set_ms>
	__enable_systick=true;
 8008e78:	4b02      	ldr	r3, [pc, #8]	; (8008e84 <rtc_updateTimeAfterSleepTime+0x20>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	701a      	strb	r2, [r3, #0]
}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bdb0      	pop	{r4, r5, r7, pc}
 8008e84:	20000018 	.word	0x20000018

08008e88 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * RCT Interrupt handler allowing to chain different function
 */
rtc_irq_chain_t __rtc_irq_chain = { NULL, NULL };
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	rtc_irq_chain_t * c = &__rtc_irq_chain;
 8008e90:	4b0f      	ldr	r3, [pc, #60]	; (8008ed0 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 8008e92:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 8008e94:	e00c      	b.n	8008eb0 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
		void (*p)(RTC_HandleTypeDef *h) = c->irq_func;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	60bb      	str	r3, [r7, #8]
		if ( p != NULL ) {
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <HAL_RTCEx_WakeUpTimerEventCallback+0x22>
			p(hrtc);
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	0010      	movs	r0, r2
 8008ea8:	4798      	blx	r3
		}
		c = c->next;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1ef      	bne.n	8008e96 <HAL_RTCEx_WakeUpTimerEventCallback+0xe>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8008eb6:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 8008ebc:	2104      	movs	r1, #4
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason=LOWPWR_WAKEUP_RTC;
 8008ec2:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	701a      	strb	r2, [r3, #0]
}
 8008ec8:	46c0      	nop			; (mov r8, r8)
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	b004      	add	sp, #16
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20000158 	.word	0x20000158
 8008ed4:	40007000 	.word	0x40007000
 8008ed8:	20000009 	.word	0x20000009

08008edc <rtc_getClockAdjustement>:
 */

/**
 * Return the last computed ratio
 */
uint32_t rtc_getClockAdjustement() {
 8008edc:	b580      	push	{r7, lr}
 8008ede:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	if (__rtc_init > 0) {
 8008ee0:	4b06      	ldr	r3, [pc, #24]	; (8008efc <rtc_getClockAdjustement+0x20>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <rtc_getClockAdjustement+0x12>
		return __rtc_currentRatio;
 8008ee8:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <rtc_getClockAdjustement+0x24>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	e002      	b.n	8008ef4 <rtc_getClockAdjustement+0x18>
	} else {
		return rtc_calcClockRatio();
 8008eee:	f000 f833 	bl	8008f58 <rtc_calcClockRatio>
 8008ef2:	0003      	movs	r3, r0
	}
#else
	return ITSDK_CLK_CORRECTION;
#endif
}
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	2000014e 	.word	0x2000014e
 8008f00:	200004e0 	.word	0x200004e0

08008f04 <rtc_adjustTime>:

/**
 * Manage rtc clock adjustement / (re)evaluate the clock ratio
 * Can be called at anytime to reajust
 */
void rtc_adjustTime() {
 8008f04:	b590      	push	{r4, r7, lr}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint32_t newRatio=rtc_calcClockRatio();
 8008f0a:	f000 f825 	bl	8008f58 <rtc_calcClockRatio>
 8008f0e:	0003      	movs	r3, r0
 8008f10:	607b      	str	r3, [r7, #4]
	if (__rtc_init > 0) {
 8008f12:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <rtc_adjustTime+0x48>)
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d009      	beq.n	8008f2e <rtc_adjustTime+0x2a>
		__rtc_offset = rtc_getTimestampMs();
 8008f1a:	f7ff fe6d 	bl	8008bf8 <rtc_getTimestampMs>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	000c      	movs	r4, r1
 8008f22:	4a0b      	ldr	r2, [pc, #44]	; (8008f50 <rtc_adjustTime+0x4c>)
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	6054      	str	r4, [r2, #4]
		rtc_resetTime();
 8008f28:	f7ff ff54 	bl	8008dd4 <rtc_resetTime>
 8008f2c:	e004      	b.n	8008f38 <rtc_adjustTime+0x34>
	} else {
		__rtc_offset=0;
 8008f2e:	4a08      	ldr	r2, [pc, #32]	; (8008f50 <rtc_adjustTime+0x4c>)
 8008f30:	2300      	movs	r3, #0
 8008f32:	2400      	movs	r4, #0
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	6054      	str	r4, [r2, #4]
	}
	__rtc_init=1;
 8008f38:	4b04      	ldr	r3, [pc, #16]	; (8008f4c <rtc_adjustTime+0x48>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
	__rtc_currentRatio=newRatio;
 8008f3e:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <rtc_adjustTime+0x50>)
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	601a      	str	r2, [r3, #0]
#endif
}
 8008f44:	46c0      	nop			; (mov r8, r8)
 8008f46:	46bd      	mov	sp, r7
 8008f48:	b003      	add	sp, #12
 8008f4a:	bd90      	pop	{r4, r7, pc}
 8008f4c:	2000014e 	.word	0x2000014e
 8008f50:	200004e8 	.word	0x200004e8
 8008f54:	200004e0 	.word	0x200004e0

08008f58 <rtc_calcClockRatio>:


/**
 * Return the corrected clockRatio => realClock = (calcClockRatio * seenClock)/1000
 */
uint32_t rtc_calcClockRatio() {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
	}

	return (uint32_t)ratio;

#else
	return ITSDK_CLK_CORRECTION;
 8008f5c:	23fa      	movs	r3, #250	; 0xfa
 8008f5e:	009b      	lsls	r3, r3, #2
#endif
}
 8008f60:	0018      	movs	r0, r3
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <HAL_IncTick>:

/**
 * Action to be executed on Systick
 * The name vary depending on the Firwmare version ... ST, you make me crazy !
 */
void HAL_IncTick(void) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
	// add 1ms to the global counter
	if (__enable_systick) itsdk_time_add_us((__TICK_DURATION_US*__systick_ratio)/1000);
 8008f6c:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <HAL_IncTick+0x48>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d011      	beq.n	8008f98 <HAL_IncTick+0x30>
 8008f74:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <HAL_IncTick+0x4c>)
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	0013      	movs	r3, r2
 8008f7a:	015b      	lsls	r3, r3, #5
 8008f7c:	1a9b      	subs	r3, r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	189b      	adds	r3, r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	001a      	movs	r2, r3
 8008f86:	23fa      	movs	r3, #250	; 0xfa
 8008f88:	0099      	lsls	r1, r3, #2
 8008f8a:	0010      	movs	r0, r2
 8008f8c:	f7f7 f8c4 	bl	8000118 <__udivsi3>
 8008f90:	0003      	movs	r3, r0
 8008f92:	0018      	movs	r0, r3
 8008f94:	f7fe fce4 	bl	8007960 <itsdk_time_add_us>
	uwTick++;
 8008f98:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <HAL_IncTick+0x50>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <HAL_IncTick+0x50>)
 8008fa0:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason = LOWPWR_WAKEUP_SYSTICK;
 8008fa2:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <HAL_IncTick+0x54>)
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	701a      	strb	r2, [r3, #0]
}
 8008fa8:	46c0      	nop			; (mov r8, r8)
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	46c0      	nop			; (mov r8, r8)
 8008fb0:	20000018 	.word	0x20000018
 8008fb4:	2000001c 	.word	0x2000001c
 8008fb8:	200003e4 	.word	0x200003e4
 8008fbc:	20000009 	.word	0x20000009

08008fc0 <systick_adjustTime>:


/**
 * Update the correction tickRatio => realTicks = (calcTickRatio * seenTicks)/1000
 */
void systick_adjustTime() {
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b089      	sub	sp, #36	; 0x24
 8008fc4:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint64_t start_clk = itsdk_time_get_us()/1000;
 8008fc6:	f7fe fd65 	bl	8007a94 <itsdk_time_get_us>
 8008fca:	22fa      	movs	r2, #250	; 0xfa
 8008fcc:	0092      	lsls	r2, r2, #2
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f7f7 f952 	bl	8000278 <__aeabi_uldivmod>
 8008fd4:	0003      	movs	r3, r0
 8008fd6:	000c      	movs	r4, r1
 8008fd8:	613b      	str	r3, [r7, #16]
 8008fda:	617c      	str	r4, [r7, #20]
	#if ITSDK_CLK_BEST_SOURCE == __CLK_BEST_SRC_RTC
		#if ITSDK_WITH_RTC == __RTC_ENABLED
			uint64_t start_rtc = rtc_getTimestampMsRaw(false);
 8008fdc:	2000      	movs	r0, #0
 8008fde:	f7ff fe17 	bl	8008c10 <rtc_getTimestampMsRaw>
 8008fe2:	0003      	movs	r3, r0
 8008fe4:	000c      	movs	r4, r1
 8008fe6:	60bb      	str	r3, [r7, #8]
 8008fe8:	60fc      	str	r4, [r7, #12]
			while ( (rtc_getTimestampMsRaw(false)-start_rtc) < 200 );	// wait for 200ms
 8008fea:	46c0      	nop			; (mov r8, r8)
 8008fec:	2000      	movs	r0, #0
 8008fee:	f7ff fe0f 	bl	8008c10 <rtc_getTimestampMsRaw>
 8008ff2:	000a      	movs	r2, r1
 8008ff4:	0001      	movs	r1, r0
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	68fc      	ldr	r4, [r7, #12]
 8008ffa:	1ac9      	subs	r1, r1, r3
 8008ffc:	41a2      	sbcs	r2, r4
 8008ffe:	000b      	movs	r3, r1
 8009000:	0014      	movs	r4, r2
 8009002:	2c00      	cmp	r4, #0
 8009004:	d103      	bne.n	800900e <systick_adjustTime+0x4e>
 8009006:	d1f1      	bne.n	8008fec <systick_adjustTime+0x2c>
 8009008:	2bc7      	cmp	r3, #199	; 0xc7
 800900a:	d800      	bhi.n	800900e <systick_adjustTime+0x4e>
 800900c:	e7ee      	b.n	8008fec <systick_adjustTime+0x2c>
				0
		);
	#else
		#error 'INVALID BEST CLK SRC'
	#endif
	uint64_t stop_clk = itsdk_time_get_us()/1000;
 800900e:	f7fe fd41 	bl	8007a94 <itsdk_time_get_us>
 8009012:	22fa      	movs	r2, #250	; 0xfa
 8009014:	0092      	lsls	r2, r2, #2
 8009016:	2300      	movs	r3, #0
 8009018:	f7f7 f92e 	bl	8000278 <__aeabi_uldivmod>
 800901c:	0003      	movs	r3, r0
 800901e:	000c      	movs	r4, r1
 8009020:	603b      	str	r3, [r7, #0]
 8009022:	607c      	str	r4, [r7, #4]
	uint64_t ratio = (1000*200)/(stop_clk-start_clk);
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	697c      	ldr	r4, [r7, #20]
 800902c:	1ac9      	subs	r1, r1, r3
 800902e:	41a2      	sbcs	r2, r4
 8009030:	000b      	movs	r3, r1
 8009032:	0014      	movs	r4, r2
 8009034:	001a      	movs	r2, r3
 8009036:	0023      	movs	r3, r4
 8009038:	4818      	ldr	r0, [pc, #96]	; (800909c <systick_adjustTime+0xdc>)
 800903a:	2100      	movs	r1, #0
 800903c:	f7f7 f91c 	bl	8000278 <__aeabi_uldivmod>
 8009040:	0003      	movs	r3, r0
 8009042:	000c      	movs	r4, r1
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	61fc      	str	r4, [r7, #28]
	//log_info("ticks : %d / 200ms ==> %d\r\n",(int)(stop_clk-start_clk),(int)ratio);

	// Protection against value too bad, sounds like a problem
	if ( ratio > 1400 || ratio < 600 ) {
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d111      	bne.n	8009072 <systick_adjustTime+0xb2>
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d104      	bne.n	800905e <systick_adjustTime+0x9e>
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	23af      	movs	r3, #175	; 0xaf
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	429a      	cmp	r2, r3
 800905c:	d809      	bhi.n	8009072 <systick_adjustTime+0xb2>
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d113      	bne.n	800908c <systick_adjustTime+0xcc>
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d103      	bne.n	8009072 <systick_adjustTime+0xb2>
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	4a0c      	ldr	r2, [pc, #48]	; (80090a0 <systick_adjustTime+0xe0>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d80c      	bhi.n	800908c <systick_adjustTime+0xcc>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_TICKS_INVALID_CLKRATIO,(uint16_t)ratio);
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	69fc      	ldr	r4, [r7, #28]
 8009076:	b29b      	uxth	r3, r3
 8009078:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <systick_adjustTime+0xe4>)
 800907a:	0019      	movs	r1, r3
 800907c:	0010      	movs	r0, r2
 800907e:	f7fd fff9 	bl	8007074 <itsdk_error_report>
		ratio = 1000;
 8009082:	23fa      	movs	r3, #250	; 0xfa
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	2400      	movs	r4, #0
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	61fc      	str	r4, [r7, #28]
	}
	__systick_ratio=(uint32_t)ratio;
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <systick_adjustTime+0xe8>)
 8009090:	601a      	str	r2, [r3, #0]
#endif
}
 8009092:	46c0      	nop			; (mov r8, r8)
 8009094:	46bd      	mov	sp, r7
 8009096:	b009      	add	sp, #36	; 0x24
 8009098:	bd90      	pop	{r4, r7, pc}
 800909a:	46c0      	nop			; (mov r8, r8)
 800909c:	00030d40 	.word	0x00030d40
 80090a0:	00000257 	.word	0x00000257
 80090a4:	90000061 	.word	0x90000061
 80090a8:	2000001c 	.word	0x2000001c

080090ac <wdg_setupWithMaxMs>:

/**
 * Setup the WatchDog for fireing a reset after the given Ms time
 * Values from 7ms to 28s according to the possible values
 */
void wdg_setupWithMaxMs(uint32_t ms) {
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]

	if ( ms > 28000 || ms < 10 ) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a23      	ldr	r2, [pc, #140]	; (8009144 <wdg_setupWithMaxMs+0x98>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d802      	bhi.n	80090c2 <wdg_setupWithMaxMs+0x16>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b09      	cmp	r3, #9
 80090c0:	d806      	bhi.n	80090d0 <wdg_setupWithMaxMs+0x24>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_WDG_OUTOFBOUNDS,(uint16_t)ms);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4a20      	ldr	r2, [pc, #128]	; (8009148 <wdg_setupWithMaxMs+0x9c>)
 80090c8:	0019      	movs	r1, r3
 80090ca:	0010      	movs	r0, r2
 80090cc:	f7fd ffd2 	bl	8007074 <itsdk_error_report>
	}
  #if ITSDK_WDG_MS >0
	int32_t uwLsiFreq;
	uwLsiFreq = (ITSDK_WDG_CLKFREQ * rtc_getClockAdjustement())/1000;
 80090d0:	f7ff ff04 	bl	8008edc <rtc_getClockAdjustement>
 80090d4:	0002      	movs	r2, r0
 80090d6:	4b1d      	ldr	r3, [pc, #116]	; (800914c <wdg_setupWithMaxMs+0xa0>)
 80090d8:	435a      	muls	r2, r3
 80090da:	23fa      	movs	r3, #250	; 0xfa
 80090dc:	0099      	lsls	r1, r3, #2
 80090de:	0010      	movs	r0, r2
 80090e0:	f7f7 f81a 	bl	8000118 <__udivsi3>
 80090e4:	0003      	movs	r3, r0
 80090e6:	60fb      	str	r3, [r7, #12]

	hiwdg.Instance = IWDG;
 80090e8:	4b19      	ldr	r3, [pc, #100]	; (8009150 <wdg_setupWithMaxMs+0xa4>)
 80090ea:	4a1a      	ldr	r2, [pc, #104]	; (8009154 <wdg_setupWithMaxMs+0xa8>)
 80090ec:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80090ee:	4b18      	ldr	r3, [pc, #96]	; (8009150 <wdg_setupWithMaxMs+0xa4>)
 80090f0:	2206      	movs	r2, #6
 80090f2:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 80090f4:	4b16      	ldr	r3, [pc, #88]	; (8009150 <wdg_setupWithMaxMs+0xa4>)
 80090f6:	4a18      	ldr	r2, [pc, #96]	; (8009158 <wdg_setupWithMaxMs+0xac>)
 80090f8:	60da      	str	r2, [r3, #12]
	uint32_t rel = (ms * ( (uwLsiFreq * 10) / 256 )) / 10000;
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	0013      	movs	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	189b      	adds	r3, r3, r2
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	d500      	bpl.n	8009108 <wdg_setupWithMaxMs+0x5c>
 8009106:	33ff      	adds	r3, #255	; 0xff
 8009108:	121b      	asrs	r3, r3, #8
 800910a:	001a      	movs	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4353      	muls	r3, r2
 8009110:	4912      	ldr	r1, [pc, #72]	; (800915c <wdg_setupWithMaxMs+0xb0>)
 8009112:	0018      	movs	r0, r3
 8009114:	f7f7 f800 	bl	8000118 <__udivsi3>
 8009118:	0003      	movs	r3, r0
 800911a:	60bb      	str	r3, [r7, #8]
	hiwdg.Init.Reload = rel;
 800911c:	4b0c      	ldr	r3, [pc, #48]	; (8009150 <wdg_setupWithMaxMs+0xa4>)
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	609a      	str	r2, [r3, #8]

	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8009122:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <wdg_setupWithMaxMs+0xa4>)
 8009124:	0018      	movs	r0, r3
 8009126:	f7f8 ffef 	bl	8002108 <HAL_IWDG_Init>
 800912a:	1e03      	subs	r3, r0, #0
 800912c:	d006      	beq.n	800913c <wdg_setupWithMaxMs+0x90>
	{
		/* Initialization Error */
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_WDG_INIT_FAILED,(uint16_t)ms);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	b29b      	uxth	r3, r3
 8009132:	4a0b      	ldr	r2, [pc, #44]	; (8009160 <wdg_setupWithMaxMs+0xb4>)
 8009134:	0019      	movs	r1, r3
 8009136:	0010      	movs	r0, r2
 8009138:	f7fd ff9c 	bl	8007074 <itsdk_error_report>
  #else
	#ifdef IWDG
      #error "Watchdog disabled you need to disable it also in CubeMx"
	#endif
  #endif
}
 800913c:	46c0      	nop			; (mov r8, r8)
 800913e:	46bd      	mov	sp, r7
 8009140:	b004      	add	sp, #16
 8009142:	bd80      	pop	{r7, pc}
 8009144:	00006d60 	.word	0x00006d60
 8009148:	d0000040 	.word	0xd0000040
 800914c:	00009088 	.word	0x00009088
 8009150:	200001c4 	.word	0x200001c4
 8009154:	40003000 	.word	0x40003000
 8009158:	00000fff 	.word	0x00000fff
 800915c:	00002710 	.word	0x00002710
 8009160:	c0000041 	.word	0xc0000041

08009164 <wdg_refresh>:


void wdg_refresh() {
 8009164:	b580      	push	{r7, lr}
 8009166:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8009168:	4b03      	ldr	r3, [pc, #12]	; (8009178 <wdg_refresh+0x14>)
 800916a:	0018      	movs	r0, r3
 800916c:	f7f9 f816 	bl	800219c <HAL_IWDG_Refresh>
}
 8009170:	46c0      	nop			; (mov r8, r8)
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	200001c4 	.word	0x200001c4

0800917c <bzero>:
 800917c:	b510      	push	{r4, lr}
 800917e:	000a      	movs	r2, r1
 8009180:	2100      	movs	r1, #0
 8009182:	f000 f847 	bl	8009214 <memset>
 8009186:	bd10      	pop	{r4, pc}

08009188 <__errno>:
 8009188:	4b01      	ldr	r3, [pc, #4]	; (8009190 <__errno+0x8>)
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	4770      	bx	lr
 800918e:	46c0      	nop			; (mov r8, r8)
 8009190:	20000020 	.word	0x20000020

08009194 <__libc_init_array>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	2600      	movs	r6, #0
 8009198:	4d0c      	ldr	r5, [pc, #48]	; (80091cc <__libc_init_array+0x38>)
 800919a:	4c0d      	ldr	r4, [pc, #52]	; (80091d0 <__libc_init_array+0x3c>)
 800919c:	1b64      	subs	r4, r4, r5
 800919e:	10a4      	asrs	r4, r4, #2
 80091a0:	42a6      	cmp	r6, r4
 80091a2:	d109      	bne.n	80091b8 <__libc_init_array+0x24>
 80091a4:	2600      	movs	r6, #0
 80091a6:	f000 fc41 	bl	8009a2c <_init>
 80091aa:	4d0a      	ldr	r5, [pc, #40]	; (80091d4 <__libc_init_array+0x40>)
 80091ac:	4c0a      	ldr	r4, [pc, #40]	; (80091d8 <__libc_init_array+0x44>)
 80091ae:	1b64      	subs	r4, r4, r5
 80091b0:	10a4      	asrs	r4, r4, #2
 80091b2:	42a6      	cmp	r6, r4
 80091b4:	d105      	bne.n	80091c2 <__libc_init_array+0x2e>
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	00b3      	lsls	r3, r6, #2
 80091ba:	58eb      	ldr	r3, [r5, r3]
 80091bc:	4798      	blx	r3
 80091be:	3601      	adds	r6, #1
 80091c0:	e7ee      	b.n	80091a0 <__libc_init_array+0xc>
 80091c2:	00b3      	lsls	r3, r6, #2
 80091c4:	58eb      	ldr	r3, [r5, r3]
 80091c6:	4798      	blx	r3
 80091c8:	3601      	adds	r6, #1
 80091ca:	e7f2      	b.n	80091b2 <__libc_init_array+0x1e>
 80091cc:	08009f20 	.word	0x08009f20
 80091d0:	08009f20 	.word	0x08009f20
 80091d4:	08009f20 	.word	0x08009f20
 80091d8:	08009f24 	.word	0x08009f24

080091dc <memcpy>:
 80091dc:	2300      	movs	r3, #0
 80091de:	b510      	push	{r4, lr}
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d100      	bne.n	80091e6 <memcpy+0xa>
 80091e4:	bd10      	pop	{r4, pc}
 80091e6:	5ccc      	ldrb	r4, [r1, r3]
 80091e8:	54c4      	strb	r4, [r0, r3]
 80091ea:	3301      	adds	r3, #1
 80091ec:	e7f8      	b.n	80091e0 <memcpy+0x4>

080091ee <memmove>:
 80091ee:	b510      	push	{r4, lr}
 80091f0:	4288      	cmp	r0, r1
 80091f2:	d902      	bls.n	80091fa <memmove+0xc>
 80091f4:	188b      	adds	r3, r1, r2
 80091f6:	4298      	cmp	r0, r3
 80091f8:	d303      	bcc.n	8009202 <memmove+0x14>
 80091fa:	2300      	movs	r3, #0
 80091fc:	e007      	b.n	800920e <memmove+0x20>
 80091fe:	5c8b      	ldrb	r3, [r1, r2]
 8009200:	5483      	strb	r3, [r0, r2]
 8009202:	3a01      	subs	r2, #1
 8009204:	d2fb      	bcs.n	80091fe <memmove+0x10>
 8009206:	bd10      	pop	{r4, pc}
 8009208:	5ccc      	ldrb	r4, [r1, r3]
 800920a:	54c4      	strb	r4, [r0, r3]
 800920c:	3301      	adds	r3, #1
 800920e:	429a      	cmp	r2, r3
 8009210:	d1fa      	bne.n	8009208 <memmove+0x1a>
 8009212:	e7f8      	b.n	8009206 <memmove+0x18>

08009214 <memset>:
 8009214:	0003      	movs	r3, r0
 8009216:	1812      	adds	r2, r2, r0
 8009218:	4293      	cmp	r3, r2
 800921a:	d100      	bne.n	800921e <memset+0xa>
 800921c:	4770      	bx	lr
 800921e:	7019      	strb	r1, [r3, #0]
 8009220:	3301      	adds	r3, #1
 8009222:	e7f9      	b.n	8009218 <memset+0x4>

08009224 <_vsniprintf_r>:
 8009224:	b530      	push	{r4, r5, lr}
 8009226:	0014      	movs	r4, r2
 8009228:	b09b      	sub	sp, #108	; 0x6c
 800922a:	0005      	movs	r5, r0
 800922c:	001a      	movs	r2, r3
 800922e:	2c00      	cmp	r4, #0
 8009230:	da05      	bge.n	800923e <_vsniprintf_r+0x1a>
 8009232:	238b      	movs	r3, #139	; 0x8b
 8009234:	6003      	str	r3, [r0, #0]
 8009236:	2001      	movs	r0, #1
 8009238:	4240      	negs	r0, r0
 800923a:	b01b      	add	sp, #108	; 0x6c
 800923c:	bd30      	pop	{r4, r5, pc}
 800923e:	2382      	movs	r3, #130	; 0x82
 8009240:	4668      	mov	r0, sp
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	8183      	strh	r3, [r0, #12]
 8009246:	2300      	movs	r3, #0
 8009248:	9100      	str	r1, [sp, #0]
 800924a:	9104      	str	r1, [sp, #16]
 800924c:	429c      	cmp	r4, r3
 800924e:	d000      	beq.n	8009252 <_vsniprintf_r+0x2e>
 8009250:	1e63      	subs	r3, r4, #1
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	9305      	str	r3, [sp, #20]
 8009256:	2301      	movs	r3, #1
 8009258:	4669      	mov	r1, sp
 800925a:	425b      	negs	r3, r3
 800925c:	81cb      	strh	r3, [r1, #14]
 800925e:	0028      	movs	r0, r5
 8009260:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009262:	f000 f879 	bl	8009358 <_svfiprintf_r>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	da01      	bge.n	800926e <_vsniprintf_r+0x4a>
 800926a:	238b      	movs	r3, #139	; 0x8b
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	2c00      	cmp	r4, #0
 8009270:	d0e3      	beq.n	800923a <_vsniprintf_r+0x16>
 8009272:	2300      	movs	r3, #0
 8009274:	9a00      	ldr	r2, [sp, #0]
 8009276:	7013      	strb	r3, [r2, #0]
 8009278:	e7df      	b.n	800923a <_vsniprintf_r+0x16>
	...

0800927c <vsniprintf>:
 800927c:	b507      	push	{r0, r1, r2, lr}
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	0013      	movs	r3, r2
 8009282:	000a      	movs	r2, r1
 8009284:	0001      	movs	r1, r0
 8009286:	4802      	ldr	r0, [pc, #8]	; (8009290 <vsniprintf+0x14>)
 8009288:	6800      	ldr	r0, [r0, #0]
 800928a:	f7ff ffcb 	bl	8009224 <_vsniprintf_r>
 800928e:	bd0e      	pop	{r1, r2, r3, pc}
 8009290:	20000020 	.word	0x20000020

08009294 <__ssputs_r>:
 8009294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009296:	688e      	ldr	r6, [r1, #8]
 8009298:	b085      	sub	sp, #20
 800929a:	0007      	movs	r7, r0
 800929c:	000c      	movs	r4, r1
 800929e:	9203      	str	r2, [sp, #12]
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	429e      	cmp	r6, r3
 80092a4:	d83c      	bhi.n	8009320 <__ssputs_r+0x8c>
 80092a6:	2390      	movs	r3, #144	; 0x90
 80092a8:	898a      	ldrh	r2, [r1, #12]
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	421a      	tst	r2, r3
 80092ae:	d034      	beq.n	800931a <__ssputs_r+0x86>
 80092b0:	2503      	movs	r5, #3
 80092b2:	6909      	ldr	r1, [r1, #16]
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	1a5b      	subs	r3, r3, r1
 80092b8:	9302      	str	r3, [sp, #8]
 80092ba:	6963      	ldr	r3, [r4, #20]
 80092bc:	9802      	ldr	r0, [sp, #8]
 80092be:	435d      	muls	r5, r3
 80092c0:	0feb      	lsrs	r3, r5, #31
 80092c2:	195d      	adds	r5, r3, r5
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	106d      	asrs	r5, r5, #1
 80092c8:	3301      	adds	r3, #1
 80092ca:	181b      	adds	r3, r3, r0
 80092cc:	42ab      	cmp	r3, r5
 80092ce:	d900      	bls.n	80092d2 <__ssputs_r+0x3e>
 80092d0:	001d      	movs	r5, r3
 80092d2:	0553      	lsls	r3, r2, #21
 80092d4:	d532      	bpl.n	800933c <__ssputs_r+0xa8>
 80092d6:	0029      	movs	r1, r5
 80092d8:	0038      	movs	r0, r7
 80092da:	f000 fb07 	bl	80098ec <_malloc_r>
 80092de:	1e06      	subs	r6, r0, #0
 80092e0:	d109      	bne.n	80092f6 <__ssputs_r+0x62>
 80092e2:	230c      	movs	r3, #12
 80092e4:	603b      	str	r3, [r7, #0]
 80092e6:	2340      	movs	r3, #64	; 0x40
 80092e8:	2001      	movs	r0, #1
 80092ea:	89a2      	ldrh	r2, [r4, #12]
 80092ec:	4240      	negs	r0, r0
 80092ee:	4313      	orrs	r3, r2
 80092f0:	81a3      	strh	r3, [r4, #12]
 80092f2:	b005      	add	sp, #20
 80092f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f6:	9a02      	ldr	r2, [sp, #8]
 80092f8:	6921      	ldr	r1, [r4, #16]
 80092fa:	f7ff ff6f 	bl	80091dc <memcpy>
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	4a14      	ldr	r2, [pc, #80]	; (8009354 <__ssputs_r+0xc0>)
 8009302:	401a      	ands	r2, r3
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	4313      	orrs	r3, r2
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	9b02      	ldr	r3, [sp, #8]
 800930c:	6126      	str	r6, [r4, #16]
 800930e:	18f6      	adds	r6, r6, r3
 8009310:	6026      	str	r6, [r4, #0]
 8009312:	6165      	str	r5, [r4, #20]
 8009314:	9e01      	ldr	r6, [sp, #4]
 8009316:	1aed      	subs	r5, r5, r3
 8009318:	60a5      	str	r5, [r4, #8]
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	429e      	cmp	r6, r3
 800931e:	d900      	bls.n	8009322 <__ssputs_r+0x8e>
 8009320:	9e01      	ldr	r6, [sp, #4]
 8009322:	0032      	movs	r2, r6
 8009324:	9903      	ldr	r1, [sp, #12]
 8009326:	6820      	ldr	r0, [r4, #0]
 8009328:	f7ff ff61 	bl	80091ee <memmove>
 800932c:	68a3      	ldr	r3, [r4, #8]
 800932e:	2000      	movs	r0, #0
 8009330:	1b9b      	subs	r3, r3, r6
 8009332:	60a3      	str	r3, [r4, #8]
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	199e      	adds	r6, r3, r6
 8009338:	6026      	str	r6, [r4, #0]
 800933a:	e7da      	b.n	80092f2 <__ssputs_r+0x5e>
 800933c:	002a      	movs	r2, r5
 800933e:	0038      	movs	r0, r7
 8009340:	f000 fb32 	bl	80099a8 <_realloc_r>
 8009344:	1e06      	subs	r6, r0, #0
 8009346:	d1e0      	bne.n	800930a <__ssputs_r+0x76>
 8009348:	6921      	ldr	r1, [r4, #16]
 800934a:	0038      	movs	r0, r7
 800934c:	f000 fa84 	bl	8009858 <_free_r>
 8009350:	e7c7      	b.n	80092e2 <__ssputs_r+0x4e>
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	fffffb7f 	.word	0xfffffb7f

08009358 <_svfiprintf_r>:
 8009358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800935a:	b0a1      	sub	sp, #132	; 0x84
 800935c:	9003      	str	r0, [sp, #12]
 800935e:	001d      	movs	r5, r3
 8009360:	898b      	ldrh	r3, [r1, #12]
 8009362:	000f      	movs	r7, r1
 8009364:	0016      	movs	r6, r2
 8009366:	061b      	lsls	r3, r3, #24
 8009368:	d511      	bpl.n	800938e <_svfiprintf_r+0x36>
 800936a:	690b      	ldr	r3, [r1, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10e      	bne.n	800938e <_svfiprintf_r+0x36>
 8009370:	2140      	movs	r1, #64	; 0x40
 8009372:	f000 fabb 	bl	80098ec <_malloc_r>
 8009376:	6038      	str	r0, [r7, #0]
 8009378:	6138      	str	r0, [r7, #16]
 800937a:	2800      	cmp	r0, #0
 800937c:	d105      	bne.n	800938a <_svfiprintf_r+0x32>
 800937e:	230c      	movs	r3, #12
 8009380:	9a03      	ldr	r2, [sp, #12]
 8009382:	3801      	subs	r0, #1
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	b021      	add	sp, #132	; 0x84
 8009388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938a:	2340      	movs	r3, #64	; 0x40
 800938c:	617b      	str	r3, [r7, #20]
 800938e:	2300      	movs	r3, #0
 8009390:	ac08      	add	r4, sp, #32
 8009392:	6163      	str	r3, [r4, #20]
 8009394:	3320      	adds	r3, #32
 8009396:	7663      	strb	r3, [r4, #25]
 8009398:	3310      	adds	r3, #16
 800939a:	76a3      	strb	r3, [r4, #26]
 800939c:	9507      	str	r5, [sp, #28]
 800939e:	0035      	movs	r5, r6
 80093a0:	782b      	ldrb	r3, [r5, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <_svfiprintf_r+0x52>
 80093a6:	2b25      	cmp	r3, #37	; 0x25
 80093a8:	d146      	bne.n	8009438 <_svfiprintf_r+0xe0>
 80093aa:	1bab      	subs	r3, r5, r6
 80093ac:	9305      	str	r3, [sp, #20]
 80093ae:	d00c      	beq.n	80093ca <_svfiprintf_r+0x72>
 80093b0:	0032      	movs	r2, r6
 80093b2:	0039      	movs	r1, r7
 80093b4:	9803      	ldr	r0, [sp, #12]
 80093b6:	f7ff ff6d 	bl	8009294 <__ssputs_r>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	d100      	bne.n	80093c0 <_svfiprintf_r+0x68>
 80093be:	e0ae      	b.n	800951e <_svfiprintf_r+0x1c6>
 80093c0:	6962      	ldr	r2, [r4, #20]
 80093c2:	9b05      	ldr	r3, [sp, #20]
 80093c4:	4694      	mov	ip, r2
 80093c6:	4463      	add	r3, ip
 80093c8:	6163      	str	r3, [r4, #20]
 80093ca:	782b      	ldrb	r3, [r5, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d100      	bne.n	80093d2 <_svfiprintf_r+0x7a>
 80093d0:	e0a5      	b.n	800951e <_svfiprintf_r+0x1c6>
 80093d2:	2201      	movs	r2, #1
 80093d4:	2300      	movs	r3, #0
 80093d6:	4252      	negs	r2, r2
 80093d8:	6062      	str	r2, [r4, #4]
 80093da:	a904      	add	r1, sp, #16
 80093dc:	3254      	adds	r2, #84	; 0x54
 80093de:	1852      	adds	r2, r2, r1
 80093e0:	1c6e      	adds	r6, r5, #1
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	60e3      	str	r3, [r4, #12]
 80093e6:	60a3      	str	r3, [r4, #8]
 80093e8:	7013      	strb	r3, [r2, #0]
 80093ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80093ec:	7831      	ldrb	r1, [r6, #0]
 80093ee:	2205      	movs	r2, #5
 80093f0:	4853      	ldr	r0, [pc, #332]	; (8009540 <_svfiprintf_r+0x1e8>)
 80093f2:	f000 fa25 	bl	8009840 <memchr>
 80093f6:	1c75      	adds	r5, r6, #1
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d11f      	bne.n	800943c <_svfiprintf_r+0xe4>
 80093fc:	6822      	ldr	r2, [r4, #0]
 80093fe:	06d3      	lsls	r3, r2, #27
 8009400:	d504      	bpl.n	800940c <_svfiprintf_r+0xb4>
 8009402:	2353      	movs	r3, #83	; 0x53
 8009404:	a904      	add	r1, sp, #16
 8009406:	185b      	adds	r3, r3, r1
 8009408:	2120      	movs	r1, #32
 800940a:	7019      	strb	r1, [r3, #0]
 800940c:	0713      	lsls	r3, r2, #28
 800940e:	d504      	bpl.n	800941a <_svfiprintf_r+0xc2>
 8009410:	2353      	movs	r3, #83	; 0x53
 8009412:	a904      	add	r1, sp, #16
 8009414:	185b      	adds	r3, r3, r1
 8009416:	212b      	movs	r1, #43	; 0x2b
 8009418:	7019      	strb	r1, [r3, #0]
 800941a:	7833      	ldrb	r3, [r6, #0]
 800941c:	2b2a      	cmp	r3, #42	; 0x2a
 800941e:	d016      	beq.n	800944e <_svfiprintf_r+0xf6>
 8009420:	0035      	movs	r5, r6
 8009422:	2100      	movs	r1, #0
 8009424:	200a      	movs	r0, #10
 8009426:	68e3      	ldr	r3, [r4, #12]
 8009428:	782a      	ldrb	r2, [r5, #0]
 800942a:	1c6e      	adds	r6, r5, #1
 800942c:	3a30      	subs	r2, #48	; 0x30
 800942e:	2a09      	cmp	r2, #9
 8009430:	d94e      	bls.n	80094d0 <_svfiprintf_r+0x178>
 8009432:	2900      	cmp	r1, #0
 8009434:	d018      	beq.n	8009468 <_svfiprintf_r+0x110>
 8009436:	e010      	b.n	800945a <_svfiprintf_r+0x102>
 8009438:	3501      	adds	r5, #1
 800943a:	e7b1      	b.n	80093a0 <_svfiprintf_r+0x48>
 800943c:	4b40      	ldr	r3, [pc, #256]	; (8009540 <_svfiprintf_r+0x1e8>)
 800943e:	6822      	ldr	r2, [r4, #0]
 8009440:	1ac0      	subs	r0, r0, r3
 8009442:	2301      	movs	r3, #1
 8009444:	4083      	lsls	r3, r0
 8009446:	4313      	orrs	r3, r2
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	002e      	movs	r6, r5
 800944c:	e7ce      	b.n	80093ec <_svfiprintf_r+0x94>
 800944e:	9b07      	ldr	r3, [sp, #28]
 8009450:	1d19      	adds	r1, r3, #4
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	9107      	str	r1, [sp, #28]
 8009456:	2b00      	cmp	r3, #0
 8009458:	db01      	blt.n	800945e <_svfiprintf_r+0x106>
 800945a:	930b      	str	r3, [sp, #44]	; 0x2c
 800945c:	e004      	b.n	8009468 <_svfiprintf_r+0x110>
 800945e:	425b      	negs	r3, r3
 8009460:	60e3      	str	r3, [r4, #12]
 8009462:	2302      	movs	r3, #2
 8009464:	4313      	orrs	r3, r2
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	782b      	ldrb	r3, [r5, #0]
 800946a:	2b2e      	cmp	r3, #46	; 0x2e
 800946c:	d10a      	bne.n	8009484 <_svfiprintf_r+0x12c>
 800946e:	786b      	ldrb	r3, [r5, #1]
 8009470:	2b2a      	cmp	r3, #42	; 0x2a
 8009472:	d135      	bne.n	80094e0 <_svfiprintf_r+0x188>
 8009474:	9b07      	ldr	r3, [sp, #28]
 8009476:	3502      	adds	r5, #2
 8009478:	1d1a      	adds	r2, r3, #4
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	9207      	str	r2, [sp, #28]
 800947e:	2b00      	cmp	r3, #0
 8009480:	db2b      	blt.n	80094da <_svfiprintf_r+0x182>
 8009482:	9309      	str	r3, [sp, #36]	; 0x24
 8009484:	4e2f      	ldr	r6, [pc, #188]	; (8009544 <_svfiprintf_r+0x1ec>)
 8009486:	7829      	ldrb	r1, [r5, #0]
 8009488:	2203      	movs	r2, #3
 800948a:	0030      	movs	r0, r6
 800948c:	f000 f9d8 	bl	8009840 <memchr>
 8009490:	2800      	cmp	r0, #0
 8009492:	d006      	beq.n	80094a2 <_svfiprintf_r+0x14a>
 8009494:	2340      	movs	r3, #64	; 0x40
 8009496:	1b80      	subs	r0, r0, r6
 8009498:	4083      	lsls	r3, r0
 800949a:	6822      	ldr	r2, [r4, #0]
 800949c:	3501      	adds	r5, #1
 800949e:	4313      	orrs	r3, r2
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	7829      	ldrb	r1, [r5, #0]
 80094a4:	2206      	movs	r2, #6
 80094a6:	4828      	ldr	r0, [pc, #160]	; (8009548 <_svfiprintf_r+0x1f0>)
 80094a8:	1c6e      	adds	r6, r5, #1
 80094aa:	7621      	strb	r1, [r4, #24]
 80094ac:	f000 f9c8 	bl	8009840 <memchr>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d03c      	beq.n	800952e <_svfiprintf_r+0x1d6>
 80094b4:	4b25      	ldr	r3, [pc, #148]	; (800954c <_svfiprintf_r+0x1f4>)
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d125      	bne.n	8009506 <_svfiprintf_r+0x1ae>
 80094ba:	2207      	movs	r2, #7
 80094bc:	9b07      	ldr	r3, [sp, #28]
 80094be:	3307      	adds	r3, #7
 80094c0:	4393      	bics	r3, r2
 80094c2:	3308      	adds	r3, #8
 80094c4:	9307      	str	r3, [sp, #28]
 80094c6:	6963      	ldr	r3, [r4, #20]
 80094c8:	9a04      	ldr	r2, [sp, #16]
 80094ca:	189b      	adds	r3, r3, r2
 80094cc:	6163      	str	r3, [r4, #20]
 80094ce:	e766      	b.n	800939e <_svfiprintf_r+0x46>
 80094d0:	4343      	muls	r3, r0
 80094d2:	2101      	movs	r1, #1
 80094d4:	189b      	adds	r3, r3, r2
 80094d6:	0035      	movs	r5, r6
 80094d8:	e7a6      	b.n	8009428 <_svfiprintf_r+0xd0>
 80094da:	2301      	movs	r3, #1
 80094dc:	425b      	negs	r3, r3
 80094de:	e7d0      	b.n	8009482 <_svfiprintf_r+0x12a>
 80094e0:	2300      	movs	r3, #0
 80094e2:	200a      	movs	r0, #10
 80094e4:	001a      	movs	r2, r3
 80094e6:	3501      	adds	r5, #1
 80094e8:	6063      	str	r3, [r4, #4]
 80094ea:	7829      	ldrb	r1, [r5, #0]
 80094ec:	1c6e      	adds	r6, r5, #1
 80094ee:	3930      	subs	r1, #48	; 0x30
 80094f0:	2909      	cmp	r1, #9
 80094f2:	d903      	bls.n	80094fc <_svfiprintf_r+0x1a4>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0c5      	beq.n	8009484 <_svfiprintf_r+0x12c>
 80094f8:	9209      	str	r2, [sp, #36]	; 0x24
 80094fa:	e7c3      	b.n	8009484 <_svfiprintf_r+0x12c>
 80094fc:	4342      	muls	r2, r0
 80094fe:	2301      	movs	r3, #1
 8009500:	1852      	adds	r2, r2, r1
 8009502:	0035      	movs	r5, r6
 8009504:	e7f1      	b.n	80094ea <_svfiprintf_r+0x192>
 8009506:	ab07      	add	r3, sp, #28
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	003a      	movs	r2, r7
 800950c:	4b10      	ldr	r3, [pc, #64]	; (8009550 <_svfiprintf_r+0x1f8>)
 800950e:	0021      	movs	r1, r4
 8009510:	9803      	ldr	r0, [sp, #12]
 8009512:	e000      	b.n	8009516 <_svfiprintf_r+0x1be>
 8009514:	bf00      	nop
 8009516:	9004      	str	r0, [sp, #16]
 8009518:	9b04      	ldr	r3, [sp, #16]
 800951a:	3301      	adds	r3, #1
 800951c:	d1d3      	bne.n	80094c6 <_svfiprintf_r+0x16e>
 800951e:	89bb      	ldrh	r3, [r7, #12]
 8009520:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009522:	065b      	lsls	r3, r3, #25
 8009524:	d400      	bmi.n	8009528 <_svfiprintf_r+0x1d0>
 8009526:	e72e      	b.n	8009386 <_svfiprintf_r+0x2e>
 8009528:	2001      	movs	r0, #1
 800952a:	4240      	negs	r0, r0
 800952c:	e72b      	b.n	8009386 <_svfiprintf_r+0x2e>
 800952e:	ab07      	add	r3, sp, #28
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	003a      	movs	r2, r7
 8009534:	4b06      	ldr	r3, [pc, #24]	; (8009550 <_svfiprintf_r+0x1f8>)
 8009536:	0021      	movs	r1, r4
 8009538:	9803      	ldr	r0, [sp, #12]
 800953a:	f000 f879 	bl	8009630 <_printf_i>
 800953e:	e7ea      	b.n	8009516 <_svfiprintf_r+0x1be>
 8009540:	08009ee4 	.word	0x08009ee4
 8009544:	08009eea 	.word	0x08009eea
 8009548:	08009eee 	.word	0x08009eee
 800954c:	00000000 	.word	0x00000000
 8009550:	08009295 	.word	0x08009295

08009554 <_printf_common>:
 8009554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009556:	0015      	movs	r5, r2
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	688a      	ldr	r2, [r1, #8]
 800955c:	690b      	ldr	r3, [r1, #16]
 800955e:	9000      	str	r0, [sp, #0]
 8009560:	000c      	movs	r4, r1
 8009562:	4293      	cmp	r3, r2
 8009564:	da00      	bge.n	8009568 <_printf_common+0x14>
 8009566:	0013      	movs	r3, r2
 8009568:	0022      	movs	r2, r4
 800956a:	602b      	str	r3, [r5, #0]
 800956c:	3243      	adds	r2, #67	; 0x43
 800956e:	7812      	ldrb	r2, [r2, #0]
 8009570:	2a00      	cmp	r2, #0
 8009572:	d001      	beq.n	8009578 <_printf_common+0x24>
 8009574:	3301      	adds	r3, #1
 8009576:	602b      	str	r3, [r5, #0]
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	069b      	lsls	r3, r3, #26
 800957c:	d502      	bpl.n	8009584 <_printf_common+0x30>
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	3302      	adds	r3, #2
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	2706      	movs	r7, #6
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	401f      	ands	r7, r3
 800958a:	d027      	beq.n	80095dc <_printf_common+0x88>
 800958c:	0023      	movs	r3, r4
 800958e:	3343      	adds	r3, #67	; 0x43
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	1e5a      	subs	r2, r3, #1
 8009594:	4193      	sbcs	r3, r2
 8009596:	6822      	ldr	r2, [r4, #0]
 8009598:	0692      	lsls	r2, r2, #26
 800959a:	d430      	bmi.n	80095fe <_printf_common+0xaa>
 800959c:	0022      	movs	r2, r4
 800959e:	9901      	ldr	r1, [sp, #4]
 80095a0:	3243      	adds	r2, #67	; 0x43
 80095a2:	9800      	ldr	r0, [sp, #0]
 80095a4:	9e08      	ldr	r6, [sp, #32]
 80095a6:	47b0      	blx	r6
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d025      	beq.n	80095f8 <_printf_common+0xa4>
 80095ac:	2306      	movs	r3, #6
 80095ae:	6820      	ldr	r0, [r4, #0]
 80095b0:	682a      	ldr	r2, [r5, #0]
 80095b2:	68e1      	ldr	r1, [r4, #12]
 80095b4:	4003      	ands	r3, r0
 80095b6:	2500      	movs	r5, #0
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d103      	bne.n	80095c4 <_printf_common+0x70>
 80095bc:	1a8d      	subs	r5, r1, r2
 80095be:	43eb      	mvns	r3, r5
 80095c0:	17db      	asrs	r3, r3, #31
 80095c2:	401d      	ands	r5, r3
 80095c4:	68a3      	ldr	r3, [r4, #8]
 80095c6:	6922      	ldr	r2, [r4, #16]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	dd01      	ble.n	80095d0 <_printf_common+0x7c>
 80095cc:	1a9b      	subs	r3, r3, r2
 80095ce:	18ed      	adds	r5, r5, r3
 80095d0:	2700      	movs	r7, #0
 80095d2:	42bd      	cmp	r5, r7
 80095d4:	d120      	bne.n	8009618 <_printf_common+0xc4>
 80095d6:	2000      	movs	r0, #0
 80095d8:	e010      	b.n	80095fc <_printf_common+0xa8>
 80095da:	3701      	adds	r7, #1
 80095dc:	68e3      	ldr	r3, [r4, #12]
 80095de:	682a      	ldr	r2, [r5, #0]
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	42bb      	cmp	r3, r7
 80095e4:	ddd2      	ble.n	800958c <_printf_common+0x38>
 80095e6:	0022      	movs	r2, r4
 80095e8:	2301      	movs	r3, #1
 80095ea:	3219      	adds	r2, #25
 80095ec:	9901      	ldr	r1, [sp, #4]
 80095ee:	9800      	ldr	r0, [sp, #0]
 80095f0:	9e08      	ldr	r6, [sp, #32]
 80095f2:	47b0      	blx	r6
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d1f0      	bne.n	80095da <_printf_common+0x86>
 80095f8:	2001      	movs	r0, #1
 80095fa:	4240      	negs	r0, r0
 80095fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095fe:	2030      	movs	r0, #48	; 0x30
 8009600:	18e1      	adds	r1, r4, r3
 8009602:	3143      	adds	r1, #67	; 0x43
 8009604:	7008      	strb	r0, [r1, #0]
 8009606:	0021      	movs	r1, r4
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	3145      	adds	r1, #69	; 0x45
 800960c:	7809      	ldrb	r1, [r1, #0]
 800960e:	18a2      	adds	r2, r4, r2
 8009610:	3243      	adds	r2, #67	; 0x43
 8009612:	3302      	adds	r3, #2
 8009614:	7011      	strb	r1, [r2, #0]
 8009616:	e7c1      	b.n	800959c <_printf_common+0x48>
 8009618:	0022      	movs	r2, r4
 800961a:	2301      	movs	r3, #1
 800961c:	321a      	adds	r2, #26
 800961e:	9901      	ldr	r1, [sp, #4]
 8009620:	9800      	ldr	r0, [sp, #0]
 8009622:	9e08      	ldr	r6, [sp, #32]
 8009624:	47b0      	blx	r6
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	d0e6      	beq.n	80095f8 <_printf_common+0xa4>
 800962a:	3701      	adds	r7, #1
 800962c:	e7d1      	b.n	80095d2 <_printf_common+0x7e>
	...

08009630 <_printf_i>:
 8009630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009632:	b089      	sub	sp, #36	; 0x24
 8009634:	9204      	str	r2, [sp, #16]
 8009636:	000a      	movs	r2, r1
 8009638:	3243      	adds	r2, #67	; 0x43
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	9003      	str	r0, [sp, #12]
 800963e:	9202      	str	r2, [sp, #8]
 8009640:	7e0a      	ldrb	r2, [r1, #24]
 8009642:	000c      	movs	r4, r1
 8009644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009646:	2a6e      	cmp	r2, #110	; 0x6e
 8009648:	d100      	bne.n	800964c <_printf_i+0x1c>
 800964a:	e086      	b.n	800975a <_printf_i+0x12a>
 800964c:	d81f      	bhi.n	800968e <_printf_i+0x5e>
 800964e:	2a63      	cmp	r2, #99	; 0x63
 8009650:	d033      	beq.n	80096ba <_printf_i+0x8a>
 8009652:	d808      	bhi.n	8009666 <_printf_i+0x36>
 8009654:	2a00      	cmp	r2, #0
 8009656:	d100      	bne.n	800965a <_printf_i+0x2a>
 8009658:	e08c      	b.n	8009774 <_printf_i+0x144>
 800965a:	2a58      	cmp	r2, #88	; 0x58
 800965c:	d04d      	beq.n	80096fa <_printf_i+0xca>
 800965e:	0025      	movs	r5, r4
 8009660:	3542      	adds	r5, #66	; 0x42
 8009662:	702a      	strb	r2, [r5, #0]
 8009664:	e030      	b.n	80096c8 <_printf_i+0x98>
 8009666:	2a64      	cmp	r2, #100	; 0x64
 8009668:	d001      	beq.n	800966e <_printf_i+0x3e>
 800966a:	2a69      	cmp	r2, #105	; 0x69
 800966c:	d1f7      	bne.n	800965e <_printf_i+0x2e>
 800966e:	6819      	ldr	r1, [r3, #0]
 8009670:	6825      	ldr	r5, [r4, #0]
 8009672:	1d0a      	adds	r2, r1, #4
 8009674:	0628      	lsls	r0, r5, #24
 8009676:	d529      	bpl.n	80096cc <_printf_i+0x9c>
 8009678:	6808      	ldr	r0, [r1, #0]
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	2800      	cmp	r0, #0
 800967e:	da03      	bge.n	8009688 <_printf_i+0x58>
 8009680:	232d      	movs	r3, #45	; 0x2d
 8009682:	9a02      	ldr	r2, [sp, #8]
 8009684:	4240      	negs	r0, r0
 8009686:	7013      	strb	r3, [r2, #0]
 8009688:	4e6b      	ldr	r6, [pc, #428]	; (8009838 <_printf_i+0x208>)
 800968a:	270a      	movs	r7, #10
 800968c:	e04f      	b.n	800972e <_printf_i+0xfe>
 800968e:	2a73      	cmp	r2, #115	; 0x73
 8009690:	d074      	beq.n	800977c <_printf_i+0x14c>
 8009692:	d808      	bhi.n	80096a6 <_printf_i+0x76>
 8009694:	2a6f      	cmp	r2, #111	; 0x6f
 8009696:	d01f      	beq.n	80096d8 <_printf_i+0xa8>
 8009698:	2a70      	cmp	r2, #112	; 0x70
 800969a:	d1e0      	bne.n	800965e <_printf_i+0x2e>
 800969c:	2220      	movs	r2, #32
 800969e:	6809      	ldr	r1, [r1, #0]
 80096a0:	430a      	orrs	r2, r1
 80096a2:	6022      	str	r2, [r4, #0]
 80096a4:	e003      	b.n	80096ae <_printf_i+0x7e>
 80096a6:	2a75      	cmp	r2, #117	; 0x75
 80096a8:	d016      	beq.n	80096d8 <_printf_i+0xa8>
 80096aa:	2a78      	cmp	r2, #120	; 0x78
 80096ac:	d1d7      	bne.n	800965e <_printf_i+0x2e>
 80096ae:	0022      	movs	r2, r4
 80096b0:	2178      	movs	r1, #120	; 0x78
 80096b2:	3245      	adds	r2, #69	; 0x45
 80096b4:	7011      	strb	r1, [r2, #0]
 80096b6:	4e61      	ldr	r6, [pc, #388]	; (800983c <_printf_i+0x20c>)
 80096b8:	e022      	b.n	8009700 <_printf_i+0xd0>
 80096ba:	0025      	movs	r5, r4
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	3542      	adds	r5, #66	; 0x42
 80096c0:	1d11      	adds	r1, r2, #4
 80096c2:	6019      	str	r1, [r3, #0]
 80096c4:	6813      	ldr	r3, [r2, #0]
 80096c6:	702b      	strb	r3, [r5, #0]
 80096c8:	2301      	movs	r3, #1
 80096ca:	e065      	b.n	8009798 <_printf_i+0x168>
 80096cc:	6808      	ldr	r0, [r1, #0]
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	0669      	lsls	r1, r5, #25
 80096d2:	d5d3      	bpl.n	800967c <_printf_i+0x4c>
 80096d4:	b200      	sxth	r0, r0
 80096d6:	e7d1      	b.n	800967c <_printf_i+0x4c>
 80096d8:	6819      	ldr	r1, [r3, #0]
 80096da:	6825      	ldr	r5, [r4, #0]
 80096dc:	1d08      	adds	r0, r1, #4
 80096de:	6018      	str	r0, [r3, #0]
 80096e0:	6808      	ldr	r0, [r1, #0]
 80096e2:	062e      	lsls	r6, r5, #24
 80096e4:	d505      	bpl.n	80096f2 <_printf_i+0xc2>
 80096e6:	4e54      	ldr	r6, [pc, #336]	; (8009838 <_printf_i+0x208>)
 80096e8:	2708      	movs	r7, #8
 80096ea:	2a6f      	cmp	r2, #111	; 0x6f
 80096ec:	d01b      	beq.n	8009726 <_printf_i+0xf6>
 80096ee:	270a      	movs	r7, #10
 80096f0:	e019      	b.n	8009726 <_printf_i+0xf6>
 80096f2:	066d      	lsls	r5, r5, #25
 80096f4:	d5f7      	bpl.n	80096e6 <_printf_i+0xb6>
 80096f6:	b280      	uxth	r0, r0
 80096f8:	e7f5      	b.n	80096e6 <_printf_i+0xb6>
 80096fa:	3145      	adds	r1, #69	; 0x45
 80096fc:	4e4e      	ldr	r6, [pc, #312]	; (8009838 <_printf_i+0x208>)
 80096fe:	700a      	strb	r2, [r1, #0]
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	1d01      	adds	r1, r0, #4
 8009706:	6800      	ldr	r0, [r0, #0]
 8009708:	6019      	str	r1, [r3, #0]
 800970a:	0615      	lsls	r5, r2, #24
 800970c:	d521      	bpl.n	8009752 <_printf_i+0x122>
 800970e:	07d3      	lsls	r3, r2, #31
 8009710:	d502      	bpl.n	8009718 <_printf_i+0xe8>
 8009712:	2320      	movs	r3, #32
 8009714:	431a      	orrs	r2, r3
 8009716:	6022      	str	r2, [r4, #0]
 8009718:	2710      	movs	r7, #16
 800971a:	2800      	cmp	r0, #0
 800971c:	d103      	bne.n	8009726 <_printf_i+0xf6>
 800971e:	2320      	movs	r3, #32
 8009720:	6822      	ldr	r2, [r4, #0]
 8009722:	439a      	bics	r2, r3
 8009724:	6022      	str	r2, [r4, #0]
 8009726:	0023      	movs	r3, r4
 8009728:	2200      	movs	r2, #0
 800972a:	3343      	adds	r3, #67	; 0x43
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	6863      	ldr	r3, [r4, #4]
 8009730:	60a3      	str	r3, [r4, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	db58      	blt.n	80097e8 <_printf_i+0x1b8>
 8009736:	2204      	movs	r2, #4
 8009738:	6821      	ldr	r1, [r4, #0]
 800973a:	4391      	bics	r1, r2
 800973c:	6021      	str	r1, [r4, #0]
 800973e:	2800      	cmp	r0, #0
 8009740:	d154      	bne.n	80097ec <_printf_i+0x1bc>
 8009742:	9d02      	ldr	r5, [sp, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d05a      	beq.n	80097fe <_printf_i+0x1ce>
 8009748:	0025      	movs	r5, r4
 800974a:	7833      	ldrb	r3, [r6, #0]
 800974c:	3542      	adds	r5, #66	; 0x42
 800974e:	702b      	strb	r3, [r5, #0]
 8009750:	e055      	b.n	80097fe <_printf_i+0x1ce>
 8009752:	0655      	lsls	r5, r2, #25
 8009754:	d5db      	bpl.n	800970e <_printf_i+0xde>
 8009756:	b280      	uxth	r0, r0
 8009758:	e7d9      	b.n	800970e <_printf_i+0xde>
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	680d      	ldr	r5, [r1, #0]
 800975e:	1d10      	adds	r0, r2, #4
 8009760:	6949      	ldr	r1, [r1, #20]
 8009762:	6018      	str	r0, [r3, #0]
 8009764:	6813      	ldr	r3, [r2, #0]
 8009766:	062e      	lsls	r6, r5, #24
 8009768:	d501      	bpl.n	800976e <_printf_i+0x13e>
 800976a:	6019      	str	r1, [r3, #0]
 800976c:	e002      	b.n	8009774 <_printf_i+0x144>
 800976e:	066d      	lsls	r5, r5, #25
 8009770:	d5fb      	bpl.n	800976a <_printf_i+0x13a>
 8009772:	8019      	strh	r1, [r3, #0]
 8009774:	2300      	movs	r3, #0
 8009776:	9d02      	ldr	r5, [sp, #8]
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	e04f      	b.n	800981c <_printf_i+0x1ec>
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	1d11      	adds	r1, r2, #4
 8009780:	6019      	str	r1, [r3, #0]
 8009782:	6815      	ldr	r5, [r2, #0]
 8009784:	2100      	movs	r1, #0
 8009786:	6862      	ldr	r2, [r4, #4]
 8009788:	0028      	movs	r0, r5
 800978a:	f000 f859 	bl	8009840 <memchr>
 800978e:	2800      	cmp	r0, #0
 8009790:	d001      	beq.n	8009796 <_printf_i+0x166>
 8009792:	1b40      	subs	r0, r0, r5
 8009794:	6060      	str	r0, [r4, #4]
 8009796:	6863      	ldr	r3, [r4, #4]
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	2300      	movs	r3, #0
 800979c:	9a02      	ldr	r2, [sp, #8]
 800979e:	7013      	strb	r3, [r2, #0]
 80097a0:	e03c      	b.n	800981c <_printf_i+0x1ec>
 80097a2:	6923      	ldr	r3, [r4, #16]
 80097a4:	002a      	movs	r2, r5
 80097a6:	9904      	ldr	r1, [sp, #16]
 80097a8:	9803      	ldr	r0, [sp, #12]
 80097aa:	9d05      	ldr	r5, [sp, #20]
 80097ac:	47a8      	blx	r5
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d03e      	beq.n	8009830 <_printf_i+0x200>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	079b      	lsls	r3, r3, #30
 80097b6:	d415      	bmi.n	80097e4 <_printf_i+0x1b4>
 80097b8:	9b07      	ldr	r3, [sp, #28]
 80097ba:	68e0      	ldr	r0, [r4, #12]
 80097bc:	4298      	cmp	r0, r3
 80097be:	da39      	bge.n	8009834 <_printf_i+0x204>
 80097c0:	0018      	movs	r0, r3
 80097c2:	e037      	b.n	8009834 <_printf_i+0x204>
 80097c4:	0022      	movs	r2, r4
 80097c6:	2301      	movs	r3, #1
 80097c8:	3219      	adds	r2, #25
 80097ca:	9904      	ldr	r1, [sp, #16]
 80097cc:	9803      	ldr	r0, [sp, #12]
 80097ce:	9e05      	ldr	r6, [sp, #20]
 80097d0:	47b0      	blx	r6
 80097d2:	1c43      	adds	r3, r0, #1
 80097d4:	d02c      	beq.n	8009830 <_printf_i+0x200>
 80097d6:	3501      	adds	r5, #1
 80097d8:	68e3      	ldr	r3, [r4, #12]
 80097da:	9a07      	ldr	r2, [sp, #28]
 80097dc:	1a9b      	subs	r3, r3, r2
 80097de:	42ab      	cmp	r3, r5
 80097e0:	dcf0      	bgt.n	80097c4 <_printf_i+0x194>
 80097e2:	e7e9      	b.n	80097b8 <_printf_i+0x188>
 80097e4:	2500      	movs	r5, #0
 80097e6:	e7f7      	b.n	80097d8 <_printf_i+0x1a8>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d0ad      	beq.n	8009748 <_printf_i+0x118>
 80097ec:	9d02      	ldr	r5, [sp, #8]
 80097ee:	0039      	movs	r1, r7
 80097f0:	f7f6 fd18 	bl	8000224 <__aeabi_uidivmod>
 80097f4:	5c73      	ldrb	r3, [r6, r1]
 80097f6:	3d01      	subs	r5, #1
 80097f8:	702b      	strb	r3, [r5, #0]
 80097fa:	2800      	cmp	r0, #0
 80097fc:	d1f7      	bne.n	80097ee <_printf_i+0x1be>
 80097fe:	2f08      	cmp	r7, #8
 8009800:	d109      	bne.n	8009816 <_printf_i+0x1e6>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	07db      	lsls	r3, r3, #31
 8009806:	d506      	bpl.n	8009816 <_printf_i+0x1e6>
 8009808:	6863      	ldr	r3, [r4, #4]
 800980a:	6922      	ldr	r2, [r4, #16]
 800980c:	4293      	cmp	r3, r2
 800980e:	dc02      	bgt.n	8009816 <_printf_i+0x1e6>
 8009810:	2330      	movs	r3, #48	; 0x30
 8009812:	3d01      	subs	r5, #1
 8009814:	702b      	strb	r3, [r5, #0]
 8009816:	9b02      	ldr	r3, [sp, #8]
 8009818:	1b5b      	subs	r3, r3, r5
 800981a:	6123      	str	r3, [r4, #16]
 800981c:	9b05      	ldr	r3, [sp, #20]
 800981e:	aa07      	add	r2, sp, #28
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	0021      	movs	r1, r4
 8009824:	9b04      	ldr	r3, [sp, #16]
 8009826:	9803      	ldr	r0, [sp, #12]
 8009828:	f7ff fe94 	bl	8009554 <_printf_common>
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	d1b8      	bne.n	80097a2 <_printf_i+0x172>
 8009830:	2001      	movs	r0, #1
 8009832:	4240      	negs	r0, r0
 8009834:	b009      	add	sp, #36	; 0x24
 8009836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009838:	08009ef5 	.word	0x08009ef5
 800983c:	08009f06 	.word	0x08009f06

08009840 <memchr>:
 8009840:	b2c9      	uxtb	r1, r1
 8009842:	1882      	adds	r2, r0, r2
 8009844:	4290      	cmp	r0, r2
 8009846:	d101      	bne.n	800984c <memchr+0xc>
 8009848:	2000      	movs	r0, #0
 800984a:	4770      	bx	lr
 800984c:	7803      	ldrb	r3, [r0, #0]
 800984e:	428b      	cmp	r3, r1
 8009850:	d0fb      	beq.n	800984a <memchr+0xa>
 8009852:	3001      	adds	r0, #1
 8009854:	e7f6      	b.n	8009844 <memchr+0x4>
	...

08009858 <_free_r>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	0005      	movs	r5, r0
 800985c:	2900      	cmp	r1, #0
 800985e:	d010      	beq.n	8009882 <_free_r+0x2a>
 8009860:	1f0c      	subs	r4, r1, #4
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	da00      	bge.n	800986a <_free_r+0x12>
 8009868:	18e4      	adds	r4, r4, r3
 800986a:	0028      	movs	r0, r5
 800986c:	f000 f8d4 	bl	8009a18 <__malloc_lock>
 8009870:	4a1d      	ldr	r2, [pc, #116]	; (80098e8 <_free_r+0x90>)
 8009872:	6813      	ldr	r3, [r2, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d105      	bne.n	8009884 <_free_r+0x2c>
 8009878:	6063      	str	r3, [r4, #4]
 800987a:	6014      	str	r4, [r2, #0]
 800987c:	0028      	movs	r0, r5
 800987e:	f000 f8cc 	bl	8009a1a <__malloc_unlock>
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	42a3      	cmp	r3, r4
 8009886:	d909      	bls.n	800989c <_free_r+0x44>
 8009888:	6821      	ldr	r1, [r4, #0]
 800988a:	1860      	adds	r0, r4, r1
 800988c:	4283      	cmp	r3, r0
 800988e:	d1f3      	bne.n	8009878 <_free_r+0x20>
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	1841      	adds	r1, r0, r1
 8009896:	6021      	str	r1, [r4, #0]
 8009898:	e7ee      	b.n	8009878 <_free_r+0x20>
 800989a:	0013      	movs	r3, r2
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	2a00      	cmp	r2, #0
 80098a0:	d001      	beq.n	80098a6 <_free_r+0x4e>
 80098a2:	42a2      	cmp	r2, r4
 80098a4:	d9f9      	bls.n	800989a <_free_r+0x42>
 80098a6:	6819      	ldr	r1, [r3, #0]
 80098a8:	1858      	adds	r0, r3, r1
 80098aa:	42a0      	cmp	r0, r4
 80098ac:	d10b      	bne.n	80098c6 <_free_r+0x6e>
 80098ae:	6820      	ldr	r0, [r4, #0]
 80098b0:	1809      	adds	r1, r1, r0
 80098b2:	1858      	adds	r0, r3, r1
 80098b4:	6019      	str	r1, [r3, #0]
 80098b6:	4282      	cmp	r2, r0
 80098b8:	d1e0      	bne.n	800987c <_free_r+0x24>
 80098ba:	6810      	ldr	r0, [r2, #0]
 80098bc:	6852      	ldr	r2, [r2, #4]
 80098be:	1841      	adds	r1, r0, r1
 80098c0:	6019      	str	r1, [r3, #0]
 80098c2:	605a      	str	r2, [r3, #4]
 80098c4:	e7da      	b.n	800987c <_free_r+0x24>
 80098c6:	42a0      	cmp	r0, r4
 80098c8:	d902      	bls.n	80098d0 <_free_r+0x78>
 80098ca:	230c      	movs	r3, #12
 80098cc:	602b      	str	r3, [r5, #0]
 80098ce:	e7d5      	b.n	800987c <_free_r+0x24>
 80098d0:	6821      	ldr	r1, [r4, #0]
 80098d2:	1860      	adds	r0, r4, r1
 80098d4:	4282      	cmp	r2, r0
 80098d6:	d103      	bne.n	80098e0 <_free_r+0x88>
 80098d8:	6810      	ldr	r0, [r2, #0]
 80098da:	6852      	ldr	r2, [r2, #4]
 80098dc:	1841      	adds	r1, r0, r1
 80098de:	6021      	str	r1, [r4, #0]
 80098e0:	6062      	str	r2, [r4, #4]
 80098e2:	605c      	str	r4, [r3, #4]
 80098e4:	e7ca      	b.n	800987c <_free_r+0x24>
 80098e6:	46c0      	nop			; (mov r8, r8)
 80098e8:	20000160 	.word	0x20000160

080098ec <_malloc_r>:
 80098ec:	2303      	movs	r3, #3
 80098ee:	b570      	push	{r4, r5, r6, lr}
 80098f0:	1ccd      	adds	r5, r1, #3
 80098f2:	439d      	bics	r5, r3
 80098f4:	3508      	adds	r5, #8
 80098f6:	0006      	movs	r6, r0
 80098f8:	2d0c      	cmp	r5, #12
 80098fa:	d21e      	bcs.n	800993a <_malloc_r+0x4e>
 80098fc:	250c      	movs	r5, #12
 80098fe:	42a9      	cmp	r1, r5
 8009900:	d81d      	bhi.n	800993e <_malloc_r+0x52>
 8009902:	0030      	movs	r0, r6
 8009904:	f000 f888 	bl	8009a18 <__malloc_lock>
 8009908:	4a25      	ldr	r2, [pc, #148]	; (80099a0 <_malloc_r+0xb4>)
 800990a:	6814      	ldr	r4, [r2, #0]
 800990c:	0021      	movs	r1, r4
 800990e:	2900      	cmp	r1, #0
 8009910:	d119      	bne.n	8009946 <_malloc_r+0x5a>
 8009912:	4c24      	ldr	r4, [pc, #144]	; (80099a4 <_malloc_r+0xb8>)
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d103      	bne.n	8009922 <_malloc_r+0x36>
 800991a:	0030      	movs	r0, r6
 800991c:	f000 f86a 	bl	80099f4 <_sbrk_r>
 8009920:	6020      	str	r0, [r4, #0]
 8009922:	0029      	movs	r1, r5
 8009924:	0030      	movs	r0, r6
 8009926:	f000 f865 	bl	80099f4 <_sbrk_r>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d12b      	bne.n	8009986 <_malloc_r+0x9a>
 800992e:	230c      	movs	r3, #12
 8009930:	0030      	movs	r0, r6
 8009932:	6033      	str	r3, [r6, #0]
 8009934:	f000 f871 	bl	8009a1a <__malloc_unlock>
 8009938:	e003      	b.n	8009942 <_malloc_r+0x56>
 800993a:	2d00      	cmp	r5, #0
 800993c:	dadf      	bge.n	80098fe <_malloc_r+0x12>
 800993e:	230c      	movs	r3, #12
 8009940:	6033      	str	r3, [r6, #0]
 8009942:	2000      	movs	r0, #0
 8009944:	bd70      	pop	{r4, r5, r6, pc}
 8009946:	680b      	ldr	r3, [r1, #0]
 8009948:	1b5b      	subs	r3, r3, r5
 800994a:	d419      	bmi.n	8009980 <_malloc_r+0x94>
 800994c:	2b0b      	cmp	r3, #11
 800994e:	d903      	bls.n	8009958 <_malloc_r+0x6c>
 8009950:	600b      	str	r3, [r1, #0]
 8009952:	18cc      	adds	r4, r1, r3
 8009954:	6025      	str	r5, [r4, #0]
 8009956:	e003      	b.n	8009960 <_malloc_r+0x74>
 8009958:	684b      	ldr	r3, [r1, #4]
 800995a:	428c      	cmp	r4, r1
 800995c:	d10d      	bne.n	800997a <_malloc_r+0x8e>
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	0030      	movs	r0, r6
 8009962:	f000 f85a 	bl	8009a1a <__malloc_unlock>
 8009966:	0020      	movs	r0, r4
 8009968:	2207      	movs	r2, #7
 800996a:	300b      	adds	r0, #11
 800996c:	1d23      	adds	r3, r4, #4
 800996e:	4390      	bics	r0, r2
 8009970:	1ac3      	subs	r3, r0, r3
 8009972:	d0e7      	beq.n	8009944 <_malloc_r+0x58>
 8009974:	425a      	negs	r2, r3
 8009976:	50e2      	str	r2, [r4, r3]
 8009978:	e7e4      	b.n	8009944 <_malloc_r+0x58>
 800997a:	6063      	str	r3, [r4, #4]
 800997c:	000c      	movs	r4, r1
 800997e:	e7ef      	b.n	8009960 <_malloc_r+0x74>
 8009980:	000c      	movs	r4, r1
 8009982:	6849      	ldr	r1, [r1, #4]
 8009984:	e7c3      	b.n	800990e <_malloc_r+0x22>
 8009986:	2303      	movs	r3, #3
 8009988:	1cc4      	adds	r4, r0, #3
 800998a:	439c      	bics	r4, r3
 800998c:	42a0      	cmp	r0, r4
 800998e:	d0e1      	beq.n	8009954 <_malloc_r+0x68>
 8009990:	1a21      	subs	r1, r4, r0
 8009992:	0030      	movs	r0, r6
 8009994:	f000 f82e 	bl	80099f4 <_sbrk_r>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d1db      	bne.n	8009954 <_malloc_r+0x68>
 800999c:	e7c7      	b.n	800992e <_malloc_r+0x42>
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	20000160 	.word	0x20000160
 80099a4:	20000164 	.word	0x20000164

080099a8 <_realloc_r>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	0007      	movs	r7, r0
 80099ac:	000d      	movs	r5, r1
 80099ae:	0016      	movs	r6, r2
 80099b0:	2900      	cmp	r1, #0
 80099b2:	d105      	bne.n	80099c0 <_realloc_r+0x18>
 80099b4:	0011      	movs	r1, r2
 80099b6:	f7ff ff99 	bl	80098ec <_malloc_r>
 80099ba:	0004      	movs	r4, r0
 80099bc:	0020      	movs	r0, r4
 80099be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099c0:	2a00      	cmp	r2, #0
 80099c2:	d103      	bne.n	80099cc <_realloc_r+0x24>
 80099c4:	f7ff ff48 	bl	8009858 <_free_r>
 80099c8:	0034      	movs	r4, r6
 80099ca:	e7f7      	b.n	80099bc <_realloc_r+0x14>
 80099cc:	f000 f826 	bl	8009a1c <_malloc_usable_size_r>
 80099d0:	002c      	movs	r4, r5
 80099d2:	42b0      	cmp	r0, r6
 80099d4:	d2f2      	bcs.n	80099bc <_realloc_r+0x14>
 80099d6:	0031      	movs	r1, r6
 80099d8:	0038      	movs	r0, r7
 80099da:	f7ff ff87 	bl	80098ec <_malloc_r>
 80099de:	1e04      	subs	r4, r0, #0
 80099e0:	d0ec      	beq.n	80099bc <_realloc_r+0x14>
 80099e2:	0029      	movs	r1, r5
 80099e4:	0032      	movs	r2, r6
 80099e6:	f7ff fbf9 	bl	80091dc <memcpy>
 80099ea:	0029      	movs	r1, r5
 80099ec:	0038      	movs	r0, r7
 80099ee:	f7ff ff33 	bl	8009858 <_free_r>
 80099f2:	e7e3      	b.n	80099bc <_realloc_r+0x14>

080099f4 <_sbrk_r>:
 80099f4:	2300      	movs	r3, #0
 80099f6:	b570      	push	{r4, r5, r6, lr}
 80099f8:	4c06      	ldr	r4, [pc, #24]	; (8009a14 <_sbrk_r+0x20>)
 80099fa:	0005      	movs	r5, r0
 80099fc:	0008      	movs	r0, r1
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	f7f7 fbd2 	bl	80011a8 <_sbrk>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d103      	bne.n	8009a10 <_sbrk_r+0x1c>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d000      	beq.n	8009a10 <_sbrk_r+0x1c>
 8009a0e:	602b      	str	r3, [r5, #0]
 8009a10:	bd70      	pop	{r4, r5, r6, pc}
 8009a12:	46c0      	nop			; (mov r8, r8)
 8009a14:	200004f0 	.word	0x200004f0

08009a18 <__malloc_lock>:
 8009a18:	4770      	bx	lr

08009a1a <__malloc_unlock>:
 8009a1a:	4770      	bx	lr

08009a1c <_malloc_usable_size_r>:
 8009a1c:	1f0b      	subs	r3, r1, #4
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	1f18      	subs	r0, r3, #4
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	da01      	bge.n	8009a2a <_malloc_usable_size_r+0xe>
 8009a26:	580b      	ldr	r3, [r1, r0]
 8009a28:	18c0      	adds	r0, r0, r3
 8009a2a:	4770      	bx	lr

08009a2c <_init>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	46c0      	nop			; (mov r8, r8)
 8009a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a32:	bc08      	pop	{r3}
 8009a34:	469e      	mov	lr, r3
 8009a36:	4770      	bx	lr

08009a38 <_fini>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr
