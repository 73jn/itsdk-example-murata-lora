
itsdk-example-murata-lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001390  0800bf08  0800bf08  0001bf08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d298  0800d298  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d298  0800d298  0001d298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2a0  0800d2a0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2a0  0800d2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2a4  0800d2a4  0001d2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800d2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000088  0800d32c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800d32c  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b4eb  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007419  00000000  00000000  0005b597  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ef8  00000000  00000000  000629b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ba0  00000000  00000000  000648a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002024b  00000000  00000000  00066448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000283c1  00000000  00000000  00086693  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a3b39  00000000  00000000  000aea54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015258d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bf0  00000000  00000000  00152608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bef0 	.word	0x0800bef0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	0800bef0 	.word	0x0800bef0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_ldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d115      	bne.n	8000434 <__aeabi_ldivmod+0x30>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d113      	bne.n	8000434 <__aeabi_ldivmod+0x30>
 800040c:	2900      	cmp	r1, #0
 800040e:	db06      	blt.n	800041e <__aeabi_ldivmod+0x1a>
 8000410:	dc01      	bgt.n	8000416 <__aeabi_ldivmod+0x12>
 8000412:	2800      	cmp	r0, #0
 8000414:	d006      	beq.n	8000424 <__aeabi_ldivmod+0x20>
 8000416:	2000      	movs	r0, #0
 8000418:	43c0      	mvns	r0, r0
 800041a:	0841      	lsrs	r1, r0, #1
 800041c:	e002      	b.n	8000424 <__aeabi_ldivmod+0x20>
 800041e:	2180      	movs	r1, #128	; 0x80
 8000420:	0609      	lsls	r1, r1, #24
 8000422:	2000      	movs	r0, #0
 8000424:	b407      	push	{r0, r1, r2}
 8000426:	4802      	ldr	r0, [pc, #8]	; (8000430 <__aeabi_ldivmod+0x2c>)
 8000428:	a101      	add	r1, pc, #4	; (adr r1, 8000430 <__aeabi_ldivmod+0x2c>)
 800042a:	1840      	adds	r0, r0, r1
 800042c:	9002      	str	r0, [sp, #8]
 800042e:	bd03      	pop	{r0, r1, pc}
 8000430:	ffffffd1 	.word	0xffffffd1
 8000434:	b403      	push	{r0, r1}
 8000436:	4668      	mov	r0, sp
 8000438:	b501      	push	{r0, lr}
 800043a:	9802      	ldr	r0, [sp, #8]
 800043c:	f000 f912 	bl	8000664 <__gnu_ldivmod_helper>
 8000440:	9b01      	ldr	r3, [sp, #4]
 8000442:	469e      	mov	lr, r3
 8000444:	b002      	add	sp, #8
 8000446:	bc0c      	pop	{r2, r3}
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_uldivmod>:
 800044c:	2b00      	cmp	r3, #0
 800044e:	d111      	bne.n	8000474 <__aeabi_uldivmod+0x28>
 8000450:	2a00      	cmp	r2, #0
 8000452:	d10f      	bne.n	8000474 <__aeabi_uldivmod+0x28>
 8000454:	2900      	cmp	r1, #0
 8000456:	d100      	bne.n	800045a <__aeabi_uldivmod+0xe>
 8000458:	2800      	cmp	r0, #0
 800045a:	d002      	beq.n	8000462 <__aeabi_uldivmod+0x16>
 800045c:	2100      	movs	r1, #0
 800045e:	43c9      	mvns	r1, r1
 8000460:	1c08      	adds	r0, r1, #0
 8000462:	b407      	push	{r0, r1, r2}
 8000464:	4802      	ldr	r0, [pc, #8]	; (8000470 <__aeabi_uldivmod+0x24>)
 8000466:	a102      	add	r1, pc, #8	; (adr r1, 8000470 <__aeabi_uldivmod+0x24>)
 8000468:	1840      	adds	r0, r0, r1
 800046a:	9002      	str	r0, [sp, #8]
 800046c:	bd03      	pop	{r0, r1, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	ffffff91 	.word	0xffffff91
 8000474:	b403      	push	{r0, r1}
 8000476:	4668      	mov	r0, sp
 8000478:	b501      	push	{r0, lr}
 800047a:	9802      	ldr	r0, [sp, #8]
 800047c:	f000 f830 	bl	80004e0 <__udivmoddi4>
 8000480:	9b01      	ldr	r3, [sp, #4]
 8000482:	469e      	mov	lr, r3
 8000484:	b002      	add	sp, #8
 8000486:	bc0c      	pop	{r2, r3}
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_lmul>:
 800048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048e:	46ce      	mov	lr, r9
 8000490:	4647      	mov	r7, r8
 8000492:	0415      	lsls	r5, r2, #16
 8000494:	0c2d      	lsrs	r5, r5, #16
 8000496:	002e      	movs	r6, r5
 8000498:	b580      	push	{r7, lr}
 800049a:	0407      	lsls	r7, r0, #16
 800049c:	0c14      	lsrs	r4, r2, #16
 800049e:	0c3f      	lsrs	r7, r7, #16
 80004a0:	4699      	mov	r9, r3
 80004a2:	0c03      	lsrs	r3, r0, #16
 80004a4:	437e      	muls	r6, r7
 80004a6:	435d      	muls	r5, r3
 80004a8:	4367      	muls	r7, r4
 80004aa:	4363      	muls	r3, r4
 80004ac:	197f      	adds	r7, r7, r5
 80004ae:	0c34      	lsrs	r4, r6, #16
 80004b0:	19e4      	adds	r4, r4, r7
 80004b2:	469c      	mov	ip, r3
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	d903      	bls.n	80004c0 <__aeabi_lmul+0x34>
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	025b      	lsls	r3, r3, #9
 80004bc:	4698      	mov	r8, r3
 80004be:	44c4      	add	ip, r8
 80004c0:	464b      	mov	r3, r9
 80004c2:	4343      	muls	r3, r0
 80004c4:	4351      	muls	r1, r2
 80004c6:	0c25      	lsrs	r5, r4, #16
 80004c8:	0436      	lsls	r6, r6, #16
 80004ca:	4465      	add	r5, ip
 80004cc:	0c36      	lsrs	r6, r6, #16
 80004ce:	0424      	lsls	r4, r4, #16
 80004d0:	19a4      	adds	r4, r4, r6
 80004d2:	195b      	adds	r3, r3, r5
 80004d4:	1859      	adds	r1, r3, r1
 80004d6:	0020      	movs	r0, r4
 80004d8:	bc0c      	pop	{r2, r3}
 80004da:	4690      	mov	r8, r2
 80004dc:	4699      	mov	r9, r3
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004e0 <__udivmoddi4>:
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	464f      	mov	r7, r9
 80004e4:	4646      	mov	r6, r8
 80004e6:	46d6      	mov	lr, sl
 80004e8:	b5c0      	push	{r6, r7, lr}
 80004ea:	0004      	movs	r4, r0
 80004ec:	b082      	sub	sp, #8
 80004ee:	000d      	movs	r5, r1
 80004f0:	4691      	mov	r9, r2
 80004f2:	4698      	mov	r8, r3
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d82f      	bhi.n	8000558 <__udivmoddi4+0x78>
 80004f8:	d02c      	beq.n	8000554 <__udivmoddi4+0x74>
 80004fa:	4641      	mov	r1, r8
 80004fc:	4648      	mov	r0, r9
 80004fe:	f000 f8eb 	bl	80006d8 <__clzdi2>
 8000502:	0029      	movs	r1, r5
 8000504:	0006      	movs	r6, r0
 8000506:	0020      	movs	r0, r4
 8000508:	f000 f8e6 	bl	80006d8 <__clzdi2>
 800050c:	1a33      	subs	r3, r6, r0
 800050e:	469c      	mov	ip, r3
 8000510:	3b20      	subs	r3, #32
 8000512:	469a      	mov	sl, r3
 8000514:	d500      	bpl.n	8000518 <__udivmoddi4+0x38>
 8000516:	e076      	b.n	8000606 <__udivmoddi4+0x126>
 8000518:	464b      	mov	r3, r9
 800051a:	4652      	mov	r2, sl
 800051c:	4093      	lsls	r3, r2
 800051e:	001f      	movs	r7, r3
 8000520:	464b      	mov	r3, r9
 8000522:	4662      	mov	r2, ip
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d828      	bhi.n	800057e <__udivmoddi4+0x9e>
 800052c:	d025      	beq.n	800057a <__udivmoddi4+0x9a>
 800052e:	4653      	mov	r3, sl
 8000530:	1ba4      	subs	r4, r4, r6
 8000532:	41bd      	sbcs	r5, r7
 8000534:	2b00      	cmp	r3, #0
 8000536:	da00      	bge.n	800053a <__udivmoddi4+0x5a>
 8000538:	e07b      	b.n	8000632 <__udivmoddi4+0x152>
 800053a:	2200      	movs	r2, #0
 800053c:	2300      	movs	r3, #0
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	4652      	mov	r2, sl
 8000546:	4093      	lsls	r3, r2
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	4662      	mov	r2, ip
 800054e:	4093      	lsls	r3, r2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	e018      	b.n	8000586 <__udivmoddi4+0xa6>
 8000554:	4282      	cmp	r2, r0
 8000556:	d9d0      	bls.n	80004fa <__udivmoddi4+0x1a>
 8000558:	2200      	movs	r2, #0
 800055a:	2300      	movs	r3, #0
 800055c:	9200      	str	r2, [sp, #0]
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <__udivmoddi4+0x8a>
 8000566:	601c      	str	r4, [r3, #0]
 8000568:	605d      	str	r5, [r3, #4]
 800056a:	9800      	ldr	r0, [sp, #0]
 800056c:	9901      	ldr	r1, [sp, #4]
 800056e:	b002      	add	sp, #8
 8000570:	bc1c      	pop	{r2, r3, r4}
 8000572:	4690      	mov	r8, r2
 8000574:	4699      	mov	r9, r3
 8000576:	46a2      	mov	sl, r4
 8000578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057a:	42a3      	cmp	r3, r4
 800057c:	d9d7      	bls.n	800052e <__udivmoddi4+0x4e>
 800057e:	2200      	movs	r2, #0
 8000580:	2300      	movs	r3, #0
 8000582:	9200      	str	r2, [sp, #0]
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	4663      	mov	r3, ip
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0e9      	beq.n	8000560 <__udivmoddi4+0x80>
 800058c:	07fb      	lsls	r3, r7, #31
 800058e:	4698      	mov	r8, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0872      	lsrs	r2, r6, #1
 8000594:	430a      	orrs	r2, r1
 8000596:	087b      	lsrs	r3, r7, #1
 8000598:	4666      	mov	r6, ip
 800059a:	e00e      	b.n	80005ba <__udivmoddi4+0xda>
 800059c:	42ab      	cmp	r3, r5
 800059e:	d101      	bne.n	80005a4 <__udivmoddi4+0xc4>
 80005a0:	42a2      	cmp	r2, r4
 80005a2:	d80c      	bhi.n	80005be <__udivmoddi4+0xde>
 80005a4:	1aa4      	subs	r4, r4, r2
 80005a6:	419d      	sbcs	r5, r3
 80005a8:	2001      	movs	r0, #1
 80005aa:	1924      	adds	r4, r4, r4
 80005ac:	416d      	adcs	r5, r5
 80005ae:	2100      	movs	r1, #0
 80005b0:	3e01      	subs	r6, #1
 80005b2:	1824      	adds	r4, r4, r0
 80005b4:	414d      	adcs	r5, r1
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d006      	beq.n	80005c8 <__udivmoddi4+0xe8>
 80005ba:	42ab      	cmp	r3, r5
 80005bc:	d9ee      	bls.n	800059c <__udivmoddi4+0xbc>
 80005be:	3e01      	subs	r6, #1
 80005c0:	1924      	adds	r4, r4, r4
 80005c2:	416d      	adcs	r5, r5
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d1f8      	bne.n	80005ba <__udivmoddi4+0xda>
 80005c8:	9800      	ldr	r0, [sp, #0]
 80005ca:	9901      	ldr	r1, [sp, #4]
 80005cc:	4653      	mov	r3, sl
 80005ce:	1900      	adds	r0, r0, r4
 80005d0:	4169      	adcs	r1, r5
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db23      	blt.n	800061e <__udivmoddi4+0x13e>
 80005d6:	002b      	movs	r3, r5
 80005d8:	4652      	mov	r2, sl
 80005da:	40d3      	lsrs	r3, r2
 80005dc:	002a      	movs	r2, r5
 80005de:	4664      	mov	r4, ip
 80005e0:	40e2      	lsrs	r2, r4
 80005e2:	001c      	movs	r4, r3
 80005e4:	4653      	mov	r3, sl
 80005e6:	0015      	movs	r5, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db2d      	blt.n	8000648 <__udivmoddi4+0x168>
 80005ec:	0026      	movs	r6, r4
 80005ee:	4657      	mov	r7, sl
 80005f0:	40be      	lsls	r6, r7
 80005f2:	0033      	movs	r3, r6
 80005f4:	0026      	movs	r6, r4
 80005f6:	4667      	mov	r7, ip
 80005f8:	40be      	lsls	r6, r7
 80005fa:	0032      	movs	r2, r6
 80005fc:	1a80      	subs	r0, r0, r2
 80005fe:	4199      	sbcs	r1, r3
 8000600:	9000      	str	r0, [sp, #0]
 8000602:	9101      	str	r1, [sp, #4]
 8000604:	e7ac      	b.n	8000560 <__udivmoddi4+0x80>
 8000606:	4662      	mov	r2, ip
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	464a      	mov	r2, r9
 800060e:	40da      	lsrs	r2, r3
 8000610:	4661      	mov	r1, ip
 8000612:	0013      	movs	r3, r2
 8000614:	4642      	mov	r2, r8
 8000616:	408a      	lsls	r2, r1
 8000618:	0017      	movs	r7, r2
 800061a:	431f      	orrs	r7, r3
 800061c:	e780      	b.n	8000520 <__udivmoddi4+0x40>
 800061e:	4662      	mov	r2, ip
 8000620:	2320      	movs	r3, #32
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	002a      	movs	r2, r5
 8000626:	4666      	mov	r6, ip
 8000628:	409a      	lsls	r2, r3
 800062a:	0023      	movs	r3, r4
 800062c:	40f3      	lsrs	r3, r6
 800062e:	4313      	orrs	r3, r2
 8000630:	e7d4      	b.n	80005dc <__udivmoddi4+0xfc>
 8000632:	4662      	mov	r2, ip
 8000634:	2320      	movs	r3, #32
 8000636:	2100      	movs	r1, #0
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	40da      	lsrs	r2, r3
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	e780      	b.n	800054a <__udivmoddi4+0x6a>
 8000648:	2320      	movs	r3, #32
 800064a:	4662      	mov	r2, ip
 800064c:	0026      	movs	r6, r4
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	40de      	lsrs	r6, r3
 8000652:	002f      	movs	r7, r5
 8000654:	46b0      	mov	r8, r6
 8000656:	4666      	mov	r6, ip
 8000658:	40b7      	lsls	r7, r6
 800065a:	4646      	mov	r6, r8
 800065c:	003b      	movs	r3, r7
 800065e:	4333      	orrs	r3, r6
 8000660:	e7c8      	b.n	80005f4 <__udivmoddi4+0x114>
 8000662:	46c0      	nop			; (mov r8, r8)

08000664 <__gnu_ldivmod_helper>:
 8000664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000666:	b083      	sub	sp, #12
 8000668:	0016      	movs	r6, r2
 800066a:	001f      	movs	r7, r3
 800066c:	9000      	str	r0, [sp, #0]
 800066e:	9101      	str	r1, [sp, #4]
 8000670:	f000 f83e 	bl	80006f0 <__divdi3>
 8000674:	0004      	movs	r4, r0
 8000676:	000d      	movs	r5, r1
 8000678:	0002      	movs	r2, r0
 800067a:	000b      	movs	r3, r1
 800067c:	0030      	movs	r0, r6
 800067e:	0039      	movs	r1, r7
 8000680:	f7ff ff04 	bl	800048c <__aeabi_lmul>
 8000684:	9a00      	ldr	r2, [sp, #0]
 8000686:	9b01      	ldr	r3, [sp, #4]
 8000688:	1a12      	subs	r2, r2, r0
 800068a:	418b      	sbcs	r3, r1
 800068c:	9908      	ldr	r1, [sp, #32]
 800068e:	0020      	movs	r0, r4
 8000690:	600a      	str	r2, [r1, #0]
 8000692:	604b      	str	r3, [r1, #4]
 8000694:	0029      	movs	r1, r5
 8000696:	b003      	add	sp, #12
 8000698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)

0800069c <__clzsi2>:
 800069c:	211c      	movs	r1, #28
 800069e:	2301      	movs	r3, #1
 80006a0:	041b      	lsls	r3, r3, #16
 80006a2:	4298      	cmp	r0, r3
 80006a4:	d301      	bcc.n	80006aa <__clzsi2+0xe>
 80006a6:	0c00      	lsrs	r0, r0, #16
 80006a8:	3910      	subs	r1, #16
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	4298      	cmp	r0, r3
 80006ae:	d301      	bcc.n	80006b4 <__clzsi2+0x18>
 80006b0:	0a00      	lsrs	r0, r0, #8
 80006b2:	3908      	subs	r1, #8
 80006b4:	091b      	lsrs	r3, r3, #4
 80006b6:	4298      	cmp	r0, r3
 80006b8:	d301      	bcc.n	80006be <__clzsi2+0x22>
 80006ba:	0900      	lsrs	r0, r0, #4
 80006bc:	3904      	subs	r1, #4
 80006be:	a202      	add	r2, pc, #8	; (adr r2, 80006c8 <__clzsi2+0x2c>)
 80006c0:	5c10      	ldrb	r0, [r2, r0]
 80006c2:	1840      	adds	r0, r0, r1
 80006c4:	4770      	bx	lr
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	02020304 	.word	0x02020304
 80006cc:	01010101 	.word	0x01010101
	...

080006d8 <__clzdi2>:
 80006d8:	b510      	push	{r4, lr}
 80006da:	2900      	cmp	r1, #0
 80006dc:	d103      	bne.n	80006e6 <__clzdi2+0xe>
 80006de:	f7ff ffdd 	bl	800069c <__clzsi2>
 80006e2:	3020      	adds	r0, #32
 80006e4:	e002      	b.n	80006ec <__clzdi2+0x14>
 80006e6:	1c08      	adds	r0, r1, #0
 80006e8:	f7ff ffd8 	bl	800069c <__clzsi2>
 80006ec:	bd10      	pop	{r4, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)

080006f0 <__divdi3>:
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	464e      	mov	r6, r9
 80006f4:	4657      	mov	r7, sl
 80006f6:	46de      	mov	lr, fp
 80006f8:	4645      	mov	r5, r8
 80006fa:	b5e0      	push	{r5, r6, r7, lr}
 80006fc:	000f      	movs	r7, r1
 80006fe:	2100      	movs	r1, #0
 8000700:	b083      	sub	sp, #12
 8000702:	0006      	movs	r6, r0
 8000704:	4689      	mov	r9, r1
 8000706:	2f00      	cmp	r7, #0
 8000708:	da06      	bge.n	8000718 <__divdi3+0x28>
 800070a:	0039      	movs	r1, r7
 800070c:	2700      	movs	r7, #0
 800070e:	4246      	negs	r6, r0
 8000710:	418f      	sbcs	r7, r1
 8000712:	2101      	movs	r1, #1
 8000714:	4249      	negs	r1, r1
 8000716:	4689      	mov	r9, r1
 8000718:	2b00      	cmp	r3, #0
 800071a:	da07      	bge.n	800072c <__divdi3+0x3c>
 800071c:	4649      	mov	r1, r9
 800071e:	43c9      	mvns	r1, r1
 8000720:	0010      	movs	r0, r2
 8000722:	4689      	mov	r9, r1
 8000724:	0019      	movs	r1, r3
 8000726:	2300      	movs	r3, #0
 8000728:	4242      	negs	r2, r0
 800072a:	418b      	sbcs	r3, r1
 800072c:	0034      	movs	r4, r6
 800072e:	003d      	movs	r5, r7
 8000730:	4692      	mov	sl, r2
 8000732:	4698      	mov	r8, r3
 8000734:	42bb      	cmp	r3, r7
 8000736:	d869      	bhi.n	800080c <__divdi3+0x11c>
 8000738:	d066      	beq.n	8000808 <__divdi3+0x118>
 800073a:	4641      	mov	r1, r8
 800073c:	4650      	mov	r0, sl
 800073e:	f7ff ffcb 	bl	80006d8 <__clzdi2>
 8000742:	4683      	mov	fp, r0
 8000744:	0039      	movs	r1, r7
 8000746:	0030      	movs	r0, r6
 8000748:	f7ff ffc6 	bl	80006d8 <__clzdi2>
 800074c:	465b      	mov	r3, fp
 800074e:	1a1b      	subs	r3, r3, r0
 8000750:	469c      	mov	ip, r3
 8000752:	3b20      	subs	r3, #32
 8000754:	469b      	mov	fp, r3
 8000756:	d500      	bpl.n	800075a <__divdi3+0x6a>
 8000758:	e075      	b.n	8000846 <__divdi3+0x156>
 800075a:	4651      	mov	r1, sl
 800075c:	4658      	mov	r0, fp
 800075e:	4081      	lsls	r1, r0
 8000760:	000b      	movs	r3, r1
 8000762:	4651      	mov	r1, sl
 8000764:	4660      	mov	r0, ip
 8000766:	4081      	lsls	r1, r0
 8000768:	000a      	movs	r2, r1
 800076a:	42bb      	cmp	r3, r7
 800076c:	d861      	bhi.n	8000832 <__divdi3+0x142>
 800076e:	d05e      	beq.n	800082e <__divdi3+0x13e>
 8000770:	0034      	movs	r4, r6
 8000772:	003d      	movs	r5, r7
 8000774:	4659      	mov	r1, fp
 8000776:	1aa4      	subs	r4, r4, r2
 8000778:	419d      	sbcs	r5, r3
 800077a:	2900      	cmp	r1, #0
 800077c:	da00      	bge.n	8000780 <__divdi3+0x90>
 800077e:	e07a      	b.n	8000876 <__divdi3+0x186>
 8000780:	2100      	movs	r1, #0
 8000782:	2000      	movs	r0, #0
 8000784:	2601      	movs	r6, #1
 8000786:	9000      	str	r0, [sp, #0]
 8000788:	9101      	str	r1, [sp, #4]
 800078a:	4659      	mov	r1, fp
 800078c:	408e      	lsls	r6, r1
 800078e:	9601      	str	r6, [sp, #4]
 8000790:	4661      	mov	r1, ip
 8000792:	2601      	movs	r6, #1
 8000794:	408e      	lsls	r6, r1
 8000796:	4661      	mov	r1, ip
 8000798:	9600      	str	r6, [sp, #0]
 800079a:	2900      	cmp	r1, #0
 800079c:	d050      	beq.n	8000840 <__divdi3+0x150>
 800079e:	07d9      	lsls	r1, r3, #31
 80007a0:	0856      	lsrs	r6, r2, #1
 80007a2:	085f      	lsrs	r7, r3, #1
 80007a4:	430e      	orrs	r6, r1
 80007a6:	4663      	mov	r3, ip
 80007a8:	e00e      	b.n	80007c8 <__divdi3+0xd8>
 80007aa:	42af      	cmp	r7, r5
 80007ac:	d101      	bne.n	80007b2 <__divdi3+0xc2>
 80007ae:	42a6      	cmp	r6, r4
 80007b0:	d80c      	bhi.n	80007cc <__divdi3+0xdc>
 80007b2:	1ba4      	subs	r4, r4, r6
 80007b4:	41bd      	sbcs	r5, r7
 80007b6:	2101      	movs	r1, #1
 80007b8:	1924      	adds	r4, r4, r4
 80007ba:	416d      	adcs	r5, r5
 80007bc:	2200      	movs	r2, #0
 80007be:	3b01      	subs	r3, #1
 80007c0:	1864      	adds	r4, r4, r1
 80007c2:	4155      	adcs	r5, r2
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d006      	beq.n	80007d6 <__divdi3+0xe6>
 80007c8:	42af      	cmp	r7, r5
 80007ca:	d9ee      	bls.n	80007aa <__divdi3+0xba>
 80007cc:	3b01      	subs	r3, #1
 80007ce:	1924      	adds	r4, r4, r4
 80007d0:	416d      	adcs	r5, r5
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f8      	bne.n	80007c8 <__divdi3+0xd8>
 80007d6:	9800      	ldr	r0, [sp, #0]
 80007d8:	9901      	ldr	r1, [sp, #4]
 80007da:	465b      	mov	r3, fp
 80007dc:	1900      	adds	r0, r0, r4
 80007de:	4169      	adcs	r1, r5
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db3d      	blt.n	8000860 <__divdi3+0x170>
 80007e4:	002e      	movs	r6, r5
 80007e6:	40de      	lsrs	r6, r3
 80007e8:	4663      	mov	r3, ip
 80007ea:	002c      	movs	r4, r5
 80007ec:	40dc      	lsrs	r4, r3
 80007ee:	465b      	mov	r3, fp
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db4b      	blt.n	800088c <__divdi3+0x19c>
 80007f4:	0034      	movs	r4, r6
 80007f6:	465d      	mov	r5, fp
 80007f8:	40ac      	lsls	r4, r5
 80007fa:	0023      	movs	r3, r4
 80007fc:	4664      	mov	r4, ip
 80007fe:	40a6      	lsls	r6, r4
 8000800:	0032      	movs	r2, r6
 8000802:	1a80      	subs	r0, r0, r2
 8000804:	4199      	sbcs	r1, r3
 8000806:	e003      	b.n	8000810 <__divdi3+0x120>
 8000808:	42b2      	cmp	r2, r6
 800080a:	d996      	bls.n	800073a <__divdi3+0x4a>
 800080c:	2000      	movs	r0, #0
 800080e:	2100      	movs	r1, #0
 8000810:	464b      	mov	r3, r9
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <__divdi3+0x130>
 8000816:	0003      	movs	r3, r0
 8000818:	000c      	movs	r4, r1
 800081a:	2100      	movs	r1, #0
 800081c:	4258      	negs	r0, r3
 800081e:	41a1      	sbcs	r1, r4
 8000820:	b003      	add	sp, #12
 8000822:	bc3c      	pop	{r2, r3, r4, r5}
 8000824:	4690      	mov	r8, r2
 8000826:	4699      	mov	r9, r3
 8000828:	46a2      	mov	sl, r4
 800082a:	46ab      	mov	fp, r5
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	42b1      	cmp	r1, r6
 8000830:	d99e      	bls.n	8000770 <__divdi3+0x80>
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	9000      	str	r0, [sp, #0]
 8000838:	9101      	str	r1, [sp, #4]
 800083a:	4661      	mov	r1, ip
 800083c:	2900      	cmp	r1, #0
 800083e:	d1ae      	bne.n	800079e <__divdi3+0xae>
 8000840:	9800      	ldr	r0, [sp, #0]
 8000842:	9901      	ldr	r1, [sp, #4]
 8000844:	e7e4      	b.n	8000810 <__divdi3+0x120>
 8000846:	2320      	movs	r3, #32
 8000848:	4662      	mov	r2, ip
 800084a:	4651      	mov	r1, sl
 800084c:	1a9b      	subs	r3, r3, r2
 800084e:	40d9      	lsrs	r1, r3
 8000850:	4640      	mov	r0, r8
 8000852:	9100      	str	r1, [sp, #0]
 8000854:	4661      	mov	r1, ip
 8000856:	4088      	lsls	r0, r1
 8000858:	0003      	movs	r3, r0
 800085a:	9900      	ldr	r1, [sp, #0]
 800085c:	430b      	orrs	r3, r1
 800085e:	e780      	b.n	8000762 <__divdi3+0x72>
 8000860:	4662      	mov	r2, ip
 8000862:	2320      	movs	r3, #32
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	002a      	movs	r2, r5
 8000868:	409a      	lsls	r2, r3
 800086a:	0026      	movs	r6, r4
 800086c:	0013      	movs	r3, r2
 800086e:	4662      	mov	r2, ip
 8000870:	40d6      	lsrs	r6, r2
 8000872:	431e      	orrs	r6, r3
 8000874:	e7b8      	b.n	80007e8 <__divdi3+0xf8>
 8000876:	4661      	mov	r1, ip
 8000878:	2620      	movs	r6, #32
 800087a:	2701      	movs	r7, #1
 800087c:	1a76      	subs	r6, r6, r1
 800087e:	2000      	movs	r0, #0
 8000880:	2100      	movs	r1, #0
 8000882:	40f7      	lsrs	r7, r6
 8000884:	9000      	str	r0, [sp, #0]
 8000886:	9101      	str	r1, [sp, #4]
 8000888:	9701      	str	r7, [sp, #4]
 800088a:	e781      	b.n	8000790 <__divdi3+0xa0>
 800088c:	4667      	mov	r7, ip
 800088e:	2320      	movs	r3, #32
 8000890:	4662      	mov	r2, ip
 8000892:	0035      	movs	r5, r6
 8000894:	40bc      	lsls	r4, r7
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	40dd      	lsrs	r5, r3
 800089a:	0023      	movs	r3, r4
 800089c:	432b      	orrs	r3, r5
 800089e:	e7ad      	b.n	80007fc <__divdi3+0x10c>

080008a0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	003b      	movs	r3, r7
 80008a8:	0018      	movs	r0, r3
 80008aa:	2308      	movs	r3, #8
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f00a ff12 	bl	800b6d8 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <MX_ADC_Init+0xc0>)
 80008b6:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <MX_ADC_Init+0xc4>)
 80008b8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80008ba:	4b29      	ldr	r3, [pc, #164]	; (8000960 <MX_ADC_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008c0:	4b27      	ldr	r3, [pc, #156]	; (8000960 <MX_ADC_Init+0xc0>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	05d2      	lsls	r2, r2, #23
 80008c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <MX_ADC_Init+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <MX_ADC_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_ADC_Init+0xc0>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_ADC_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_ADC_Init+0xc0>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	2100      	movs	r1, #0
 80008e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_ADC_Init+0xc0>)
 80008ea:	2221      	movs	r2, #33	; 0x21
 80008ec:	2100      	movs	r1, #0
 80008ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_ADC_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_ADC_Init+0xc0>)
 80008f8:	22c2      	movs	r2, #194	; 0xc2
 80008fa:	32ff      	adds	r2, #255	; 0xff
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_ADC_Init+0xc0>)
 8000900:	222c      	movs	r2, #44	; 0x2c
 8000902:	2100      	movs	r1, #0
 8000904:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_ADC_Init+0xc0>)
 8000908:	2204      	movs	r2, #4
 800090a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_ADC_Init+0xc0>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_ADC_Init+0xc0>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_ADC_Init+0xc0>)
 800091a:	2200      	movs	r2, #0
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_ADC_Init+0xc0>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_ADC_Init+0xc0>)
 8000926:	0018      	movs	r0, r3
 8000928:	f000 ffbc 	bl	80018a4 <HAL_ADC_Init>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000930:	f000 faa0 	bl	8000e74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000934:	003b      	movs	r3, r7
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <MX_ADC_Init+0xc8>)
 8000938:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800093a:	003b      	movs	r3, r7
 800093c:	2280      	movs	r2, #128	; 0x80
 800093e:	0152      	lsls	r2, r2, #5
 8000940:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000942:	003a      	movs	r2, r7
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_ADC_Init+0xc0>)
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f001 f91f 	bl	8001b8c <HAL_ADC_ConfigChannel>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000952:	f000 fa8f 	bl	8000e74 <Error_Handler>
  }

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	200001f4 	.word	0x200001f4
 8000964:	40012400 	.word	0x40012400
 8000968:	48040000 	.word	0x48040000

0800096c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_ADC_MspInit+0x28>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d106      	bne.n	800098c <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_ADC_MspInit+0x2c>)
 8000980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_ADC_MspInit+0x2c>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0089      	lsls	r1, r1, #2
 8000988:	430a      	orrs	r2, r1
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40012400 	.word	0x40012400
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_RTC_AlarmAEventCallback>:
 *      Author: jeann
 */
#include "alarm_it.h"

extern int gg;
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	gg=1;
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_RTC_AlarmAEventCallback+0x20>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
	hrtc->State = HAL_RTC_STATE_READY;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2221      	movs	r2, #33	; 0x21
 80009ae:	2101      	movs	r1, #1
 80009b0:	5499      	strb	r1, [r3, r2]
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	200000a4 	.word	0x200000a4

080009c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b08b      	sub	sp, #44	; 0x2c
 80009c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	2414      	movs	r4, #20
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	0018      	movs	r0, r3
 80009cc:	2314      	movs	r3, #20
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f00a fe81 	bl	800b6d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b7a      	ldr	r3, [pc, #488]	; (8000bc0 <MX_GPIO_Init+0x200>)
 80009d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009da:	4b79      	ldr	r3, [pc, #484]	; (8000bc0 <MX_GPIO_Init+0x200>)
 80009dc:	2101      	movs	r1, #1
 80009de:	430a      	orrs	r2, r1
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e2:	4b77      	ldr	r3, [pc, #476]	; (8000bc0 <MX_GPIO_Init+0x200>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	2201      	movs	r2, #1
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b74      	ldr	r3, [pc, #464]	; (8000bc0 <MX_GPIO_Init+0x200>)
 80009f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f2:	4b73      	ldr	r3, [pc, #460]	; (8000bc0 <MX_GPIO_Init+0x200>)
 80009f4:	2102      	movs	r1, #2
 80009f6:	430a      	orrs	r2, r1
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009fa:	4b71      	ldr	r3, [pc, #452]	; (8000bc0 <MX_GPIO_Init+0x200>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fe:	2202      	movs	r2, #2
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b6e      	ldr	r3, [pc, #440]	; (8000bc0 <MX_GPIO_Init+0x200>)
 8000a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0a:	4b6d      	ldr	r3, [pc, #436]	; (8000bc0 <MX_GPIO_Init+0x200>)
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a12:	4b6b      	ldr	r3, [pc, #428]	; (8000bc0 <MX_GPIO_Init+0x200>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	2204      	movs	r2, #4
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b68      	ldr	r3, [pc, #416]	; (8000bc0 <MX_GPIO_Init+0x200>)
 8000a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a22:	4b67      	ldr	r3, [pc, #412]	; (8000bc0 <MX_GPIO_Init+0x200>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	430a      	orrs	r2, r1
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a2a:	4b65      	ldr	r3, [pc, #404]	; (8000bc0 <MX_GPIO_Init+0x200>)
 8000a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a36:	4963      	ldr	r1, [pc, #396]	; (8000bc4 <MX_GPIO_Init+0x204>)
 8000a38:	23a0      	movs	r3, #160	; 0xa0
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fc10 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000a44:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <MX_GPIO_Init+0x208>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	21e0      	movs	r1, #224	; 0xe0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fc0a 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8000a50:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	2107      	movs	r1, #7
 8000a56:	0018      	movs	r0, r3
 8000a58:	f001 fc04 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	4a5c      	ldr	r2, [pc, #368]	; (8000bd0 <MX_GPIO_Init+0x210>)
 8000a60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2201      	movs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2202      	movs	r2, #2
 8000a72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	193a      	adds	r2, r7, r4
 8000a76:	23a0      	movs	r3, #160	; 0xa0
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f001 fa73 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD4_Pin;
 8000a82:	0021      	movs	r1, r4
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	22e0      	movs	r2, #224	; 0xe0
 8000a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	000c      	movs	r4, r1
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	4a49      	ldr	r2, [pc, #292]	; (8000bc8 <MX_GPIO_Init+0x208>)
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	0010      	movs	r0, r2
 8000aa6:	f001 fa5f 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_10;
 8000aaa:	0021      	movs	r1, r4
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	22f0      	movs	r2, #240	; 0xf0
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <MX_GPIO_Init+0x208>)
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	0010      	movs	r0, r2
 8000aca:	f001 fa4d 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA14 PA13 PA8 PA11
                           PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_11
 8000ace:	0021      	movs	r1, r4
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <MX_GPIO_Init+0x214>)
 8000ad4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_0|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
 // HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //EDIT removed

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2213      	movs	r2, #19
 8000ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	4a3b      	ldr	r2, [pc, #236]	; (8000bd8 <MX_GPIO_Init+0x218>)
 8000aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	000c      	movs	r4, r1
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	4a33      	ldr	r2, [pc, #204]	; (8000bc8 <MX_GPIO_Init+0x208>)
 8000afa:	0019      	movs	r1, r3
 8000afc:	0010      	movs	r0, r2
 8000afe:	f001 fa33 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8000b02:	0021      	movs	r1, r4
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	0192      	lsls	r2, r2, #6
 8000b0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <MX_GPIO_Init+0x218>)
 8000b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8000b18:	000c      	movs	r4, r1
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	4a2b      	ldr	r2, [pc, #172]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000b1e:	0019      	movs	r1, r3
 8000b20:	0010      	movs	r0, r2
 8000b22:	f001 fa21 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8000b26:	0021      	movs	r1, r4
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2201      	movs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	000c      	movs	r4, r1
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <MX_GPIO_Init+0x20c>)
 8000b46:	0019      	movs	r1, r3
 8000b48:	0010      	movs	r0, r2
 8000b4a:	f001 fa0d 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4e:	0021      	movs	r1, r4
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2204      	movs	r2, #4
 8000b54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	000c      	movs	r4, r1
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <MX_GPIO_Init+0x208>)
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0010      	movs	r0, r2
 8000b6c:	f001 f9fc 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b70:	0021      	movs	r1, r4
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2220      	movs	r2, #32
 8000b76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	187a      	adds	r2, r7, r1
 8000b8c:	23a0      	movs	r3, #160	; 0xa0
 8000b8e:	05db      	lsls	r3, r3, #23
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f001 f9e8 	bl	8001f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2005      	movs	r0, #5
 8000b9e:	f001 f969 	bl	8001e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000ba2:	2005      	movs	r0, #5
 8000ba4:	f001 f97b 	bl	8001e9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	2007      	movs	r0, #7
 8000bae:	f001 f961 	bl	8001e74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bb2:	2007      	movs	r0, #7
 8000bb4:	f001 f973 	bl	8001e9e <HAL_NVIC_EnableIRQ>

}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b00b      	add	sp, #44	; 0x2c
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	00009022 	.word	0x00009022
 8000bc8:	50000400 	.word	0x50000400
 8000bcc:	50000800 	.word	0x50000800
 8000bd0:	00009002 	.word	0x00009002
 8000bd4:	00006911 	.word	0x00006911
 8000bd8:	10110000 	.word	0x10110000

08000bdc <stm32l_lowPowerRestoreGpioConfig>:

/* USER CODE BEGIN 2 */
void stm32l_lowPowerRestoreGpioConfig() {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af02      	add	r7, sp, #8

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b3f      	ldr	r3, [pc, #252]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be6:	4b3e      	ldr	r3, [pc, #248]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bee:	4b3c      	ldr	r3, [pc, #240]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfe:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000c00:	2102      	movs	r1, #2
 8000c02:	430a      	orrs	r2, r1
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c06:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000c18:	2104      	movs	r1, #4
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c1e:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	2204      	movs	r2, #4
 8000c24:	4013      	ands	r3, r2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	430a      	orrs	r2, r1
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <stm32l_lowPowerRestoreGpioConfig+0x104>)
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

	  // RF sw
	  gpio_configure_ext(ITSDK_MURATA_ANTSW_RX_BANK,ITSDK_MURATA_ANTSW_RX_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000c42:	2300      	movs	r3, #0
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f009 f9c7 	bl	8009fe0 <gpio_configure_ext>

	  // LoRa NSS
	  gpio_configure_ext(ITSDK_SX1276_NSS_BANK,ITSDK_SX1276_NSS_PIN,GPIO_OUTPUT_PULLUP,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	0219      	lsls	r1, r3, #8
 8000c56:	2300      	movs	r3, #0
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f009 f9be 	bl	8009fe0 <gpio_configure_ext>

	  // LoRa TCXO
	  gpio_configure_ext(ITSDK_SX1276_TCXO_VCC_BANK,ITSDK_SX1276_TCXO_VCC_PIN,GPIO_OUTPUT_PP,ITSDK_GPIO_SPEED_LOW,ITSDK_GPIO_ALT_NONE);
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	0159      	lsls	r1, r3, #5
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f009 f9b5 	bl	8009fe0 <gpio_configure_ext>

	  // LoRa DIO0-1-2-3-4
	  gpio_configure_ext(ITSDK_SX1276_DIO_0_BANK,ITSDK_SX1276_DIO_0_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000c76:	2300      	movs	r3, #0
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	2110      	movs	r1, #16
 8000c80:	2001      	movs	r0, #1
 8000c82:	f009 f9ad 	bl	8009fe0 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_1_BANK,ITSDK_SX1276_DIO_1_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000c86:	2300      	movs	r3, #0
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	2102      	movs	r1, #2
 8000c90:	2001      	movs	r0, #1
 8000c92:	f009 f9a5 	bl	8009fe0 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_2_BANK,ITSDK_SX1276_DIO_2_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000c96:	2300      	movs	r3, #0
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f009 f99d 	bl	8009fe0 <gpio_configure_ext>
	  gpio_configure_ext(ITSDK_SX1276_DIO_3_BANK,ITSDK_SX1276_DIO_3_PIN,GPIO_INTERRUPT_RISING,ITSDK_GPIO_SPEED_HIGH,ITSDK_GPIO_ALT_NONE);
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	0199      	lsls	r1, r3, #6
 8000caa:	2300      	movs	r3, #0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f009 f994 	bl	8009fe0 <gpio_configure_ext>


	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2005      	movs	r0, #5
 8000cbe:	f001 f8d9 	bl	8001e74 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000cc2:	2005      	movs	r0, #5
 8000cc4:	f001 f8eb 	bl	8001e9e <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2007      	movs	r0, #7
 8000cce:	f001 f8d1 	bl	8001e74 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f001 f8e3 	bl	8001e9e <HAL_NVIC_EnableIRQ>

}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b004      	add	sp, #16
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_IWDG_Init+0x34>)
 8000cea:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <MX_IWDG_Init+0x38>)
 8000cec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_IWDG_Init+0x34>)
 8000cf0:	2206      	movs	r2, #6
 8000cf2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_IWDG_Init+0x34>)
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <MX_IWDG_Init+0x3c>)
 8000cf8:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_IWDG_Init+0x34>)
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <MX_IWDG_Init+0x3c>)
 8000cfe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <MX_IWDG_Init+0x34>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f001 fae8 	bl	80022d8 <HAL_IWDG_Init>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000d0c:	f000 f8b2 	bl	8000e74 <Error_Handler>
  }

}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	20000250 	.word	0x20000250
 8000d1c:	40003000 	.word	0x40003000
 8000d20:	00000fff 	.word	0x00000fff

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d28:	f000 fd20 	bl	800176c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2c:	f000 f818 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d30:	f7ff fe46 	bl	80009c0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000d34:	f000 f8e2 	bl	8000efc <MX_RTC_Init>
  MX_SPI1_Init();
 8000d38:	f000 f9a8 	bl	800108c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d3c:	f000 f9de 	bl	80010fc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000d40:	f000 fc34 	bl	80015ac <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000d44:	f7ff ffce 	bl	8000ce4 <MX_IWDG_Init>
  MX_ADC_Init();
 8000d48:	f7ff fdaa 	bl	80008a0 <MX_ADC_Init>
  MX_TIM21_Init();
 8000d4c:	f000 fb88 	bl	8001460 <MX_TIM21_Init>
  MX_USART1_UART_Init();
 8000d50:	f000 fbf4 	bl	800153c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  itsdk_setup();
 8000d54:	f008 fb18 	bl	8009388 <itsdk_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	itsdk_loop();
 8000d58:	f008 fb54 	bl	8009404 <itsdk_loop>
 8000d5c:	e7fc      	b.n	8000d58 <main+0x34>
	...

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b09d      	sub	sp, #116	; 0x74
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	2438      	movs	r4, #56	; 0x38
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	2338      	movs	r3, #56	; 0x38
 8000d6e:	001a      	movs	r2, r3
 8000d70:	2100      	movs	r1, #0
 8000d72:	f00a fcb1 	bl	800b6d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d76:	2324      	movs	r3, #36	; 0x24
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2314      	movs	r3, #20
 8000d7e:	001a      	movs	r2, r3
 8000d80:	2100      	movs	r1, #0
 8000d82:	f00a fca9 	bl	800b6d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d86:	003b      	movs	r3, r7
 8000d88:	0018      	movs	r0, r3
 8000d8a:	2324      	movs	r3, #36	; 0x24
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f00a fca2 	bl	800b6d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <SystemClock_Config+0x108>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a34      	ldr	r2, [pc, #208]	; (8000e6c <SystemClock_Config+0x10c>)
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <SystemClock_Config+0x108>)
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	0109      	lsls	r1, r1, #4
 8000da2:	430a      	orrs	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000da6:	f001 faf1 	bl	800238c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <SystemClock_Config+0x110>)
 8000dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000dae:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <SystemClock_Config+0x110>)
 8000db0:	492e      	ldr	r1, [pc, #184]	; (8000e6c <SystemClock_Config+0x10c>)
 8000db2:	400a      	ands	r2, r1
 8000db4:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	220e      	movs	r2, #14
 8000dba:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	0052      	lsls	r2, r2, #1
 8000dc2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc4:	0021      	movs	r1, r4
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2201      	movs	r2, #1
 8000dca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2210      	movs	r2, #16
 8000dd0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2202      	movs	r2, #2
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	0312      	lsls	r2, r2, #12
 8000dea:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	0412      	lsls	r2, r2, #16
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 fb26 	bl	8002448 <HAL_RCC_OscConfig>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000e00:	f000 f838 	bl	8000e74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	2124      	movs	r1, #36	; 0x24
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	220f      	movs	r2, #15
 8000e0a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2101      	movs	r1, #1
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 fedd 	bl	8002be8 <HAL_RCC_ClockConfig>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e32:	f000 f81f 	bl	8000e74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000e36:	003b      	movs	r3, r7
 8000e38:	2223      	movs	r2, #35	; 0x23
 8000e3a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2208      	movs	r2, #8
 8000e46:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	0252      	lsls	r2, r2, #9
 8000e4e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	003b      	movs	r3, r7
 8000e52:	0018      	movs	r0, r3
 8000e54:	f002 f8ac 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000e5c:	f000 f80a 	bl	8000e74 <Error_Handler>
  }
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b01d      	add	sp, #116	; 0x74
 8000e66:	bd90      	pop	{r4, r7, pc}
 8000e68:	40007000 	.word	0x40007000
 8000e6c:	ffffe7ff 	.word	0xffffe7ff
 8000e70:	40021000 	.word	0x40021000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <project_setup>:


// =====================================================================
// Setup

void project_setup() {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

//	SX1276InitLowPower();
	log_info("Starting up\r\n");				// print a message on the USART2
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <project_setup+0x24>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f008 f952 	bl	8009130 <log_info>
	itsdk_delayMs(2000);
 8000e8c:	23fa      	movs	r3, #250	; 0xfa
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	0018      	movs	r0, r3
 8000e92:	f009 fb4d 	bl	800a530 <itsdk_delayMs>
	lowPower_enable();
 8000e96:	f008 fa27 	bl	80092e8 <lowPower_enable>

	 serial1_init();
 8000e9a:	f009 fbf5 	bl	800a688 <serial1_init>
	//gpio_reset(LED4_PORT,LED4_PIN);

	//itdt_sched_registerSched(TASKDELAYMS,ITSDK_SCHED_CONF_IMMEDIATE, &task);

	//lowPower_disable();
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0800bf90 	.word	0x0800bf90

08000ea8 <project_loop>:
/**
 * Project loop may not contain functional stuff
 * Keep in this loop only really short operations
 */
extern uint8_t externalBuffer[5];
void project_loop() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
		gg=0;
	}
	log_info("sleepmode\r\n");
	lowPower_delayMs(20000);
	*/
	log_info("Loop\n\r");
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <project_loop+0x48>)
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f008 f93d 	bl	8009130 <log_info>
	lowPower_delayMs(499);
 8000eb6:	23f4      	movs	r3, #244	; 0xf4
 8000eb8:	33ff      	adds	r3, #255	; 0xff
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f008 fa28 	bl	8009310 <lowPower_delayMs>
	for(int i = 0; i < 5; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	e00c      	b.n	8000ee0 <project_loop+0x38>
	log_info("%d", externalBuffer[i]);
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <project_loop+0x4c>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	18d3      	adds	r3, r2, r3
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	001a      	movs	r2, r3
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <project_loop+0x50>)
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f008 f92b 	bl	8009130 <log_info>
	for(int i = 0; i < 5; i++)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3301      	adds	r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	ddef      	ble.n	8000ec6 <project_loop+0x1e>
			log_info("Response CONSOLE : %d\r\n",r);
	} while ( r == SERIAL_READ_PENDING_CHAR );
	*/


}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	0800bfa0 	.word	0x0800bfa0
 8000ef4:	20000508 	.word	0x20000508
 8000ef8:	0800bfa8 	.word	0x0800bfa8

08000efc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b090      	sub	sp, #64	; 0x40
 8000f00:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000f02:	232c      	movs	r3, #44	; 0x2c
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	0018      	movs	r0, r3
 8000f08:	2314      	movs	r3, #20
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f00a fbe3 	bl	800b6d8 <memset>
  RTC_DateTypeDef sDate = {0};
 8000f12:	2328      	movs	r3, #40	; 0x28
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	2328      	movs	r3, #40	; 0x28
 8000f20:	001a      	movs	r2, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	f00a fbd8 	bl	800b6d8 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f28:	4b46      	ldr	r3, [pc, #280]	; (8001044 <MX_RTC_Init+0x148>)
 8000f2a:	4a47      	ldr	r2, [pc, #284]	; (8001048 <MX_RTC_Init+0x14c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f2e:	4b45      	ldr	r3, [pc, #276]	; (8001044 <MX_RTC_Init+0x148>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f34:	4b43      	ldr	r3, [pc, #268]	; (8001044 <MX_RTC_Init+0x148>)
 8000f36:	227f      	movs	r2, #127	; 0x7f
 8000f38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f3a:	4b42      	ldr	r3, [pc, #264]	; (8001044 <MX_RTC_Init+0x148>)
 8000f3c:	22ff      	movs	r2, #255	; 0xff
 8000f3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f40:	4b40      	ldr	r3, [pc, #256]	; (8001044 <MX_RTC_Init+0x148>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <MX_RTC_Init+0x148>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f4c:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <MX_RTC_Init+0x148>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f52:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <MX_RTC_Init+0x148>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <MX_RTC_Init+0x148>)
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f002 f980 	bl	8003260 <HAL_RTC_Init>
 8000f60:	1e03      	subs	r3, r0, #0
 8000f62:	d001      	beq.n	8000f68 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000f64:	f7ff ff86 	bl	8000e74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000f68:	212c      	movs	r1, #44	; 0x2c
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2200      	movs	r2, #0
 8000f7a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f88:	1879      	adds	r1, r7, r1
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <MX_RTC_Init+0x148>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f002 fa04 	bl	800339c <HAL_RTC_SetTime>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000f98:	f7ff ff6c 	bl	8000e74 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f9c:	2128      	movs	r1, #40	; 0x28
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2201      	movs	r2, #1
 8000fae:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000fb6:	1879      	adds	r1, r7, r1
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <MX_RTC_Init+0x148>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f002 fb0d 	bl	80035dc <HAL_RTC_SetDate>
 8000fc2:	1e03      	subs	r3, r0, #0
 8000fc4:	d001      	beq.n	8000fca <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000fc6:	f7ff ff55 	bl	8000e74 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000fca:	003b      	movs	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000fd0:	003b      	movs	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000fdc:	003b      	movs	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fe8:	003b      	movs	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000fee:	003b      	movs	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000ff4:	003b      	movs	r3, r7
 8000ff6:	22f0      	movs	r2, #240	; 0xf0
 8000ff8:	0512      	lsls	r2, r2, #20
 8000ffa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001002:	003b      	movs	r3, r7
 8001004:	2220      	movs	r2, #32
 8001006:	2101      	movs	r1, #1
 8001008:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800100a:	003b      	movs	r3, r7
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0052      	lsls	r2, r2, #1
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001012:	0039      	movs	r1, r7
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_RTC_Init+0x148>)
 8001016:	2200      	movs	r2, #0
 8001018:	0018      	movs	r0, r3
 800101a:	f002 fbdb 	bl	80037d4 <HAL_RTC_SetAlarm_IT>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d001      	beq.n	8001026 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8001022:	f7ff ff27 	bl	8000e74 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <MX_RTC_Init+0x148>)
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	0018      	movs	r0, r3
 800102e:	f002 fe03 	bl	8003c38 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d001      	beq.n	800103a <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 8001036:	f7ff ff1d 	bl	8000e74 <Error_Handler>
  }

}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b010      	add	sp, #64	; 0x40
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	20000260 	.word	0x20000260
 8001048:	40002800 	.word	0x40002800

0800104c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_RTC_MspInit+0x38>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10e      	bne.n	800107c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_RTC_MspInit+0x3c>)
 8001060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_RTC_MspInit+0x3c>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	02c9      	lsls	r1, r1, #11
 8001068:	430a      	orrs	r2, r1
 800106a:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2002      	movs	r0, #2
 8001072:	f000 feff 	bl	8001e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001076:	2002      	movs	r0, #2
 8001078:	f000 ff11 	bl	8001e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40002800 	.word	0x40002800
 8001088:	40021000 	.word	0x40021000

0800108c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_SPI1_Init+0x68>)
 8001092:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <MX_SPI1_Init+0x6c>)
 8001094:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_SPI1_Init+0x68>)
 8001098:	2282      	movs	r2, #130	; 0x82
 800109a:	0052      	lsls	r2, r2, #1
 800109c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010c0:	2220      	movs	r2, #32
 80010c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010d8:	2207      	movs	r2, #7
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <MX_SPI1_Init+0x68>)
 80010de:	0018      	movs	r0, r3
 80010e0:	f002 ff04 	bl	8003eec <HAL_SPI_Init>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d001      	beq.n	80010ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010e8:	f7ff fec4 	bl	8000e74 <Error_Handler>
  }

}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	200002dc 	.word	0x200002dc
 80010f8:	40013000 	.word	0x40013000

080010fc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_SPI2_Init+0x64>)
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <MX_SPI2_Init+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_SPI2_Init+0x64>)
 8001108:	2282      	movs	r2, #130	; 0x82
 800110a:	0052      	lsls	r2, r2, #1
 800110c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_SPI2_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_SPI2_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_SPI2_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_SPI2_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_SPI2_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_SPI2_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_SPI2_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_SPI2_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_SPI2_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_SPI2_Init+0x64>)
 8001146:	2207      	movs	r2, #7
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <MX_SPI2_Init+0x64>)
 800114c:	0018      	movs	r0, r3
 800114e:	f002 fecd 	bl	8003eec <HAL_SPI_Init>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d001      	beq.n	800115a <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8001156:	f7ff fe8d 	bl	8000e74 <Error_Handler>
  }

}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000284 	.word	0x20000284
 8001164:	40003800 	.word	0x40003800

08001168 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b08b      	sub	sp, #44	; 0x2c
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	2314      	movs	r3, #20
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	0018      	movs	r0, r3
 8001176:	2314      	movs	r3, #20
 8001178:	001a      	movs	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	f00a faac 	bl	800b6d8 <memset>
  if(spiHandle->Instance==SPI1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a41      	ldr	r2, [pc, #260]	; (800128c <HAL_SPI_MspInit+0x124>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d14d      	bne.n	8001226 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_SPI_MspInit+0x128>)
 800118c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <HAL_SPI_MspInit+0x128>)
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0149      	lsls	r1, r1, #5
 8001194:	430a      	orrs	r2, r1
 8001196:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <HAL_SPI_MspInit+0x128>)
 800119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119c:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <HAL_SPI_MspInit+0x128>)
 800119e:	2102      	movs	r1, #2
 80011a0:	430a      	orrs	r2, r1
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_SPI_MspInit+0x128>)
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	2202      	movs	r2, #2
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_SPI_MspInit+0x128>)
 80011b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <HAL_SPI_MspInit+0x128>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <HAL_SPI_MspInit+0x128>)
 80011be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c0:	2201      	movs	r2, #1
 80011c2:	4013      	ands	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 80011c8:	2114      	movs	r1, #20
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2208      	movs	r2, #8
 80011ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2202      	movs	r2, #2
 80011d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2203      	movs	r2, #3
 80011e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 80011e8:	000c      	movs	r4, r1
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	4a29      	ldr	r2, [pc, #164]	; (8001294 <HAL_SPI_MspInit+0x12c>)
 80011ee:	0019      	movs	r1, r3
 80011f0:	0010      	movs	r0, r2
 80011f2:	f000 feb9 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 80011f6:	0021      	movs	r1, r4
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	22c0      	movs	r2, #192	; 0xc0
 80011fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2202      	movs	r2, #2
 8001202:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2203      	movs	r2, #3
 800120e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	187a      	adds	r2, r7, r1
 8001218:	23a0      	movs	r3, #160	; 0xa0
 800121a:	05db      	lsls	r3, r3, #23
 800121c:	0011      	movs	r1, r2
 800121e:	0018      	movs	r0, r3
 8001220:	f000 fea2 	bl	8001f68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001224:	e02e      	b.n	8001284 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <HAL_SPI_MspInit+0x130>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d129      	bne.n	8001284 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_SPI_MspInit+0x128>)
 8001232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_SPI_MspInit+0x128>)
 8001236:	2180      	movs	r1, #128	; 0x80
 8001238:	01c9      	lsls	r1, r1, #7
 800123a:	430a      	orrs	r2, r1
 800123c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_SPI_MspInit+0x128>)
 8001240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_SPI_MspInit+0x128>)
 8001244:	2102      	movs	r1, #2
 8001246:	430a      	orrs	r2, r1
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_SPI_MspInit+0x128>)
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8001256:	2114      	movs	r1, #20
 8001258:	187b      	adds	r3, r7, r1
 800125a:	22f0      	movs	r2, #240	; 0xf0
 800125c:	0212      	lsls	r2, r2, #8
 800125e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2202      	movs	r2, #2
 8001264:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2203      	movs	r2, #3
 8001270:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	187b      	adds	r3, r7, r1
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_SPI_MspInit+0x12c>)
 800127c:	0019      	movs	r1, r3
 800127e:	0010      	movs	r0, r2
 8001280:	f000 fe72 	bl	8001f68 <HAL_GPIO_Init>
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b00b      	add	sp, #44	; 0x2c
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	40013000 	.word	0x40013000
 8001290:	40021000 	.word	0x40021000
 8001294:	50000400 	.word	0x50000400
 8001298:	40003800 	.word	0x40003800

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_MspInit+0x24>)
 80012a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_MspInit+0x24>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <HAL_MspInit+0x24>)
 80012ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_MspInit+0x24>)
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	0549      	lsls	r1, r1, #21
 80012b6:	430a      	orrs	r2, r1
 80012b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f00a f89e 	bl	800b42c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <RTC_IRQHandler+0x1c>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f002 fbb4 	bl	8003a6c <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <RTC_IRQHandler+0x1c>)
 8001306:	0018      	movs	r0, r3
 8001308:	f002 fdbe 	bl	8003e88 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	20000260 	.word	0x20000260

08001318 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800131c:	2001      	movs	r0, #1
 800131e:	f000 ffbf 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001322:	2002      	movs	r0, #2
 8001324:	f000 ffbc 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001332:	2010      	movs	r0, #16
 8001334:	f000 ffb4 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	019b      	lsls	r3, r3, #6
 800133c:	0018      	movs	r0, r3
 800133e:	f000 ffaf 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <USART1_IRQHandler+0x14>)
 800134e:	0018      	movs	r0, r3
 8001350:	f003 fa10 	bl	8004774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	20000370 	.word	0x20000370

08001360 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <USART2_IRQHandler+0x14>)
 8001366:	0018      	movs	r0, r3
 8001368:	f003 fa04 	bl	8004774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	200003f0 	.word	0x200003f0

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f00a f950 	bl	800b64c <__errno>
 80013ac:	0003      	movs	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	425b      	negs	r3, r3
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	18d2      	adds	r2, r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b006      	add	sp, #24
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20005000 	.word	0x20005000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	200000a8 	.word	0x200000a8
 80013e0:	20000570 	.word	0x20000570

080013e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <SystemInit+0x64>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <SystemInit+0x64>)
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	0049      	lsls	r1, r1, #1
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <SystemInit+0x64>)
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <SystemInit+0x64>)
 80013fc:	4913      	ldr	r1, [pc, #76]	; (800144c <SystemInit+0x68>)
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <SystemInit+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <SystemInit+0x64>)
 8001408:	4911      	ldr	r1, [pc, #68]	; (8001450 <SystemInit+0x6c>)
 800140a:	400a      	ands	r2, r1
 800140c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <SystemInit+0x64>)
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <SystemInit+0x64>)
 8001414:	2101      	movs	r1, #1
 8001416:	438a      	bics	r2, r1
 8001418:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <SystemInit+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <SystemInit+0x64>)
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <SystemInit+0x70>)
 8001422:	400a      	ands	r2, r1
 8001424:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <SystemInit+0x64>)
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <SystemInit+0x64>)
 800142c:	490a      	ldr	r1, [pc, #40]	; (8001458 <SystemInit+0x74>)
 800142e:	400a      	ands	r2, r1
 8001430:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SystemInit+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <SystemInit+0x78>)
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	0512      	lsls	r2, r2, #20
 800143e:	609a      	str	r2, [r3, #8]
#endif
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	40021000 	.word	0x40021000
 800144c:	88ff400c 	.word	0x88ff400c
 8001450:	fef6fff6 	.word	0xfef6fff6
 8001454:	fffbffff 	.word	0xfffbffff
 8001458:	ff02ffff 	.word	0xff02ffff
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <MX_TIM21_Init>:

TIM_HandleTypeDef htim21;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	2308      	movs	r3, #8
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	0018      	movs	r0, r3
 800146c:	2310      	movs	r3, #16
 800146e:	001a      	movs	r2, r3
 8001470:	2100      	movs	r1, #0
 8001472:	f00a f931 	bl	800b6d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	003b      	movs	r3, r7
 8001478:	0018      	movs	r0, r3
 800147a:	2308      	movs	r3, #8
 800147c:	001a      	movs	r2, r3
 800147e:	2100      	movs	r1, #0
 8001480:	f00a f92a 	bl	800b6d8 <memset>

  htim21.Instance = TIM21;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_TIM21_Init+0xa0>)
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <MX_TIM21_Init+0xa4>)
 8001488:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_TIM21_Init+0xa0>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_TIM21_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_TIM21_Init+0xa0>)
 8001498:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <MX_TIM21_Init+0xa8>)
 800149a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_TIM21_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_TIM21_Init+0xa0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_TIM21_Init+0xa0>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f002 fd88 	bl	8003fc0 <HAL_TIM_Base_Init>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 80014b4:	f7ff fcde 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	2108      	movs	r1, #8
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	0152      	lsls	r2, r2, #5
 80014c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80014c2:	187a      	adds	r2, r7, r1
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_TIM21_Init+0xa0>)
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f002 fda5 	bl	8004018 <HAL_TIM_ConfigClockSource>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 80014d2:	f7ff fccf 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	003b      	movs	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	003b      	movs	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80014e2:	003a      	movs	r2, r7
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_TIM21_Init+0xa0>)
 80014e6:	0011      	movs	r1, r2
 80014e8:	0018      	movs	r0, r3
 80014ea:	f002 ff4b 	bl	8004384 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	1e03      	subs	r3, r0, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80014f2:	f7ff fcbf 	bl	8000e74 <Error_Handler>
  }

}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b006      	add	sp, #24
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	20000334 	.word	0x20000334
 8001504:	40010800 	.word	0x40010800
 8001508:	0000ffff 	.word	0x0000ffff

0800150c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_TIM_Base_MspInit+0x28>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d105      	bne.n	800152a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_TIM_Base_MspInit+0x2c>)
 8001520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_TIM_Base_MspInit+0x2c>)
 8001524:	2104      	movs	r1, #4
 8001526:	430a      	orrs	r2, r1
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40010800 	.word	0x40010800
 8001538:	40021000 	.word	0x40021000

0800153c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001542:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <MX_USART1_UART_Init+0x6c>)
 8001544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001548:	2296      	movs	r2, #150	; 0x96
 800154a:	0192      	lsls	r2, r2, #6
 800154c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 800157a:	2203      	movs	r2, #3
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	0292      	lsls	r2, r2, #10
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	0252      	lsls	r2, r2, #9
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <MX_USART1_UART_Init+0x68>)
 8001590:	0018      	movs	r0, r3
 8001592:	f002 ff3b 	bl	800440c <HAL_UART_Init>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d001      	beq.n	800159e <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 800159a:	f7ff fc6b 	bl	8000e74 <Error_Handler>
  }

}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000370 	.word	0x20000370
 80015a8:	40013800 	.word	0x40013800

080015ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <MX_USART2_UART_Init+0x5c>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015b8:	2296      	movs	r2, #150	; 0x96
 80015ba:	0192      	lsls	r2, r2, #6
 80015bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <MX_USART2_UART_Init+0x58>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f002 ff0b 	bl	800440c <HAL_UART_Init>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015fa:	f7ff fc3b 	bl	8000e74 <Error_Handler>
  }

}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200003f0 	.word	0x200003f0
 8001608:	40004400 	.word	0x40004400

0800160c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	2314      	movs	r3, #20
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	0018      	movs	r0, r3
 800161a:	2314      	movs	r3, #20
 800161c:	001a      	movs	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	f00a f85a 	bl	800b6d8 <memset>
  if(uartHandle->Instance==USART1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a38      	ldr	r2, [pc, #224]	; (800170c <HAL_UART_MspInit+0x100>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d133      	bne.n	8001696 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_UART_MspInit+0x104>)
 8001630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <HAL_UART_MspInit+0x104>)
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	01c9      	lsls	r1, r1, #7
 8001638:	430a      	orrs	r2, r1
 800163a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b34      	ldr	r3, [pc, #208]	; (8001710 <HAL_UART_MspInit+0x104>)
 800163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001640:	4b33      	ldr	r3, [pc, #204]	; (8001710 <HAL_UART_MspInit+0x104>)
 8001642:	2101      	movs	r1, #1
 8001644:	430a      	orrs	r2, r1
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_UART_MspInit+0x104>)
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	2201      	movs	r2, #1
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001654:	2114      	movs	r1, #20
 8001656:	187b      	adds	r3, r7, r1
 8001658:	22c0      	movs	r2, #192	; 0xc0
 800165a:	00d2      	lsls	r2, r2, #3
 800165c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2202      	movs	r2, #2
 8001662:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2203      	movs	r2, #3
 800166e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2204      	movs	r2, #4
 8001674:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	187a      	adds	r2, r7, r1
 8001678:	23a0      	movs	r3, #160	; 0xa0
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	0011      	movs	r1, r2
 800167e:	0018      	movs	r0, r3
 8001680:	f000 fc72 	bl	8001f68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	201b      	movs	r0, #27
 800168a:	f000 fbf3 	bl	8001e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800168e:	201b      	movs	r0, #27
 8001690:	f000 fc05 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001694:	e036      	b.n	8001704 <HAL_UART_MspInit+0xf8>
  else if(uartHandle->Instance==USART2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_UART_MspInit+0x108>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d131      	bne.n	8001704 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_UART_MspInit+0x104>)
 80016a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_UART_MspInit+0x104>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0289      	lsls	r1, r1, #10
 80016aa:	430a      	orrs	r2, r1
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_UART_MspInit+0x104>)
 80016b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_UART_MspInit+0x104>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_UART_MspInit+0x104>)
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016c6:	2114      	movs	r1, #20
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2202      	movs	r2, #2
 80016d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2203      	movs	r2, #3
 80016de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2204      	movs	r2, #4
 80016e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	187a      	adds	r2, r7, r1
 80016e8:	23a0      	movs	r3, #160	; 0xa0
 80016ea:	05db      	lsls	r3, r3, #23
 80016ec:	0011      	movs	r1, r2
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 fc3a 	bl	8001f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	201c      	movs	r0, #28
 80016fa:	f000 fbbb 	bl	8001e74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016fe:	201c      	movs	r0, #28
 8001700:	f000 fbcd 	bl	8001e9e <HAL_NVIC_EnableIRQ>
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b00a      	add	sp, #40	; 0x28
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40013800 	.word	0x40013800
 8001710:	40021000 	.word	0x40021000
 8001714:	40004400 	.word	0x40004400

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800171a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800171c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800171e:	e003      	b.n	8001728 <LoopCopyDataInit>

08001720 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001722:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001724:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001726:	3104      	adds	r1, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <LoopForever+0xa>)
  ldr  r3, =_edata
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <LoopForever+0xe>)
  adds  r2, r0, r1
 800172c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800172e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001730:	d3f6      	bcc.n	8001720 <CopyDataInit>
  ldr  r2, =_sbss
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001734:	e002      	b.n	800173c <LoopFillZerobss>

08001736 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001736:	2300      	movs	r3, #0
  str  r3, [r2]
 8001738:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173a:	3204      	adds	r2, #4

0800173c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <LoopForever+0x16>)
  cmp  r2, r3
 800173e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001740:	d3f9      	bcc.n	8001736 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001742:	f7ff fe4f 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f009 ff87 	bl	800b658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7ff faeb 	bl	8000d24 <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
   ldr   r0, =_estack
 8001750:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8001754:	0800d2a8 	.word	0x0800d2a8
  ldr  r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800175c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001760:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001764:	2000056c 	.word	0x2000056c

08001768 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_COMP_IRQHandler>
	...

0800176c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_Init+0x3c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Init+0x3c>)
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001784:	2000      	movs	r0, #0
 8001786:	f000 f811 	bl	80017ac <HAL_InitTick>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d003      	beq.n	8001796 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e001      	b.n	800179a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001796:	f7ff fd81 	bl	800129c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	781b      	ldrb	r3, [r3, #0]
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_InitTick+0x5c>)
 80017b6:	681c      	ldr	r4, [r3, #0]
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_InitTick+0x60>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	0019      	movs	r1, r3
 80017be:	23fa      	movs	r3, #250	; 0xfa
 80017c0:	0098      	lsls	r0, r3, #2
 80017c2:	f7fe fca9 	bl	8000118 <__udivsi3>
 80017c6:	0003      	movs	r3, r0
 80017c8:	0019      	movs	r1, r3
 80017ca:	0020      	movs	r0, r4
 80017cc:	f7fe fca4 	bl	8000118 <__udivsi3>
 80017d0:	0003      	movs	r3, r0
 80017d2:	0018      	movs	r0, r3
 80017d4:	f000 fb73 	bl	8001ebe <HAL_SYSTICK_Config>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e00f      	b.n	8001800 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d80b      	bhi.n	80017fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	2301      	movs	r3, #1
 80017ea:	425b      	negs	r3, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 fb40 	bl	8001e74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_InitTick+0x64>)
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b003      	add	sp, #12
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	20000008 	.word	0x20000008
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b02      	ldr	r3, [pc, #8]	; (8001824 <HAL_GetTick+0x10>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	20000470 	.word	0x20000470

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fff0 	bl	8001814 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3301      	adds	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_Delay+0x40>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	001a      	movs	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	189b      	adds	r3, r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	f7ff ffe0 	bl	8001814 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	46c0      	nop			; (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	b004      	add	sp, #16
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000008 	.word	0x20000008

0800186c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_SuspendTick+0x18>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_SuspendTick+0x18>)
 8001876:	2102      	movs	r1, #2
 8001878:	438a      	bics	r2, r1
 800187a:	601a      	str	r2, [r3, #0]
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_ResumeTick+0x18>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_ResumeTick+0x18>)
 8001892:	2102      	movs	r1, #2
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e159      	b.n	8001b6a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10a      	bne.n	80018d4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2250      	movs	r2, #80	; 0x50
 80018c8:	2100      	movs	r1, #0
 80018ca:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff f84c 	bl	800096c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	2210      	movs	r2, #16
 80018da:	4013      	ands	r3, r2
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d005      	beq.n	80018ec <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2204      	movs	r2, #4
 80018e8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80018ea:	d00b      	beq.n	8001904 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	2210      	movs	r2, #16
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2250      	movs	r2, #80	; 0x50
 80018fc:	2100      	movs	r1, #0
 80018fe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e132      	b.n	8001b6a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	4a9a      	ldr	r2, [pc, #616]	; (8001b74 <HAL_ADC_Init+0x2d0>)
 800190a:	4013      	ands	r3, r2
 800190c:	2202      	movs	r2, #2
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2203      	movs	r2, #3
 800191c:	4013      	ands	r3, r2
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <HAL_ADC_Init+0x90>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4013      	ands	r3, r2
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_ADC_Init+0x90>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_ADC_Init+0x92>
 8001934:	2300      	movs	r3, #0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d149      	bne.n	80019ce <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	23c0      	movs	r3, #192	; 0xc0
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	429a      	cmp	r2, r3
 8001944:	d00b      	beq.n	800195e <HAL_ADC_Init+0xba>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	05db      	lsls	r3, r3, #23
 800194e:	429a      	cmp	r2, r3
 8001950:	d005      	beq.n	800195e <HAL_ADC_Init+0xba>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	061b      	lsls	r3, r3, #24
 800195a:	429a      	cmp	r2, r3
 800195c:	d111      	bne.n	8001982 <HAL_ADC_Init+0xde>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	0892      	lsrs	r2, r2, #2
 800196c:	611a      	str	r2, [r3, #16]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6919      	ldr	r1, [r3, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	e014      	b.n	80019ac <HAL_ADC_Init+0x108>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	0892      	lsrs	r2, r2, #2
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	4b79      	ldr	r3, [pc, #484]	; (8001b78 <HAL_ADC_Init+0x2d4>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b78      	ldr	r3, [pc, #480]	; (8001b78 <HAL_ADC_Init+0x2d4>)
 8001998:	4978      	ldr	r1, [pc, #480]	; (8001b7c <HAL_ADC_Init+0x2d8>)
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <HAL_ADC_Init+0x2d4>)
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <HAL_ADC_Init+0x2d4>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2118      	movs	r1, #24
 80019b8:	438a      	bics	r2, r1
 80019ba:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68d9      	ldr	r1, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80019ce:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_ADC_Init+0x2d4>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b69      	ldr	r3, [pc, #420]	; (8001b78 <HAL_ADC_Init+0x2d4>)
 80019d4:	496a      	ldr	r1, [pc, #424]	; (8001b80 <HAL_ADC_Init+0x2dc>)
 80019d6:	400a      	ands	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80019da:	4b67      	ldr	r3, [pc, #412]	; (8001b78 <HAL_ADC_Init+0x2d4>)
 80019dc:	6819      	ldr	r1, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e2:	065a      	lsls	r2, r3, #25
 80019e4:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <HAL_ADC_Init+0x2d4>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	055b      	lsls	r3, r3, #21
 80019f4:	4013      	ands	r3, r2
 80019f6:	d108      	bne.n	8001a0a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	0549      	lsls	r1, r1, #21
 8001a06:	430a      	orrs	r2, r1
 8001a08:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	495b      	ldr	r1, [pc, #364]	; (8001b84 <HAL_ADC_Init+0x2e0>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68d9      	ldr	r1, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_Init+0x18c>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e000      	b.n	8001a32 <HAL_ADC_Init+0x18e>
 8001a30:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a32:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2020      	movs	r0, #32
 8001a38:	5c1b      	ldrb	r3, [r3, r0]
 8001a3a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001a3c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	202c      	movs	r0, #44	; 0x2c
 8001a42:	5c1b      	ldrb	r3, [r3, r0]
 8001a44:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a46:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001a4c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001a54:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001a5c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6a:	23c2      	movs	r3, #194	; 0xc2
 8001a6c:	33ff      	adds	r3, #255	; 0xff
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d00b      	beq.n	8001a8a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68d9      	ldr	r1, [r3, #12]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2221      	movs	r2, #33	; 0x21
 8001a8e:	5c9b      	ldrb	r3, [r3, r2]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d11a      	bne.n	8001aca <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	5c9b      	ldrb	r3, [r3, r2]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	0249      	lsls	r1, r1, #9
 8001aac:	430a      	orrs	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	e00b      	b.n	8001aca <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d11f      	bne.n	8001b12 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	492a      	ldr	r1, [pc, #168]	; (8001b88 <HAL_ADC_Init+0x2e4>)
 8001ade:	400a      	ands	r2, r1
 8001ae0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6919      	ldr	r1, [r3, #16]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001af0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001af6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	e00e      	b.n	8001b30 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d107      	bne.n	8001b30 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	438a      	bics	r2, r1
 8001b2e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2107      	movs	r1, #7
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6959      	ldr	r1, [r3, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	4393      	bics	r3, r2
 8001b60:	2201      	movs	r2, #1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b002      	add	sp, #8
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	fffffefd 	.word	0xfffffefd
 8001b78:	40012708 	.word	0x40012708
 8001b7c:	ffc3ffff 	.word	0xffc3ffff
 8001b80:	fdffffff 	.word	0xfdffffff
 8001b84:	fffe0219 	.word	0xfffe0219
 8001b88:	fffffc03 	.word	0xfffffc03

08001b8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2250      	movs	r2, #80	; 0x50
 8001b9a:	5c9b      	ldrb	r3, [r3, r2]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x18>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e06c      	b.n	8001c7e <HAL_ADC_ConfigChannel+0xf2>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2250      	movs	r2, #80	; 0x50
 8001ba8:	2101      	movs	r1, #1
 8001baa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2250      	movs	r2, #80	; 0x50
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e056      	b.n	8001c7e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a2c      	ldr	r2, [pc, #176]	; (8001c88 <HAL_ADC_ConfigChannel+0xfc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d028      	beq.n	8001c2c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	035b      	lsls	r3, r3, #13
 8001be6:	0b5a      	lsrs	r2, r3, #13
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	02db      	lsls	r3, r3, #11
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_ADC_ConfigChannel+0x100>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_ADC_ConfigChannel+0x100>)
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	0409      	lsls	r1, r1, #16
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001c0a:	200a      	movs	r0, #10
 8001c0c:	f000 f844 	bl	8001c98 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d02b      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_ADC_ConfigChannel+0x100>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_ADC_ConfigChannel+0x100>)
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	03c9      	lsls	r1, r1, #15
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e023      	b.n	8001c74 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	035b      	lsls	r3, r3, #13
 8001c38:	0b5b      	lsrs	r3, r3, #13
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	02db      	lsls	r3, r3, #11
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d005      	beq.n	8001c5c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_ADC_ConfigChannel+0x100>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_ADC_ConfigChannel+0x100>)
 8001c56:	490e      	ldr	r1, [pc, #56]	; (8001c90 <HAL_ADC_ConfigChannel+0x104>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	029b      	lsls	r3, r3, #10
 8001c64:	4013      	ands	r3, r2
 8001c66:	d005      	beq.n	8001c74 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_ADC_ConfigChannel+0x100>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_ADC_ConfigChannel+0x100>)
 8001c6e:	4909      	ldr	r1, [pc, #36]	; (8001c94 <HAL_ADC_ConfigChannel+0x108>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2250      	movs	r2, #80	; 0x50
 8001c78:	2100      	movs	r1, #0
 8001c7a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b002      	add	sp, #8
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	00001001 	.word	0x00001001
 8001c8c:	40012708 	.word	0x40012708
 8001c90:	ff7fffff 	.word	0xff7fffff
 8001c94:	ffbfffff 	.word	0xffbfffff

08001c98 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <ADC_DelayMicroSecond+0x34>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	490a      	ldr	r1, [pc, #40]	; (8001cd0 <ADC_DelayMicroSecond+0x38>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7fe fa36 	bl	8000118 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	001a      	movs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4353      	muls	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001cb6:	e002      	b.n	8001cbe <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f9      	bne.n	8001cb8 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b004      	add	sp, #16
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	000f4240 	.word	0x000f4240

08001cd4 <HAL_ADCEx_EnableVREFINT>:
  *         For more details on procedure and buffer current consumption, refer to device reference manual.
  * @note   This is functional only if the LOCK is not set.
  * @retval None
*/
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  
  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	0049      	lsls	r1, r1, #1
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	621a      	str	r2, [r3, #32]
  
  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cec:	f7ff fd92 	bl	8001814 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	607b      	str	r3, [r7, #4]
  
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8001cf4:	e008      	b.n	8001d08 <HAL_ADCEx_EnableVREFINT+0x34>
  {
    if((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 8001cf6:	f7ff fd8d 	bl	8001814 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d901      	bls.n	8001d08 <HAL_ADCEx_EnableVREFINT+0x34>
    { 
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e006      	b.n	8001d16 <HAL_ADCEx_EnableVREFINT+0x42>
  while(HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_ADCEx_EnableVREFINT+0x4c>)
 8001d0a:	6a1a      	ldr	r2, [r3, #32]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	05db      	lsls	r3, r3, #23
 8001d10:	4013      	ands	r3, r2
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_ADCEx_EnableVREFINT+0x22>
    }
  }
  
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	40010000 	.word	0x40010000

08001d24 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001d30:	1dfb      	adds	r3, r7, #7
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	001a      	movs	r2, r3
 8001d36:	231f      	movs	r3, #31
 8001d38:	401a      	ands	r2, r3
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <NVIC_EnableIRQ+0x28>)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4091      	lsls	r1, r2
 8001d40:	000a      	movs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	0002      	movs	r2, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b7f      	cmp	r3, #127	; 0x7f
 8001d64:	d932      	bls.n	8001dcc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d66:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <NVIC_SetPriority+0xd4>)
 8001d68:	1dfb      	adds	r3, r7, #7
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	230f      	movs	r3, #15
 8001d70:	400b      	ands	r3, r1
 8001d72:	3b08      	subs	r3, #8
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3306      	adds	r3, #6
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	18d3      	adds	r3, r2, r3
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	1dfa      	adds	r2, r7, #7
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	0011      	movs	r1, r2
 8001d86:	2203      	movs	r2, #3
 8001d88:	400a      	ands	r2, r1
 8001d8a:	00d2      	lsls	r2, r2, #3
 8001d8c:	21ff      	movs	r1, #255	; 0xff
 8001d8e:	4091      	lsls	r1, r2
 8001d90:	000a      	movs	r2, r1
 8001d92:	43d2      	mvns	r2, r2
 8001d94:	401a      	ands	r2, r3
 8001d96:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	019b      	lsls	r3, r3, #6
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	401a      	ands	r2, r3
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	0018      	movs	r0, r3
 8001da6:	2303      	movs	r3, #3
 8001da8:	4003      	ands	r3, r0
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dae:	481d      	ldr	r0, [pc, #116]	; (8001e24 <NVIC_SetPriority+0xd4>)
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	001c      	movs	r4, r3
 8001db6:	230f      	movs	r3, #15
 8001db8:	4023      	ands	r3, r4
 8001dba:	3b08      	subs	r3, #8
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	3306      	adds	r3, #6
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	18c3      	adds	r3, r0, r3
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dca:	e027      	b.n	8001e1c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dcc:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <NVIC_SetPriority+0xd8>)
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	33c0      	adds	r3, #192	; 0xc0
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	589b      	ldr	r3, [r3, r2]
 8001ddc:	1dfa      	adds	r2, r7, #7
 8001dde:	7812      	ldrb	r2, [r2, #0]
 8001de0:	0011      	movs	r1, r2
 8001de2:	2203      	movs	r2, #3
 8001de4:	400a      	ands	r2, r1
 8001de6:	00d2      	lsls	r2, r2, #3
 8001de8:	21ff      	movs	r1, #255	; 0xff
 8001dea:	4091      	lsls	r1, r2
 8001dec:	000a      	movs	r2, r1
 8001dee:	43d2      	mvns	r2, r2
 8001df0:	401a      	ands	r2, r3
 8001df2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	019b      	lsls	r3, r3, #6
 8001df8:	22ff      	movs	r2, #255	; 0xff
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	1dfb      	adds	r3, r7, #7
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	0018      	movs	r0, r3
 8001e02:	2303      	movs	r3, #3
 8001e04:	4003      	ands	r3, r0
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e0a:	4807      	ldr	r0, [pc, #28]	; (8001e28 <NVIC_SetPriority+0xd8>)
 8001e0c:	1dfb      	adds	r3, r7, #7
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	430a      	orrs	r2, r1
 8001e16:	33c0      	adds	r3, #192	; 0xc0
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	501a      	str	r2, [r3, r0]
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b003      	add	sp, #12
 8001e22:	bd90      	pop	{r4, r7, pc}
 8001e24:	e000ed00 	.word	0xe000ed00
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <SysTick_Config+0x40>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e010      	b.n	8001e64 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <SysTick_Config+0x44>)
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	3a01      	subs	r2, #1
 8001e48:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	425b      	negs	r3, r3
 8001e4e:	2103      	movs	r1, #3
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ff7d 	bl	8001d50 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <SysTick_Config+0x44>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x44>)
 8001e5e:	2207      	movs	r2, #7
 8001e60:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	00ffffff 	.word	0x00ffffff
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	210f      	movs	r1, #15
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	1c02      	adds	r2, r0, #0
 8001e84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	0011      	movs	r1, r2
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff ff5d 	bl	8001d50 <NVIC_SetPriority>
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eaa:	1dfb      	adds	r3, r7, #7
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7ff ff37 	bl	8001d24 <NVIC_EnableIRQ>
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff ffaf 	bl	8001e2c <SysTick_Config>
 8001ece:	0003      	movs	r3, r0
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2225      	movs	r2, #37	; 0x25
 8001eec:	5c9b      	ldrb	r3, [r3, r2]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d007      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001efa:	230f      	movs	r3, #15
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e02a      	b.n	8001f5a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	210e      	movs	r1, #14
 8001f10:	438a      	bics	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	438a      	bics	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	221c      	movs	r2, #28
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2101      	movs	r1, #1
 8001f32:	4091      	lsls	r1, r2
 8001f34:	000a      	movs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2225      	movs	r2, #37	; 0x25
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2224      	movs	r2, #36	; 0x24
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	0010      	movs	r0, r2
 8001f58:	4798      	blx	r3
    }
  }
  return status;
 8001f5a:	230f      	movs	r3, #15
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	781b      	ldrb	r3, [r3, #0]
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f7e:	e155      	b.n	800222c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4091      	lsls	r1, r2
 8001f8a:	000a      	movs	r2, r1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d100      	bne.n	8001f98 <HAL_GPIO_Init+0x30>
 8001f96:	e146      	b.n	8002226 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d00b      	beq.n	8001fb8 <HAL_GPIO_Init+0x50>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d007      	beq.n	8001fb8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fac:	2b11      	cmp	r3, #17
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b12      	cmp	r3, #18
 8001fb6:	d130      	bne.n	800201a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	0013      	movs	r3, r2
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	0013      	movs	r3, r2
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fee:	2201      	movs	r2, #1
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	2201      	movs	r2, #1
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
 800200c:	0013      	movs	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	43da      	mvns	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	409a      	lsls	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0xf2>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b12      	cmp	r3, #18
 8002058:	d123      	bne.n	80020a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	58d3      	ldr	r3, [r2, r3]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2207      	movs	r2, #7
 800206c:	4013      	ands	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	409a      	lsls	r2, r3
 8002074:	0013      	movs	r3, r2
 8002076:	43da      	mvns	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2107      	movs	r1, #7
 8002086:	400b      	ands	r3, r1
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	409a      	lsls	r2, r3
 800208c:	0013      	movs	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	409a      	lsls	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	43da      	mvns	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2203      	movs	r2, #3
 80020c0:	401a      	ands	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	409a      	lsls	r2, r3
 80020c8:	0013      	movs	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	055b      	lsls	r3, r3, #21
 80020de:	4013      	ands	r3, r2
 80020e0:	d100      	bne.n	80020e4 <HAL_GPIO_Init+0x17c>
 80020e2:	e0a0      	b.n	8002226 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_GPIO_Init+0x2dc>)
 80020e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e8:	4b56      	ldr	r3, [pc, #344]	; (8002244 <HAL_GPIO_Init+0x2dc>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f0:	4a55      	ldr	r2, [pc, #340]	; (8002248 <HAL_GPIO_Init+0x2e0>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	589b      	ldr	r3, [r3, r2]
 80020fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2203      	movs	r2, #3
 8002102:	4013      	ands	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	409a      	lsls	r2, r3
 800210a:	0013      	movs	r3, r2
 800210c:	43da      	mvns	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	23a0      	movs	r3, #160	; 0xa0
 8002118:	05db      	lsls	r3, r3, #23
 800211a:	429a      	cmp	r2, r3
 800211c:	d01f      	beq.n	800215e <HAL_GPIO_Init+0x1f6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4a      	ldr	r2, [pc, #296]	; (800224c <HAL_GPIO_Init+0x2e4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d019      	beq.n	800215a <HAL_GPIO_Init+0x1f2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a49      	ldr	r2, [pc, #292]	; (8002250 <HAL_GPIO_Init+0x2e8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0x1ee>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a48      	ldr	r2, [pc, #288]	; (8002254 <HAL_GPIO_Init+0x2ec>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00d      	beq.n	8002152 <HAL_GPIO_Init+0x1ea>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a47      	ldr	r2, [pc, #284]	; (8002258 <HAL_GPIO_Init+0x2f0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x1e6>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a46      	ldr	r2, [pc, #280]	; (800225c <HAL_GPIO_Init+0x2f4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_GPIO_Init+0x1e2>
 8002146:	2305      	movs	r3, #5
 8002148:	e00a      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 800214a:	2306      	movs	r3, #6
 800214c:	e008      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 800214e:	2304      	movs	r3, #4
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 8002152:	2303      	movs	r3, #3
 8002154:	e004      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 8002156:	2302      	movs	r3, #2
 8002158:	e002      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 800215e:	2300      	movs	r3, #0
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	2103      	movs	r1, #3
 8002164:	400a      	ands	r2, r1
 8002166:	0092      	lsls	r2, r2, #2
 8002168:	4093      	lsls	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002170:	4935      	ldr	r1, [pc, #212]	; (8002248 <HAL_GPIO_Init+0x2e0>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43da      	mvns	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	025b      	lsls	r3, r3, #9
 8002196:	4013      	ands	r3, r2
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43da      	mvns	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	029b      	lsls	r3, r3, #10
 80021c0:	4013      	ands	r3, r2
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43da      	mvns	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	035b      	lsls	r3, r3, #13
 80021ea:	4013      	ands	r3, r2
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43da      	mvns	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	039b      	lsls	r3, r3, #14
 8002214:	4013      	ands	r3, r2
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	40da      	lsrs	r2, r3
 8002234:	1e13      	subs	r3, r2, #0
 8002236:	d000      	beq.n	800223a <HAL_GPIO_Init+0x2d2>
 8002238:	e6a2      	b.n	8001f80 <HAL_GPIO_Init+0x18>
  }
}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	46bd      	mov	sp, r7
 800223e:	b006      	add	sp, #24
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	50000400 	.word	0x50000400
 8002250:	50000800 	.word	0x50000800
 8002254:	50000c00 	.word	0x50000c00
 8002258:	50001000 	.word	0x50001000
 800225c:	50001c00 	.word	0x50001c00
 8002260:	40010400 	.word	0x40010400

08002264 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	0008      	movs	r0, r1
 800226e:	0011      	movs	r1, r2
 8002270:	1cbb      	adds	r3, r7, #2
 8002272:	1c02      	adds	r2, r0, #0
 8002274:	801a      	strh	r2, [r3, #0]
 8002276:	1c7b      	adds	r3, r7, #1
 8002278:	1c0a      	adds	r2, r1, #0
 800227a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800227c:	1c7b      	adds	r3, r7, #1
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002284:	1cbb      	adds	r3, r7, #2
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800228e:	1cbb      	adds	r3, r7, #2
 8002290:	881a      	ldrh	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	46bd      	mov	sp, r7
 800229a:	b002      	add	sp, #8
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	0002      	movs	r2, r0
 80022a8:	1dbb      	adds	r3, r7, #6
 80022aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	1dba      	adds	r2, r7, #6
 80022b2:	8812      	ldrh	r2, [r2, #0]
 80022b4:	4013      	ands	r3, r2
 80022b6:	d008      	beq.n	80022ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022ba:	1dba      	adds	r2, r7, #6
 80022bc:	8812      	ldrh	r2, [r2, #0]
 80022be:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f008 f875 	bl	800a3b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	40010400 	.word	0x40010400

080022d8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e036      	b.n	8002358 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_IWDG_Init+0x88>)
 80022f0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_IWDG_Init+0x8c>)
 80022f8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6852      	ldr	r2, [r2, #4]
 8002302:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6892      	ldr	r2, [r2, #8]
 800230c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800230e:	f7ff fa81 	bl	8001814 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8002316:	e008      	b.n	800232a <HAL_IWDG_Init+0x52>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002318:	f7ff fa7c 	bl	8001814 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b30      	cmp	r3, #48	; 0x30
 8002324:	d901      	bls.n	800232a <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e016      	b.n	8002358 <HAL_IWDG_Init+0x80>
  while(hiwdg->Instance->SR != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f1      	bne.n	8002318 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	429a      	cmp	r2, r3
 8002340:	d005      	beq.n	800234e <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68d2      	ldr	r2, [r2, #12]
 800234a:	611a      	str	r2, [r3, #16]
 800234c:	e003      	b.n	8002356 <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <HAL_IWDG_Init+0x90>)
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}
 8002360:	0000cccc 	.word	0x0000cccc
 8002364:	00005555 	.word	0x00005555
 8002368:	0000aaaa 	.word	0x0000aaaa

0800236c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a03      	ldr	r2, [pc, #12]	; (8002388 <HAL_IWDG_Refresh+0x1c>)
 800237a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	0000aaaa 	.word	0x0000aaaa

0800238c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002396:	2180      	movs	r1, #128	; 0x80
 8002398:	0049      	lsls	r1, r1, #1
 800239a:	430a      	orrs	r2, r1
 800239c:	601a      	str	r2, [r3, #0]
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40007000 	.word	0x40007000

080023a8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	000a      	movs	r2, r1
 80023b2:	1cfb      	adds	r3, r7, #3
 80023b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_PWR_EnterSTOPMode+0x60>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2203      	movs	r2, #3
 80023c4:	4393      	bics	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_PWR_EnterSTOPMode+0x60>)
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_PWR_EnterSTOPMode+0x64>)
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_PWR_EnterSTOPMode+0x64>)
 80023dc:	2104      	movs	r1, #4
 80023de:	430a      	orrs	r2, r1
 80023e0:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80023e2:	1cfb      	adds	r3, r7, #3
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80023ea:	bf30      	wfi
 80023ec:	e002      	b.n	80023f4 <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80023ee:	bf40      	sev
  __ASM volatile ("wfe");
 80023f0:	bf20      	wfe
 80023f2:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_PWR_EnterSTOPMode+0x64>)
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <HAL_PWR_EnterSTOPMode+0x64>)
 80023fa:	2104      	movs	r1, #4
 80023fc:	438a      	bics	r2, r1
 80023fe:	611a      	str	r2, [r3, #16]

}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40007000 	.word	0x40007000
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	00c9      	lsls	r1, r1, #3
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40007000 	.word	0x40007000

0800242c <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	0089      	lsls	r1, r1, #2
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40007000 	.word	0x40007000

08002448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	f000 fbbc 	bl	8002bd4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245c:	4bc8      	ldr	r3, [pc, #800]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	220c      	movs	r2, #12
 8002462:	4013      	ands	r3, r2
 8002464:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002466:	4bc6      	ldr	r3, [pc, #792]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	025b      	lsls	r3, r3, #9
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2201      	movs	r2, #1
 8002478:	4013      	ands	r3, r2
 800247a:	d100      	bne.n	800247e <HAL_RCC_OscConfig+0x36>
 800247c:	e07e      	b.n	800257c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d007      	beq.n	8002494 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d112      	bne.n	80024b0 <HAL_RCC_OscConfig+0x68>
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	025b      	lsls	r3, r3, #9
 8002490:	429a      	cmp	r2, r3
 8002492:	d10d      	bne.n	80024b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4bba      	ldr	r3, [pc, #744]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	029b      	lsls	r3, r3, #10
 800249c:	4013      	ands	r3, r2
 800249e:	d100      	bne.n	80024a2 <HAL_RCC_OscConfig+0x5a>
 80024a0:	e06b      	b.n	800257a <HAL_RCC_OscConfig+0x132>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d167      	bne.n	800257a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f000 fb92 	bl	8002bd4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	025b      	lsls	r3, r3, #9
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x84>
 80024bc:	4bb0      	ldr	r3, [pc, #704]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4baf      	ldr	r3, [pc, #700]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	0249      	lsls	r1, r1, #9
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e027      	b.n	800251c <HAL_RCC_OscConfig+0xd4>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	23a0      	movs	r3, #160	; 0xa0
 80024d2:	02db      	lsls	r3, r3, #11
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d10e      	bne.n	80024f6 <HAL_RCC_OscConfig+0xae>
 80024d8:	4ba9      	ldr	r3, [pc, #676]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4ba8      	ldr	r3, [pc, #672]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80024de:	2180      	movs	r1, #128	; 0x80
 80024e0:	02c9      	lsls	r1, r1, #11
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	4ba6      	ldr	r3, [pc, #664]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4ba5      	ldr	r3, [pc, #660]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	0249      	lsls	r1, r1, #9
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e012      	b.n	800251c <HAL_RCC_OscConfig+0xd4>
 80024f6:	4ba2      	ldr	r3, [pc, #648]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4ba1      	ldr	r3, [pc, #644]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80024fc:	49a1      	ldr	r1, [pc, #644]	; (8002784 <HAL_RCC_OscConfig+0x33c>)
 80024fe:	400a      	ands	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	4b9f      	ldr	r3, [pc, #636]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	025b      	lsls	r3, r3, #9
 800250a:	4013      	ands	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4b9b      	ldr	r3, [pc, #620]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b9a      	ldr	r3, [pc, #616]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002516:	499c      	ldr	r1, [pc, #624]	; (8002788 <HAL_RCC_OscConfig+0x340>)
 8002518:	400a      	ands	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff f976 	bl	8001814 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800252c:	e009      	b.n	8002542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252e:	f7ff f971 	bl	8001814 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d902      	bls.n	8002542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	f000 fb49 	bl	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002542:	4b8f      	ldr	r3, [pc, #572]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	029b      	lsls	r3, r3, #10
 800254a:	4013      	ands	r3, r2
 800254c:	d0ef      	beq.n	800252e <HAL_RCC_OscConfig+0xe6>
 800254e:	e015      	b.n	800257c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7ff f960 	bl	8001814 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255a:	f7ff f95b 	bl	8001814 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	; 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e333      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800256c:	4b84      	ldr	r3, [pc, #528]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	029b      	lsls	r3, r3, #10
 8002574:	4013      	ands	r3, r2
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x112>
 8002578:	e000      	b.n	800257c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2202      	movs	r2, #2
 8002582:	4013      	ands	r3, r2
 8002584:	d100      	bne.n	8002588 <HAL_RCC_OscConfig+0x140>
 8002586:	e098      	b.n	80026ba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	2220      	movs	r2, #32
 8002592:	4013      	ands	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002596:	4b7a      	ldr	r3, [pc, #488]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4b79      	ldr	r3, [pc, #484]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 800259c:	2120      	movs	r1, #32
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	2220      	movs	r2, #32
 80025a6:	4393      	bics	r3, r2
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d13d      	bne.n	8002632 <HAL_RCC_OscConfig+0x1ea>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d13a      	bne.n	8002632 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80025bc:	4b70      	ldr	r3, [pc, #448]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2204      	movs	r2, #4
 80025c2:	4013      	ands	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_RCC_OscConfig+0x188>
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e301      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b6b      	ldr	r3, [pc, #428]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a6d      	ldr	r2, [pc, #436]	; (800278c <HAL_RCC_OscConfig+0x344>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	021a      	lsls	r2, r3, #8
 80025e0:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025e6:	4b66      	ldr	r3, [pc, #408]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2209      	movs	r2, #9
 80025ec:	4393      	bics	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025f8:	f000 fc20 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 80025fc:	0001      	movs	r1, r0
 80025fe:	4b60      	ldr	r3, [pc, #384]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	220f      	movs	r2, #15
 8002606:	4013      	ands	r3, r2
 8002608:	4a61      	ldr	r2, [pc, #388]	; (8002790 <HAL_RCC_OscConfig+0x348>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	000a      	movs	r2, r1
 800260e:	40da      	lsrs	r2, r3
 8002610:	4b60      	ldr	r3, [pc, #384]	; (8002794 <HAL_RCC_OscConfig+0x34c>)
 8002612:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002614:	2513      	movs	r5, #19
 8002616:	197c      	adds	r4, r7, r5
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff f8c7 	bl	80017ac <HAL_InitTick>
 800261e:	0003      	movs	r3, r0
 8002620:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002622:	197b      	adds	r3, r7, r5
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d047      	beq.n	80026ba <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800262a:	2313      	movs	r3, #19
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	e2d0      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d027      	beq.n	8002688 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002638:	4b51      	ldr	r3, [pc, #324]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2209      	movs	r2, #9
 800263e:	4393      	bics	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7ff f8e3 	bl	8001814 <HAL_GetTick>
 800264e:	0003      	movs	r3, r0
 8002650:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002654:	f7ff f8de 	bl	8001814 <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e2b6      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2204      	movs	r2, #4
 800266c:	4013      	ands	r3, r2
 800266e:	d0f1      	beq.n	8002654 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b43      	ldr	r3, [pc, #268]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a45      	ldr	r2, [pc, #276]	; (800278c <HAL_RCC_OscConfig+0x344>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	021a      	lsls	r2, r3, #8
 8002680:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	e018      	b.n	80026ba <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002688:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 800268e:	2101      	movs	r1, #1
 8002690:	438a      	bics	r2, r1
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f8be 	bl	8001814 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269e:	f7ff f8b9 	bl	8001814 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e291      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026b0:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2204      	movs	r2, #4
 80026b6:	4013      	ands	r3, r2
 80026b8:	d1f1      	bne.n	800269e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2210      	movs	r2, #16
 80026c0:	4013      	ands	r3, r2
 80026c2:	d100      	bne.n	80026c6 <HAL_RCC_OscConfig+0x27e>
 80026c4:	e09f      	b.n	8002806 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d13f      	bne.n	800274c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_OscConfig+0x29c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e277      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a2b      	ldr	r2, [pc, #172]	; (8002798 <HAL_RCC_OscConfig+0x350>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	0a19      	lsrs	r1, r3, #8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	061a      	lsls	r2, r3, #24
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002708:	430a      	orrs	r2, r1
 800270a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	0b5b      	lsrs	r3, r3, #13
 8002712:	3301      	adds	r3, #1
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	0212      	lsls	r2, r2, #8
 8002718:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	210f      	movs	r1, #15
 8002722:	400b      	ands	r3, r1
 8002724:	491a      	ldr	r1, [pc, #104]	; (8002790 <HAL_RCC_OscConfig+0x348>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <HAL_RCC_OscConfig+0x34c>)
 800272c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800272e:	2513      	movs	r5, #19
 8002730:	197c      	adds	r4, r7, r5
 8002732:	2000      	movs	r0, #0
 8002734:	f7ff f83a 	bl	80017ac <HAL_InitTick>
 8002738:	0003      	movs	r3, r0
 800273a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800273c:	197b      	adds	r3, r7, r5
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d060      	beq.n	8002806 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8002744:	2313      	movs	r3, #19
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	e243      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03e      	beq.n	80027d2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_OscConfig+0x338>)
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	0049      	lsls	r1, r1, #1
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff f857 	bl	8001814 <HAL_GetTick>
 8002766:	0003      	movs	r3, r0
 8002768:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800276a:	e017      	b.n	800279c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800276c:	f7ff f852 	bl	8001814 <HAL_GetTick>
 8002770:	0002      	movs	r2, r0
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d910      	bls.n	800279c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e22a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	40021000 	.word	0x40021000
 8002784:	fffeffff 	.word	0xfffeffff
 8002788:	fffbffff 	.word	0xfffbffff
 800278c:	ffffe0ff 	.word	0xffffe0ff
 8002790:	0800cac0 	.word	0x0800cac0
 8002794:	20000000 	.word	0x20000000
 8002798:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800279c:	4bc6      	ldr	r3, [pc, #792]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d0e1      	beq.n	800276c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a8:	4bc3      	ldr	r3, [pc, #780]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4ac3      	ldr	r2, [pc, #780]	; (8002abc <HAL_RCC_OscConfig+0x674>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b6:	4bc0      	ldr	r3, [pc, #768]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027bc:	4bbe      	ldr	r3, [pc, #760]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	0a19      	lsrs	r1, r3, #8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	061a      	lsls	r2, r3, #24
 80027ca:	4bbb      	ldr	r3, [pc, #748]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	e019      	b.n	8002806 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027d2:	4bb9      	ldr	r3, [pc, #740]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4bb8      	ldr	r3, [pc, #736]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80027d8:	49b9      	ldr	r1, [pc, #740]	; (8002ac0 <HAL_RCC_OscConfig+0x678>)
 80027da:	400a      	ands	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7ff f819 	bl	8001814 <HAL_GetTick>
 80027e2:	0003      	movs	r3, r0
 80027e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027e8:	f7ff f814 	bl	8001814 <HAL_GetTick>
 80027ec:	0002      	movs	r2, r0
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1ec      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027fa:	4baf      	ldr	r3, [pc, #700]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4013      	ands	r3, r2
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2208      	movs	r2, #8
 800280c:	4013      	ands	r3, r2
 800280e:	d036      	beq.n	800287e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d019      	beq.n	800284c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002818:	4ba7      	ldr	r3, [pc, #668]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 800281a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800281c:	4ba6      	ldr	r3, [pc, #664]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 800281e:	2101      	movs	r1, #1
 8002820:	430a      	orrs	r2, r1
 8002822:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002824:	f7fe fff6 	bl	8001814 <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282e:	f7fe fff1 	bl	8001814 <HAL_GetTick>
 8002832:	0002      	movs	r2, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e1c9      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002840:	4b9d      	ldr	r3, [pc, #628]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002844:	2202      	movs	r2, #2
 8002846:	4013      	ands	r3, r2
 8002848:	d0f1      	beq.n	800282e <HAL_RCC_OscConfig+0x3e6>
 800284a:	e018      	b.n	800287e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284c:	4b9a      	ldr	r3, [pc, #616]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 800284e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002850:	4b99      	ldr	r3, [pc, #612]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002852:	2101      	movs	r1, #1
 8002854:	438a      	bics	r2, r1
 8002856:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7fe ffdc 	bl	8001814 <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002862:	f7fe ffd7 	bl	8001814 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1af      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002874:	4b90      	ldr	r3, [pc, #576]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002878:	2202      	movs	r2, #2
 800287a:	4013      	ands	r3, r2
 800287c:	d1f1      	bne.n	8002862 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2204      	movs	r2, #4
 8002884:	4013      	ands	r3, r2
 8002886:	d100      	bne.n	800288a <HAL_RCC_OscConfig+0x442>
 8002888:	e0af      	b.n	80029ea <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288a:	2323      	movs	r3, #35	; 0x23
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002892:	4b89      	ldr	r3, [pc, #548]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	055b      	lsls	r3, r3, #21
 800289a:	4013      	ands	r3, r2
 800289c:	d10a      	bne.n	80028b4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	4b86      	ldr	r3, [pc, #536]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80028a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	0549      	lsls	r1, r1, #21
 80028a8:	430a      	orrs	r2, r1
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80028ac:	2323      	movs	r3, #35	; 0x23
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4b83      	ldr	r3, [pc, #524]	; (8002ac4 <HAL_RCC_OscConfig+0x67c>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d11a      	bne.n	80028f6 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c0:	4b80      	ldr	r3, [pc, #512]	; (8002ac4 <HAL_RCC_OscConfig+0x67c>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b7f      	ldr	r3, [pc, #508]	; (8002ac4 <HAL_RCC_OscConfig+0x67c>)
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	0049      	lsls	r1, r1, #1
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ce:	f7fe ffa1 	bl	8001814 <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d8:	f7fe ff9c 	bl	8001814 <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e174      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCC_OscConfig+0x67c>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	429a      	cmp	r2, r3
 8002900:	d107      	bne.n	8002912 <HAL_RCC_OscConfig+0x4ca>
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002906:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	0049      	lsls	r1, r1, #1
 800290c:	430a      	orrs	r2, r1
 800290e:	651a      	str	r2, [r3, #80]	; 0x50
 8002910:	e031      	b.n	8002976 <HAL_RCC_OscConfig+0x52e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x4ec>
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 800291c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800291e:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002920:	4967      	ldr	r1, [pc, #412]	; (8002ac0 <HAL_RCC_OscConfig+0x678>)
 8002922:	400a      	ands	r2, r1
 8002924:	651a      	str	r2, [r3, #80]	; 0x50
 8002926:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800292a:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 800292c:	4966      	ldr	r1, [pc, #408]	; (8002ac8 <HAL_RCC_OscConfig+0x680>)
 800292e:	400a      	ands	r2, r1
 8002930:	651a      	str	r2, [r3, #80]	; 0x50
 8002932:	e020      	b.n	8002976 <HAL_RCC_OscConfig+0x52e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	23a0      	movs	r3, #160	; 0xa0
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	429a      	cmp	r2, r3
 800293e:	d10e      	bne.n	800295e <HAL_RCC_OscConfig+0x516>
 8002940:	4b5d      	ldr	r3, [pc, #372]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002944:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002946:	2180      	movs	r1, #128	; 0x80
 8002948:	00c9      	lsls	r1, r1, #3
 800294a:	430a      	orrs	r2, r1
 800294c:	651a      	str	r2, [r3, #80]	; 0x50
 800294e:	4b5a      	ldr	r3, [pc, #360]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002952:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	0049      	lsls	r1, r1, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	651a      	str	r2, [r3, #80]	; 0x50
 800295c:	e00b      	b.n	8002976 <HAL_RCC_OscConfig+0x52e>
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002962:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002964:	4956      	ldr	r1, [pc, #344]	; (8002ac0 <HAL_RCC_OscConfig+0x678>)
 8002966:	400a      	ands	r2, r1
 8002968:	651a      	str	r2, [r3, #80]	; 0x50
 800296a:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 800296c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800296e:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002970:	4955      	ldr	r1, [pc, #340]	; (8002ac8 <HAL_RCC_OscConfig+0x680>)
 8002972:	400a      	ands	r2, r1
 8002974:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d015      	beq.n	80029aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe ff49 	bl	8001814 <HAL_GetTick>
 8002982:	0003      	movs	r3, r0
 8002984:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002986:	e009      	b.n	800299c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe ff44 	bl	8001814 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	4a4e      	ldr	r2, [pc, #312]	; (8002acc <HAL_RCC_OscConfig+0x684>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e11b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 800299e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4013      	ands	r3, r2
 80029a6:	d0ef      	beq.n	8002988 <HAL_RCC_OscConfig+0x540>
 80029a8:	e014      	b.n	80029d4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7fe ff33 	bl	8001814 <HAL_GetTick>
 80029ae:	0003      	movs	r3, r0
 80029b0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029b2:	e009      	b.n	80029c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7fe ff2e 	bl	8001814 <HAL_GetTick>
 80029b8:	0002      	movs	r2, r0
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	4a43      	ldr	r2, [pc, #268]	; (8002acc <HAL_RCC_OscConfig+0x684>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e105      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029c8:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80029ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4013      	ands	r3, r2
 80029d2:	d1ef      	bne.n	80029b4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029d4:	2323      	movs	r3, #35	; 0x23
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80029e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e2:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80029e4:	493a      	ldr	r1, [pc, #232]	; (8002ad0 <HAL_RCC_OscConfig+0x688>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2220      	movs	r2, #32
 80029f0:	4013      	ands	r3, r2
 80029f2:	d049      	beq.n	8002a88 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d026      	beq.n	8002a4a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80029fc:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	430a      	orrs	r2, r1
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34
 8002a14:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_RCC_OscConfig+0x68c>)
 8002a16:	6a1a      	ldr	r2, [r3, #32]
 8002a18:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_RCC_OscConfig+0x68c>)
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	0189      	lsls	r1, r1, #6
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7fe fef7 	bl	8001814 <HAL_GetTick>
 8002a26:	0003      	movs	r3, r0
 8002a28:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a2c:	f7fe fef2 	bl	8001814 <HAL_GetTick>
 8002a30:	0002      	movs	r2, r0
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0ca      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	d0f1      	beq.n	8002a2c <HAL_RCC_OscConfig+0x5e4>
 8002a48:	e01e      	b.n	8002a88 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	438a      	bics	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <HAL_RCC_OscConfig+0x68c>)
 8002a58:	6a1a      	ldr	r2, [r3, #32]
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <HAL_RCC_OscConfig+0x68c>)
 8002a5c:	491e      	ldr	r1, [pc, #120]	; (8002ad8 <HAL_RCC_OscConfig+0x690>)
 8002a5e:	400a      	ands	r2, r1
 8002a60:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe fed7 	bl	8001814 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a6c:	f7fe fed2 	bl	8001814 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0aa      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2202      	movs	r2, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	d1f1      	bne.n	8002a6c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <HAL_RCC_OscConfig+0x64a>
 8002a90:	e09f      	b.n	8002bd2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	d100      	bne.n	8002a9a <HAL_RCC_OscConfig+0x652>
 8002a98:	e078      	b.n	8002b8c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d159      	bne.n	8002b56 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_RCC_OscConfig+0x670>)
 8002aa8:	490c      	ldr	r1, [pc, #48]	; (8002adc <HAL_RCC_OscConfig+0x694>)
 8002aaa:	400a      	ands	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe feb1 	bl	8001814 <HAL_GetTick>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x6aa>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	ffff1fff 	.word	0xffff1fff
 8002ac0:	fffffeff 	.word	0xfffffeff
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	fffffbff 	.word	0xfffffbff
 8002acc:	00001388 	.word	0x00001388
 8002ad0:	efffffff 	.word	0xefffffff
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	ffffdfff 	.word	0xffffdfff
 8002adc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fe98 	bl	8001814 <HAL_GetTick>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e070      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002af2:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	049b      	lsls	r3, r3, #18
 8002afa:	4013      	ands	r3, r2
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afe:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4a37      	ldr	r2, [pc, #220]	; (8002be0 <HAL_RCC_OscConfig+0x798>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	431a      	orrs	r2, r3
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0449      	lsls	r1, r1, #17
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fe72 	bl	8001814 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fe6d 	bl	8001814 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e045      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	049b      	lsls	r3, r3, #18
 8002b50:	4013      	ands	r3, r2
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x6ee>
 8002b54:	e03d      	b.n	8002bd2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002b5c:	4921      	ldr	r1, [pc, #132]	; (8002be4 <HAL_RCC_OscConfig+0x79c>)
 8002b5e:	400a      	ands	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe fe57 	bl	8001814 <HAL_GetTick>
 8002b66:	0003      	movs	r3, r0
 8002b68:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fe52 	bl	8001814 <HAL_GetTick>
 8002b70:	0002      	movs	r2, r0
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e02a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	049b      	lsls	r3, r3, #18
 8002b86:	4013      	ands	r3, r2
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x724>
 8002b8a:	e022      	b.n	8002bd2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e01d      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x794>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	025b      	lsls	r3, r3, #9
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10f      	bne.n	8002bce <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	23f0      	movs	r3, #240	; 0xf0
 8002bb2:	039b      	lsls	r3, r3, #14
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b00a      	add	sp, #40	; 0x28
 8002bda:	bdb0      	pop	{r4, r5, r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	ff02ffff 	.word	0xff02ffff
 8002be4:	feffffff 	.word	0xfeffffff

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e10d      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_ClockConfig+0x238>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d911      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b85      	ldr	r3, [pc, #532]	; (8002e20 <HAL_RCC_ClockConfig+0x238>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4393      	bics	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	4b82      	ldr	r3, [pc, #520]	; (8002e20 <HAL_RCC_ClockConfig+0x238>)
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1c:	4b80      	ldr	r3, [pc, #512]	; (8002e20 <HAL_RCC_ClockConfig+0x238>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0f4      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	22f0      	movs	r2, #240	; 0xf0
 8002c3e:	4393      	bics	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	4b77      	ldr	r3, [pc, #476]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2201      	movs	r2, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	d100      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x70>
 8002c56:	e089      	b.n	8002d6c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c60:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	029b      	lsls	r3, r3, #10
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d120      	bne.n	8002cae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0d3      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c78:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	049b      	lsls	r3, r3, #18
 8002c80:	4013      	ands	r3, r2
 8002c82:	d114      	bne.n	8002cae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0c7      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c90:	4b64      	ldr	r3, [pc, #400]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2204      	movs	r2, #4
 8002c96:	4013      	ands	r3, r2
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0bc      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c9e:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0b4      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cae:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc2:	f7fe fda7 	bl	8001814 <HAL_GetTick>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d111      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd4:	f7fe fd9e 	bl	8001814 <HAL_GetTick>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e097      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce8:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	220c      	movs	r2, #12
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d1ef      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xec>
 8002cf4:	e03a      	b.n	8002d6c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d111      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfe:	e009      	b.n	8002d14 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7fe fd88 	bl	8001814 <HAL_GetTick>
 8002d04:	0002      	movs	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	4a47      	ldr	r2, [pc, #284]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e081      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	220c      	movs	r2, #12
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d1ef      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x118>
 8002d20:	e024      	b.n	8002d6c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d11b      	bne.n	8002d62 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d2a:	e009      	b.n	8002d40 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fe fd72 	bl	8001814 <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	4a3c      	ldr	r2, [pc, #240]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e06b      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d40:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	220c      	movs	r2, #12
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d1ef      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x144>
 8002d4c:	e00e      	b.n	8002d6c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4e:	f7fe fd61 	bl	8001814 <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e05a      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d62:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	220c      	movs	r2, #12
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <HAL_RCC_ClockConfig+0x238>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2201      	movs	r2, #1
 8002d72:	4013      	ands	r3, r2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d211      	bcs.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_RCC_ClockConfig+0x238>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4393      	bics	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <HAL_RCC_ClockConfig+0x238>)
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_ClockConfig+0x238>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2201      	movs	r2, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d001      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e03c      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2204      	movs	r2, #4
 8002da4:	4013      	ands	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_RCC_ClockConfig+0x248>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00da      	lsls	r2, r3, #3
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ddc:	f000 f82e 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002de0:	0001      	movs	r1, r0
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_RCC_ClockConfig+0x23c>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	220f      	movs	r2, #15
 8002dea:	4013      	ands	r3, r2
 8002dec:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <HAL_RCC_ClockConfig+0x24c>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	000a      	movs	r2, r1
 8002df2:	40da      	lsrs	r2, r3
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <HAL_RCC_ClockConfig+0x250>)
 8002df6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002df8:	250b      	movs	r5, #11
 8002dfa:	197c      	adds	r4, r7, r5
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fe fcd5 	bl	80017ac <HAL_InitTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002e06:	197b      	adds	r3, r7, r5
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002e0e:	230b      	movs	r3, #11
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	0018      	movs	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b004      	add	sp, #16
 8002e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e20:	40022000 	.word	0x40022000
 8002e24:	40021000 	.word	0x40021000
 8002e28:	00001388 	.word	0x00001388
 8002e2c:	fffff8ff 	.word	0xfffff8ff
 8002e30:	ffffc7ff 	.word	0xffffc7ff
 8002e34:	0800cac0 	.word	0x0800cac0
 8002e38:	20000000 	.word	0x20000000

08002e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002e42:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	220c      	movs	r2, #12
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d00e      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x34>
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d00f      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d157      	bne.n	8002f0a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e5a:	4b35      	ldr	r3, [pc, #212]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2210      	movs	r2, #16
 8002e60:	4013      	ands	r3, r2
 8002e62:	d002      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002e64:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e66:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002e68:	e05d      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002e6a:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e6c:	613b      	str	r3, [r7, #16]
      break;
 8002e6e:	e05a      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e70:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x100>)
 8002e72:	613b      	str	r3, [r7, #16]
      break;
 8002e74:	e057      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	0c9b      	lsrs	r3, r3, #18
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e80:	5cd3      	ldrb	r3, [r2, r3]
 8002e82:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	0d9b      	lsrs	r3, r3, #22
 8002e88:	2203      	movs	r2, #3
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	025b      	lsls	r3, r3, #9
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d00f      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	000a      	movs	r2, r1
 8002ea0:	0152      	lsls	r2, r2, #5
 8002ea2:	1a52      	subs	r2, r2, r1
 8002ea4:	0193      	lsls	r3, r2, #6
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	185b      	adds	r3, r3, r1
 8002eac:	025b      	lsls	r3, r3, #9
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7fd f931 	bl	8000118 <__udivsi3>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e023      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	000a      	movs	r2, r1
 8002eca:	0152      	lsls	r2, r2, #5
 8002ecc:	1a52      	subs	r2, r2, r1
 8002ece:	0193      	lsls	r3, r2, #6
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	185b      	adds	r3, r3, r1
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7fd f91c 	bl	8000118 <__udivsi3>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	e00e      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	000a      	movs	r2, r1
 8002eea:	0152      	lsls	r2, r2, #5
 8002eec:	1a52      	subs	r2, r2, r1
 8002eee:	0193      	lsls	r3, r2, #6
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	185b      	adds	r3, r3, r1
 8002ef6:	029b      	lsls	r3, r3, #10
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7fd f90c 	bl	8000118 <__udivsi3>
 8002f00:	0003      	movs	r3, r0
 8002f02:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	613b      	str	r3, [r7, #16]
      break;
 8002f08:	e00d      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	0b5b      	lsrs	r3, r3, #13
 8002f10:	2207      	movs	r2, #7
 8002f12:	4013      	ands	r3, r2
 8002f14:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	0212      	lsls	r2, r2, #8
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
      break;
 8002f24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f26:	693b      	ldr	r3, [r7, #16]
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b006      	add	sp, #24
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	003d0900 	.word	0x003d0900
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	007a1200 	.word	0x007a1200
 8002f40:	0800cad8 	.word	0x0800cad8

08002f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f48:	4b02      	ldr	r3, [pc, #8]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	20000000 	.word	0x20000000

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f5c:	f7ff fff2 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f60:	0001      	movs	r1, r0
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	2207      	movs	r2, #7
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
 8002f70:	40d9      	lsrs	r1, r3
 8002f72:	000b      	movs	r3, r1
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	0800cad0 	.word	0x0800cad0

08002f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f88:	f7ff ffdc 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f8c:	0001      	movs	r1, r0
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	0adb      	lsrs	r3, r3, #11
 8002f94:	2207      	movs	r2, #7
 8002f96:	4013      	ands	r3, r2
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	40d9      	lsrs	r1, r3
 8002f9e:	000b      	movs	r3, r1
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	0800cad0 	.word	0x0800cad0

08002fb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d100      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002fc2:	e0c7      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002fc4:	2317      	movs	r3, #23
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fcc:	4b99      	ldr	r3, [pc, #612]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	055b      	lsls	r3, r3, #21
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d10a      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd8:	4b96      	ldr	r3, [pc, #600]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fdc:	4b95      	ldr	r3, [pc, #596]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	0549      	lsls	r1, r1, #21
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002fe6:	2317      	movs	r3, #23
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b92      	ldr	r3, [pc, #584]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d11a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b8f      	ldr	r3, [pc, #572]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4b8e      	ldr	r3, [pc, #568]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	0049      	lsls	r1, r1, #1
 8003004:	430a      	orrs	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003008:	f7fe fc04 	bl	8001814 <HAL_GetTick>
 800300c:	0003      	movs	r3, r0
 800300e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe fbff 	bl	8001814 <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e102      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4013      	ands	r3, r2
 800302e:	d0f0      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003030:	4b80      	ldr	r3, [pc, #512]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	23c0      	movs	r3, #192	; 0xc0
 8003036:	039b      	lsls	r3, r3, #14
 8003038:	4013      	ands	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	23c0      	movs	r3, #192	; 0xc0
 8003042:	039b      	lsls	r3, r3, #14
 8003044:	4013      	ands	r3, r2
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d013      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	23c0      	movs	r3, #192	; 0xc0
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	401a      	ands	r2, r3
 8003056:	23c0      	movs	r3, #192	; 0xc0
 8003058:	029b      	lsls	r3, r3, #10
 800305a:	429a      	cmp	r2, r3
 800305c:	d10a      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800305e:	4b75      	ldr	r3, [pc, #468]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	401a      	ands	r2, r3
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	029b      	lsls	r3, r3, #10
 800306c:	429a      	cmp	r2, r3
 800306e:	d101      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0da      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003074:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003078:	23c0      	movs	r3, #192	; 0xc0
 800307a:	029b      	lsls	r3, r3, #10
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03b      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	23c0      	movs	r3, #192	; 0xc0
 800308c:	029b      	lsls	r3, r3, #10
 800308e:	4013      	ands	r3, r2
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	429a      	cmp	r2, r3
 8003094:	d033      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2220      	movs	r2, #32
 800309c:	4013      	ands	r3, r2
 800309e:	d02e      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80030a0:	4b64      	ldr	r3, [pc, #400]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	4a65      	ldr	r2, [pc, #404]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030aa:	4b62      	ldr	r3, [pc, #392]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030ae:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	0309      	lsls	r1, r1, #12
 80030b4:	430a      	orrs	r2, r1
 80030b6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030b8:	4b5e      	ldr	r3, [pc, #376]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030bc:	4b5d      	ldr	r3, [pc, #372]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030be:	4960      	ldr	r1, [pc, #384]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80030c0:	400a      	ands	r2, r1
 80030c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80030c4:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4013      	ands	r3, r2
 80030d2:	d014      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe fb9e 	bl	8001814 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030dc:	e009      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe fb99 	bl	8001814 <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	4a56      	ldr	r2, [pc, #344]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e09b      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030f2:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80030f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4013      	ands	r3, r2
 80030fc:	d0ef      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	23c0      	movs	r3, #192	; 0xc0
 8003104:	029b      	lsls	r3, r3, #10
 8003106:	401a      	ands	r2, r3
 8003108:	23c0      	movs	r3, #192	; 0xc0
 800310a:	029b      	lsls	r3, r3, #10
 800310c:	429a      	cmp	r2, r3
 800310e:	d10c      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003110:	4b48      	ldr	r3, [pc, #288]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a4c      	ldr	r2, [pc, #304]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	23c0      	movs	r3, #192	; 0xc0
 8003120:	039b      	lsls	r3, r3, #14
 8003122:	401a      	ands	r2, r3
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	4b42      	ldr	r3, [pc, #264]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800312c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	23c0      	movs	r3, #192	; 0xc0
 8003134:	029b      	lsls	r3, r3, #10
 8003136:	401a      	ands	r2, r3
 8003138:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800313a:	430a      	orrs	r2, r1
 800313c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800313e:	2317      	movs	r3, #23
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003148:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800314a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314c:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800314e:	493f      	ldr	r1, [pc, #252]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003150:	400a      	ands	r2, r1
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2201      	movs	r2, #1
 800315a:	4013      	ands	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800315e:	4b35      	ldr	r3, [pc, #212]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	2203      	movs	r2, #3
 8003164:	4393      	bics	r3, r2
 8003166:	0019      	movs	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4b31      	ldr	r3, [pc, #196]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800316e:	430a      	orrs	r2, r1
 8003170:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2202      	movs	r2, #2
 8003178:	4013      	ands	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800317c:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800317e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003180:	220c      	movs	r2, #12
 8003182:	4393      	bics	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800318c:	430a      	orrs	r2, r1
 800318e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2204      	movs	r2, #4
 8003196:	4013      	ands	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	4b22      	ldr	r3, [pc, #136]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2208      	movs	r2, #8
 80031b4:	4013      	ands	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80031ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031bc:	4a25      	ldr	r2, [pc, #148]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80031c8:	430a      	orrs	r2, r1
 80031ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d8:	4b16      	ldr	r3, [pc, #88]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	4a17      	ldr	r2, [pc, #92]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80031e8:	430a      	orrs	r2, r1
 80031ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2240      	movs	r2, #64	; 0x40
 80031f2:	4013      	ands	r3, r2
 80031f4:	d009      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f6:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	0019      	movs	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003206:	430a      	orrs	r2, r1
 8003208:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2280      	movs	r2, #128	; 0x80
 8003210:	4013      	ands	r3, r2
 8003212:	d009      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003218:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800321a:	4013      	ands	r3, r2
 800321c:	0019      	movs	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003224:	430a      	orrs	r2, r1
 8003226:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b006      	add	sp, #24
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
 800323c:	fffcffff 	.word	0xfffcffff
 8003240:	fff7ffff 	.word	0xfff7ffff
 8003244:	00001388 	.word	0x00001388
 8003248:	ffcfffff 	.word	0xffcfffff
 800324c:	efffffff 	.word	0xefffffff
 8003250:	fffff3ff 	.word	0xfffff3ff
 8003254:	ffffcfff 	.word	0xffffcfff
 8003258:	fbffffff 	.word	0xfbffffff
 800325c:	fff3ffff 	.word	0xfff3ffff

08003260 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e08e      	b.n	8003390 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2221      	movs	r2, #33	; 0x21
 8003276:	5c9b      	ldrb	r3, [r3, r2]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f7fd fedf 	bl	800104c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2221      	movs	r2, #33	; 0x21
 8003292:	2102      	movs	r1, #2
 8003294:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	22ca      	movs	r2, #202	; 0xca
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2253      	movs	r2, #83	; 0x53
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 fc54 	bl	8003b56 <RTC_EnterInitMode>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	22ff      	movs	r2, #255	; 0xff
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	2104      	movs	r1, #4
 80032c0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e064      	b.n	8003390 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4931      	ldr	r1, [pc, #196]	; (8003398 <HAL_RTC_Init+0x138>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6899      	ldr	r1, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68d2      	ldr	r2, [r2, #12]
 80032fc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6919      	ldr	r1, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	041a      	lsls	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	438a      	bics	r2, r1
 8003320:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2103      	movs	r1, #3
 800332e:	438a      	bics	r2, r1
 8003330:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2220      	movs	r2, #32
 8003352:	4013      	ands	r3, r2
 8003354:	d113      	bne.n	800337e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fbd5 	bl	8003b08 <HAL_RTC_WaitForSynchro>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d00d      	beq.n	800337e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	22ff      	movs	r2, #255	; 0xff
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2221      	movs	r2, #33	; 0x21
 800336e:	2104      	movs	r1, #4
 8003370:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	2100      	movs	r1, #0
 8003378:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e008      	b.n	8003390 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	22ff      	movs	r2, #255	; 0xff
 8003384:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2221      	movs	r2, #33	; 0x21
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800338e:	2300      	movs	r3, #0
  }
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}
 8003398:	ff8fffbf 	.word	0xff8fffbf

0800339c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	5c9b      	ldrb	r3, [r3, r2]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_RTC_SetTime+0x1a>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e0ad      	b.n	8003512 <HAL_RTC_SetTime+0x176>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	2101      	movs	r1, #1
 80033bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2221      	movs	r2, #33	; 0x21
 80033c2:	2102      	movs	r1, #2
 80033c4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d125      	bne.n	8003418 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2240      	movs	r2, #64	; 0x40
 80033d4:	4013      	ands	r3, r2
 80033d6:	d102      	bne.n	80033de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2200      	movs	r2, #0
 80033dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	0018      	movs	r0, r3
 80033e4:	f000 fbe1 	bl	8003baa <RTC_ByteToBcd2>
 80033e8:	0003      	movs	r3, r0
 80033ea:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 fbda 	bl	8003baa <RTC_ByteToBcd2>
 80033f6:	0003      	movs	r3, r0
 80033f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033fa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	789b      	ldrb	r3, [r3, #2]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fbd2 	bl	8003baa <RTC_ByteToBcd2>
 8003406:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003408:	0022      	movs	r2, r4
 800340a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	78db      	ldrb	r3, [r3, #3]
 8003410:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e017      	b.n	8003448 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	4013      	ands	r3, r2
 8003422:	d102      	bne.n	800342a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2200      	movs	r2, #0
 8003428:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003436:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800343c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	78db      	ldrb	r3, [r3, #3]
 8003442:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	22ca      	movs	r2, #202	; 0xca
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2253      	movs	r2, #83	; 0x53
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	0018      	movs	r0, r3
 800345c:	f000 fb7b 	bl	8003b56 <RTC_EnterInitMode>
 8003460:	1e03      	subs	r3, r0, #0
 8003462:	d00d      	beq.n	8003480 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	22ff      	movs	r2, #255	; 0xff
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2221      	movs	r2, #33	; 0x21
 8003470:	2104      	movs	r1, #4
 8003472:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	2100      	movs	r1, #0
 800347a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e048      	b.n	8003512 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4925      	ldr	r1, [pc, #148]	; (800351c <HAL_RTC_SetTime+0x180>)
 8003488:	400a      	ands	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4922      	ldr	r1, [pc, #136]	; (8003520 <HAL_RTC_SetTime+0x184>)
 8003498:	400a      	ands	r2, r1
 800349a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6899      	ldr	r1, [r3, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2180      	movs	r1, #128	; 0x80
 80034c0:	438a      	bics	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2220      	movs	r2, #32
 80034cc:	4013      	ands	r3, r2
 80034ce:	d113      	bne.n	80034f8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 fb18 	bl	8003b08 <HAL_RTC_WaitForSynchro>
 80034d8:	1e03      	subs	r3, r0, #0
 80034da:	d00d      	beq.n	80034f8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	22ff      	movs	r2, #255	; 0xff
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	; 0x21
 80034e8:	2104      	movs	r1, #4
 80034ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	2100      	movs	r1, #0
 80034f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e00c      	b.n	8003512 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	22ff      	movs	r2, #255	; 0xff
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2221      	movs	r2, #33	; 0x21
 8003504:	2101      	movs	r1, #1
 8003506:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003510:	2300      	movs	r3, #0
  }
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b007      	add	sp, #28
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	007f7f7f 	.word	0x007f7f7f
 8003520:	fffbffff 	.word	0xfffbffff

08003524 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	045b      	lsls	r3, r3, #17
 8003542:	0c5a      	lsrs	r2, r3, #17
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a22      	ldr	r2, [pc, #136]	; (80035d8 <HAL_RTC_GetTime+0xb4>)
 8003550:	4013      	ands	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	b2db      	uxtb	r3, r3
 800355a:	223f      	movs	r2, #63	; 0x3f
 800355c:	4013      	ands	r3, r2
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	b2db      	uxtb	r3, r3
 800356a:	227f      	movs	r2, #127	; 0x7f
 800356c:	4013      	ands	r3, r2
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	227f      	movs	r2, #127	; 0x7f
 800357a:	4013      	ands	r3, r2
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2240      	movs	r2, #64	; 0x40
 800358a:	4013      	ands	r3, r2
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11a      	bne.n	80035ce <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	0018      	movs	r0, r3
 800359e:	f000 fb2d 	bl	8003bfc <RTC_Bcd2ToByte>
 80035a2:	0003      	movs	r3, r0
 80035a4:	001a      	movs	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 fb24 	bl	8003bfc <RTC_Bcd2ToByte>
 80035b4:	0003      	movs	r3, r0
 80035b6:	001a      	movs	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	789b      	ldrb	r3, [r3, #2]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 fb1b 	bl	8003bfc <RTC_Bcd2ToByte>
 80035c6:	0003      	movs	r3, r0
 80035c8:	001a      	movs	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b006      	add	sp, #24
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	007f7f7f 	.word	0x007f7f7f

080035dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	5c9b      	ldrb	r3, [r3, r2]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_RTC_SetDate+0x1a>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e099      	b.n	800372a <HAL_RTC_SetDate+0x14e>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2221      	movs	r2, #33	; 0x21
 8003602:	2102      	movs	r1, #2
 8003604:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10e      	bne.n	800362a <HAL_RTC_SetDate+0x4e>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	001a      	movs	r2, r3
 8003612:	2310      	movs	r3, #16
 8003614:	4013      	ands	r3, r2
 8003616:	d008      	beq.n	800362a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	785b      	ldrb	r3, [r3, #1]
 800361c:	2210      	movs	r2, #16
 800361e:	4393      	bics	r3, r2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	330a      	adds	r3, #10
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11c      	bne.n	800366a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	78db      	ldrb	r3, [r3, #3]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 fab8 	bl	8003baa <RTC_ByteToBcd2>
 800363a:	0003      	movs	r3, r0
 800363c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	785b      	ldrb	r3, [r3, #1]
 8003642:	0018      	movs	r0, r3
 8003644:	f000 fab1 	bl	8003baa <RTC_ByteToBcd2>
 8003648:	0003      	movs	r3, r0
 800364a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800364c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	789b      	ldrb	r3, [r3, #2]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 faa9 	bl	8003baa <RTC_ByteToBcd2>
 8003658:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800365a:	0022      	movs	r2, r4
 800365c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e00e      	b.n	8003688 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	78db      	ldrb	r3, [r3, #3]
 800366e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003676:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800367c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	22ca      	movs	r2, #202	; 0xca
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2253      	movs	r2, #83	; 0x53
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	0018      	movs	r0, r3
 800369c:	f000 fa5b 	bl	8003b56 <RTC_EnterInitMode>
 80036a0:	1e03      	subs	r3, r0, #0
 80036a2:	d00d      	beq.n	80036c0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2221      	movs	r2, #33	; 0x21
 80036b0:	2104      	movs	r1, #4
 80036b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e034      	b.n	800372a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	491b      	ldr	r1, [pc, #108]	; (8003734 <HAL_RTC_SetDate+0x158>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	438a      	bics	r2, r1
 80036da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2220      	movs	r2, #32
 80036e4:	4013      	ands	r3, r2
 80036e6:	d113      	bne.n	8003710 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f000 fa0c 	bl	8003b08 <HAL_RTC_WaitForSynchro>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d00d      	beq.n	8003710 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	22ff      	movs	r2, #255	; 0xff
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2221      	movs	r2, #33	; 0x21
 8003700:	2104      	movs	r1, #4
 8003702:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e00c      	b.n	800372a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2221      	movs	r2, #33	; 0x21
 800371c:	2101      	movs	r1, #1
 800371e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	2100      	movs	r1, #0
 8003726:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003728:	2300      	movs	r3, #0
  }
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b007      	add	sp, #28
 8003730:	bd90      	pop	{r4, r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	00ffff3f 	.word	0x00ffff3f

08003738 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <HAL_RTC_GetDate+0x98>)
 800374c:	4013      	ands	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	b2db      	uxtb	r3, r3
 8003760:	221f      	movs	r2, #31
 8003762:	4013      	ands	r3, r2
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	223f      	movs	r2, #63	; 0x3f
 8003770:	4013      	ands	r3, r2
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	0b5b      	lsrs	r3, r3, #13
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2207      	movs	r2, #7
 8003780:	4013      	ands	r3, r2
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d11a      	bne.n	80037c4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	78db      	ldrb	r3, [r3, #3]
 8003792:	0018      	movs	r0, r3
 8003794:	f000 fa32 	bl	8003bfc <RTC_Bcd2ToByte>
 8003798:	0003      	movs	r3, r0
 800379a:	001a      	movs	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	785b      	ldrb	r3, [r3, #1]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f000 fa29 	bl	8003bfc <RTC_Bcd2ToByte>
 80037aa:	0003      	movs	r3, r0
 80037ac:	001a      	movs	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	789b      	ldrb	r3, [r3, #2]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fa20 	bl	8003bfc <RTC_Bcd2ToByte>
 80037bc:	0003      	movs	r3, r0
 80037be:	001a      	movs	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b006      	add	sp, #24
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	00ffff3f 	.word	0x00ffff3f

080037d4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	5c9b      	ldrb	r3, [r3, r2]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_RTC_SetAlarm_IT+0x1a>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e130      	b.n	8003a50 <HAL_RTC_SetAlarm_IT+0x27c>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2221      	movs	r2, #33	; 0x21
 80037fa:	2102      	movs	r1, #2
 80037fc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d136      	bne.n	8003872 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	4013      	ands	r3, r2
 800380e:	d102      	bne.n	8003816 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	0018      	movs	r0, r3
 800381c:	f000 f9c5 	bl	8003baa <RTC_ByteToBcd2>
 8003820:	0003      	movs	r3, r0
 8003822:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	785b      	ldrb	r3, [r3, #1]
 8003828:	0018      	movs	r0, r3
 800382a:	f000 f9be 	bl	8003baa <RTC_ByteToBcd2>
 800382e:	0003      	movs	r3, r0
 8003830:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003832:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	789b      	ldrb	r3, [r3, #2]
 8003838:	0018      	movs	r0, r3
 800383a:	f000 f9b6 	bl	8003baa <RTC_ByteToBcd2>
 800383e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003840:	0022      	movs	r2, r4
 8003842:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	78db      	ldrb	r3, [r3, #3]
 8003848:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800384a:	431a      	orrs	r2, r3
 800384c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2220      	movs	r2, #32
 8003852:	5c9b      	ldrb	r3, [r3, r2]
 8003854:	0018      	movs	r0, r3
 8003856:	f000 f9a8 	bl	8003baa <RTC_ByteToBcd2>
 800385a:	0003      	movs	r3, r0
 800385c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800385e:	0022      	movs	r2, r4
 8003860:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003866:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800386c:	4313      	orrs	r3, r2
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e022      	b.n	80038b8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2240      	movs	r2, #64	; 0x40
 800387a:	4013      	ands	r3, r2
 800387c:	d102      	bne.n	8003884 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2200      	movs	r2, #0
 8003882:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003890:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003896:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	78db      	ldrb	r3, [r3, #3]
 800389c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800389e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2120      	movs	r1, #32
 80038a4:	5c5b      	ldrb	r3, [r3, r1]
 80038a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80038a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	22ca      	movs	r2, #202	; 0xca
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2253      	movs	r2, #83	; 0x53
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	429a      	cmp	r2, r3
 80038de:	d14e      	bne.n	800397e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	495b      	ldr	r1, [pc, #364]	; (8003a58 <HAL_RTC_SetAlarm_IT+0x284>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	22ff      	movs	r2, #255	; 0xff
 80038f8:	401a      	ands	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4957      	ldr	r1, [pc, #348]	; (8003a5c <HAL_RTC_SetAlarm_IT+0x288>)
 8003900:	430a      	orrs	r2, r1
 8003902:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003904:	f7fd ff86 	bl	8001814 <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800390c:	e016      	b.n	800393c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800390e:	f7fd ff81 	bl	8001814 <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	1ad2      	subs	r2, r2, r3
 8003918:	23fa      	movs	r3, #250	; 0xfa
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	429a      	cmp	r2, r3
 800391e:	d90d      	bls.n	800393c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	22ff      	movs	r2, #255	; 0xff
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2221      	movs	r2, #33	; 0x21
 800392c:	2103      	movs	r1, #3
 800392e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e089      	b.n	8003a50 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	4013      	ands	r3, r2
 8003946:	d0e2      	beq.n	800390e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2180      	movs	r1, #128	; 0x80
 8003964:	0049      	lsls	r1, r1, #1
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	0149      	lsls	r1, r1, #5
 8003978:	430a      	orrs	r2, r1
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	e04d      	b.n	8003a1a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4935      	ldr	r1, [pc, #212]	; (8003a60 <HAL_RTC_SetAlarm_IT+0x28c>)
 800398a:	400a      	ands	r2, r1
 800398c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	401a      	ands	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4931      	ldr	r1, [pc, #196]	; (8003a64 <HAL_RTC_SetAlarm_IT+0x290>)
 800399e:	430a      	orrs	r2, r1
 80039a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80039a2:	f7fd ff37 	bl	8001814 <HAL_GetTick>
 80039a6:	0003      	movs	r3, r0
 80039a8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80039aa:	e016      	b.n	80039da <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039ac:	f7fd ff32 	bl	8001814 <HAL_GetTick>
 80039b0:	0002      	movs	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	1ad2      	subs	r2, r2, r3
 80039b6:	23fa      	movs	r3, #250	; 0xfa
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d90d      	bls.n	80039da <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	22ff      	movs	r2, #255	; 0xff
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2221      	movs	r2, #33	; 0x21
 80039ca:	2103      	movs	r1, #3
 80039cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e03a      	b.n	8003a50 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2202      	movs	r2, #2
 80039e2:	4013      	ands	r3, r2
 80039e4:	d0e2      	beq.n	80039ac <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	0089      	lsls	r1, r1, #2
 8003a04:	430a      	orrs	r2, r1
 8003a06:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	0189      	lsls	r1, r1, #6
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <HAL_RTC_SetAlarm_IT+0x294>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_RTC_SetAlarm_IT+0x294>)
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	0289      	lsls	r1, r1, #10
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_RTC_SetAlarm_IT+0x294>)
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <HAL_RTC_SetAlarm_IT+0x294>)
 8003a2e:	2180      	movs	r1, #128	; 0x80
 8003a30:	0289      	lsls	r1, r1, #10
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2221      	movs	r2, #33	; 0x21
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b009      	add	sp, #36	; 0x24
 8003a56:	bd90      	pop	{r4, r7, pc}
 8003a58:	fffffeff 	.word	0xfffffeff
 8003a5c:	fffffe7f 	.word	0xfffffe7f
 8003a60:	fffffdff 	.word	0xfffffdff
 8003a64:	fffffd7f 	.word	0xfffffd7f
 8003a68:	40010400 	.word	0x40010400

08003a6c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	015b      	lsls	r3, r3, #5
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d014      	beq.n	8003aac <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d00d      	beq.n	8003aac <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	0018      	movs	r0, r3
 8003a94:	f7fc ff82 	bl	800099c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	22ff      	movs	r2, #255	; 0xff
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4915      	ldr	r1, [pc, #84]	; (8003afc <HAL_RTC_AlarmIRQHandler+0x90>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	019b      	lsls	r3, r3, #6
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d014      	beq.n	8003ae4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 fa06 	bl	8003edc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	401a      	ands	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <HAL_RTC_AlarmIRQHandler+0x94>)
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003ae4:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <HAL_RTC_AlarmIRQHandler+0x98>)
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	0292      	lsls	r2, r2, #10
 8003aea:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2221      	movs	r2, #33	; 0x21
 8003af0:	2101      	movs	r1, #1
 8003af2:	5499      	strb	r1, [r3, r2]
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	fffffe7f 	.word	0xfffffe7f
 8003b00:	fffffd7f 	.word	0xfffffd7f
 8003b04:	40010400 	.word	0x40010400

08003b08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	21a0      	movs	r1, #160	; 0xa0
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b20:	f7fd fe78 	bl	8001814 <HAL_GetTick>
 8003b24:	0003      	movs	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b28:	e00a      	b.n	8003b40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b2a:	f7fd fe73 	bl	8001814 <HAL_GetTick>
 8003b2e:	0002      	movs	r2, r0
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	23fa      	movs	r3, #250	; 0xfa
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d901      	bls.n	8003b40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e006      	b.n	8003b4e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d0ee      	beq.n	8003b2a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b004      	add	sp, #16
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2240      	movs	r2, #64	; 0x40
 8003b66:	4013      	ands	r3, r2
 8003b68:	d11a      	bne.n	8003ba0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	4252      	negs	r2, r2
 8003b72:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b74:	f7fd fe4e 	bl	8001814 <HAL_GetTick>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b7c:	e00a      	b.n	8003b94 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003b7e:	f7fd fe49 	bl	8001814 <HAL_GetTick>
 8003b82:	0002      	movs	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	23fa      	movs	r3, #250	; 0xfa
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d901      	bls.n	8003b94 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e006      	b.n	8003ba2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d0ee      	beq.n	8003b7e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b004      	add	sp, #16
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	0002      	movs	r2, r0
 8003bb2:	1dfb      	adds	r3, r7, #7
 8003bb4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003bba:	230b      	movs	r3, #11
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	1dfa      	adds	r2, r7, #7
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8003bc4:	e008      	b.n	8003bd8 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003bcc:	220b      	movs	r2, #11
 8003bce:	18bb      	adds	r3, r7, r2
 8003bd0:	18ba      	adds	r2, r7, r2
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	3a0a      	subs	r2, #10
 8003bd6:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8003bd8:	230b      	movs	r3, #11
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b09      	cmp	r3, #9
 8003be0:	d8f1      	bhi.n	8003bc6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	230b      	movs	r3, #11
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b2db      	uxtb	r3, r3
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b004      	add	sp, #16
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	0002      	movs	r2, r0
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003c08:	1dfb      	adds	r3, r7, #7
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	001a      	movs	r2, r3
 8003c12:	0013      	movs	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	189b      	adds	r3, r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	1dfb      	adds	r3, r7, #7
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	210f      	movs	r1, #15
 8003c26:	400b      	ands	r3, r1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	18d3      	adds	r3, r2, r3
 8003c2c:	b2db      	uxtb	r3, r3
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b004      	add	sp, #16
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	5c9b      	ldrb	r3, [r3, r2]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e0ad      	b.n	8003dae <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	2101      	movs	r1, #1
 8003c58:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2221      	movs	r2, #33	; 0x21
 8003c5e:	2102      	movs	r1, #2
 8003c60:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	22ca      	movs	r2, #202	; 0xca
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2253      	movs	r2, #83	; 0x53
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d021      	beq.n	8003cc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 8003c80:	f7fd fdc8 	bl	8001814 <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003c88:	e016      	b.n	8003cb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c8a:	f7fd fdc3 	bl	8001814 <HAL_GetTick>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	1ad2      	subs	r2, r2, r3
 8003c94:	23fa      	movs	r3, #250	; 0xfa
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d90d      	bls.n	8003cb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	22ff      	movs	r2, #255	; 0xff
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2221      	movs	r2, #33	; 0x21
 8003ca8:	2103      	movs	r1, #3
 8003caa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e07a      	b.n	8003dae <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d1e2      	bne.n	8003c8a <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	493a      	ldr	r1, [pc, #232]	; (8003db8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	22ff      	movs	r2, #255	; 0xff
 8003cdc:	401a      	ands	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4936      	ldr	r1, [pc, #216]	; (8003dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003ce8:	f7fd fd94 	bl	8001814 <HAL_GetTick>
 8003cec:	0003      	movs	r3, r0
 8003cee:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003cf0:	e016      	b.n	8003d20 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cf2:	f7fd fd8f 	bl	8001814 <HAL_GetTick>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	1ad2      	subs	r2, r2, r3
 8003cfc:	23fa      	movs	r3, #250	; 0xfa
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d90d      	bls.n	8003d20 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	22ff      	movs	r2, #255	; 0xff
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2221      	movs	r2, #33	; 0x21
 8003d10:	2103      	movs	r1, #3
 8003d12:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e046      	b.n	8003dae <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2204      	movs	r2, #4
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d0e2      	beq.n	8003cf2 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2107      	movs	r1, #7
 8003d40:	438a      	bics	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	0349      	lsls	r1, r1, #13
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003d62:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8003d68:	2180      	movs	r1, #128	; 0x80
 8003d6a:	0349      	lsls	r1, r1, #13
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	01c9      	lsls	r1, r1, #7
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	00c9      	lsls	r1, r1, #3
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	22ff      	movs	r2, #255	; 0xff
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2221      	movs	r2, #33	; 0x21
 8003da0:	2101      	movs	r1, #1
 8003da2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	2100      	movs	r1, #0
 8003daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b006      	add	sp, #24
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	fffffbff 	.word	0xfffffbff
 8003dbc:	fffffb7f 	.word	0xfffffb7f
 8003dc0:	40010400 	.word	0x40010400

08003dc4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	5c9b      	ldrb	r3, [r3, r2]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e04e      	b.n	8003e78 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	2101      	movs	r1, #1
 8003de0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2221      	movs	r2, #33	; 0x21
 8003de6:	2102      	movs	r1, #2
 8003de8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	22ca      	movs	r2, #202	; 0xca
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2253      	movs	r2, #83	; 0x53
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	491e      	ldr	r1, [pc, #120]	; (8003e80 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8003e06:	400a      	ands	r2, r1
 8003e08:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	491b      	ldr	r1, [pc, #108]	; (8003e84 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8003e16:	400a      	ands	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003e1a:	f7fd fcfb 	bl	8001814 <HAL_GetTick>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003e22:	e016      	b.n	8003e52 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e24:	f7fd fcf6 	bl	8001814 <HAL_GetTick>
 8003e28:	0002      	movs	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad2      	subs	r2, r2, r3
 8003e2e:	23fa      	movs	r3, #250	; 0xfa
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d90d      	bls.n	8003e52 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	22ff      	movs	r2, #255	; 0xff
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2221      	movs	r2, #33	; 0x21
 8003e42:	2103      	movs	r1, #3
 8003e44:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e012      	b.n	8003e78 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d0e2      	beq.n	8003e24 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	22ff      	movs	r2, #255	; 0xff
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2221      	movs	r2, #33	; 0x21
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	2100      	movs	r1, #0
 8003e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b004      	add	sp, #16
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	fffffbff 	.word	0xfffffbff
 8003e84:	ffffbfff 	.word	0xffffbfff

08003e88 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d00d      	beq.n	8003eba <HAL_RTCEx_WakeUpTimerIRQHandler+0x32>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f007 fa53 	bl	800b34c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	401a      	ands	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4907      	ldr	r1, [pc, #28]	; (8003ed4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x4c>)
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x50>)
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	0352      	lsls	r2, r2, #13
 8003ec0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2221      	movs	r2, #33	; 0x21
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]
}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	fffffb7f 	.word	0xfffffb7f
 8003ed8:	40010400 	.word	0x40010400

08003edc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e059      	b.n	8003fb2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2251      	movs	r2, #81	; 0x51
 8003f08:	5c9b      	ldrb	r3, [r3, r2]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d107      	bne.n	8003f20 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2250      	movs	r2, #80	; 0x50
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fd f924 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2251      	movs	r2, #81	; 0x51
 8003f24:	2102      	movs	r1, #2
 8003f26:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2140      	movs	r1, #64	; 0x40
 8003f34:	438a      	bics	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6999      	ldr	r1, [r3, #24]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	400b      	ands	r3, r1
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	2204      	movs	r2, #4
 8003f82:	4013      	ands	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4907      	ldr	r1, [pc, #28]	; (8003fbc <HAL_SPI_Init+0xd0>)
 8003f9e:	400a      	ands	r2, r1
 8003fa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2251      	movs	r2, #81	; 0x51
 8003fac:	2101      	movs	r1, #1
 8003fae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b002      	add	sp, #8
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	fffff7ff 	.word	0xfffff7ff

08003fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e01e      	b.n	8004010 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2239      	movs	r2, #57	; 0x39
 8003fd6:	5c9b      	ldrb	r3, [r3, r2]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2238      	movs	r2, #56	; 0x38
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7fd fa8f 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2239      	movs	r2, #57	; 0x39
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	0019      	movs	r1, r3
 8004000:	0010      	movs	r0, r2
 8004002:	f000 f8c7 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2239      	movs	r2, #57	; 0x39
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b002      	add	sp, #8
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2238      	movs	r2, #56	; 0x38
 8004026:	5c9b      	ldrb	r3, [r3, r2]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_TIM_ConfigClockSource+0x18>
 800402c:	2302      	movs	r3, #2
 800402e:	e0ab      	b.n	8004188 <HAL_TIM_ConfigClockSource+0x170>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2238      	movs	r2, #56	; 0x38
 8004034:	2101      	movs	r1, #1
 8004036:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2239      	movs	r2, #57	; 0x39
 800403c:	2102      	movs	r1, #2
 800403e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2277      	movs	r2, #119	; 0x77
 800404c:	4393      	bics	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a4f      	ldr	r2, [pc, #316]	; (8004190 <HAL_TIM_ConfigClockSource+0x178>)
 8004054:	4013      	ands	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d100      	bne.n	800406a <HAL_TIM_ConfigClockSource+0x52>
 8004068:	e06b      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x12a>
 800406a:	d80e      	bhi.n	800408a <HAL_TIM_ConfigClockSource+0x72>
 800406c:	2b10      	cmp	r3, #16
 800406e:	d100      	bne.n	8004072 <HAL_TIM_ConfigClockSource+0x5a>
 8004070:	e077      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x14a>
 8004072:	d803      	bhi.n	800407c <HAL_TIM_ConfigClockSource+0x64>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d100      	bne.n	800407a <HAL_TIM_ConfigClockSource+0x62>
 8004078:	e073      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800407a:	e07c      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800407c:	2b20      	cmp	r3, #32
 800407e:	d100      	bne.n	8004082 <HAL_TIM_ConfigClockSource+0x6a>
 8004080:	e06f      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x14a>
 8004082:	2b30      	cmp	r3, #48	; 0x30
 8004084:	d100      	bne.n	8004088 <HAL_TIM_ConfigClockSource+0x70>
 8004086:	e06c      	b.n	8004162 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004088:	e075      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800408a:	2b70      	cmp	r3, #112	; 0x70
 800408c:	d00e      	beq.n	80040ac <HAL_TIM_ConfigClockSource+0x94>
 800408e:	d804      	bhi.n	800409a <HAL_TIM_ConfigClockSource+0x82>
 8004090:	2b50      	cmp	r3, #80	; 0x50
 8004092:	d036      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0xea>
 8004094:	2b60      	cmp	r3, #96	; 0x60
 8004096:	d044      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004098:	e06d      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800409a:	2280      	movs	r2, #128	; 0x80
 800409c:	0152      	lsls	r2, r2, #5
 800409e:	4293      	cmp	r3, r2
 80040a0:	d068      	beq.n	8004174 <HAL_TIM_ConfigClockSource+0x15c>
 80040a2:	2280      	movs	r2, #128	; 0x80
 80040a4:	0192      	lsls	r2, r2, #6
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d017      	beq.n	80040da <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80040aa:	e064      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	6899      	ldr	r1, [r3, #8]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f000 f942 	bl	8004344 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2277      	movs	r2, #119	; 0x77
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	609a      	str	r2, [r3, #8]
      break;
 80040d8:	e04d      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6899      	ldr	r1, [r3, #8]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f000 f92b 	bl	8004344 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2180      	movs	r1, #128	; 0x80
 80040fa:	01c9      	lsls	r1, r1, #7
 80040fc:	430a      	orrs	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]
      break;
 8004100:	e039      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	001a      	movs	r2, r3
 8004110:	f000 f89e 	bl	8004250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2150      	movs	r1, #80	; 0x50
 800411a:	0018      	movs	r0, r3
 800411c:	f000 f8f8 	bl	8004310 <TIM_ITRx_SetConfig>
      break;
 8004120:	e029      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6859      	ldr	r1, [r3, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	001a      	movs	r2, r3
 8004130:	f000 f8bc 	bl	80042ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2160      	movs	r1, #96	; 0x60
 800413a:	0018      	movs	r0, r3
 800413c:	f000 f8e8 	bl	8004310 <TIM_ITRx_SetConfig>
      break;
 8004140:	e019      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6859      	ldr	r1, [r3, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	001a      	movs	r2, r3
 8004150:	f000 f87e 	bl	8004250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2140      	movs	r1, #64	; 0x40
 800415a:	0018      	movs	r0, r3
 800415c:	f000 f8d8 	bl	8004310 <TIM_ITRx_SetConfig>
      break;
 8004160:	e009      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	0019      	movs	r1, r3
 800416c:	0010      	movs	r0, r2
 800416e:	f000 f8cf 	bl	8004310 <TIM_ITRx_SetConfig>
      break;
 8004172:	e000      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004174:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2239      	movs	r2, #57	; 0x39
 800417a:	2101      	movs	r1, #1
 800417c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2238      	movs	r2, #56	; 0x38
 8004182:	2100      	movs	r1, #0
 8004184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	0018      	movs	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	b004      	add	sp, #16
 800418e:	bd80      	pop	{r7, pc}
 8004190:	ffff00ff 	.word	0xffff00ff

08004194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	05db      	lsls	r3, r3, #23
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0x32>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a23      	ldr	r2, [pc, #140]	; (8004240 <TIM_Base_SetConfig+0xac>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0x32>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a22      	ldr	r2, [pc, #136]	; (8004244 <TIM_Base_SetConfig+0xb0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x32>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a21      	ldr	r2, [pc, #132]	; (8004248 <TIM_Base_SetConfig+0xb4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2270      	movs	r2, #112	; 0x70
 80041ca:	4393      	bics	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	05db      	lsls	r3, r3, #23
 80041de:	429a      	cmp	r2, r3
 80041e0:	d00b      	beq.n	80041fa <TIM_Base_SetConfig+0x66>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a16      	ldr	r2, [pc, #88]	; (8004240 <TIM_Base_SetConfig+0xac>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d007      	beq.n	80041fa <TIM_Base_SetConfig+0x66>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <TIM_Base_SetConfig+0xb0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d003      	beq.n	80041fa <TIM_Base_SetConfig+0x66>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a14      	ldr	r2, [pc, #80]	; (8004248 <TIM_Base_SetConfig+0xb4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d108      	bne.n	800420c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a13      	ldr	r2, [pc, #76]	; (800424c <TIM_Base_SetConfig+0xb8>)
 80041fe:	4013      	ands	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	4393      	bics	r3, r2
 8004212:	001a      	movs	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	615a      	str	r2, [r3, #20]
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b004      	add	sp, #16
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40000400 	.word	0x40000400
 8004244:	40010800 	.word	0x40010800
 8004248:	40011400 	.word	0x40011400
 800424c:	fffffcff 	.word	0xfffffcff

08004250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	2201      	movs	r2, #1
 8004268:	4393      	bics	r3, r2
 800426a:	001a      	movs	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	22f0      	movs	r2, #240	; 0xf0
 800427a:	4393      	bics	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	220a      	movs	r2, #10
 800428c:	4393      	bics	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	46c0      	nop			; (mov r8, r8)
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b006      	add	sp, #24
 80042aa:	bd80      	pop	{r7, pc}

080042ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	2210      	movs	r2, #16
 80042be:	4393      	bics	r3, r2
 80042c0:	001a      	movs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <TIM_TI2_ConfigInputStage+0x60>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	031b      	lsls	r3, r3, #12
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	22a0      	movs	r2, #160	; 0xa0
 80042e8:	4393      	bics	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b006      	add	sp, #24
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	ffff0fff 	.word	0xffff0fff

08004310 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2270      	movs	r2, #112	; 0x70
 8004324:	4393      	bics	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	2207      	movs	r2, #7
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	609a      	str	r2, [r3, #8]
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4a09      	ldr	r2, [pc, #36]	; (8004380 <TIM_ETR_SetConfig+0x3c>)
 800435c:	4013      	ands	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	021a      	lsls	r2, r3, #8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	431a      	orrs	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4313      	orrs	r3, r2
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	609a      	str	r2, [r3, #8]
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b006      	add	sp, #24
 800437e:	bd80      	pop	{r7, pc}
 8004380:	ffff00ff 	.word	0xffff00ff

08004384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2238      	movs	r2, #56	; 0x38
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004398:	2302      	movs	r3, #2
 800439a:	e032      	b.n	8004402 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2238      	movs	r2, #56	; 0x38
 80043a0:	2101      	movs	r1, #1
 80043a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2239      	movs	r2, #57	; 0x39
 80043a8:	2102      	movs	r1, #2
 80043aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2270      	movs	r2, #112	; 0x70
 80043c0:	4393      	bics	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2280      	movs	r2, #128	; 0x80
 80043d2:	4393      	bics	r3, r2
 80043d4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2239      	movs	r2, #57	; 0x39
 80043f4:	2101      	movs	r1, #1
 80043f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2238      	movs	r2, #56	; 0x38
 80043fc:	2100      	movs	r1, #0
 80043fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b004      	add	sp, #16
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e044      	b.n	80044a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2270      	movs	r2, #112	; 0x70
 800442a:	2100      	movs	r1, #0
 800442c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0018      	movs	r0, r3
 8004432:	f7fd f8eb 	bl	800160c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2224      	movs	r2, #36	; 0x24
 800443a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2101      	movs	r1, #1
 8004448:	438a      	bics	r2, r1
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	0018      	movs	r0, r3
 8004450:	f000 fabe 	bl	80049d0 <UART_SetConfig>
 8004454:	0003      	movs	r3, r0
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e024      	b.n	80044a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 fde5 	bl	8005038 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	490d      	ldr	r1, [pc, #52]	; (80044b0 <HAL_UART_Init+0xa4>)
 800447a:	400a      	ands	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	212a      	movs	r1, #42	; 0x2a
 800448a:	438a      	bics	r2, r1
 800448c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 fe7d 	bl	80051a0 <UART_CheckIdleState>
 80044a6:	0003      	movs	r3, r0
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b002      	add	sp, #8
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	ffffb7ff 	.word	0xffffb7ff

080044b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	1dbb      	adds	r3, r7, #6
 80044c2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d000      	beq.n	80044ce <HAL_UART_Transmit+0x1a>
 80044cc:	e094      	b.n	80045f8 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_UART_Transmit+0x28>
 80044d4:	1dbb      	adds	r3, r7, #6
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e08c      	b.n	80045fa <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	015b      	lsls	r3, r3, #5
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d109      	bne.n	8004500 <HAL_UART_Transmit+0x4c>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2201      	movs	r2, #1
 80044f8:	4013      	ands	r3, r2
 80044fa:	d001      	beq.n	8004500 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e07c      	b.n	80045fa <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2270      	movs	r2, #112	; 0x70
 8004504:	5c9b      	ldrb	r3, [r3, r2]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_UART_Transmit+0x5a>
 800450a:	2302      	movs	r3, #2
 800450c:	e075      	b.n	80045fa <HAL_UART_Transmit+0x146>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2270      	movs	r2, #112	; 0x70
 8004512:	2101      	movs	r1, #1
 8004514:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2221      	movs	r2, #33	; 0x21
 8004520:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004522:	f7fd f977 	bl	8001814 <HAL_GetTick>
 8004526:	0003      	movs	r3, r0
 8004528:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1dba      	adds	r2, r7, #6
 800452e:	2150      	movs	r1, #80	; 0x50
 8004530:	8812      	ldrh	r2, [r2, #0]
 8004532:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1dba      	adds	r2, r7, #6
 8004538:	2152      	movs	r1, #82	; 0x52
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	015b      	lsls	r3, r3, #5
 8004546:	429a      	cmp	r2, r3
 8004548:	d108      	bne.n	800455c <HAL_UART_Transmit+0xa8>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004564:	e02c      	b.n	80045c0 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	0013      	movs	r3, r2
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	f000 fe5a 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e03c      	b.n	80045fa <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10b      	bne.n	800459e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	001a      	movs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	05d2      	lsls	r2, r2, #23
 8004592:	0dd2      	lsrs	r2, r2, #23
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	3302      	adds	r3, #2
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	e007      	b.n	80045ae <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3301      	adds	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2252      	movs	r2, #82	; 0x52
 80045b2:	5a9b      	ldrh	r3, [r3, r2]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b299      	uxth	r1, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2252      	movs	r2, #82	; 0x52
 80045be:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2252      	movs	r2, #82	; 0x52
 80045c4:	5a9b      	ldrh	r3, [r3, r2]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1cc      	bne.n	8004566 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	0013      	movs	r3, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	2140      	movs	r1, #64	; 0x40
 80045da:	f000 fe27 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 80045de:	1e03      	subs	r3, r0, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e009      	b.n	80045fa <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2270      	movs	r2, #112	; 0x70
 80045f0:	2100      	movs	r1, #0
 80045f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b008      	add	sp, #32
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	1dbb      	adds	r3, r7, #6
 8004610:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004616:	2b20      	cmp	r3, #32
 8004618:	d000      	beq.n	800461c <HAL_UART_Receive_IT+0x18>
 800461a:	e09f      	b.n	800475c <HAL_UART_Receive_IT+0x158>
  {
    if ((pData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_UART_Receive_IT+0x26>
 8004622:	1dbb      	adds	r3, r7, #6
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e097      	b.n	800475e <HAL_UART_Receive_IT+0x15a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	015b      	lsls	r3, r3, #5
 8004636:	429a      	cmp	r2, r3
 8004638:	d109      	bne.n	800464e <HAL_UART_Receive_IT+0x4a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d105      	bne.n	800464e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2201      	movs	r2, #1
 8004646:	4013      	ands	r3, r2
 8004648:	d001      	beq.n	800464e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e087      	b.n	800475e <HAL_UART_Receive_IT+0x15a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2270      	movs	r2, #112	; 0x70
 8004652:	5c9b      	ldrb	r3, [r3, r2]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_UART_Receive_IT+0x58>
 8004658:	2302      	movs	r3, #2
 800465a:	e080      	b.n	800475e <HAL_UART_Receive_IT+0x15a>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2270      	movs	r2, #112	; 0x70
 8004660:	2101      	movs	r1, #1
 8004662:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1dba      	adds	r2, r7, #6
 800466e:	2158      	movs	r1, #88	; 0x58
 8004670:	8812      	ldrh	r2, [r2, #0]
 8004672:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1dba      	adds	r2, r7, #6
 8004678:	215a      	movs	r1, #90	; 0x5a
 800467a:	8812      	ldrh	r2, [r2, #0]
 800467c:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	015b      	lsls	r3, r3, #5
 800468c:	429a      	cmp	r2, r3
 800468e:	d10d      	bne.n	80046ac <HAL_UART_Receive_IT+0xa8>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <HAL_UART_Receive_IT+0x9e>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	225c      	movs	r2, #92	; 0x5c
 800469c:	4932      	ldr	r1, [pc, #200]	; (8004768 <HAL_UART_Receive_IT+0x164>)
 800469e:	5299      	strh	r1, [r3, r2]
 80046a0:	e02e      	b.n	8004700 <HAL_UART_Receive_IT+0xfc>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	225c      	movs	r2, #92	; 0x5c
 80046a6:	21ff      	movs	r1, #255	; 0xff
 80046a8:	5299      	strh	r1, [r3, r2]
 80046aa:	e029      	b.n	8004700 <HAL_UART_Receive_IT+0xfc>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10d      	bne.n	80046d0 <HAL_UART_Receive_IT+0xcc>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d104      	bne.n	80046c6 <HAL_UART_Receive_IT+0xc2>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	225c      	movs	r2, #92	; 0x5c
 80046c0:	21ff      	movs	r1, #255	; 0xff
 80046c2:	5299      	strh	r1, [r3, r2]
 80046c4:	e01c      	b.n	8004700 <HAL_UART_Receive_IT+0xfc>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	225c      	movs	r2, #92	; 0x5c
 80046ca:	217f      	movs	r1, #127	; 0x7f
 80046cc:	5299      	strh	r1, [r3, r2]
 80046ce:	e017      	b.n	8004700 <HAL_UART_Receive_IT+0xfc>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	055b      	lsls	r3, r3, #21
 80046d8:	429a      	cmp	r2, r3
 80046da:	d10d      	bne.n	80046f8 <HAL_UART_Receive_IT+0xf4>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d104      	bne.n	80046ee <HAL_UART_Receive_IT+0xea>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	225c      	movs	r2, #92	; 0x5c
 80046e8:	217f      	movs	r1, #127	; 0x7f
 80046ea:	5299      	strh	r1, [r3, r2]
 80046ec:	e008      	b.n	8004700 <HAL_UART_Receive_IT+0xfc>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	225c      	movs	r2, #92	; 0x5c
 80046f2:	213f      	movs	r1, #63	; 0x3f
 80046f4:	5299      	strh	r1, [r3, r2]
 80046f6:	e003      	b.n	8004700 <HAL_UART_Receive_IT+0xfc>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	225c      	movs	r2, #92	; 0x5c
 80046fc:	2100      	movs	r1, #0
 80046fe:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2222      	movs	r2, #34	; 0x22
 800470a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2101      	movs	r1, #1
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	015b      	lsls	r3, r3, #5
 8004724:	429a      	cmp	r2, r3
 8004726:	d107      	bne.n	8004738 <HAL_UART_Receive_IT+0x134>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d103      	bne.n	8004738 <HAL_UART_Receive_IT+0x134>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a0e      	ldr	r2, [pc, #56]	; (800476c <HAL_UART_Receive_IT+0x168>)
 8004734:	661a      	str	r2, [r3, #96]	; 0x60
 8004736:	e002      	b.n	800473e <HAL_UART_Receive_IT+0x13a>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a0d      	ldr	r2, [pc, #52]	; (8004770 <HAL_UART_Receive_IT+0x16c>)
 800473c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2270      	movs	r2, #112	; 0x70
 8004742:	2100      	movs	r1, #0
 8004744:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2190      	movs	r1, #144	; 0x90
 8004752:	0049      	lsls	r1, r1, #1
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <HAL_UART_Receive_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b004      	add	sp, #16
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	000001ff 	.word	0x000001ff
 800476c:	08005421 	.word	0x08005421
 8004770:	08005365 	.word	0x08005365

08004774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	220f      	movs	r2, #15
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d112      	bne.n	80047c8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2220      	movs	r2, #32
 80047a6:	4013      	ands	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2220      	movs	r2, #32
 80047ae:	4013      	ands	r3, r2
 80047b0:	d00a      	beq.n	80047c8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d100      	bne.n	80047bc <HAL_UART_IRQHandler+0x48>
 80047ba:	e0f6      	b.n	80049aa <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	0010      	movs	r0, r2
 80047c4:	4798      	blx	r3
      }
      return;
 80047c6:	e0f0      	b.n	80049aa <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d100      	bne.n	80047d0 <HAL_UART_IRQHandler+0x5c>
 80047ce:	e0b8      	b.n	8004942 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2201      	movs	r2, #1
 80047d4:	4013      	ands	r3, r2
 80047d6:	d105      	bne.n	80047e4 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	2390      	movs	r3, #144	; 0x90
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4013      	ands	r3, r2
 80047e0:	d100      	bne.n	80047e4 <HAL_UART_IRQHandler+0x70>
 80047e2:	e0ae      	b.n	8004942 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2201      	movs	r2, #1
 80047e8:	4013      	ands	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_UART_IRQHandler+0x96>
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4013      	ands	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2201      	movs	r2, #1
 80047fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004802:	2201      	movs	r2, #1
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2202      	movs	r2, #2
 800480e:	4013      	ands	r3, r2
 8004810:	d00d      	beq.n	800482e <HAL_UART_IRQHandler+0xba>
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2201      	movs	r2, #1
 8004816:	4013      	ands	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2202      	movs	r2, #2
 8004820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004826:	2204      	movs	r2, #4
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2204      	movs	r2, #4
 8004832:	4013      	ands	r3, r2
 8004834:	d00d      	beq.n	8004852 <HAL_UART_IRQHandler+0xde>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2201      	movs	r2, #1
 800483a:	4013      	ands	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2204      	movs	r2, #4
 8004844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484a:	2202      	movs	r2, #2
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	2208      	movs	r2, #8
 8004856:	4013      	ands	r3, r2
 8004858:	d011      	beq.n	800487e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2220      	movs	r2, #32
 800485e:	4013      	ands	r3, r2
 8004860:	d103      	bne.n	800486a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2201      	movs	r2, #1
 8004866:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004868:	d009      	beq.n	800487e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2208      	movs	r2, #8
 8004870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004876:	2208      	movs	r2, #8
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d100      	bne.n	8004888 <HAL_UART_IRQHandler+0x114>
 8004886:	e092      	b.n	80049ae <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	2220      	movs	r2, #32
 800488c:	4013      	ands	r3, r2
 800488e:	d00c      	beq.n	80048aa <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2220      	movs	r2, #32
 8004894:	4013      	ands	r3, r2
 8004896:	d008      	beq.n	80048aa <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	0010      	movs	r0, r2
 80048a8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ae:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2240      	movs	r2, #64	; 0x40
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d003      	beq.n	80048c6 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2208      	movs	r2, #8
 80048c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048c4:	d033      	beq.n	800492e <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f000 fcf9 	bl	80052c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2240      	movs	r2, #64	; 0x40
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d123      	bne.n	8004924 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2140      	movs	r1, #64	; 0x40
 80048e8:	438a      	bics	r2, r1
 80048ea:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d012      	beq.n	800491a <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f8:	4a30      	ldr	r2, [pc, #192]	; (80049bc <HAL_UART_IRQHandler+0x248>)
 80048fa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004900:	0018      	movs	r0, r3
 8004902:	f7fd fae9 	bl	8001ed8 <HAL_DMA_Abort_IT>
 8004906:	1e03      	subs	r3, r0, #0
 8004908:	d019      	beq.n	800493e <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800490e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004914:	0018      	movs	r0, r3
 8004916:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004918:	e011      	b.n	800493e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	0018      	movs	r0, r3
 800491e:	f005 ffa5 	bl	800a86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004922:	e00c      	b.n	800493e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f005 ffa0 	bl	800a86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	e007      	b.n	800493e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0018      	movs	r0, r3
 8004932:	f005 ff9b 	bl	800a86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800493c:	e037      	b.n	80049ae <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493e:	46c0      	nop			; (mov r8, r8)
    return;
 8004940:	e035      	b.n	80049ae <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	035b      	lsls	r3, r3, #13
 8004948:	4013      	ands	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_UART_IRQHandler+0x1f6>
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	03db      	lsls	r3, r3, #15
 8004952:	4013      	ands	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2280      	movs	r2, #128	; 0x80
 800495c:	0352      	lsls	r2, r2, #13
 800495e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	0018      	movs	r0, r3
 8004964:	f006 fb20 	bl	800afa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004968:	e024      	b.n	80049b4 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	4013      	ands	r3, r2
 8004970:	d00d      	beq.n	800498e <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	4013      	ands	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497e:	2b00      	cmp	r3, #0
 8004980:	d017      	beq.n	80049b2 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	0010      	movs	r0, r2
 800498a:	4798      	blx	r3
    }
    return;
 800498c:	e011      	b.n	80049b2 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2240      	movs	r2, #64	; 0x40
 8004992:	4013      	ands	r3, r2
 8004994:	d00e      	beq.n	80049b4 <HAL_UART_IRQHandler+0x240>
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2240      	movs	r2, #64	; 0x40
 800499a:	4013      	ands	r3, r2
 800499c:	d00a      	beq.n	80049b4 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f000 fcc4 	bl	800532e <UART_EndTransmit_IT>
    return;
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	e004      	b.n	80049b4 <HAL_UART_IRQHandler+0x240>
      return;
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	e002      	b.n	80049b4 <HAL_UART_IRQHandler+0x240>
    return;
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	e000      	b.n	80049b4 <HAL_UART_IRQHandler+0x240>
    return;
 80049b2:	46c0      	nop			; (mov r8, r8)
  }

}
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b008      	add	sp, #32
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	08005301 	.word	0x08005301

080049c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b002      	add	sp, #8
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d0:	b5b0      	push	{r4, r5, r7, lr}
 80049d2:	b08e      	sub	sp, #56	; 0x38
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80049d8:	231b      	movs	r3, #27
 80049da:	2218      	movs	r2, #24
 80049dc:	4694      	mov	ip, r2
 80049de:	44bc      	add	ip, r7
 80049e0:	4463      	add	r3, ip
 80049e2:	2210      	movs	r2, #16
 80049e4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ea:	2313      	movs	r3, #19
 80049ec:	2218      	movs	r2, #24
 80049ee:	4694      	mov	ip, r2
 80049f0:	44bc      	add	ip, r7
 80049f2:	4463      	add	r3, ip
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4aca      	ldr	r2, [pc, #808]	; (8004d44 <UART_SetConfig+0x374>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	0019      	movs	r1, r3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4ac5      	ldr	r2, [pc, #788]	; (8004d48 <UART_SetConfig+0x378>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	0019      	movs	r1, r3
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4abf      	ldr	r2, [pc, #764]	; (8004d4c <UART_SetConfig+0x37c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4abb      	ldr	r2, [pc, #748]	; (8004d50 <UART_SetConfig+0x380>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	0019      	movs	r1, r3
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4ab7      	ldr	r2, [pc, #732]	; (8004d54 <UART_SetConfig+0x384>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d134      	bne.n	8004ae6 <UART_SetConfig+0x116>
 8004a7c:	4bb6      	ldr	r3, [pc, #728]	; (8004d58 <UART_SetConfig+0x388>)
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a80:	2203      	movs	r2, #3
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d015      	beq.n	8004ab4 <UART_SetConfig+0xe4>
 8004a88:	d304      	bcc.n	8004a94 <UART_SetConfig+0xc4>
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d00a      	beq.n	8004aa4 <UART_SetConfig+0xd4>
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d018      	beq.n	8004ac4 <UART_SetConfig+0xf4>
 8004a92:	e01f      	b.n	8004ad4 <UART_SetConfig+0x104>
 8004a94:	231b      	movs	r3, #27
 8004a96:	2218      	movs	r2, #24
 8004a98:	4694      	mov	ip, r2
 8004a9a:	44bc      	add	ip, r7
 8004a9c:	4463      	add	r3, ip
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e0c5      	b.n	8004c30 <UART_SetConfig+0x260>
 8004aa4:	231b      	movs	r3, #27
 8004aa6:	2218      	movs	r2, #24
 8004aa8:	4694      	mov	ip, r2
 8004aaa:	44bc      	add	ip, r7
 8004aac:	4463      	add	r3, ip
 8004aae:	2202      	movs	r2, #2
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	e0bd      	b.n	8004c30 <UART_SetConfig+0x260>
 8004ab4:	231b      	movs	r3, #27
 8004ab6:	2218      	movs	r2, #24
 8004ab8:	4694      	mov	ip, r2
 8004aba:	44bc      	add	ip, r7
 8004abc:	4463      	add	r3, ip
 8004abe:	2204      	movs	r2, #4
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	e0b5      	b.n	8004c30 <UART_SetConfig+0x260>
 8004ac4:	231b      	movs	r3, #27
 8004ac6:	2218      	movs	r2, #24
 8004ac8:	4694      	mov	ip, r2
 8004aca:	44bc      	add	ip, r7
 8004acc:	4463      	add	r3, ip
 8004ace:	2208      	movs	r2, #8
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e0ad      	b.n	8004c30 <UART_SetConfig+0x260>
 8004ad4:	231b      	movs	r3, #27
 8004ad6:	2218      	movs	r2, #24
 8004ad8:	4694      	mov	ip, r2
 8004ada:	44bc      	add	ip, r7
 8004adc:	4463      	add	r3, ip
 8004ade:	2210      	movs	r2, #16
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	e0a4      	b.n	8004c30 <UART_SetConfig+0x260>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a9c      	ldr	r2, [pc, #624]	; (8004d5c <UART_SetConfig+0x38c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d137      	bne.n	8004b60 <UART_SetConfig+0x190>
 8004af0:	4b99      	ldr	r3, [pc, #612]	; (8004d58 <UART_SetConfig+0x388>)
 8004af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af4:	220c      	movs	r2, #12
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d018      	beq.n	8004b2e <UART_SetConfig+0x15e>
 8004afc:	d802      	bhi.n	8004b04 <UART_SetConfig+0x134>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <UART_SetConfig+0x13e>
 8004b02:	e024      	b.n	8004b4e <UART_SetConfig+0x17e>
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d00a      	beq.n	8004b1e <UART_SetConfig+0x14e>
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d018      	beq.n	8004b3e <UART_SetConfig+0x16e>
 8004b0c:	e01f      	b.n	8004b4e <UART_SetConfig+0x17e>
 8004b0e:	231b      	movs	r3, #27
 8004b10:	2218      	movs	r2, #24
 8004b12:	4694      	mov	ip, r2
 8004b14:	44bc      	add	ip, r7
 8004b16:	4463      	add	r3, ip
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e088      	b.n	8004c30 <UART_SetConfig+0x260>
 8004b1e:	231b      	movs	r3, #27
 8004b20:	2218      	movs	r2, #24
 8004b22:	4694      	mov	ip, r2
 8004b24:	44bc      	add	ip, r7
 8004b26:	4463      	add	r3, ip
 8004b28:	2202      	movs	r2, #2
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e080      	b.n	8004c30 <UART_SetConfig+0x260>
 8004b2e:	231b      	movs	r3, #27
 8004b30:	2218      	movs	r2, #24
 8004b32:	4694      	mov	ip, r2
 8004b34:	44bc      	add	ip, r7
 8004b36:	4463      	add	r3, ip
 8004b38:	2204      	movs	r2, #4
 8004b3a:	701a      	strb	r2, [r3, #0]
 8004b3c:	e078      	b.n	8004c30 <UART_SetConfig+0x260>
 8004b3e:	231b      	movs	r3, #27
 8004b40:	2218      	movs	r2, #24
 8004b42:	4694      	mov	ip, r2
 8004b44:	44bc      	add	ip, r7
 8004b46:	4463      	add	r3, ip
 8004b48:	2208      	movs	r2, #8
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	e070      	b.n	8004c30 <UART_SetConfig+0x260>
 8004b4e:	231b      	movs	r3, #27
 8004b50:	2218      	movs	r2, #24
 8004b52:	4694      	mov	ip, r2
 8004b54:	44bc      	add	ip, r7
 8004b56:	4463      	add	r3, ip
 8004b58:	2210      	movs	r2, #16
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	e067      	b.n	8004c30 <UART_SetConfig+0x260>
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a7e      	ldr	r2, [pc, #504]	; (8004d60 <UART_SetConfig+0x390>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d107      	bne.n	8004b7a <UART_SetConfig+0x1aa>
 8004b6a:	231b      	movs	r3, #27
 8004b6c:	2218      	movs	r2, #24
 8004b6e:	4694      	mov	ip, r2
 8004b70:	44bc      	add	ip, r7
 8004b72:	4463      	add	r3, ip
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e05a      	b.n	8004c30 <UART_SetConfig+0x260>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a79      	ldr	r2, [pc, #484]	; (8004d64 <UART_SetConfig+0x394>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d107      	bne.n	8004b94 <UART_SetConfig+0x1c4>
 8004b84:	231b      	movs	r3, #27
 8004b86:	2218      	movs	r2, #24
 8004b88:	4694      	mov	ip, r2
 8004b8a:	44bc      	add	ip, r7
 8004b8c:	4463      	add	r3, ip
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e04d      	b.n	8004c30 <UART_SetConfig+0x260>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6c      	ldr	r2, [pc, #432]	; (8004d4c <UART_SetConfig+0x37c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d141      	bne.n	8004c22 <UART_SetConfig+0x252>
 8004b9e:	4b6e      	ldr	r3, [pc, #440]	; (8004d58 <UART_SetConfig+0x388>)
 8004ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba2:	23c0      	movs	r3, #192	; 0xc0
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2280      	movs	r2, #128	; 0x80
 8004baa:	00d2      	lsls	r2, r2, #3
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d01f      	beq.n	8004bf0 <UART_SetConfig+0x220>
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	00d2      	lsls	r2, r2, #3
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d802      	bhi.n	8004bbe <UART_SetConfig+0x1ee>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <UART_SetConfig+0x200>
 8004bbc:	e028      	b.n	8004c10 <UART_SetConfig+0x240>
 8004bbe:	2280      	movs	r2, #128	; 0x80
 8004bc0:	0112      	lsls	r2, r2, #4
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00c      	beq.n	8004be0 <UART_SetConfig+0x210>
 8004bc6:	22c0      	movs	r2, #192	; 0xc0
 8004bc8:	0112      	lsls	r2, r2, #4
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d018      	beq.n	8004c00 <UART_SetConfig+0x230>
 8004bce:	e01f      	b.n	8004c10 <UART_SetConfig+0x240>
 8004bd0:	231b      	movs	r3, #27
 8004bd2:	2218      	movs	r2, #24
 8004bd4:	4694      	mov	ip, r2
 8004bd6:	44bc      	add	ip, r7
 8004bd8:	4463      	add	r3, ip
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e027      	b.n	8004c30 <UART_SetConfig+0x260>
 8004be0:	231b      	movs	r3, #27
 8004be2:	2218      	movs	r2, #24
 8004be4:	4694      	mov	ip, r2
 8004be6:	44bc      	add	ip, r7
 8004be8:	4463      	add	r3, ip
 8004bea:	2202      	movs	r2, #2
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e01f      	b.n	8004c30 <UART_SetConfig+0x260>
 8004bf0:	231b      	movs	r3, #27
 8004bf2:	2218      	movs	r2, #24
 8004bf4:	4694      	mov	ip, r2
 8004bf6:	44bc      	add	ip, r7
 8004bf8:	4463      	add	r3, ip
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e017      	b.n	8004c30 <UART_SetConfig+0x260>
 8004c00:	231b      	movs	r3, #27
 8004c02:	2218      	movs	r2, #24
 8004c04:	4694      	mov	ip, r2
 8004c06:	44bc      	add	ip, r7
 8004c08:	4463      	add	r3, ip
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e00f      	b.n	8004c30 <UART_SetConfig+0x260>
 8004c10:	231b      	movs	r3, #27
 8004c12:	2218      	movs	r2, #24
 8004c14:	4694      	mov	ip, r2
 8004c16:	44bc      	add	ip, r7
 8004c18:	4463      	add	r3, ip
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	e006      	b.n	8004c30 <UART_SetConfig+0x260>
 8004c22:	231b      	movs	r3, #27
 8004c24:	2218      	movs	r2, #24
 8004c26:	4694      	mov	ip, r2
 8004c28:	44bc      	add	ip, r7
 8004c2a:	4463      	add	r3, ip
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a45      	ldr	r2, [pc, #276]	; (8004d4c <UART_SetConfig+0x37c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d000      	beq.n	8004c3c <UART_SetConfig+0x26c>
 8004c3a:	e09d      	b.n	8004d78 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c3c:	231b      	movs	r3, #27
 8004c3e:	2218      	movs	r2, #24
 8004c40:	4694      	mov	ip, r2
 8004c42:	44bc      	add	ip, r7
 8004c44:	4463      	add	r3, ip
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d00d      	beq.n	8004c68 <UART_SetConfig+0x298>
 8004c4c:	dc02      	bgt.n	8004c54 <UART_SetConfig+0x284>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <UART_SetConfig+0x28e>
 8004c52:	e01d      	b.n	8004c90 <UART_SetConfig+0x2c0>
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d012      	beq.n	8004c7e <UART_SetConfig+0x2ae>
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d015      	beq.n	8004c88 <UART_SetConfig+0x2b8>
 8004c5c:	e018      	b.n	8004c90 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004c5e:	f7fe f97b 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8004c62:	0003      	movs	r3, r0
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c66:	e01b      	b.n	8004ca0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c68:	4b3b      	ldr	r3, [pc, #236]	; (8004d58 <UART_SetConfig+0x388>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d002      	beq.n	8004c78 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004c72:	4b3d      	ldr	r3, [pc, #244]	; (8004d68 <UART_SetConfig+0x398>)
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8004c76:	e013      	b.n	8004ca0 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004c78:	4b3c      	ldr	r3, [pc, #240]	; (8004d6c <UART_SetConfig+0x39c>)
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c7c:	e010      	b.n	8004ca0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004c7e:	f7fe f8dd 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8004c82:	0003      	movs	r3, r0
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c86:	e00b      	b.n	8004ca0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c8e:	e007      	b.n	8004ca0 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c90:	2313      	movs	r3, #19
 8004c92:	2218      	movs	r2, #24
 8004c94:	4694      	mov	ip, r2
 8004c96:	44bc      	add	ip, r7
 8004c98:	4463      	add	r3, ip
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
        break;
 8004c9e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d100      	bne.n	8004ca8 <UART_SetConfig+0x2d8>
 8004ca6:	e1a6      	b.n	8004ff6 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	0013      	movs	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	189b      	adds	r3, r3, r2
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d305      	bcc.n	8004cc4 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d907      	bls.n	8004cd4 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8004cc4:	2313      	movs	r3, #19
 8004cc6:	2218      	movs	r2, #24
 8004cc8:	4694      	mov	ip, r2
 8004cca:	44bc      	add	ip, r7
 8004ccc:	4463      	add	r3, ip
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e190      	b.n	8004ff6 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	6939      	ldr	r1, [r7, #16]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	000b      	movs	r3, r1
 8004ce2:	0e1b      	lsrs	r3, r3, #24
 8004ce4:	0010      	movs	r0, r2
 8004ce6:	0205      	lsls	r5, r0, #8
 8004ce8:	431d      	orrs	r5, r3
 8004cea:	000b      	movs	r3, r1
 8004cec:	021c      	lsls	r4, r3, #8
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68b8      	ldr	r0, [r7, #8]
 8004cfc:	68f9      	ldr	r1, [r7, #12]
 8004cfe:	1900      	adds	r0, r0, r4
 8004d00:	4169      	adcs	r1, r5
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f7fb fb9c 	bl	800044c <__aeabi_uldivmod>
 8004d14:	0003      	movs	r3, r0
 8004d16:	000c      	movs	r4, r1
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <UART_SetConfig+0x3a0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d908      	bls.n	8004d34 <UART_SetConfig+0x364>
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <UART_SetConfig+0x3a4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d804      	bhi.n	8004d34 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d30:	60da      	str	r2, [r3, #12]
 8004d32:	e160      	b.n	8004ff6 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8004d34:	2313      	movs	r3, #19
 8004d36:	2218      	movs	r2, #24
 8004d38:	4694      	mov	ip, r2
 8004d3a:	44bc      	add	ip, r7
 8004d3c:	4463      	add	r3, ip
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e158      	b.n	8004ff6 <UART_SetConfig+0x626>
 8004d44:	efff69f3 	.word	0xefff69f3
 8004d48:	ffffcfff 	.word	0xffffcfff
 8004d4c:	40004800 	.word	0x40004800
 8004d50:	fffff4ff 	.word	0xfffff4ff
 8004d54:	40013800 	.word	0x40013800
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	40004400 	.word	0x40004400
 8004d60:	40004c00 	.word	0x40004c00
 8004d64:	40005000 	.word	0x40005000
 8004d68:	003d0900 	.word	0x003d0900
 8004d6c:	00f42400 	.word	0x00f42400
 8004d70:	000002ff 	.word	0x000002ff
 8004d74:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d000      	beq.n	8004d86 <UART_SetConfig+0x3b6>
 8004d84:	e0a9      	b.n	8004eda <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8004d86:	231b      	movs	r3, #27
 8004d88:	2218      	movs	r2, #24
 8004d8a:	4694      	mov	ip, r2
 8004d8c:	44bc      	add	ip, r7
 8004d8e:	4463      	add	r3, ip
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d86d      	bhi.n	8004e72 <UART_SetConfig+0x4a2>
 8004d96:	009a      	lsls	r2, r3, #2
 8004d98:	4b9f      	ldr	r3, [pc, #636]	; (8005018 <UART_SetConfig+0x648>)
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004da0:	f7fe f8da 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8004da4:	0003      	movs	r3, r0
 8004da6:	005a      	lsls	r2, r3, #1
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	18d2      	adds	r2, r2, r3
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	0019      	movs	r1, r3
 8004db6:	0010      	movs	r0, r2
 8004db8:	f7fb f9ae 	bl	8000118 <__udivsi3>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dc2:	e05e      	b.n	8004e82 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004dc4:	f7fe f8de 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	005a      	lsls	r2, r3, #1
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	18d2      	adds	r2, r2, r3
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	0019      	movs	r1, r3
 8004dda:	0010      	movs	r0, r2
 8004ddc:	f7fb f99c 	bl	8000118 <__udivsi3>
 8004de0:	0003      	movs	r3, r0
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004de6:	e04c      	b.n	8004e82 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de8:	4b8c      	ldr	r3, [pc, #560]	; (800501c <UART_SetConfig+0x64c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2210      	movs	r2, #16
 8004dee:	4013      	ands	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	4a89      	ldr	r2, [pc, #548]	; (8005020 <UART_SetConfig+0x650>)
 8004dfa:	189a      	adds	r2, r3, r2
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	0019      	movs	r1, r3
 8004e02:	0010      	movs	r0, r2
 8004e04:	f7fb f988 	bl	8000118 <__udivsi3>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004e0e:	e038      	b.n	8004e82 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	4a83      	ldr	r2, [pc, #524]	; (8005024 <UART_SetConfig+0x654>)
 8004e18:	189a      	adds	r2, r3, r2
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	0019      	movs	r1, r3
 8004e20:	0010      	movs	r0, r2
 8004e22:	f7fb f979 	bl	8000118 <__udivsi3>
 8004e26:	0003      	movs	r3, r0
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e2c:	e029      	b.n	8004e82 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e2e:	f7fe f805 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8004e32:	0003      	movs	r3, r0
 8004e34:	005a      	lsls	r2, r3, #1
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	18d2      	adds	r2, r2, r3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	0019      	movs	r1, r3
 8004e44:	0010      	movs	r0, r2
 8004e46:	f7fb f967 	bl	8000118 <__udivsi3>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e50:	e017      	b.n	8004e82 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	2280      	movs	r2, #128	; 0x80
 8004e5a:	0252      	lsls	r2, r2, #9
 8004e5c:	189a      	adds	r2, r3, r2
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	0019      	movs	r1, r3
 8004e64:	0010      	movs	r0, r2
 8004e66:	f7fb f957 	bl	8000118 <__udivsi3>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e70:	e007      	b.n	8004e82 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e72:	2313      	movs	r3, #19
 8004e74:	2218      	movs	r2, #24
 8004e76:	4694      	mov	ip, r2
 8004e78:	44bc      	add	ip, r7
 8004e7a:	4463      	add	r3, ip
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	701a      	strb	r2, [r3, #0]
        break;
 8004e80:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	2b0f      	cmp	r3, #15
 8004e86:	d920      	bls.n	8004eca <UART_SetConfig+0x4fa>
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	4a67      	ldr	r2, [pc, #412]	; (8005028 <UART_SetConfig+0x658>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d81c      	bhi.n	8004eca <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	200a      	movs	r0, #10
 8004e96:	2418      	movs	r4, #24
 8004e98:	193b      	adds	r3, r7, r4
 8004e9a:	181b      	adds	r3, r3, r0
 8004e9c:	210f      	movs	r1, #15
 8004e9e:	438a      	bics	r2, r1
 8004ea0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	4013      	ands	r3, r2
 8004eac:	b299      	uxth	r1, r3
 8004eae:	193b      	adds	r3, r7, r4
 8004eb0:	181b      	adds	r3, r3, r0
 8004eb2:	193a      	adds	r2, r7, r4
 8004eb4:	1812      	adds	r2, r2, r0
 8004eb6:	8812      	ldrh	r2, [r2, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	193a      	adds	r2, r7, r4
 8004ec2:	1812      	adds	r2, r2, r0
 8004ec4:	8812      	ldrh	r2, [r2, #0]
 8004ec6:	60da      	str	r2, [r3, #12]
 8004ec8:	e095      	b.n	8004ff6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8004eca:	2313      	movs	r3, #19
 8004ecc:	2218      	movs	r2, #24
 8004ece:	4694      	mov	ip, r2
 8004ed0:	44bc      	add	ip, r7
 8004ed2:	4463      	add	r3, ip
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e08d      	b.n	8004ff6 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8004eda:	231b      	movs	r3, #27
 8004edc:	2218      	movs	r2, #24
 8004ede:	4694      	mov	ip, r2
 8004ee0:	44bc      	add	ip, r7
 8004ee2:	4463      	add	r3, ip
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d86a      	bhi.n	8004fc0 <UART_SetConfig+0x5f0>
 8004eea:	009a      	lsls	r2, r3, #2
 8004eec:	4b4f      	ldr	r3, [pc, #316]	; (800502c <UART_SetConfig+0x65c>)
 8004eee:	18d3      	adds	r3, r2, r3
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ef4:	f7fe f830 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 8004ef8:	0002      	movs	r2, r0
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	18d2      	adds	r2, r2, r3
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	0019      	movs	r1, r3
 8004f08:	0010      	movs	r0, r2
 8004f0a:	f7fb f905 	bl	8000118 <__udivsi3>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f14:	e05c      	b.n	8004fd0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004f16:	f7fe f835 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	085b      	lsrs	r3, r3, #1
 8004f22:	18d2      	adds	r2, r2, r3
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	0019      	movs	r1, r3
 8004f2a:	0010      	movs	r0, r2
 8004f2c:	f7fb f8f4 	bl	8000118 <__udivsi3>
 8004f30:	0003      	movs	r3, r0
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f36:	e04b      	b.n	8004fd0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f38:	4b38      	ldr	r3, [pc, #224]	; (800501c <UART_SetConfig+0x64c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	4a39      	ldr	r2, [pc, #228]	; (8005030 <UART_SetConfig+0x660>)
 8004f4a:	189a      	adds	r2, r3, r2
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	0019      	movs	r1, r3
 8004f52:	0010      	movs	r0, r2
 8004f54:	f7fb f8e0 	bl	8000118 <__udivsi3>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004f5e:	e037      	b.n	8004fd0 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	4a33      	ldr	r2, [pc, #204]	; (8005034 <UART_SetConfig+0x664>)
 8004f68:	189a      	adds	r2, r3, r2
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	0019      	movs	r1, r3
 8004f70:	0010      	movs	r0, r2
 8004f72:	f7fb f8d1 	bl	8000118 <__udivsi3>
 8004f76:	0003      	movs	r3, r0
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f7c:	e028      	b.n	8004fd0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004f7e:	f7fd ff5d 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8004f82:	0002      	movs	r2, r0
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	18d2      	adds	r2, r2, r3
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	0019      	movs	r1, r3
 8004f92:	0010      	movs	r0, r2
 8004f94:	f7fb f8c0 	bl	8000118 <__udivsi3>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f9e:	e017      	b.n	8004fd0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	2280      	movs	r2, #128	; 0x80
 8004fa8:	0212      	lsls	r2, r2, #8
 8004faa:	189a      	adds	r2, r3, r2
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	0010      	movs	r0, r2
 8004fb4:	f7fb f8b0 	bl	8000118 <__udivsi3>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fbe:	e007      	b.n	8004fd0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004fc0:	2313      	movs	r3, #19
 8004fc2:	2218      	movs	r2, #24
 8004fc4:	4694      	mov	ip, r2
 8004fc6:	44bc      	add	ip, r7
 8004fc8:	4463      	add	r3, ip
 8004fca:	2201      	movs	r2, #1
 8004fcc:	701a      	strb	r2, [r3, #0]
        break;
 8004fce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	d908      	bls.n	8004fe8 <UART_SetConfig+0x618>
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	4a13      	ldr	r2, [pc, #76]	; (8005028 <UART_SetConfig+0x658>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d804      	bhi.n	8004fe8 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e006      	b.n	8004ff6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8004fe8:	2313      	movs	r3, #19
 8004fea:	2218      	movs	r2, #24
 8004fec:	4694      	mov	ip, r2
 8004fee:	44bc      	add	ip, r7
 8004ff0:	4463      	add	r3, ip
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2200      	movs	r2, #0
 8005000:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005002:	2313      	movs	r3, #19
 8005004:	2218      	movs	r2, #24
 8005006:	4694      	mov	ip, r2
 8005008:	44bc      	add	ip, r7
 800500a:	4463      	add	r3, ip
 800500c:	781b      	ldrb	r3, [r3, #0]
}
 800500e:	0018      	movs	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	b00e      	add	sp, #56	; 0x38
 8005014:	bdb0      	pop	{r4, r5, r7, pc}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	0800cae4 	.word	0x0800cae4
 800501c:	40021000 	.word	0x40021000
 8005020:	007a1200 	.word	0x007a1200
 8005024:	01e84800 	.word	0x01e84800
 8005028:	0000ffff 	.word	0x0000ffff
 800502c:	0800cb08 	.word	0x0800cb08
 8005030:	003d0900 	.word	0x003d0900
 8005034:	00f42400 	.word	0x00f42400

08005038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	2201      	movs	r2, #1
 8005046:	4013      	ands	r3, r2
 8005048:	d00b      	beq.n	8005062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4a4a      	ldr	r2, [pc, #296]	; (800517c <UART_AdvFeatureConfig+0x144>)
 8005052:	4013      	ands	r3, r2
 8005054:	0019      	movs	r1, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	2202      	movs	r2, #2
 8005068:	4013      	ands	r3, r2
 800506a:	d00b      	beq.n	8005084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4a43      	ldr	r2, [pc, #268]	; (8005180 <UART_AdvFeatureConfig+0x148>)
 8005074:	4013      	ands	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2204      	movs	r2, #4
 800508a:	4013      	ands	r3, r2
 800508c:	d00b      	beq.n	80050a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a3b      	ldr	r2, [pc, #236]	; (8005184 <UART_AdvFeatureConfig+0x14c>)
 8005096:	4013      	ands	r3, r2
 8005098:	0019      	movs	r1, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	2208      	movs	r2, #8
 80050ac:	4013      	ands	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4a34      	ldr	r2, [pc, #208]	; (8005188 <UART_AdvFeatureConfig+0x150>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2210      	movs	r2, #16
 80050ce:	4013      	ands	r3, r2
 80050d0:	d00b      	beq.n	80050ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4a2c      	ldr	r2, [pc, #176]	; (800518c <UART_AdvFeatureConfig+0x154>)
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2220      	movs	r2, #32
 80050f0:	4013      	ands	r3, r2
 80050f2:	d00b      	beq.n	800510c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	4a25      	ldr	r2, [pc, #148]	; (8005190 <UART_AdvFeatureConfig+0x158>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	0019      	movs	r1, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2240      	movs	r2, #64	; 0x40
 8005112:	4013      	ands	r3, r2
 8005114:	d01d      	beq.n	8005152 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <UART_AdvFeatureConfig+0x15c>)
 800511e:	4013      	ands	r3, r2
 8005120:	0019      	movs	r1, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	035b      	lsls	r3, r3, #13
 8005136:	429a      	cmp	r2, r3
 8005138:	d10b      	bne.n	8005152 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a15      	ldr	r2, [pc, #84]	; (8005198 <UART_AdvFeatureConfig+0x160>)
 8005142:	4013      	ands	r3, r2
 8005144:	0019      	movs	r1, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2280      	movs	r2, #128	; 0x80
 8005158:	4013      	ands	r3, r2
 800515a:	d00b      	beq.n	8005174 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4a0e      	ldr	r2, [pc, #56]	; (800519c <UART_AdvFeatureConfig+0x164>)
 8005164:	4013      	ands	r3, r2
 8005166:	0019      	movs	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
  }
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	b002      	add	sp, #8
 800517a:	bd80      	pop	{r7, pc}
 800517c:	fffdffff 	.word	0xfffdffff
 8005180:	fffeffff 	.word	0xfffeffff
 8005184:	fffbffff 	.word	0xfffbffff
 8005188:	ffff7fff 	.word	0xffff7fff
 800518c:	ffffefff 	.word	0xffffefff
 8005190:	ffffdfff 	.word	0xffffdfff
 8005194:	ffefffff 	.word	0xffefffff
 8005198:	ff9fffff 	.word	0xff9fffff
 800519c:	fff7ffff 	.word	0xfff7ffff

080051a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80051ae:	f7fc fb31 	bl	8001814 <HAL_GetTick>
 80051b2:	0003      	movs	r3, r0
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2208      	movs	r2, #8
 80051be:	4013      	ands	r3, r2
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d10d      	bne.n	80051e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	0399      	lsls	r1, r3, #14
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4b16      	ldr	r3, [pc, #88]	; (8005228 <UART_CheckIdleState+0x88>)
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	0013      	movs	r3, r2
 80051d2:	2200      	movs	r2, #0
 80051d4:	f000 f82a 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d001      	beq.n	80051e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e01f      	b.n	8005220 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2204      	movs	r2, #4
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d10d      	bne.n	800520a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	03d9      	lsls	r1, r3, #15
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <UART_CheckIdleState+0x88>)
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	0013      	movs	r3, r2
 80051fc:	2200      	movs	r2, #0
 80051fe:	f000 f815 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8005202:	1e03      	subs	r3, r0, #0
 8005204:	d001      	beq.n	800520a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e00a      	b.n	8005220 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2270      	movs	r2, #112	; 0x70
 800521a:	2100      	movs	r1, #0
 800521c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	0018      	movs	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	b004      	add	sp, #16
 8005226:	bd80      	pop	{r7, pc}
 8005228:	01ffffff 	.word	0x01ffffff

0800522c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	1dfb      	adds	r3, r7, #7
 800523a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523c:	e029      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	3301      	adds	r3, #1
 8005242:	d026      	beq.n	8005292 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005244:	f7fc fae6 	bl	8001814 <HAL_GetTick>
 8005248:	0002      	movs	r2, r0
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d11b      	bne.n	8005292 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4915      	ldr	r1, [pc, #84]	; (80052bc <UART_WaitOnFlagUntilTimeout+0x90>)
 8005266:	400a      	ands	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2101      	movs	r1, #1
 8005276:	438a      	bics	r2, r1
 8005278:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2270      	movs	r2, #112	; 0x70
 800528a:	2100      	movs	r1, #0
 800528c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e00f      	b.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	425a      	negs	r2, r3
 80052a2:	4153      	adcs	r3, r2
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	001a      	movs	r2, r3
 80052a8:	1dfb      	adds	r3, r7, #7
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d0c6      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	0018      	movs	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b004      	add	sp, #16
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	fffffe5f 	.word	0xfffffe5f

080052c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	490a      	ldr	r1, [pc, #40]	; (80052fc <UART_EndRxTransfer+0x3c>)
 80052d4:	400a      	ands	r2, r1
 80052d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	438a      	bics	r2, r1
 80052e6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b002      	add	sp, #8
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	fffffedf 	.word	0xfffffedf

08005300 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	225a      	movs	r2, #90	; 0x5a
 8005312:	2100      	movs	r1, #0
 8005314:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2252      	movs	r2, #82	; 0x52
 800531a:	2100      	movs	r1, #0
 800531c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	0018      	movs	r0, r3
 8005322:	f005 faa3 	bl	800a86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	46bd      	mov	sp, r7
 800532a:	b004      	add	sp, #16
 800532c:	bd80      	pop	{r7, pc}

0800532e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2140      	movs	r1, #64	; 0x40
 8005342:	438a      	bics	r2, r1
 8005344:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0018      	movs	r0, r3
 8005356:	f7ff fb33 	bl	80049c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	b002      	add	sp, #8
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800536c:	230e      	movs	r3, #14
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	215c      	movs	r1, #92	; 0x5c
 8005374:	5a52      	ldrh	r2, [r2, r1]
 8005376:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800537c:	2b22      	cmp	r3, #34	; 0x22
 800537e:	d140      	bne.n	8005402 <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005386:	210c      	movs	r1, #12
 8005388:	187b      	adds	r3, r7, r1
 800538a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800538c:	187b      	adds	r3, r7, r1
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b2da      	uxtb	r2, r3
 8005392:	230e      	movs	r3, #14
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b2d9      	uxtb	r1, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	400a      	ands	r2, r1
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	225a      	movs	r2, #90	; 0x5a
 80053b2:	5a9b      	ldrh	r3, [r3, r2]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b299      	uxth	r1, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	225a      	movs	r2, #90	; 0x5a
 80053be:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	225a      	movs	r2, #90	; 0x5a
 80053c4:	5a9b      	ldrh	r3, [r3, r2]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d122      	bne.n	8005412 <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4911      	ldr	r1, [pc, #68]	; (800541c <UART_RxISR_8BIT+0xb8>)
 80053d8:	400a      	ands	r2, r1
 80053da:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2101      	movs	r1, #1
 80053e8:	438a      	bics	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f005 fa4a 	bl	800a894 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005400:	e007      	b.n	8005412 <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2108      	movs	r1, #8
 800540e:	430a      	orrs	r2, r1
 8005410:	619a      	str	r2, [r3, #24]
}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	46bd      	mov	sp, r7
 8005416:	b004      	add	sp, #16
 8005418:	bd80      	pop	{r7, pc}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	fffffedf 	.word	0xfffffedf

08005420 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005428:	230e      	movs	r3, #14
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	215c      	movs	r1, #92	; 0x5c
 8005430:	5a52      	ldrh	r2, [r2, r1]
 8005432:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005438:	2b22      	cmp	r3, #34	; 0x22
 800543a:	d140      	bne.n	80054be <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005442:	210c      	movs	r1, #12
 8005444:	187b      	adds	r3, r7, r1
 8005446:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800544e:	187b      	adds	r3, r7, r1
 8005450:	220e      	movs	r2, #14
 8005452:	18ba      	adds	r2, r7, r2
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	8812      	ldrh	r2, [r2, #0]
 8005458:	4013      	ands	r3, r2
 800545a:	b29a      	uxth	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	225a      	movs	r2, #90	; 0x5a
 800546e:	5a9b      	ldrh	r3, [r3, r2]
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b299      	uxth	r1, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	225a      	movs	r2, #90	; 0x5a
 800547a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	225a      	movs	r2, #90	; 0x5a
 8005480:	5a9b      	ldrh	r3, [r3, r2]
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d122      	bne.n	80054ce <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4911      	ldr	r1, [pc, #68]	; (80054d8 <UART_RxISR_16BIT+0xb8>)
 8005494:	400a      	ands	r2, r1
 8005496:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2101      	movs	r1, #1
 80054a4:	438a      	bics	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	0018      	movs	r0, r3
 80054b8:	f005 f9ec 	bl	800a894 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054bc:	e007      	b.n	80054ce <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2108      	movs	r1, #8
 80054ca:	430a      	orrs	r2, r1
 80054cc:	619a      	str	r2, [r3, #24]
}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b004      	add	sp, #16
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	fffffedf 	.word	0xfffffedf

080054dc <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	1d3b      	adds	r3, r7, #4
 80054e6:	6019      	str	r1, [r3, #0]
 80054e8:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2317      	movs	r3, #23
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2270      	movs	r2, #112	; 0x70
 80054f6:	5c9b      	ldrb	r3, [r3, r2]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e04b      	b.n	8005598 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xbc>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2270      	movs	r2, #112	; 0x70
 8005504:	2101      	movs	r1, #1
 8005506:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2224      	movs	r2, #36	; 0x24
 800550c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2101      	movs	r1, #1
 800551a:	438a      	bics	r2, r1
 800551c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 8005526:	4013      	ands	r3, r2
 8005528:	0019      	movs	r1, r3
 800552a:	1d3b      	adds	r3, r7, #4
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d105      	bne.n	800554a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	6819      	ldr	r1, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	f000 f84f 	bl	80055e8 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2101      	movs	r1, #1
 8005556:	430a      	orrs	r2, r1
 8005558:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800555a:	f7fc f95b 	bl	8001814 <HAL_GetTick>
 800555e:	0003      	movs	r3, r0
 8005560:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	03d9      	lsls	r1, r3, #15
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	0013      	movs	r3, r2
 8005570:	2200      	movs	r2, #0
 8005572:	f7ff fe5b 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8005576:	1e03      	subs	r3, r0, #0
 8005578:	d004      	beq.n	8005584 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa8>
  {
    status = HAL_TIMEOUT;
 800557a:	2317      	movs	r3, #23
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	2203      	movs	r2, #3
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e002      	b.n	800558a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2270      	movs	r2, #112	; 0x70
 800558e:	2100      	movs	r1, #0
 8005590:	5499      	strb	r1, [r3, r2]

  return status;
 8005592:	2317      	movs	r3, #23
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	781b      	ldrb	r3, [r3, #0]
}
 8005598:	0018      	movs	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	b006      	add	sp, #24
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	ffcfffff 	.word	0xffcfffff
 80055a4:	01ffffff 	.word	0x01ffffff

080055a8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2270      	movs	r2, #112	; 0x70
 80055b4:	5c9b      	ldrb	r3, [r3, r2]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_UARTEx_EnableStopMode+0x16>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e010      	b.n	80055e0 <HAL_UARTEx_EnableStopMode+0x38>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2270      	movs	r2, #112	; 0x70
 80055c2:	2101      	movs	r1, #1
 80055c4:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2102      	movs	r1, #2
 80055d2:	430a      	orrs	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2270      	movs	r2, #112	; 0x70
 80055da:	2100      	movs	r1, #0
 80055dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b002      	add	sp, #8
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	6019      	str	r1, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2210      	movs	r2, #16
 80055fe:	4393      	bics	r3, r2
 8005600:	001a      	movs	r2, r3
 8005602:	1d3b      	adds	r3, r7, #4
 8005604:	889b      	ldrh	r3, [r3, #4]
 8005606:	0019      	movs	r1, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	0a19      	lsrs	r1, r3, #8
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	799b      	ldrb	r3, [r3, #6]
 800561e:	061a      	lsls	r2, r3, #24
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
}
 8005628:	46c0      	nop			; (mov r8, r8)
 800562a:	46bd      	mov	sp, r7
 800562c:	b004      	add	sp, #16
 800562e:	bd80      	pop	{r7, pc}

08005630 <lorawan_driver_LORA_getSendState>:

/**
 * Return the current/last SendState - use to follow the async send procedure
 * if used in polling mode
 */
lorawan_driver_sendState lorawan_driver_LORA_getSendState(){
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWAN(("lorawan_driver_LORA_getSendState\r\n"));
	return __loraWanState.sendState;
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <lorawan_driver_LORA_getSendState+0x10>)
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	b2db      	uxtb	r3, r3
}
 800563a:	0018      	movs	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	200000ac 	.word	0x200000ac

08005644 <_itsdk_console_private>:

/**
 * Dafault Operation
 */

static itsdk_console_return_e _itsdk_console_private(char * buffer, uint8_t sz) {
 8005644:	b5b0      	push	{r4, r5, r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	000a      	movs	r2, r1
 800564e:	1cfb      	adds	r3, r7, #3
 8005650:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 8005652:	1cfb      	adds	r3, r7, #3
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d000      	beq.n	800565c <_itsdk_console_private+0x18>
 800565a:	e0f9      	b.n	8005850 <_itsdk_console_private+0x20c>
		switch ( buffer[0] ) {
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	3b3f      	subs	r3, #63	; 0x3f
 8005662:	2b35      	cmp	r3, #53	; 0x35
 8005664:	d900      	bls.n	8005668 <_itsdk_console_private+0x24>
 8005666:	e10d      	b.n	8005884 <_itsdk_console_private+0x240>
 8005668:	009a      	lsls	r2, r3, #2
 800566a:	4b89      	ldr	r3, [pc, #548]	; (8005890 <_itsdk_console_private+0x24c>)
 800566c:	18d3      	adds	r3, r2, r3
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	469f      	mov	pc, r3
		case '?':
			// help
			_itsdk_console_printf("X          : exit console\r\n");
 8005672:	4b88      	ldr	r3, [pc, #544]	; (8005894 <_itsdk_console_private+0x250>)
 8005674:	0018      	movs	r0, r3
 8005676:	f000 fa31 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("R          : reset device\r\n");
 800567a:	4b87      	ldr	r3, [pc, #540]	; (8005898 <_itsdk_console_private+0x254>)
 800567c:	0018      	movs	r0, r3
 800567e:	f000 fa2d 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("R!         : clear the whole eeprom\r\n");
 8005682:	4b86      	ldr	r3, [pc, #536]	; (800589c <_itsdk_console_private+0x258>)
 8005684:	0018      	movs	r0, r3
 8005686:	f000 fa29 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("l / L      : switch LowPower ON / OFF\r\n");
 800568a:	4b85      	ldr	r3, [pc, #532]	; (80058a0 <_itsdk_console_private+0x25c>)
 800568c:	0018      	movs	r0, r3
 800568e:	f000 fa25 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("s          : print device state\r\n");
 8005692:	4b84      	ldr	r3, [pc, #528]	; (80058a4 <_itsdk_console_private+0x260>)
 8005694:	0018      	movs	r0, r3
 8005696:	f000 fa21 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("t          : print current time in S\r\n");
 800569a:	4b83      	ldr	r3, [pc, #524]	; (80058a8 <_itsdk_console_private+0x264>)
 800569c:	0018      	movs	r0, r3
 800569e:	f000 fa1d 	bl	8005adc <_itsdk_console_printf>
#if ITSDK_WITH_ADC != __ADC_NONE
			_itsdk_console_printf("T          : print current cpu temperature in oC\r\n");
 80056a2:	4b82      	ldr	r3, [pc, #520]	; (80058ac <_itsdk_console_private+0x268>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 fa19 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("b          : print battery level\r\n");
 80056aa:	4b81      	ldr	r3, [pc, #516]	; (80058b0 <_itsdk_console_private+0x26c>)
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 fa15 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("B          : print VCC level\r\n");
 80056b2:	4b80      	ldr	r3, [pc, #512]	; (80058b4 <_itsdk_console_private+0x270>)
 80056b4:	0018      	movs	r0, r3
 80056b6:	f000 fa11 	bl	8005adc <_itsdk_console_printf>
#endif
			_itsdk_console_printf("r          : print last Reset Cause\r\n");
 80056ba:	4b7f      	ldr	r3, [pc, #508]	; (80058b8 <_itsdk_console_private+0x274>)
 80056bc:	0018      	movs	r0, r3
 80056be:	f000 fa0d 	bl	8005adc <_itsdk_console_printf>

			return ITSDK_CONSOLE_SUCCES;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e0df      	b.n	8005886 <_itsdk_console_private+0x242>
		case 'X':
			// exit console
			__console.loginState=0;
 80056c6:	4b7d      	ldr	r3, [pc, #500]	; (80058bc <_itsdk_console_private+0x278>)
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	2101      	movs	r1, #1
 80056cc:	438a      	bics	r2, r1
 80056ce:	701a      	strb	r2, [r3, #0]
			_itsdk_console_printf("OK\r\n");
 80056d0:	4b7b      	ldr	r3, [pc, #492]	; (80058c0 <_itsdk_console_private+0x27c>)
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 fa02 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80056d8:	2300      	movs	r3, #0
 80056da:	e0d4      	b.n	8005886 <_itsdk_console_private+0x242>
		case 't':
			// print time
			_itsdk_console_printf("Run time is %d s\r\n",(uint32_t)(itsdk_time_get_ms()/1000L));
 80056dc:	f004 f896 	bl	800980c <itsdk_time_get_ms>
 80056e0:	22fa      	movs	r2, #250	; 0xfa
 80056e2:	0092      	lsls	r2, r2, #2
 80056e4:	2300      	movs	r3, #0
 80056e6:	f7fa feb1 	bl	800044c <__aeabi_uldivmod>
 80056ea:	0003      	movs	r3, r0
 80056ec:	000c      	movs	r4, r1
 80056ee:	001a      	movs	r2, r3
 80056f0:	4b74      	ldr	r3, [pc, #464]	; (80058c4 <_itsdk_console_private+0x280>)
 80056f2:	0011      	movs	r1, r2
 80056f4:	0018      	movs	r0, r3
 80056f6:	f000 f9f1 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("OK\r\n");
 80056fa:	4b71      	ldr	r3, [pc, #452]	; (80058c0 <_itsdk_console_private+0x27c>)
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 f9ed 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8005702:	2300      	movs	r3, #0
 8005704:	e0bf      	b.n	8005886 <_itsdk_console_private+0x242>
#if ITSDK_WITH_ADC != __ADC_NONE
		case 'T':
			// print temperature
			{
			uint16_t t = adc_getTemperature();
 8005706:	f004 faa7 	bl	8009c58 <adc_getTemperature>
 800570a:	0003      	movs	r3, r0
 800570c:	001a      	movs	r2, r3
 800570e:	240e      	movs	r4, #14
 8005710:	193b      	adds	r3, r7, r4
 8005712:	801a      	strh	r2, [r3, #0]
			_itsdk_console_printf("Temperature is %d.%doC\r\n",t/100,t-((t/100)*100));
 8005714:	193b      	adds	r3, r7, r4
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	2164      	movs	r1, #100	; 0x64
 800571a:	0018      	movs	r0, r3
 800571c:	f7fa fcfc 	bl	8000118 <__udivsi3>
 8005720:	0003      	movs	r3, r0
 8005722:	b29b      	uxth	r3, r3
 8005724:	001d      	movs	r5, r3
 8005726:	0022      	movs	r2, r4
 8005728:	18bb      	adds	r3, r7, r2
 800572a:	881c      	ldrh	r4, [r3, #0]
 800572c:	18bb      	adds	r3, r7, r2
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	2164      	movs	r1, #100	; 0x64
 8005732:	0018      	movs	r0, r3
 8005734:	f7fa fcf0 	bl	8000118 <__udivsi3>
 8005738:	0003      	movs	r3, r0
 800573a:	b29b      	uxth	r3, r3
 800573c:	001a      	movs	r2, r3
 800573e:	0013      	movs	r3, r2
 8005740:	065b      	lsls	r3, r3, #25
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	189b      	adds	r3, r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	18e2      	adds	r2, r4, r3
 8005750:	4b5d      	ldr	r3, [pc, #372]	; (80058c8 <_itsdk_console_private+0x284>)
 8005752:	0029      	movs	r1, r5
 8005754:	0018      	movs	r0, r3
 8005756:	f000 f9c1 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("OK\r\n");
 800575a:	4b59      	ldr	r3, [pc, #356]	; (80058c0 <_itsdk_console_private+0x27c>)
 800575c:	0018      	movs	r0, r3
 800575e:	f000 f9bd 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8005762:	2300      	movs	r3, #0
 8005764:	e08f      	b.n	8005886 <_itsdk_console_private+0x242>
			}
		case 'b':
			// battery level
			_itsdk_console_printf("Battery level %dmV\r\n",(uint32_t)(adc_getVBat()));
 8005766:	f004 faff 	bl	8009d68 <adc_getVBat>
 800576a:	0003      	movs	r3, r0
 800576c:	001a      	movs	r2, r3
 800576e:	4b57      	ldr	r3, [pc, #348]	; (80058cc <_itsdk_console_private+0x288>)
 8005770:	0011      	movs	r1, r2
 8005772:	0018      	movs	r0, r3
 8005774:	f000 f9b2 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("OK\r\n");
 8005778:	4b51      	ldr	r3, [pc, #324]	; (80058c0 <_itsdk_console_private+0x27c>)
 800577a:	0018      	movs	r0, r3
 800577c:	f000 f9ae 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8005780:	2300      	movs	r3, #0
 8005782:	e080      	b.n	8005886 <_itsdk_console_private+0x242>
		case 'B':
			// Vcc level
			_itsdk_console_printf("VCC level %dmV\r\n",(uint32_t)(adc_getVdd()));
 8005784:	f004 fac0 	bl	8009d08 <adc_getVdd>
 8005788:	0003      	movs	r3, r0
 800578a:	001a      	movs	r2, r3
 800578c:	4b50      	ldr	r3, [pc, #320]	; (80058d0 <_itsdk_console_private+0x28c>)
 800578e:	0011      	movs	r1, r2
 8005790:	0018      	movs	r0, r3
 8005792:	f000 f9a3 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("OK\r\n");
 8005796:	4b4a      	ldr	r3, [pc, #296]	; (80058c0 <_itsdk_console_private+0x27c>)
 8005798:	0018      	movs	r0, r3
 800579a:	f000 f99f 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 800579e:	2300      	movs	r3, #0
 80057a0:	e071      	b.n	8005886 <_itsdk_console_private+0x242>
#endif
		case 'r':
			// Last Reset cause
			_itsdk_console_printf("Reset: ");
 80057a2:	4b4c      	ldr	r3, [pc, #304]	; (80058d4 <_itsdk_console_private+0x290>)
 80057a4:	0018      	movs	r0, r3
 80057a6:	f000 f999 	bl	8005adc <_itsdk_console_printf>
			switch(itsdk_state.lastResetCause) {
 80057aa:	4b4b      	ldr	r3, [pc, #300]	; (80058d8 <_itsdk_console_private+0x294>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b06      	cmp	r3, #6
 80057b0:	d827      	bhi.n	8005802 <_itsdk_console_private+0x1be>
 80057b2:	009a      	lsls	r2, r3, #2
 80057b4:	4b49      	ldr	r3, [pc, #292]	; (80058dc <_itsdk_console_private+0x298>)
 80057b6:	18d3      	adds	r3, r2, r3
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	469f      	mov	pc, r3
			case RESET_CAUSE_BOR: _itsdk_console_printf("BOR\r\n"); break;
 80057bc:	4b48      	ldr	r3, [pc, #288]	; (80058e0 <_itsdk_console_private+0x29c>)
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 f98c 	bl	8005adc <_itsdk_console_printf>
 80057c4:	e022      	b.n	800580c <_itsdk_console_private+0x1c8>
			case RESET_CAUSE_RESET_PIN: _itsdk_console_printf("RESET PIN\r\n"); break;
 80057c6:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <_itsdk_console_private+0x2a0>)
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 f987 	bl	8005adc <_itsdk_console_printf>
 80057ce:	e01d      	b.n	800580c <_itsdk_console_private+0x1c8>
			case RESET_CAUSE_POWER_ON: _itsdk_console_printf("POWER ON\r\n"); break;
 80057d0:	4b45      	ldr	r3, [pc, #276]	; (80058e8 <_itsdk_console_private+0x2a4>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f000 f982 	bl	8005adc <_itsdk_console_printf>
 80057d8:	e018      	b.n	800580c <_itsdk_console_private+0x1c8>
			case RESET_CAUSE_SOFTWARE: _itsdk_console_printf("SOFT\r\n"); break;
 80057da:	4b44      	ldr	r3, [pc, #272]	; (80058ec <_itsdk_console_private+0x2a8>)
 80057dc:	0018      	movs	r0, r3
 80057de:	f000 f97d 	bl	8005adc <_itsdk_console_printf>
 80057e2:	e013      	b.n	800580c <_itsdk_console_private+0x1c8>
			case RESET_CAUSE_IWDG: _itsdk_console_printf("IWDG\r\n"); break;
 80057e4:	4b42      	ldr	r3, [pc, #264]	; (80058f0 <_itsdk_console_private+0x2ac>)
 80057e6:	0018      	movs	r0, r3
 80057e8:	f000 f978 	bl	8005adc <_itsdk_console_printf>
 80057ec:	e00e      	b.n	800580c <_itsdk_console_private+0x1c8>
			case RESET_CAUSE_WWDG: _itsdk_console_printf("WWDG\r\n"); break;
 80057ee:	4b41      	ldr	r3, [pc, #260]	; (80058f4 <_itsdk_console_private+0x2b0>)
 80057f0:	0018      	movs	r0, r3
 80057f2:	f000 f973 	bl	8005adc <_itsdk_console_printf>
 80057f6:	e009      	b.n	800580c <_itsdk_console_private+0x1c8>
			case RESET_CAUSE_LOWPOWER: _itsdk_console_printf("LOW POWER"); break;
 80057f8:	4b3f      	ldr	r3, [pc, #252]	; (80058f8 <_itsdk_console_private+0x2b4>)
 80057fa:	0018      	movs	r0, r3
 80057fc:	f000 f96e 	bl	8005adc <_itsdk_console_printf>
 8005800:	e004      	b.n	800580c <_itsdk_console_private+0x1c8>
			default:
				_itsdk_console_printf("UNKNOWN\r\n"); break;
 8005802:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <_itsdk_console_private+0x2b8>)
 8005804:	0018      	movs	r0, r3
 8005806:	f000 f969 	bl	8005adc <_itsdk_console_printf>
 800580a:	46c0      	nop			; (mov r8, r8)
			}
			_itsdk_console_printf("OK\r\n");
 800580c:	4b2c      	ldr	r3, [pc, #176]	; (80058c0 <_itsdk_console_private+0x27c>)
 800580e:	0018      	movs	r0, r3
 8005810:	f000 f964 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8005814:	2300      	movs	r3, #0
 8005816:	e036      	b.n	8005886 <_itsdk_console_private+0x242>
		case 'R':
			// Reset device
			_itsdk_console_printf("OK\r\n");
 8005818:	4b29      	ldr	r3, [pc, #164]	; (80058c0 <_itsdk_console_private+0x27c>)
 800581a:	0018      	movs	r0, r3
 800581c:	f000 f95e 	bl	8005adc <_itsdk_console_printf>
			itsdk_reset();
 8005820:	f004 fe34 	bl	800a48c <itsdk_reset>
			_itsdk_console_printf("KO\r\n");			// never reached...
 8005824:	4b36      	ldr	r3, [pc, #216]	; (8005900 <_itsdk_console_private+0x2bc>)
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f958 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 800582c:	2302      	movs	r3, #2
 800582e:	e02a      	b.n	8005886 <_itsdk_console_private+0x242>
		case 'l':
			// switch lowPower On
			lowPower_enable();
 8005830:	f003 fd5a 	bl	80092e8 <lowPower_enable>
			_itsdk_console_printf("OK\r\n");
 8005834:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <_itsdk_console_private+0x27c>)
 8005836:	0018      	movs	r0, r3
 8005838:	f000 f950 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 800583c:	2300      	movs	r3, #0
 800583e:	e022      	b.n	8005886 <_itsdk_console_private+0x242>
		case 'L':
			// switch LowPower Off
			lowPower_disable();
 8005840:	f003 fd5c 	bl	80092fc <lowPower_disable>
			_itsdk_console_printf("OK\r\n");
 8005844:	4b1e      	ldr	r3, [pc, #120]	; (80058c0 <_itsdk_console_private+0x27c>)
 8005846:	0018      	movs	r0, r3
 8005848:	f000 f948 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 800584c:	2300      	movs	r3, #0
 800584e:	e01a      	b.n	8005886 <_itsdk_console_private+0x242>
		}
	} else if (sz==2) {
 8005850:	1cfb      	adds	r3, r7, #3
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d115      	bne.n	8005884 <_itsdk_console_private+0x240>
		if ( buffer[0] == 'R' && buffer[1] == '!' ) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b52      	cmp	r3, #82	; 0x52
 800585e:	d111      	bne.n	8005884 <_itsdk_console_private+0x240>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b21      	cmp	r3, #33	; 0x21
 8005868:	d10c      	bne.n	8005884 <_itsdk_console_private+0x240>
			// Clear all the eeprom content the reset - hard factory default
			_itsdk_console_printf("OK\r\n");
 800586a:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <_itsdk_console_private+0x27c>)
 800586c:	0018      	movs	r0, r3
 800586e:	f000 f935 	bl	8005adc <_itsdk_console_printf>
			eeprom_clearAllEprom();
 8005872:	f000 fc07 	bl	8006084 <eeprom_clearAllEprom>
			itsdk_delayMs(100);
 8005876:	2064      	movs	r0, #100	; 0x64
 8005878:	f004 fe5a 	bl	800a530 <itsdk_delayMs>
			itsdk_reset();
 800587c:	f004 fe06 	bl	800a48c <itsdk_reset>
			return ITSDK_CONSOLE_SUCCES;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <_itsdk_console_private+0x242>
		}
	}
	return ITSDK_CONSOLE_NOTFOUND;
 8005884:	2301      	movs	r3, #1
}
 8005886:	0018      	movs	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	b004      	add	sp, #16
 800588c:	bdb0      	pop	{r4, r5, r7, pc}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	0800cb2c 	.word	0x0800cb2c
 8005894:	0800bfac 	.word	0x0800bfac
 8005898:	0800bfc8 	.word	0x0800bfc8
 800589c:	0800bfe4 	.word	0x0800bfe4
 80058a0:	0800c00c 	.word	0x0800c00c
 80058a4:	0800c034 	.word	0x0800c034
 80058a8:	0800c058 	.word	0x0800c058
 80058ac:	0800c080 	.word	0x0800c080
 80058b0:	0800c0b4 	.word	0x0800c0b4
 80058b4:	0800c0d8 	.word	0x0800c0d8
 80058b8:	0800c0f8 	.word	0x0800c0f8
 80058bc:	200000d0 	.word	0x200000d0
 80058c0:	0800c120 	.word	0x0800c120
 80058c4:	0800c128 	.word	0x0800c128
 80058c8:	0800c13c 	.word	0x0800c13c
 80058cc:	0800c158 	.word	0x0800c158
 80058d0:	0800c170 	.word	0x0800c170
 80058d4:	0800c184 	.word	0x0800c184
 80058d8:	200004b0 	.word	0x200004b0
 80058dc:	0800cc04 	.word	0x0800cc04
 80058e0:	0800c18c 	.word	0x0800c18c
 80058e4:	0800c194 	.word	0x0800c194
 80058e8:	0800c1a0 	.word	0x0800c1a0
 80058ec:	0800c1ac 	.word	0x0800c1ac
 80058f0:	0800c1b4 	.word	0x0800c1b4
 80058f4:	0800c1bc 	.word	0x0800c1bc
 80058f8:	0800c1c4 	.word	0x0800c1c4
 80058fc:	0800c1d0 	.word	0x0800c1d0
 8005900:	0800c1dc 	.word	0x0800c1dc

08005904 <_itsdk_console_public>:

static itsdk_console_return_e _itsdk_console_public(char * buffer, uint8_t sz) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	000a      	movs	r2, r1
 800590e:	1cfb      	adds	r3, r7, #3
 8005910:	701a      	strb	r2, [r3, #0]

	if ( sz == 1 ) {
 8005912:	1cfb      	adds	r3, r7, #3
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d14c      	bne.n	80059b4 <_itsdk_console_public+0xb0>
		switch ( buffer[0] ) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b6f      	cmp	r3, #111	; 0x6f
 8005920:	d020      	beq.n	8005964 <_itsdk_console_public+0x60>
 8005922:	dc04      	bgt.n	800592e <_itsdk_console_public+0x2a>
 8005924:	2b21      	cmp	r3, #33	; 0x21
 8005926:	d023      	beq.n	8005970 <_itsdk_console_public+0x6c>
 8005928:	2b3f      	cmp	r3, #63	; 0x3f
 800592a:	d005      	beq.n	8005938 <_itsdk_console_public+0x34>
 800592c:	e042      	b.n	80059b4 <_itsdk_console_public+0xb0>
 800592e:	2b73      	cmp	r3, #115	; 0x73
 8005930:	d03c      	beq.n	80059ac <_itsdk_console_public+0xa8>
 8005932:	2b76      	cmp	r3, #118	; 0x76
 8005934:	d026      	beq.n	8005984 <_itsdk_console_public+0x80>
 8005936:	e03d      	b.n	80059b4 <_itsdk_console_public+0xb0>
		case '?':
			// help
			_itsdk_console_printf("--- Common\r\n");
 8005938:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <_itsdk_console_public+0xbc>)
 800593a:	0018      	movs	r0, r3
 800593c:	f000 f8ce 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("?          : print help\r\n");
 8005940:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <_itsdk_console_public+0xc0>)
 8005942:	0018      	movs	r0, r3
 8005944:	f000 f8ca 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("!          : print copyright\r\n");
 8005948:	4b1f      	ldr	r3, [pc, #124]	; (80059c8 <_itsdk_console_public+0xc4>)
 800594a:	0018      	movs	r0, r3
 800594c:	f000 f8c6 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("v          : print version\r\n");
 8005950:	4b1e      	ldr	r3, [pc, #120]	; (80059cc <_itsdk_console_public+0xc8>)
 8005952:	0018      	movs	r0, r3
 8005954:	f000 f8c2 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("o          : print OK\r\n");
 8005958:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <_itsdk_console_public+0xcc>)
 800595a:	0018      	movs	r0, r3
 800595c:	f000 f8be 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8005960:	2300      	movs	r3, #0
 8005962:	e028      	b.n	80059b6 <_itsdk_console_public+0xb2>
			break;
		case 'o':
			_itsdk_console_printf("OK\r\n");
 8005964:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <_itsdk_console_public+0xd0>)
 8005966:	0018      	movs	r0, r3
 8005968:	f000 f8b8 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 800596c:	2300      	movs	r3, #0
 800596e:	e022      	b.n	80059b6 <_itsdk_console_public+0xb2>
			break;
		case '!':
			// Copyright
			_itsdk_console_printf("IT_SDK - (c) 2020 - Paul Pinault aka Disk91\r\n");
 8005970:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <_itsdk_console_public+0xd4>)
 8005972:	0018      	movs	r0, r3
 8005974:	f000 f8b2 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf(ITSKD_CONSOLE_COPYRIGHT);
 8005978:	4b18      	ldr	r3, [pc, #96]	; (80059dc <_itsdk_console_public+0xd8>)
 800597a:	0018      	movs	r0, r3
 800597c:	f000 f8ae 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8005980:	2300      	movs	r3, #0
 8005982:	e018      	b.n	80059b6 <_itsdk_console_public+0xb2>
			break;
		case 'v':
			// Version
			_itsdk_console_printf("FW Version %s\r\n",ITSDK_USER_VERSION);
 8005984:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <_itsdk_console_public+0xdc>)
 8005986:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <_itsdk_console_public+0xe0>)
 8005988:	0011      	movs	r1, r2
 800598a:	0018      	movs	r0, r3
 800598c:	f000 f8a6 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("Build %s %s\r\n",__DATE__, __TIME__);
 8005990:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <_itsdk_console_public+0xe4>)
 8005992:	4916      	ldr	r1, [pc, #88]	; (80059ec <_itsdk_console_public+0xe8>)
 8005994:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <_itsdk_console_public+0xec>)
 8005996:	0018      	movs	r0, r3
 8005998:	f000 f8a0 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("IT_SDK Version %s\r\n",ITSDK_VERSION);
 800599c:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <_itsdk_console_public+0xf0>)
 800599e:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <_itsdk_console_public+0xf4>)
 80059a0:	0011      	movs	r1, r2
 80059a2:	0018      	movs	r0, r3
 80059a4:	f000 f89a 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80059a8:	2300      	movs	r3, #0
 80059aa:	e004      	b.n	80059b6 <_itsdk_console_public+0xb2>
			break;
		case 's':
			// State
			itsdk_print_state();
 80059ac:	f001 f802 	bl	80069b4 <itsdk_print_state>
			return ITSDK_CONSOLE_SUCCES;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e000      	b.n	80059b6 <_itsdk_console_public+0xb2>
			break;
		}
	}
	return ITSDK_CONSOLE_NOTFOUND;
 80059b4:	2301      	movs	r3, #1
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b002      	add	sp, #8
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	0800c1e4 	.word	0x0800c1e4
 80059c4:	0800c1f4 	.word	0x0800c1f4
 80059c8:	0800c210 	.word	0x0800c210
 80059cc:	0800c230 	.word	0x0800c230
 80059d0:	0800c250 	.word	0x0800c250
 80059d4:	0800c120 	.word	0x0800c120
 80059d8:	0800c268 	.word	0x0800c268
 80059dc:	0800c298 	.word	0x0800c298
 80059e0:	0800c2b0 	.word	0x0800c2b0
 80059e4:	0800c2b4 	.word	0x0800c2b4
 80059e8:	0800c2c4 	.word	0x0800c2c4
 80059ec:	0800c2d0 	.word	0x0800c2d0
 80059f0:	0800c2dc 	.word	0x0800c2dc
 80059f4:	0800c2ec 	.word	0x0800c2ec
 80059f8:	0800c2fc 	.word	0x0800c2fc

080059fc <itsdk_console_setup>:


/**
 * Setup the console & associated chain
 */
void itsdk_console_setup() {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
	__console.expire = 0;
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <itsdk_console_setup+0x38>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	62da      	str	r2, [r3, #44]	; 0x2c
	__console.loginState = 0;
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <itsdk_console_setup+0x38>)
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	438a      	bics	r2, r1
 8005a0e:	701a      	strb	r2, [r3, #0]
	__console.pBuffer = 0;
 8005a10:	4b08      	ldr	r3, [pc, #32]	; (8005a34 <itsdk_console_setup+0x38>)
 8005a12:	781a      	ldrb	r2, [r3, #0]
 8005a14:	2101      	movs	r1, #1
 8005a16:	400a      	ands	r2, r1
 8005a18:	701a      	strb	r2, [r3, #0]
	__console_head_chain.console_private = _itsdk_console_private;
 8005a1a:	4b07      	ldr	r3, [pc, #28]	; (8005a38 <itsdk_console_setup+0x3c>)
 8005a1c:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <itsdk_console_setup+0x40>)
 8005a1e:	601a      	str	r2, [r3, #0]
	__console_head_chain.console_public = _itsdk_console_public;
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <itsdk_console_setup+0x3c>)
 8005a22:	4a07      	ldr	r2, [pc, #28]	; (8005a40 <itsdk_console_setup+0x44>)
 8005a24:	605a      	str	r2, [r3, #4]
	__console_head_chain.next = NULL;
 8005a26:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <itsdk_console_setup+0x3c>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	200000d0 	.word	0x200000d0
 8005a38:	20000100 	.word	0x20000100
 8005a3c:	08005645 	.word	0x08005645
 8005a40:	08005905 	.word	0x08005905

08005a44 <itsdk_console_loop>:

/**
 * This function is call on every wake-up to proceed the pending characters on the serial
 * port and call the associated services.
 */
void itsdk_console_loop() {
 8005a44:	b5b0      	push	{r4, r5, r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0

	char c;
	serial_read_response_e r;

	// Check the expiration
	if ( __console.loginState == 1 ) {
 8005a4a:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <itsdk_console_loop+0x90>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	4013      	ands	r3, r2
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d021      	beq.n	8005a9c <itsdk_console_loop+0x58>
		uint64_t s = itsdk_time_get_ms()/1000;
 8005a58:	f003 fed8 	bl	800980c <itsdk_time_get_ms>
 8005a5c:	22fa      	movs	r2, #250	; 0xfa
 8005a5e:	0092      	lsls	r2, r2, #2
 8005a60:	2300      	movs	r3, #0
 8005a62:	f7fa fcf3 	bl	800044c <__aeabi_uldivmod>
 8005a66:	0002      	movs	r2, r0
 8005a68:	000b      	movs	r3, r1
 8005a6a:	60ba      	str	r2, [r7, #8]
 8005a6c:	60fb      	str	r3, [r7, #12]
		if ( __console.expire < s ) {
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <itsdk_console_loop+0x90>)
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	001c      	movs	r4, r3
 8005a74:	2300      	movs	r3, #0
 8005a76:	001d      	movs	r5, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	42ab      	cmp	r3, r5
 8005a7c:	d805      	bhi.n	8005a8a <itsdk_console_loop+0x46>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	d10b      	bne.n	8005a9c <itsdk_console_loop+0x58>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	42a3      	cmp	r3, r4
 8005a88:	d908      	bls.n	8005a9c <itsdk_console_loop+0x58>
			 __console.loginState = 0;
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <itsdk_console_loop+0x90>)
 8005a8c:	781a      	ldrb	r2, [r3, #0]
 8005a8e:	2101      	movs	r1, #1
 8005a90:	438a      	bics	r2, r1
 8005a92:	701a      	strb	r2, [r3, #0]
			 _itsdk_console_printf("logout\r\n");
 8005a94:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <itsdk_console_loop+0x94>)
 8005a96:	0018      	movs	r0, r3
 8005a98:	f000 f820 	bl	8005adc <_itsdk_console_printf>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif
  #if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	do {
		 r = serial2_read(&c);
 8005a9c:	1dfc      	adds	r4, r7, #7
 8005a9e:	1dbb      	adds	r3, r7, #6
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f004 fea9 	bl	800a7f8 <serial2_read>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	7023      	strb	r3, [r4, #0]
		 if ( r == SERIAL_READ_SUCCESS || r == SERIAL_READ_PENDING_CHAR) {
 8005aaa:	1dfb      	adds	r3, r7, #7
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <itsdk_console_loop+0x76>
 8005ab2:	1dfb      	adds	r3, r7, #7
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d104      	bne.n	8005ac4 <itsdk_console_loop+0x80>
			 _itsdk_console_processChar(c);
 8005aba:	1dbb      	adds	r3, r7, #6
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f000 f97e 	bl	8005dc0 <_itsdk_console_processChar>
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d0e7      	beq.n	8005a9c <itsdk_console_loop+0x58>
			 _itsdk_console_processChar(c);
		 }
	} while ( r == SERIAL_READ_PENDING_CHAR );
  #endif

}
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b004      	add	sp, #16
 8005ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad4:	200000d0 	.word	0x200000d0
 8005ad8:	0800c310 	.word	0x0800c310

08005adc <_itsdk_console_printf>:
void itsdk_console_customProcess_char(char c) {
	_itsdk_console_processChar(c);
}
#endif

void _itsdk_console_printf(char *format, ...) {
 8005adc:	b40f      	push	{r0, r1, r2, r3}
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b096      	sub	sp, #88	; 0x58
 8005ae2:	af00      	add	r7, sp, #0
	va_list args;
	char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
    va_start(args,format);
 8005ae4:	2364      	movs	r3, #100	; 0x64
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	657b      	str	r3, [r7, #84]	; 0x54
	vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 8005aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aee:	1d38      	adds	r0, r7, #4
 8005af0:	2150      	movs	r1, #80	; 0x50
 8005af2:	f005 fe25 	bl	800b740 <vsniprintf>
	va_end(args);
#if ( ITSDK_CONSOLE_SERIAL & ( __UART_LPUART1 | __UART_USART1 ) ) > 0
	serial1_print(fmtBuffer);
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_USART2 ) > 0
	serial2_print(fmtBuffer);
 8005af6:	1d3b      	adds	r3, r7, #4
 8005af8:	0018      	movs	r0, r3
 8005afa:	f004 fe65 	bl	800a7c8 <serial2_print>
#endif
#if ( ITSDK_CONSOLE_SERIAL & __UART_CUSTOM ) > 0
	itsdk_console_customSerial_print(fmtBuffer);
#endif
}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b016      	add	sp, #88	; 0x58
 8005b04:	bc80      	pop	{r7}
 8005b06:	bc08      	pop	{r3}
 8005b08:	b004      	add	sp, #16
 8005b0a:	4718      	bx	r3

08005b0c <_itsdk_console_processLine>:

// =================================================================================================
// Processing input
// =================================================================================================

static void _itsdk_console_processLine() {
 8005b0c:	b5b0      	push	{r4, r5, r7, lr}
 8005b0e:	b090      	sub	sp, #64	; 0x40
 8005b10:	af00      	add	r7, sp, #0

	// Empty line
	if ( __console.pBuffer == 0 ) return;
 8005b12:	4ba5      	ldr	r3, [pc, #660]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2201      	movs	r2, #1
 8005b18:	4393      	bics	r3, r2
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d100      	bne.n	8005b22 <_itsdk_console_processLine+0x16>
 8005b20:	e13d      	b.n	8005d9e <_itsdk_console_processLine+0x292>

	// Clean the buffer
	if ( __console.pBuffer > 0 && __console.serialBuffer[__console.pBuffer-1] == '\r' ) {
 8005b22:	4ba1      	ldr	r3, [pc, #644]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2201      	movs	r2, #1
 8005b28:	4393      	bics	r3, r2
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01d      	beq.n	8005b6c <_itsdk_console_processLine+0x60>
 8005b30:	4b9d      	ldr	r3, [pc, #628]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	0e5b      	lsrs	r3, r3, #25
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	4a9a      	ldr	r2, [pc, #616]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005b3e:	18d3      	adds	r3, r2, r3
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b0d      	cmp	r3, #13
 8005b44:	d112      	bne.n	8005b6c <_itsdk_console_processLine+0x60>
		__console.pBuffer--;
 8005b46:	4b98      	ldr	r3, [pc, #608]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	061b      	lsls	r3, r3, #24
 8005b4c:	0e5b      	lsrs	r3, r3, #25
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	337f      	adds	r3, #127	; 0x7f
 8005b52:	1c1a      	adds	r2, r3, #0
 8005b54:	237f      	movs	r3, #127	; 0x7f
 8005b56:	4013      	ands	r3, r2
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	4b93      	ldr	r3, [pc, #588]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005b5c:	1890      	adds	r0, r2, r2
 8005b5e:	781a      	ldrb	r2, [r3, #0]
 8005b60:	2101      	movs	r1, #1
 8005b62:	400a      	ands	r2, r1
 8005b64:	1c11      	adds	r1, r2, #0
 8005b66:	1c02      	adds	r2, r0, #0
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	701a      	strb	r2, [r3, #0]
	}
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 8005b6c:	4b8e      	ldr	r3, [pc, #568]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	061b      	lsls	r3, r3, #24
 8005b72:	0e5b      	lsrs	r3, r3, #25
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b78:	e008      	b.n	8005b8c <_itsdk_console_processLine+0x80>
		__console.serialBuffer[i] = 0;
 8005b7a:	4a8b      	ldr	r2, [pc, #556]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7e:	18d3      	adds	r3, r2, r3
 8005b80:	3301      	adds	r3, #1
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
	for ( int i = __console.pBuffer ; i < ITSDK_CONSOLE_LINEBUFFER ; i++) {
 8005b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b88:	3301      	adds	r3, #1
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8e:	2b27      	cmp	r3, #39	; 0x27
 8005b90:	ddf3      	ble.n	8005b7a <_itsdk_console_processLine+0x6e>
	}

	if ( __console.loginState == 0 ) {
 8005b92:	4b85      	ldr	r3, [pc, #532]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2201      	movs	r2, #1
 8005b98:	4013      	ands	r3, r2
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d000      	beq.n	8005ba2 <_itsdk_console_processLine+0x96>
 8005ba0:	e08e      	b.n	8005cc0 <_itsdk_console_processLine+0x1b4>
		// console locked

		// We are going to remove the possible \r and create a 16B array with leading 0 to match with
		// the console password field in Secure Store
		// Password max size is 15 byte.
		if ( __console.pBuffer < 16 ) {
 8005ba2:	4b81      	ldr	r3, [pc, #516]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	061b      	lsls	r3, r3, #24
 8005ba8:	0e5b      	lsrs	r3, r3, #25
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b0f      	cmp	r3, #15
 8005bae:	d82e      	bhi.n	8005c0e <_itsdk_console_processLine+0x102>
			 __console.loginState=1;
 8005bb0:	4b7d      	ldr	r3, [pc, #500]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005bb2:	781a      	ldrb	r2, [r3, #0]
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	701a      	strb	r2, [r3, #0]
			#if ITSDK_WITH_SECURESTORE == __DISABLE
				uint8_t passwd[16] = ITSDK_SECSTORE_CONSOLEKEY;
			#else
				uint8_t passwd[16];
				itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, passwd);
 8005bba:	003b      	movs	r3, r7
 8005bbc:	0019      	movs	r1, r3
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	f001 f884 	bl	8006ccc <itsdk_secstore_readBlock>
			#endif
				for ( int i = 0 ; i < 16 ; i++) {
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bc8:	e019      	b.n	8005bfe <_itsdk_console_processLine+0xf2>
					if (__console.serialBuffer[i] != passwd[i] && __console.loginState == 1) __console.loginState=0;
 8005bca:	4a77      	ldr	r2, [pc, #476]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	18d3      	adds	r3, r2, r3
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	781a      	ldrb	r2, [r3, #0]
 8005bd4:	0039      	movs	r1, r7
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd8:	18cb      	adds	r3, r1, r3
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d00b      	beq.n	8005bf8 <_itsdk_console_processLine+0xec>
 8005be0:	4b71      	ldr	r3, [pc, #452]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2201      	movs	r2, #1
 8005be6:	4013      	ands	r3, r2
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <_itsdk_console_processLine+0xec>
 8005bee:	4b6e      	ldr	r3, [pc, #440]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	438a      	bics	r2, r1
 8005bf6:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < 16 ; i++) {
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	2b0f      	cmp	r3, #15
 8005c02:	dde2      	ble.n	8005bca <_itsdk_console_processLine+0xbe>
				}
				bzero(passwd,16);
 8005c04:	003b      	movs	r3, r7
 8005c06:	2110      	movs	r1, #16
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f005 fd19 	bl	800b640 <bzero>
		}
		if ( __console.loginState == 1 ) {
 8005c0e:	4b66      	ldr	r3, [pc, #408]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2201      	movs	r2, #1
 8005c14:	4013      	ands	r3, r2
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d015      	beq.n	8005c48 <_itsdk_console_processLine+0x13c>
			// Login sucess
			uint64_t s = itsdk_time_get_ms()/1000;
 8005c1c:	f003 fdf6 	bl	800980c <itsdk_time_get_ms>
 8005c20:	22fa      	movs	r2, #250	; 0xfa
 8005c22:	0092      	lsls	r2, r2, #2
 8005c24:	2300      	movs	r3, #0
 8005c26:	f7fa fc11 	bl	800044c <__aeabi_uldivmod>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	000c      	movs	r4, r1
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	617c      	str	r4, [r7, #20]
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	332d      	adds	r3, #45	; 0x2d
 8005c36:	33ff      	adds	r3, #255	; 0xff
 8005c38:	001a      	movs	r2, r3
 8005c3a:	4b5b      	ldr	r3, [pc, #364]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005c3c:	62da      	str	r2, [r3, #44]	; 0x2c
			_itsdk_console_printf("OK\r\n");
 8005c3e:	4b5b      	ldr	r3, [pc, #364]	; (8005dac <_itsdk_console_processLine+0x2a0>)
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7ff ff4b 	bl	8005adc <_itsdk_console_printf>
 8005c46:	e0ab      	b.n	8005da0 <_itsdk_console_processLine+0x294>
		} else {
			// Login Failed This can be a public operation request
			itsdk_console_chain_t * c = &__console_head_chain;
 8005c48:	4b59      	ldr	r3, [pc, #356]	; (8005db0 <_itsdk_console_processLine+0x2a4>)
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 8005c4c:	2333      	movs	r3, #51	; 0x33
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 8005c54:	e022      	b.n	8005c9c <_itsdk_console_processLine+0x190>
				if ( c->console_public != NULL ) {
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01a      	beq.n	8005c94 <_itsdk_console_processLine+0x188>
  				   lret= c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4a51      	ldr	r2, [pc, #324]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005c64:	7812      	ldrb	r2, [r2, #0]
 8005c66:	0612      	lsls	r2, r2, #24
 8005c68:	0e52      	lsrs	r2, r2, #25
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	0011      	movs	r1, r2
 8005c6e:	251e      	movs	r5, #30
 8005c70:	197c      	adds	r4, r7, r5
 8005c72:	4a50      	ldr	r2, [pc, #320]	; (8005db4 <_itsdk_console_processLine+0x2a8>)
 8005c74:	0010      	movs	r0, r2
 8005c76:	4798      	blx	r3
 8005c78:	0003      	movs	r3, r0
 8005c7a:	7023      	strb	r3, [r4, #0]
				   switch ( lret ) {
 8005c7c:	197b      	adds	r3, r7, r5
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <_itsdk_console_processLine+0x17e>
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d000      	beq.n	8005c8a <_itsdk_console_processLine+0x17e>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:
					      break;
 8005c88:	e005      	b.n	8005c96 <_itsdk_console_processLine+0x18a>
						  ret = ITSDK_CONSOLE_SUCCES;
 8005c8a:	2333      	movs	r3, #51	; 0x33
 8005c8c:	18fb      	adds	r3, r7, r3
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]
						  break;
 8005c92:	e000      	b.n	8005c96 <_itsdk_console_processLine+0x18a>
				   }
				}
 8005c94:	46c0      	nop			; (mov r8, r8)
			   c = c->next;
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
			while ( c != NULL ) {
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1d9      	bne.n	8005c56 <_itsdk_console_processLine+0x14a>
			}
			// Print the password prompt only when it was not a command
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 8005ca2:	2333      	movs	r3, #51	; 0x33
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d000      	beq.n	8005cae <_itsdk_console_processLine+0x1a2>
 8005cac:	e078      	b.n	8005da0 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("password:\r\n");
 8005cae:	4b42      	ldr	r3, [pc, #264]	; (8005db8 <_itsdk_console_processLine+0x2ac>)
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f7ff ff13 	bl	8005adc <_itsdk_console_printf>
				_itsdk_console_printf("KO\r\n");
 8005cb6:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <_itsdk_console_processLine+0x2b0>)
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7ff ff0f 	bl	8005adc <_itsdk_console_printf>
 8005cbe:	e06f      	b.n	8005da0 <_itsdk_console_processLine+0x294>
			}
		}
	} else {
		if (__console.pBuffer > 0) {
 8005cc0:	4b39      	ldr	r3, [pc, #228]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	4393      	bics	r3, r2
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d068      	beq.n	8005da0 <_itsdk_console_processLine+0x294>
			// We are logged

			// Update session expiration
			uint64_t s = itsdk_time_get_ms()/1000;
 8005cce:	f003 fd9d 	bl	800980c <itsdk_time_get_ms>
 8005cd2:	22fa      	movs	r2, #250	; 0xfa
 8005cd4:	0092      	lsls	r2, r2, #2
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f7fa fbb8 	bl	800044c <__aeabi_uldivmod>
 8005cdc:	0003      	movs	r3, r0
 8005cde:	000c      	movs	r4, r1
 8005ce0:	623b      	str	r3, [r7, #32]
 8005ce2:	627c      	str	r4, [r7, #36]	; 0x24
			__console.expire = (uint32_t)s + ITSDK_CONSOLE_EXPIRE_S;
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	332d      	adds	r3, #45	; 0x2d
 8005ce8:	33ff      	adds	r3, #255	; 0xff
 8005cea:	001a      	movs	r2, r3
 8005cec:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c

			// Process command
			itsdk_console_chain_t * c = &__console_head_chain;
 8005cf0:	4b2f      	ldr	r3, [pc, #188]	; (8005db0 <_itsdk_console_processLine+0x2a4>)
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
			itsdk_console_return_e  ret = ITSDK_CONSOLE_NOTFOUND;
 8005cf4:	232b      	movs	r3, #43	; 0x2b
 8005cf6:	18fb      	adds	r3, r7, r3
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	701a      	strb	r2, [r3, #0]
			itsdk_console_return_e  lret;
			while ( c != NULL ) {
 8005cfc:	e042      	b.n	8005d84 <_itsdk_console_processLine+0x278>
			  if ( c->console_public != NULL ) {
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01a      	beq.n	8005d3c <_itsdk_console_processLine+0x230>
				  lret = c->console_public((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	4a27      	ldr	r2, [pc, #156]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005d0c:	7812      	ldrb	r2, [r2, #0]
 8005d0e:	0612      	lsls	r2, r2, #24
 8005d10:	0e52      	lsrs	r2, r2, #25
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	0011      	movs	r1, r2
 8005d16:	251f      	movs	r5, #31
 8005d18:	197c      	adds	r4, r7, r5
 8005d1a:	4a26      	ldr	r2, [pc, #152]	; (8005db4 <_itsdk_console_processLine+0x2a8>)
 8005d1c:	0010      	movs	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	0003      	movs	r3, r0
 8005d22:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8005d24:	197b      	adds	r3, r7, r5
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <_itsdk_console_processLine+0x226>
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d000      	beq.n	8005d32 <_itsdk_console_processLine+0x226>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 8005d30:	e005      	b.n	8005d3e <_itsdk_console_processLine+0x232>
						  ret = ITSDK_CONSOLE_SUCCES;
 8005d32:	232b      	movs	r3, #43	; 0x2b
 8005d34:	18fb      	adds	r3, r7, r3
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
						  break;
 8005d3a:	e000      	b.n	8005d3e <_itsdk_console_processLine+0x232>
				   }
			  }
 8005d3c:	46c0      	nop			; (mov r8, r8)
			  if ( c->console_private != NULL ) {
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01a      	beq.n	8005d7c <_itsdk_console_processLine+0x270>
				  lret = c->console_private((char*)__console.serialBuffer,(uint8_t)__console.pBuffer);
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <_itsdk_console_processLine+0x29c>)
 8005d4c:	7812      	ldrb	r2, [r2, #0]
 8005d4e:	0612      	lsls	r2, r2, #24
 8005d50:	0e52      	lsrs	r2, r2, #25
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	0011      	movs	r1, r2
 8005d56:	251f      	movs	r5, #31
 8005d58:	197c      	adds	r4, r7, r5
 8005d5a:	4a16      	ldr	r2, [pc, #88]	; (8005db4 <_itsdk_console_processLine+0x2a8>)
 8005d5c:	0010      	movs	r0, r2
 8005d5e:	4798      	blx	r3
 8005d60:	0003      	movs	r3, r0
 8005d62:	7023      	strb	r3, [r4, #0]
				  switch ( lret ) {
 8005d64:	197b      	adds	r3, r7, r5
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <_itsdk_console_processLine+0x266>
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d000      	beq.n	8005d72 <_itsdk_console_processLine+0x266>
					  case ITSDK_CONSOLE_SUCCES:
					  case ITSDK_CONSOLE_FAILED:
						  ret = ITSDK_CONSOLE_SUCCES;
						  break;
					  default:break;
 8005d70:	e005      	b.n	8005d7e <_itsdk_console_processLine+0x272>
						  ret = ITSDK_CONSOLE_SUCCES;
 8005d72:	232b      	movs	r3, #43	; 0x2b
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
						  break;
 8005d7a:	e000      	b.n	8005d7e <_itsdk_console_processLine+0x272>
				   }
			  }
 8005d7c:	46c0      	nop			; (mov r8, r8)
			  c = c->next;
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
			while ( c != NULL ) {
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1b9      	bne.n	8005cfe <_itsdk_console_processLine+0x1f2>
			}
			if ( ret == ITSDK_CONSOLE_NOTFOUND ) {
 8005d8a:	232b      	movs	r3, #43	; 0x2b
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d105      	bne.n	8005da0 <_itsdk_console_processLine+0x294>
				_itsdk_console_printf("KO\r\n");
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <_itsdk_console_processLine+0x2b0>)
 8005d96:	0018      	movs	r0, r3
 8005d98:	f7ff fea0 	bl	8005adc <_itsdk_console_printf>
 8005d9c:	e000      	b.n	8005da0 <_itsdk_console_processLine+0x294>
	if ( __console.pBuffer == 0 ) return;
 8005d9e:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

}
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b010      	add	sp, #64	; 0x40
 8005da4:	bdb0      	pop	{r4, r5, r7, pc}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	200000d0 	.word	0x200000d0
 8005dac:	0800c120 	.word	0x0800c120
 8005db0:	20000100 	.word	0x20000100
 8005db4:	200000d1 	.word	0x200000d1
 8005db8:	0800c31c 	.word	0x0800c31c
 8005dbc:	0800c1dc 	.word	0x0800c1dc

08005dc0 <_itsdk_console_processChar>:

/**
 * Process 1 char read
 */
static void _itsdk_console_processChar(char c) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	0002      	movs	r2, r0
 8005dc8:	1dfb      	adds	r3, r7, #7
 8005dca:	701a      	strb	r2, [r3, #0]

	if ( c == '\n' || c == '\r' || c == '\0' ) {
 8005dcc:	1dfb      	adds	r3, r7, #7
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b0a      	cmp	r3, #10
 8005dd2:	d007      	beq.n	8005de4 <_itsdk_console_processChar+0x24>
 8005dd4:	1dfb      	adds	r3, r7, #7
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b0d      	cmp	r3, #13
 8005dda:	d003      	beq.n	8005de4 <_itsdk_console_processChar+0x24>
 8005ddc:	1dfb      	adds	r3, r7, #7
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10e      	bne.n	8005e02 <_itsdk_console_processChar+0x42>
		if ( __console.pBuffer > 0 ) {
 8005de4:	4b1c      	ldr	r3, [pc, #112]	; (8005e58 <_itsdk_console_processChar+0x98>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2201      	movs	r2, #1
 8005dea:	4393      	bics	r3, r2
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02d      	beq.n	8005e4e <_itsdk_console_processChar+0x8e>
//			log_info("RET");
			_itsdk_console_processLine();
 8005df2:	f7ff fe8b 	bl	8005b0c <_itsdk_console_processLine>
			__console.pBuffer = 0;
 8005df6:	4b18      	ldr	r3, [pc, #96]	; (8005e58 <_itsdk_console_processChar+0x98>)
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	400a      	ands	r2, r1
 8005dfe:	701a      	strb	r2, [r3, #0]
		if ( __console.pBuffer > 0 ) {
 8005e00:	e025      	b.n	8005e4e <_itsdk_console_processChar+0x8e>
		}
//		log_info("ESC");
	} else {
		if ( __console.pBuffer < ITSDK_CONSOLE_LINEBUFFER ) {
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <_itsdk_console_processChar+0x98>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	061b      	lsls	r3, r3, #24
 8005e08:	0e5b      	lsrs	r3, r3, #25
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b27      	cmp	r3, #39	; 0x27
 8005e0e:	d81e      	bhi.n	8005e4e <_itsdk_console_processChar+0x8e>

//			if ( c > 32 ) {
//			  log_info("[%c]",c);
//			} else log_info("(%02X)",c);

			__console.serialBuffer[__console.pBuffer] = c;
 8005e10:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <_itsdk_console_processChar+0x98>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	0e5b      	lsrs	r3, r3, #25
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	001a      	movs	r2, r3
 8005e1c:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <_itsdk_console_processChar+0x98>)
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	1dfa      	adds	r2, r7, #7
 8005e22:	7812      	ldrb	r2, [r2, #0]
 8005e24:	705a      	strb	r2, [r3, #1]
			__console.pBuffer++;
 8005e26:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <_itsdk_console_processChar+0x98>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	061b      	lsls	r3, r3, #24
 8005e2c:	0e5b      	lsrs	r3, r3, #25
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	3301      	adds	r3, #1
 8005e32:	1c1a      	adds	r2, r3, #0
 8005e34:	237f      	movs	r3, #127	; 0x7f
 8005e36:	4013      	ands	r3, r2
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <_itsdk_console_processChar+0x98>)
 8005e3c:	1890      	adds	r0, r2, r2
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	2101      	movs	r1, #1
 8005e42:	400a      	ands	r2, r1
 8005e44:	1c11      	adds	r1, r2, #0
 8005e46:	1c02      	adds	r2, r0, #0
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8005e4c:	e7ff      	b.n	8005e4e <_itsdk_console_processChar+0x8e>
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b002      	add	sp, #8
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	200000d0 	.word	0x200000d0

08005e5c <itsdk_console_registerCommand>:

/**
 * Add an action to the chain, the action **must be** static
 * The action list is added at end of the chain
 */
void itsdk_console_registerCommand(itsdk_console_chain_t * chain) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	itsdk_console_chain_t * c = &__console_head_chain;
 8005e64:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <itsdk_console_registerCommand+0x58>)
 8005e66:	60fb      	str	r3, [r7, #12]
	if ( c->console_private != _itsdk_console_private ) {
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <itsdk_console_registerCommand+0x5c>)
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d008      	beq.n	8005e84 <itsdk_console_registerCommand+0x28>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONSOLE_NOTSETUP,0);
 8005e72:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <itsdk_console_registerCommand+0x60>)
 8005e74:	2100      	movs	r1, #0
 8005e76:	0018      	movs	r0, r3
 8005e78:	f002 fe42 	bl	8008b00 <itsdk_error_report>
	}

	while ( c->next != NULL && c->next != chain ) {
 8005e7c:	e002      	b.n	8005e84 <itsdk_console_registerCommand+0x28>
	  c = c->next;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60fb      	str	r3, [r7, #12]
	while ( c->next != NULL && c->next != chain ) {
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d004      	beq.n	8005e96 <itsdk_console_registerCommand+0x3a>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d1f3      	bne.n	8005e7e <itsdk_console_registerCommand+0x22>
	}
	if ( c->next != chain ) {
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d005      	beq.n	8005eac <itsdk_console_registerCommand+0x50>
		// the Action is not already existing
		c->next=chain;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
		chain->next = NULL;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	609a      	str	r2, [r3, #8]
	}
}
 8005eac:	46c0      	nop			; (mov r8, r8)
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b004      	add	sp, #16
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000100 	.word	0x20000100
 8005eb8:	08005645 	.word	0x08005645
 8005ebc:	c0000003 	.word	0xc0000003

08005ec0 <eeprom_write>:
/**
 * Store a data block into eeprom with the given len in byte
 * Specify a version of the data to be stored. This will be used
 * as a verification at read.
 */
bool eeprom_write(void * data, uint16_t len, uint8_t version) {
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b089      	sub	sp, #36	; 0x24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	0008      	movs	r0, r1
 8005eca:	0011      	movs	r1, r2
 8005ecc:	1cbb      	adds	r3, r7, #2
 8005ece:	1c02      	adds	r2, r0, #0
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	1c7b      	adds	r3, r7, #1
 8005ed4:	1c0a      	adds	r2, r1, #0
 8005ed6:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	t.magic = ITDT_EEPROM_MAGIC;
 8005ed8:	2410      	movs	r4, #16
 8005eda:	193b      	adds	r3, r7, r4
 8005edc:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <eeprom_write+0x7c>)
 8005ede:	801a      	strh	r2, [r3, #0]
	t.size = len;
 8005ee0:	193b      	adds	r3, r7, r4
 8005ee2:	1cba      	adds	r2, r7, #2
 8005ee4:	8812      	ldrh	r2, [r2, #0]
 8005ee6:	809a      	strh	r2, [r3, #4]
	t.version = version;
 8005ee8:	193b      	adds	r3, r7, r4
 8005eea:	1c7a      	adds	r2, r7, #1
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	709a      	strb	r2, [r3, #2]
	t.crc32 = itsdk_computeCRC32((uint8_t*)data, len);
 8005ef0:	1cbb      	adds	r3, r7, #2
 8005ef2:	881a      	ldrh	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	0011      	movs	r1, r2
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f003 fa97 	bl	800942c <itsdk_computeCRC32>
 8005efe:	0002      	movs	r2, r0
 8005f00:	193b      	adds	r3, r7, r4
 8005f02:	609a      	str	r2, [r3, #8]

	uint32_t offset = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 8005f08:	230c      	movs	r3, #12
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 f879 	bl	8006004 <eeprom_getConfigOffset>

	// Write the data header
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	193a      	adds	r2, r7, r4
 8005f16:	2310      	movs	r3, #16
 8005f18:	2000      	movs	r0, #0
 8005f1a:	f004 fd51 	bl	800a9c0 <_eeprom_write>
	// Write data
	_eeprom_write(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3310      	adds	r3, #16
 8005f22:	0019      	movs	r1, r3
 8005f24:	1cbb      	adds	r3, r7, #2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f004 fd48 	bl	800a9c0 <_eeprom_write>

	_LOG_EEPROM(("[NVM][I] Write %d bytes crc %0X\r\n",len,t.crc32));

	return true;
 8005f30:	2301      	movs	r3, #1
}
 8005f32:	0018      	movs	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b009      	add	sp, #36	; 0x24
 8005f38:	bd90      	pop	{r4, r7, pc}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	ffffa5fc 	.word	0xffffa5fc

08005f40 <eeprom_read>:
 * In the EEPROM we have
 * ---> SecureStore
 * ---> ErrorReport
 * ---> Configuration
 */
bool eeprom_read(void * data, uint16_t len, uint8_t version, uint8_t * versionR) {
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b08b      	sub	sp, #44	; 0x2c
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	0008      	movs	r0, r1
 8005f4a:	0011      	movs	r1, r2
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	230a      	movs	r3, #10
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	1c02      	adds	r2, r0, #0
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	2309      	movs	r3, #9
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	1c0a      	adds	r2, r1, #0
 8005f5c:	701a      	strb	r2, [r3, #0]
	t_eeprom_entry t;
	uint32_t offset = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	613b      	str	r3, [r7, #16]
	eeprom_getConfigOffset(&offset);
 8005f62:	2310      	movs	r3, #16
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	0018      	movs	r0, r3
 8005f68:	f000 f84c 	bl	8006004 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8005f6c:	6939      	ldr	r1, [r7, #16]
 8005f6e:	2414      	movs	r4, #20
 8005f70:	193a      	adds	r2, r7, r4
 8005f72:	2310      	movs	r3, #16
 8005f74:	2000      	movs	r0, #0
 8005f76:	f004 fdc7 	bl	800ab08 <_eeprom_read>

	// Verify different element
	if ( t.magic != ITDT_EEPROM_MAGIC ) {
 8005f7a:	193b      	adds	r3, r7, r4
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	4a20      	ldr	r2, [pc, #128]	; (8006000 <eeprom_read+0xc0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <eeprom_read+0x4e>
		_LOG_EEPROM(("[NVM][I] Read invalid magic\r\n"));
		*versionR=0;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
		return false;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e033      	b.n	8005ff6 <eeprom_read+0xb6>
	}
	*versionR=t.version;
 8005f8e:	2114      	movs	r1, #20
 8005f90:	187b      	adds	r3, r7, r1
 8005f92:	789a      	ldrb	r2, [r3, #2]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	701a      	strb	r2, [r3, #0]
	if ( t.size != len ) {
 8005f98:	187b      	adds	r3, r7, r1
 8005f9a:	889b      	ldrh	r3, [r3, #4]
 8005f9c:	220a      	movs	r2, #10
 8005f9e:	18ba      	adds	r2, r7, r2
 8005fa0:	8812      	ldrh	r2, [r2, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d001      	beq.n	8005faa <eeprom_read+0x6a>
		_LOG_EEPROM(("[NVM][I] Read invalid size (%d vs %d)\r\n",len,t.size));
		return false;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e025      	b.n	8005ff6 <eeprom_read+0xb6>
	}
	if ( t.version != version ) {
 8005faa:	2314      	movs	r3, #20
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	789b      	ldrb	r3, [r3, #2]
 8005fb0:	2209      	movs	r2, #9
 8005fb2:	18ba      	adds	r2, r7, r2
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d001      	beq.n	8005fbe <eeprom_read+0x7e>
		_LOG_EEPROM(("[NVM][I] Read invalid version (%d vs %d)\r\n",version,t.version));
		return false;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e01b      	b.n	8005ff6 <eeprom_read+0xb6>
	}

	// Read the data
	_eeprom_read(ITDT_EEPROM_BANK0, offset+sizeof(t), (void *) data, len);
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	3310      	adds	r3, #16
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	240a      	movs	r4, #10
 8005fc6:	193b      	adds	r3, r7, r4
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	2000      	movs	r0, #0
 8005fce:	f004 fd9b 	bl	800ab08 <_eeprom_read>
	uint32_t _crc = itsdk_computeCRC32((uint8_t*)data, len);
 8005fd2:	193b      	adds	r3, r7, r4
 8005fd4:	881a      	ldrh	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	0011      	movs	r1, r2
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f003 fa26 	bl	800942c <itsdk_computeCRC32>
 8005fe0:	0003      	movs	r3, r0
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24

	if ( t.crc32 != _crc ) {
 8005fe4:	2314      	movs	r3, #20
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d001      	beq.n	8005ff4 <eeprom_read+0xb4>
		_LOG_EEPROM(("[NVM][I] Read invalid crc\r\n"));
		return false;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e000      	b.n	8005ff6 <eeprom_read+0xb6>
	}

	return true;
 8005ff4:	2301      	movs	r3, #1
}
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b00b      	add	sp, #44	; 0x2c
 8005ffc:	bd90      	pop	{r4, r7, pc}
 8005ffe:	46c0      	nop			; (mov r8, r8)
 8006000:	0000a5fc 	.word	0x0000a5fc

08006004 <eeprom_getConfigOffset>:

/**
 * Compute the EEProm Config offset
 * Memory have SecureStore then Log then Sigfox config, then Device config
 */
bool eeprom_getConfigOffset(uint32_t * _offset) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t sstore=0, ssError=0, sSigfox=0;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]
  #if ITSDK_WITH_SECURESTORE == __ENABLE
	itsdk_secstore_getStoreSize(&sstore);
 8006018:	2310      	movs	r3, #16
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	0018      	movs	r0, r3
 800601e:	f000 fdac 	bl	8006b7a <itsdk_secstore_getStoreSize>
  #endif
  #if (ITSDK_WITH_ERROR_RPT == __ENABLE) && (ITSDK_ERROR_USE_EPROM == __ENABLE)
	itsdk_error_getSize(&ssError);
 8006022:	230c      	movs	r3, #12
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	0018      	movs	r0, r3
 8006028:	f002 fe8f 	bl	8008d4a <itsdk_error_getSize>
  #endif
  #if (ITSDK_WITH_SIGFOX_LIB == __ENABLE)
	itsdk_sigfox_getNvmSize(&sSigfox);
  #endif
  *_offset += sstore + ssError + sSigfox;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	6939      	ldr	r1, [r7, #16]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	18c9      	adds	r1, r1, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	18cb      	adds	r3, r1, r3
 800603a:	18d2      	adds	r2, r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]
  return true;
 8006040:	2301      	movs	r3, #1
}
 8006042:	0018      	movs	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	b006      	add	sp, #24
 8006048:	bd80      	pop	{r7, pc}

0800604a <eeprom_getConfigSize>:

/**
 * Get the EEprom config size from the config header
 * it includes the header size
 */
bool eeprom_getConfigSize(uint32_t * _size) {
 800604a:	b590      	push	{r4, r7, lr}
 800604c:	b089      	sub	sp, #36	; 0x24
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
	t_eeprom_entry t;

	uint32_t offset = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
	eeprom_getConfigOffset(&offset);
 8006056:	230c      	movs	r3, #12
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	0018      	movs	r0, r3
 800605c:	f7ff ffd2 	bl	8006004 <eeprom_getConfigOffset>

	// Read the data header
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) &t, sizeof(t));
 8006060:	68f9      	ldr	r1, [r7, #12]
 8006062:	2410      	movs	r4, #16
 8006064:	193a      	adds	r2, r7, r4
 8006066:	2310      	movs	r3, #16
 8006068:	2000      	movs	r0, #0
 800606a:	f004 fd4d 	bl	800ab08 <_eeprom_read>

	*_size = sizeof(t) + t.size;
 800606e:	193b      	adds	r3, r7, r4
 8006070:	889b      	ldrh	r3, [r3, #4]
 8006072:	3310      	adds	r3, #16
 8006074:	001a      	movs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
	return true;
 800607a:	2301      	movs	r3, #1
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b009      	add	sp, #36	; 0x24
 8006082:	bd90      	pop	{r4, r7, pc}

08006084 <eeprom_clearAllEprom>:
}

/**
 * Clear (write 0) into the whole BANK0
 */
void eeprom_clearAllEprom() {
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
	uint32_t v  = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	603b      	str	r3, [r7, #0]
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 800608e:	2300      	movs	r3, #0
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	e008      	b.n	80060a6 <eeprom_clearAllEprom+0x22>
		_eeprom_write(ITDT_EEPROM_BANK0, i, (void *) &v, sizeof(v));
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	003a      	movs	r2, r7
 8006098:	2304      	movs	r3, #4
 800609a:	2000      	movs	r0, #0
 800609c:	f004 fc90 	bl	800a9c0 <_eeprom_write>
	for ( int i = 0 ; i < ITSDK_EPROM_SIZE ; i+=sizeof(v) ) {
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3304      	adds	r3, #4
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a03      	ldr	r2, [pc, #12]	; (80060b8 <eeprom_clearAllEprom+0x34>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	ddf2      	ble.n	8006094 <eeprom_clearAllEprom+0x10>
	}
}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	46bd      	mov	sp, r7
 80060b2:	b002      	add	sp, #8
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	000017ff 	.word	0x000017ff

080060bc <itsdk_config_sdk_resetToFactory>:

/**
 * The SDK config initialization function
 */
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	static itsdk_config_ret_e itsdk_config_sdk_resetToFactory() {
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
		ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKFACT_DEFAULT,0);
 80060c0:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <itsdk_config_sdk_resetToFactory+0x74>)
 80060c2:	2100      	movs	r1, #0
 80060c4:	0018      	movs	r0, r3
 80060c6:	f002 fd1b 	bl	8008b00 <itsdk_error_report>

		itsdk_config.sdk.version = ITSDK_CONFIGURATION_SDK_VERSION;
 80060ca:	4b1a      	ldr	r3, [pc, #104]	; (8006134 <itsdk_config_sdk_resetToFactory+0x78>)
 80060cc:	2216      	movs	r2, #22
 80060ce:	701a      	strb	r2, [r3, #0]
		itsdk_config.sdk.size = sizeof(itsdk_configuration_internal_t);
 80060d0:	4b18      	ldr	r3, [pc, #96]	; (8006134 <itsdk_config_sdk_resetToFactory+0x78>)
 80060d2:	2218      	movs	r2, #24
 80060d4:	805a      	strh	r2, [r3, #2]
		// ----------- Network choice ----------------------------------------------------
		#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.activeNetwork = ITSDK_DEFAULT_NETWORK;
 80060d6:	4b17      	ldr	r3, [pc, #92]	; (8006134 <itsdk_config_sdk_resetToFactory+0x78>)
 80060d8:	2202      	movs	r2, #2
 80060da:	80da      	strh	r2, [r3, #6]
		#endif
		// ----------- LoRaWan settings --------------------------------------------------
		#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		itsdk_config.sdk.lorawan.adrMode = ITSDK_LORAWAN_ADR;
 80060dc:	4b15      	ldr	r3, [pc, #84]	; (8006134 <itsdk_config_sdk_resetToFactory+0x78>)
 80060de:	7a9a      	ldrb	r2, [r3, #10]
 80060e0:	213f      	movs	r1, #63	; 0x3f
 80060e2:	400a      	ands	r2, r1
 80060e4:	1c11      	adds	r1, r2, #0
 80060e6:	2240      	movs	r2, #64	; 0x40
 80060e8:	430a      	orrs	r2, r1
 80060ea:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.devEuiType = ITSDK_LORAWAN_DEVEUI_SRC;
 80060ec:	4b11      	ldr	r3, [pc, #68]	; (8006134 <itsdk_config_sdk_resetToFactory+0x78>)
 80060ee:	7a9a      	ldrb	r2, [r3, #10]
 80060f0:	2130      	movs	r1, #48	; 0x30
 80060f2:	438a      	bics	r2, r1
 80060f4:	1c11      	adds	r1, r2, #0
 80060f6:	2210      	movs	r2, #16
 80060f8:	430a      	orrs	r2, r1
 80060fa:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.joinMode = ITSDK_LORAWAN_ACTIVATION;
 80060fc:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <itsdk_config_sdk_resetToFactory+0x78>)
 80060fe:	7a9a      	ldrb	r2, [r3, #10]
 8006100:	2103      	movs	r1, #3
 8006102:	438a      	bics	r2, r1
 8006104:	1c11      	adds	r1, r2, #0
 8006106:	2201      	movs	r2, #1
 8006108:	430a      	orrs	r2, r1
 800610a:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.networkType = ITSDK_LORAWAN_NETWORKTYPE;
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <itsdk_config_sdk_resetToFactory+0x78>)
 800610e:	7a9a      	ldrb	r2, [r3, #10]
 8006110:	210c      	movs	r1, #12
 8006112:	438a      	bics	r2, r1
 8006114:	1c11      	adds	r1, r2, #0
 8006116:	2204      	movs	r2, #4
 8006118:	430a      	orrs	r2, r1
 800611a:	729a      	strb	r2, [r3, #10]
		itsdk_config.sdk.lorawan.retries = ITSDK_LORAWAN_CNF_RETRY;
 800611c:	4b05      	ldr	r3, [pc, #20]	; (8006134 <itsdk_config_sdk_resetToFactory+0x78>)
 800611e:	2203      	movs	r2, #3
 8006120:	72da      	strb	r2, [r3, #11]
		itsdk_config.sdk.activeRegion = ITSDK_DEFAULT_REGION;
 8006122:	4b04      	ldr	r3, [pc, #16]	; (8006134 <itsdk_config_sdk_resetToFactory+0x78>)
 8006124:	2220      	movs	r2, #32
 8006126:	811a      	strh	r2, [r3, #8]
		  bcopy(pac,itsdk_config.sdk.sigfox.initialPac,8);
		  itsdk_config.sdk.sigfox.deviceId = ITSDK_SIGFOX_ID;
		#endif

		#endif
		return CONFIG_RESTORED_FROM_FACTORY;
 8006128:	2302      	movs	r3, #2
	}
 800612a:	0018      	movs	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	10000073 	.word	0x10000073
 8006134:	20000490 	.word	0x20000490

08006138 <itsdk_config_app_resetToFactory>:
		 * In the application function, you should add a trace report
		 *
		 * ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_SDKAPP_DEFAULT,0);
		 *
		 */
		__weak itsdk_config_ret_e itsdk_config_app_resetToFactory() {
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
			itsdk_config.app.version = ITSDK_CONFIGURATION_APP_VERSION;
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <itsdk_config_app_resetToFactory+0x1c>)
 800613e:	2201      	movs	r2, #1
 8006140:	761a      	strb	r2, [r3, #24]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <itsdk_config_app_resetToFactory+0x20>)
 8006144:	2100      	movs	r1, #0
 8006146:	0018      	movs	r0, r3
 8006148:	f002 fcda 	bl	8008b00 <itsdk_error_report>
			return CONFIG_FAILED;
 800614c:	2303      	movs	r3, #3
		}
 800614e:	0018      	movs	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000490 	.word	0x20000490
 8006158:	40000070 	.word	0x40000070

0800615c <itsdk_config_resetToFactory>:
	#endif

	/**
	 * Reset to factory default update eeprom & shadow
	 */
	itsdk_config_ret_e itsdk_config_resetToFactory() {
 800615c:	b5b0      	push	{r4, r5, r7, lr}
 800615e:	af00      	add	r7, sp, #0
		 itsdk_config_sdk_resetToFactory();
 8006160:	f7ff ffac 	bl	80060bc <itsdk_config_sdk_resetToFactory>
		 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		 itsdk_config_app_resetToFactory();
 8006164:	f7ff ffe8 	bl	8006138 <itsdk_config_app_resetToFactory>
		 #endif
		 #if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
	     eeprom_write(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8006168:	4b08      	ldr	r3, [pc, #32]	; (800618c <itsdk_config_resetToFactory+0x30>)
 800616a:	2201      	movs	r2, #1
 800616c:	211c      	movs	r1, #28
 800616e:	0018      	movs	r0, r3
 8006170:	f7ff fea6 	bl	8005ec0 <eeprom_write>
		 #endif
	     bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8006174:	4b06      	ldr	r3, [pc, #24]	; (8006190 <itsdk_config_resetToFactory+0x34>)
 8006176:	4a05      	ldr	r2, [pc, #20]	; (800618c <itsdk_config_resetToFactory+0x30>)
 8006178:	ca13      	ldmia	r2!, {r0, r1, r4}
 800617a:	c313      	stmia	r3!, {r0, r1, r4}
 800617c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800617e:	c313      	stmia	r3!, {r0, r1, r4}
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	601a      	str	r2, [r3, #0]
	     return CONFIG_SUCCESS;
 8006184:	2300      	movs	r3, #0
	}
 8006186:	0018      	movs	r0, r3
 8006188:	46bd      	mov	sp, r7
 800618a:	bdb0      	pop	{r4, r5, r7, pc}
 800618c:	20000490 	.word	0x20000490
 8006190:	20000474 	.word	0x20000474

08006194 <itsdk_config_loadConfiguration>:
 * Load the configuration from the NVM, eventually from factory default when the NVM is disabled
 * The Configuration will be restored from default when the version have changed.
 * The factory init functions will be called.
 * When a Application defined configuration exists the initialization function needs to be override.
 */
itsdk_config_ret_e itsdk_config_loadConfiguration(itsdk_config_load_mode_e mode) {
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	0002      	movs	r2, r0
 800619c:	1dfb      	adds	r3, r7, #7
 800619e:	701a      	strb	r2, [r3, #0]

#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_configMng.console_private = _itsdk_config_consolePriv;
 80061a0:	4b41      	ldr	r3, [pc, #260]	; (80062a8 <itsdk_config_loadConfiguration+0x114>)
 80061a2:	4a42      	ldr	r2, [pc, #264]	; (80062ac <itsdk_config_loadConfiguration+0x118>)
 80061a4:	601a      	str	r2, [r3, #0]
	__console_configMng.console_public = _itsdk_config_consolePublic;
 80061a6:	4b40      	ldr	r3, [pc, #256]	; (80062a8 <itsdk_config_loadConfiguration+0x114>)
 80061a8:	4a41      	ldr	r2, [pc, #260]	; (80062b0 <itsdk_config_loadConfiguration+0x11c>)
 80061aa:	605a      	str	r2, [r3, #4]
	__console_configMng.next = NULL;
 80061ac:	4b3e      	ldr	r3, [pc, #248]	; (80062a8 <itsdk_config_loadConfiguration+0x114>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_configMng);
 80061b2:	4b3d      	ldr	r3, [pc, #244]	; (80062a8 <itsdk_config_loadConfiguration+0x114>)
 80061b4:	0018      	movs	r0, r3
 80061b6:	f7ff fe51 	bl	8005e5c <itsdk_console_registerCommand>
#endif

#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  uint8_t v= ITSDK_CONFIGURATION_MNG_VERSION;
 80061ba:	230d      	movs	r3, #13
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	2201      	movs	r2, #1
 80061c0:	701a      	strb	r2, [r3, #0]
  uint8_t hasChanged = 0;
 80061c2:	230f      	movs	r3, #15
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2200      	movs	r2, #0
 80061c8:	701a      	strb	r2, [r3, #0]
  if ( mode != CONFIG_FORCE_TO_FACTORY && eeprom_read(&itsdk_config, sizeof(itsdk_configuration_nvm_t), 1,&v) ) {
 80061ca:	1dfb      	adds	r3, r7, #7
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d038      	beq.n	8006244 <itsdk_config_loadConfiguration+0xb0>
 80061d2:	230d      	movs	r3, #13
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	4837      	ldr	r0, [pc, #220]	; (80062b4 <itsdk_config_loadConfiguration+0x120>)
 80061d8:	2201      	movs	r2, #1
 80061da:	211c      	movs	r1, #28
 80061dc:	f7ff feb0 	bl	8005f40 <eeprom_read>
 80061e0:	1e03      	subs	r3, r0, #0
 80061e2:	d02f      	beq.n	8006244 <itsdk_config_loadConfiguration+0xb0>
	  uint8_t force = 0;
 80061e4:	230e      	movs	r3, #14
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
	  // The data are correctly loaded
	  if ( itsdk_config.sdk.version != ITSDK_CONFIGURATION_SDK_VERSION ) {
 80061ec:	4b31      	ldr	r3, [pc, #196]	; (80062b4 <itsdk_config_loadConfiguration+0x120>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b16      	cmp	r3, #22
 80061f2:	d012      	beq.n	800621a <itsdk_config_loadConfiguration+0x86>
		  // SDK version has changed
		  if ( itsdk_config.sdk.size != sizeof(itsdk_configuration_internal_t) ) {
 80061f4:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <itsdk_config_loadConfiguration+0x120>)
 80061f6:	885b      	ldrh	r3, [r3, #2]
 80061f8:	2b18      	cmp	r3, #24
 80061fa:	d003      	beq.n	8006204 <itsdk_config_loadConfiguration+0x70>
			  force = 1;
 80061fc:	230e      	movs	r3, #14
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	2201      	movs	r2, #1
 8006202:	701a      	strb	r2, [r3, #0]
		  }
		  itsdk_config_sdk_resetToFactory();
 8006204:	f7ff ff5a 	bl	80060bc <itsdk_config_sdk_resetToFactory>
		  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,1);
 8006208:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <itsdk_config_loadConfiguration+0x124>)
 800620a:	2101      	movs	r1, #1
 800620c:	0018      	movs	r0, r3
 800620e:	f002 fc77 	bl	8008b00 <itsdk_error_report>
		  hasChanged=1;
 8006212:	230f      	movs	r3, #15
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	2201      	movs	r2, #1
 8006218:	701a      	strb	r2, [r3, #0]
	  }
	  #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  if ( force || itsdk_config.app.version != ITSDK_CONFIGURATION_APP_VERSION ) {
 800621a:	230e      	movs	r3, #14
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d103      	bne.n	800622c <itsdk_config_loadConfiguration+0x98>
 8006224:	4b23      	ldr	r3, [pc, #140]	; (80062b4 <itsdk_config_loadConfiguration+0x120>)
 8006226:	7e1b      	ldrb	r3, [r3, #24]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d019      	beq.n	8006260 <itsdk_config_loadConfiguration+0xcc>
		  itsdk_config_app_resetToFactory();
 800622c:	f7ff ff84 	bl	8006138 <itsdk_config_app_resetToFactory>
		  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,2);
 8006230:	4b21      	ldr	r3, [pc, #132]	; (80062b8 <itsdk_config_loadConfiguration+0x124>)
 8006232:	2102      	movs	r1, #2
 8006234:	0018      	movs	r0, r3
 8006236:	f002 fc63 	bl	8008b00 <itsdk_error_report>
		  hasChanged=1;
 800623a:	230f      	movs	r3, #15
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	2201      	movs	r2, #1
 8006240:	701a      	strb	r2, [r3, #0]
  if ( mode != CONFIG_FORCE_TO_FACTORY && eeprom_read(&itsdk_config, sizeof(itsdk_configuration_nvm_t), 1,&v) ) {
 8006242:	e00d      	b.n	8006260 <itsdk_config_loadConfiguration+0xcc>
	  }
	  #endif
  } else {
	  hasChanged=1;
 8006244:	230f      	movs	r3, #15
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	2201      	movs	r2, #1
 800624a:	701a      	strb	r2, [r3, #0]
#endif
	#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	  // The data are not valid - reset to factory default
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 800624c:	4b1a      	ldr	r3, [pc, #104]	; (80062b8 <itsdk_config_loadConfiguration+0x124>)
 800624e:	2103      	movs	r1, #3
 8006250:	0018      	movs	r0, r3
 8006252:	f002 fc55 	bl	8008b00 <itsdk_error_report>
	  itsdk_config_sdk_resetToFactory();
 8006256:	f7ff ff31 	bl	80060bc <itsdk_config_sdk_resetToFactory>
	 #if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
	  itsdk_config_app_resetToFactory();
 800625a:	f7ff ff6d 	bl	8006138 <itsdk_config_app_resetToFactory>
 800625e:	e000      	b.n	8006262 <itsdk_config_loadConfiguration+0xce>
  if ( mode != CONFIG_FORCE_TO_FACTORY && eeprom_read(&itsdk_config, sizeof(itsdk_configuration_nvm_t), 1,&v) ) {
 8006260:	46c0      	nop			; (mov r8, r8)
	 #endif
    #endif
#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
  }
  if ( hasChanged != 0 ) {
 8006262:	230f      	movs	r3, #15
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00f      	beq.n	800628c <itsdk_config_loadConfiguration+0xf8>
     eeprom_write(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 800626c:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <itsdk_config_loadConfiguration+0x120>)
 800626e:	2201      	movs	r2, #1
 8006270:	211c      	movs	r1, #28
 8006272:	0018      	movs	r0, r3
 8006274:	f7ff fe24 	bl	8005ec0 <eeprom_write>
	  bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
	  return CONFIG_LOADED;
  }
#endif
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
  bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 8006278:	4b10      	ldr	r3, [pc, #64]	; (80062bc <itsdk_config_loadConfiguration+0x128>)
 800627a:	4a0e      	ldr	r2, [pc, #56]	; (80062b4 <itsdk_config_loadConfiguration+0x120>)
 800627c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800627e:	c313      	stmia	r3!, {r0, r1, r4}
 8006280:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006282:	c313      	stmia	r3!, {r0, r1, r4}
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	601a      	str	r2, [r3, #0]
#endif
  return CONFIG_RESTORED_FROM_FACTORY;
 8006288:	2302      	movs	r3, #2
 800628a:	e008      	b.n	800629e <itsdk_config_loadConfiguration+0x10a>
	  bcopy(&itsdk_config,&itsdk_config_shadow,sizeof(itsdk_configuration_nvm_t));
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <itsdk_config_loadConfiguration+0x128>)
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <itsdk_config_loadConfiguration+0x120>)
 8006290:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006292:	c313      	stmia	r3!, {r0, r1, r4}
 8006294:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006296:	c313      	stmia	r3!, {r0, r1, r4}
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	601a      	str	r2, [r3, #0]
	  return CONFIG_LOADED;
 800629c:	2301      	movs	r3, #1
}
 800629e:	0018      	movs	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b005      	add	sp, #20
 80062a4:	bd90      	pop	{r4, r7, pc}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	2000010c 	.word	0x2000010c
 80062ac:	080064ad 	.word	0x080064ad
 80062b0:	08006365 	.word	0x08006365
 80062b4:	20000490 	.word	0x20000490
 80062b8:	50000071 	.word	0x50000071
 80062bc:	20000474 	.word	0x20000474

080062c0 <itsdk_config_app_commitConfiguration>:
// CONFIG SHADOW
// ====================================================================================================

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC

__weak itsdk_config_ret_e itsdk_config_app_commitConfiguration() {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
	return CONFIG_SUCCESS;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	0018      	movs	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <itsdk_config_commitConfiguration>:

/**
 * Commit a shadow configuration into the standard config.
 * Save it
 */
itsdk_config_ret_e itsdk_config_commitConfiguration(itsdk_config_commit_mode_e mode) {
 80062cc:	b5b0      	push	{r4, r5, r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	0002      	movs	r2, r0
 80062d4:	1dfb      	adds	r3, r7, #7
 80062d6:	701a      	strb	r2, [r3, #0]

 itsdk_config_ret_e r = itsdk_config_app_commitConfiguration();
 80062d8:	250f      	movs	r5, #15
 80062da:	197c      	adds	r4, r7, r5
 80062dc:	f7ff fff0 	bl	80062c0 <itsdk_config_app_commitConfiguration>
 80062e0:	0003      	movs	r3, r0
 80062e2:	7023      	strb	r3, [r4, #0]
 if ( r != CONFIG_SUCCESS ) return r;
 80062e4:	197b      	adds	r3, r7, r5
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <itsdk_config_commitConfiguration+0x28>
 80062ec:	230f      	movs	r3, #15
 80062ee:	18fb      	adds	r3, r7, r3
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	e01f      	b.n	8006334 <itsdk_config_commitConfiguration+0x68>

 bcopy(&itsdk_config_shadow,&itsdk_config,sizeof(itsdk_configuration_nvm_t));
 80062f4:	4b11      	ldr	r3, [pc, #68]	; (800633c <itsdk_config_commitConfiguration+0x70>)
 80062f6:	4a12      	ldr	r2, [pc, #72]	; (8006340 <itsdk_config_commitConfiguration+0x74>)
 80062f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80062fa:	c313      	stmia	r3!, {r0, r1, r4}
 80062fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80062fe:	c313      	stmia	r3!, {r0, r1, r4}
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	601a      	str	r2, [r3, #0]
#if ITSDK_CONFIGURATION_MODE == __CONFIG_EEPROM
 if ( mode == CONFIG_COMMIT_SAVE || mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 8006304:	1dfb      	adds	r3, r7, #7
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d003      	beq.n	8006314 <itsdk_config_commitConfiguration+0x48>
 800630c:	1dfb      	adds	r3, r7, #7
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d105      	bne.n	8006320 <itsdk_config_commitConfiguration+0x54>
     eeprom_write(&itsdk_config, sizeof(itsdk_configuration_nvm_t), ITSDK_CONFIGURATION_MNG_VERSION);
 8006314:	4b09      	ldr	r3, [pc, #36]	; (800633c <itsdk_config_commitConfiguration+0x70>)
 8006316:	2201      	movs	r2, #1
 8006318:	211c      	movs	r1, #28
 800631a:	0018      	movs	r0, r3
 800631c:	f7ff fdd0 	bl	8005ec0 <eeprom_write>
 }
 if ( mode == CONFIG_COMMIT_SAVE_REBOOT ) {
 8006320:	1dfb      	adds	r3, r7, #7
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d104      	bne.n	8006332 <itsdk_config_commitConfiguration+0x66>
	 itsdk_delayMs(200);
 8006328:	20c8      	movs	r0, #200	; 0xc8
 800632a:	f004 f901 	bl	800a530 <itsdk_delayMs>
	 itsdk_reset();
 800632e:	f004 f8ad 	bl	800a48c <itsdk_reset>
 }
#endif
 return CONFIG_SUCCESS;
 8006332:	2300      	movs	r3, #0
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b004      	add	sp, #16
 800633a:	bdb0      	pop	{r4, r5, r7, pc}
 800633c:	20000490 	.word	0x20000490
 8006340:	20000474 	.word	0x20000474

08006344 <itsdk_config_app_printConfig>:

	#if ITSDK_WITH_CONFIGURATION_APP == __ENABLE
		/**
		 * This function need to be overrided
		 */
		__weak void itsdk_config_app_printConfig(itsdk_configuration_nvm_t * c) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_OVERRIDE_MISS,0);
 800634c:	4b04      	ldr	r3, [pc, #16]	; (8006360 <itsdk_config_app_printConfig+0x1c>)
 800634e:	2100      	movs	r1, #0
 8006350:	0018      	movs	r0, r3
 8006352:	f002 fbd5 	bl	8008b00 <itsdk_error_report>
			return;
 8006356:	46c0      	nop			; (mov r8, r8)
		}
 8006358:	46bd      	mov	sp, r7
 800635a:	b002      	add	sp, #8
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	40000070 	.word	0x40000070

08006364 <_itsdk_config_consolePublic>:

	#endif // ITSDK_WITH_CONFIGURATION_APP

	static itsdk_console_return_e _itsdk_config_consolePublic(char * buffer, uint8_t sz) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	000a      	movs	r2, r1
 800636e:	1cfb      	adds	r3, r7, #3
 8006370:	701a      	strb	r2, [r3, #0]
	   if ( sz == 1 ) {
 8006372:	1cfb      	adds	r3, r7, #3
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d000      	beq.n	800637c <_itsdk_config_consolePublic+0x18>
 800637a:	e074      	b.n	8006466 <_itsdk_config_consolePublic+0x102>
		  switch(buffer[0]){
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b43      	cmp	r3, #67	; 0x43
 8006382:	d012      	beq.n	80063aa <_itsdk_config_consolePublic+0x46>
 8006384:	2b63      	cmp	r3, #99	; 0x63
 8006386:	d010      	beq.n	80063aa <_itsdk_config_consolePublic+0x46>
 8006388:	2b3f      	cmp	r3, #63	; 0x3f
 800638a:	d000      	beq.n	800638e <_itsdk_config_consolePublic+0x2a>
				  _itsdk_console_printf("OK\r\n");
				}
				return ITSDK_CONSOLE_SUCCES;
				break;
			default:
				break;
 800638c:	e06c      	b.n	8006468 <_itsdk_config_consolePublic+0x104>
				_itsdk_console_printf("--- ConfigMng\r\n");
 800638e:	4b39      	ldr	r3, [pc, #228]	; (8006474 <_itsdk_config_consolePublic+0x110>)
 8006390:	0018      	movs	r0, r3
 8006392:	f7ff fba3 	bl	8005adc <_itsdk_console_printf>
				_itsdk_console_printf("c          : print config\r\n");
 8006396:	4b38      	ldr	r3, [pc, #224]	; (8006478 <_itsdk_config_consolePublic+0x114>)
 8006398:	0018      	movs	r0, r3
 800639a:	f7ff fb9f 	bl	8005adc <_itsdk_console_printf>
				_itsdk_console_printf("C          : print shadow config\r\n");
 800639e:	4b37      	ldr	r3, [pc, #220]	; (800647c <_itsdk_config_consolePublic+0x118>)
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7ff fb9b 	bl	8005adc <_itsdk_console_printf>
			  return ITSDK_CONSOLE_SUCCES;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e05f      	b.n	800646a <_itsdk_config_consolePublic+0x106>
					itsdk_configuration_nvm_t * _c = &itsdk_config;
 80063aa:	4b35      	ldr	r3, [pc, #212]	; (8006480 <_itsdk_config_consolePublic+0x11c>)
 80063ac:	60fb      	str	r3, [r7, #12]
					if (buffer[0]=='C') _c = &itsdk_config_shadow;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b43      	cmp	r3, #67	; 0x43
 80063b4:	d101      	bne.n	80063ba <_itsdk_config_consolePublic+0x56>
 80063b6:	4b33      	ldr	r3, [pc, #204]	; (8006484 <_itsdk_config_consolePublic+0x120>)
 80063b8:	60fb      	str	r3, [r7, #12]
					_itsdk_console_printf("sdk.version : %02X\r\n",_c->sdk.version);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	001a      	movs	r2, r3
 80063c0:	4b31      	ldr	r3, [pc, #196]	; (8006488 <_itsdk_config_consolePublic+0x124>)
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7ff fb89 	bl	8005adc <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeNetwork : %d\r\n",_c->sdk.activeNetwork);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	88db      	ldrh	r3, [r3, #6]
 80063ce:	001a      	movs	r2, r3
 80063d0:	4b2e      	ldr	r3, [pc, #184]	; (800648c <_itsdk_config_consolePublic+0x128>)
 80063d2:	0011      	movs	r1, r2
 80063d4:	0018      	movs	r0, r3
 80063d6:	f7ff fb81 	bl	8005adc <_itsdk_console_printf>
					_itsdk_console_printf("sdk.activeRegion : %04X\r\n",_c->sdk.activeRegion);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	891b      	ldrh	r3, [r3, #8]
 80063de:	001a      	movs	r2, r3
 80063e0:	4b2b      	ldr	r3, [pc, #172]	; (8006490 <_itsdk_config_consolePublic+0x12c>)
 80063e2:	0011      	movs	r1, r2
 80063e4:	0018      	movs	r0, r3
 80063e6:	f7ff fb79 	bl	8005adc <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.adrmode : %d\r\n",_c->sdk.lorawan.adrMode);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	7a9b      	ldrb	r3, [r3, #10]
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	0f9b      	lsrs	r3, r3, #30
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	001a      	movs	r2, r3
 80063f6:	4b27      	ldr	r3, [pc, #156]	; (8006494 <_itsdk_config_consolePublic+0x130>)
 80063f8:	0011      	movs	r1, r2
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7ff fb6e 	bl	8005adc <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.devEuiType : %d\r\n",_c->sdk.lorawan.devEuiType);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	7a9b      	ldrb	r3, [r3, #10]
 8006404:	069b      	lsls	r3, r3, #26
 8006406:	0f9b      	lsrs	r3, r3, #30
 8006408:	b2db      	uxtb	r3, r3
 800640a:	001a      	movs	r2, r3
 800640c:	4b22      	ldr	r3, [pc, #136]	; (8006498 <_itsdk_config_consolePublic+0x134>)
 800640e:	0011      	movs	r1, r2
 8006410:	0018      	movs	r0, r3
 8006412:	f7ff fb63 	bl	8005adc <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.joinMode : %d\r\n",_c->sdk.lorawan.joinMode);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	7a9b      	ldrb	r3, [r3, #10]
 800641a:	079b      	lsls	r3, r3, #30
 800641c:	0f9b      	lsrs	r3, r3, #30
 800641e:	b2db      	uxtb	r3, r3
 8006420:	001a      	movs	r2, r3
 8006422:	4b1e      	ldr	r3, [pc, #120]	; (800649c <_itsdk_config_consolePublic+0x138>)
 8006424:	0011      	movs	r1, r2
 8006426:	0018      	movs	r0, r3
 8006428:	f7ff fb58 	bl	8005adc <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.networkType : %d\r\n",_c->sdk.lorawan.networkType);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	7a9b      	ldrb	r3, [r3, #10]
 8006430:	071b      	lsls	r3, r3, #28
 8006432:	0f9b      	lsrs	r3, r3, #30
 8006434:	b2db      	uxtb	r3, r3
 8006436:	001a      	movs	r2, r3
 8006438:	4b19      	ldr	r3, [pc, #100]	; (80064a0 <_itsdk_config_consolePublic+0x13c>)
 800643a:	0011      	movs	r1, r2
 800643c:	0018      	movs	r0, r3
 800643e:	f7ff fb4d 	bl	8005adc <_itsdk_console_printf>
					_itsdk_console_printf("sdk.lora.retries : %d\r\n",_c->sdk.lorawan.retries);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	7adb      	ldrb	r3, [r3, #11]
 8006446:	001a      	movs	r2, r3
 8006448:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <_itsdk_config_consolePublic+0x140>)
 800644a:	0011      	movs	r1, r2
 800644c:	0018      	movs	r0, r3
 800644e:	f7ff fb45 	bl	8005adc <_itsdk_console_printf>
					   itsdk_config_app_printConfig(_c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	0018      	movs	r0, r3
 8006456:	f7ff ff75 	bl	8006344 <itsdk_config_app_printConfig>
				  _itsdk_console_printf("OK\r\n");
 800645a:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <_itsdk_config_consolePublic+0x144>)
 800645c:	0018      	movs	r0, r3
 800645e:	f7ff fb3d 	bl	8005adc <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 8006462:	2300      	movs	r3, #0
 8006464:	e001      	b.n	800646a <_itsdk_config_consolePublic+0x106>
		  }
	  } //Sz == 1
 8006466:	46c0      	nop			; (mov r8, r8)
	  return ITSDK_CONSOLE_NOTFOUND;
 8006468:	2301      	movs	r3, #1
	}
 800646a:	0018      	movs	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	b004      	add	sp, #16
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	0800c328 	.word	0x0800c328
 8006478:	0800c338 	.word	0x0800c338
 800647c:	0800c354 	.word	0x0800c354
 8006480:	20000490 	.word	0x20000490
 8006484:	20000474 	.word	0x20000474
 8006488:	0800c378 	.word	0x0800c378
 800648c:	0800c390 	.word	0x0800c390
 8006490:	0800c3ac 	.word	0x0800c3ac
 8006494:	0800c3c8 	.word	0x0800c3c8
 8006498:	0800c3e0 	.word	0x0800c3e0
 800649c:	0800c3fc 	.word	0x0800c3fc
 80064a0:	0800c418 	.word	0x0800c418
 80064a4:	0800c434 	.word	0x0800c434
 80064a8:	0800c44c 	.word	0x0800c44c

080064ac <_itsdk_config_consolePriv>:

static itsdk_console_return_e _itsdk_config_consolePriv(char * buffer, uint8_t sz) {
 80064ac:	b5b0      	push	{r4, r5, r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	000a      	movs	r2, r1
 80064b6:	1cfb      	adds	r3, r7, #3
 80064b8:	701a      	strb	r2, [r3, #0]
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
	if ( sz == 1 ) {
 80064ba:	1cfb      	adds	r3, r7, #3
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d000      	beq.n	80064c4 <_itsdk_config_consolePriv+0x18>
 80064c2:	e09c      	b.n	80065fe <_itsdk_config_consolePriv+0x152>
	  switch(buffer[0]){
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b46      	cmp	r3, #70	; 0x46
 80064ca:	d03f      	beq.n	800654c <_itsdk_config_consolePriv+0xa0>
 80064cc:	dc02      	bgt.n	80064d4 <_itsdk_config_consolePriv+0x28>
 80064ce:	2b3f      	cmp	r3, #63	; 0x3f
 80064d0:	d005      	beq.n	80064de <_itsdk_config_consolePriv+0x32>
			  _itsdk_console_printf("OK\r\n");
			 return ITSDK_CONSOLE_SUCCES;
			}
		#endif
		default:
			break;
 80064d2:	e24a      	b.n	800696a <_itsdk_config_consolePriv+0x4be>
	  switch(buffer[0]){
 80064d4:	2b53      	cmp	r3, #83	; 0x53
 80064d6:	d02c      	beq.n	8006532 <_itsdk_config_consolePriv+0x86>
 80064d8:	2b6d      	cmp	r3, #109	; 0x6d
 80064da:	d044      	beq.n	8006566 <_itsdk_config_consolePriv+0xba>
			break;
 80064dc:	e245      	b.n	800696a <_itsdk_config_consolePriv+0x4be>
			  _itsdk_console_printf("S          : commit configuration\r\n");
 80064de:	4bdb      	ldr	r3, [pc, #876]	; (800684c <_itsdk_config_consolePriv+0x3a0>)
 80064e0:	0018      	movs	r0, r3
 80064e2:	f7ff fafb 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("F          : restore factory default config\r\n");
 80064e6:	4bda      	ldr	r3, [pc, #872]	; (8006850 <_itsdk_config_consolePriv+0x3a4>)
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7ff faf7 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("m          : see eeprom configuration\r\n");
 80064ee:	4bd9      	ldr	r3, [pc, #868]	; (8006854 <_itsdk_config_consolePriv+0x3a8>)
 80064f0:	0018      	movs	r0, r3
 80064f2:	f7ff faf3 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("SC:N:x     : sdk.activeNetwork 1:SFX 2:LoRa\r\n");
 80064f6:	4bd8      	ldr	r3, [pc, #864]	; (8006858 <_itsdk_config_consolePriv+0x3ac>)
 80064f8:	0018      	movs	r0, r3
 80064fa:	f7ff faef 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("SC:R:xxxx  : sdk.activeRegion __PLWAN_REGION_xx\r\n");
 80064fe:	4bd7      	ldr	r3, [pc, #860]	; (800685c <_itsdk_config_consolePriv+0x3b0>)
 8006500:	0018      	movs	r0, r3
 8006502:	f7ff faeb 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("SC:0:x     : lora.adrmode 1:OFF/2:ON\r\n");
 8006506:	4bd6      	ldr	r3, [pc, #856]	; (8006860 <_itsdk_config_consolePriv+0x3b4>)
 8006508:	0018      	movs	r0, r3
 800650a:	f7ff fae7 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("SC:1:x     : lora.devEuiType 1:STATIC/2:GENERATED\r\n");
 800650e:	4bd5      	ldr	r3, [pc, #852]	; (8006864 <_itsdk_config_consolePriv+0x3b8>)
 8006510:	0018      	movs	r0, r3
 8006512:	f7ff fae3 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("SC:2:x     : lora.joinMode 1:OTAA/2:ABP\r\n");
 8006516:	4bd4      	ldr	r3, [pc, #848]	; (8006868 <_itsdk_config_consolePriv+0x3bc>)
 8006518:	0018      	movs	r0, r3
 800651a:	f7ff fadf 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("SC:3:x     : lora.networkType 1:PUBLIC/2:PRIVATE\r\n");
 800651e:	4bd3      	ldr	r3, [pc, #844]	; (800686c <_itsdk_config_consolePriv+0x3c0>)
 8006520:	0018      	movs	r0, r3
 8006522:	f7ff fadb 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("SC:4:nn    : lora.retries 00..99\r\n");
 8006526:	4bd2      	ldr	r3, [pc, #840]	; (8006870 <_itsdk_config_consolePriv+0x3c4>)
 8006528:	0018      	movs	r0, r3
 800652a:	f7ff fad7 	bl	8005adc <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 800652e:	2300      	movs	r3, #0
 8006530:	e21c      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_COMMIT_NEW_CONF,0);
 8006532:	2100      	movs	r1, #0
 8006534:	2072      	movs	r0, #114	; 0x72
 8006536:	f002 fae3 	bl	8008b00 <itsdk_error_report>
			itsdk_config_commitConfiguration(CONFIG_COMMIT_SAVE);
 800653a:	2001      	movs	r0, #1
 800653c:	f7ff fec6 	bl	80062cc <itsdk_config_commitConfiguration>
			_itsdk_console_printf("OK\r\n");
 8006540:	4bcc      	ldr	r3, [pc, #816]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 8006542:	0018      	movs	r0, r3
 8006544:	f7ff faca 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 8006548:	2300      	movs	r3, #0
 800654a:	e20f      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			  ITSDK_ERROR_REPORT(ITSDK_ERROR_CONFIG_FACTORY_DEFAULT,3);
 800654c:	4bca      	ldr	r3, [pc, #808]	; (8006878 <_itsdk_config_consolePriv+0x3cc>)
 800654e:	2103      	movs	r1, #3
 8006550:	0018      	movs	r0, r3
 8006552:	f002 fad5 	bl	8008b00 <itsdk_error_report>
			  itsdk_config_resetToFactory();
 8006556:	f7ff fe01 	bl	800615c <itsdk_config_resetToFactory>
			  _itsdk_console_printf("OK\r\n");
 800655a:	4bc6      	ldr	r3, [pc, #792]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 800655c:	0018      	movs	r0, r3
 800655e:	f7ff fabd 	bl	8005adc <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 8006562:	2300      	movs	r3, #0
 8006564:	e202      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			  uint32_t offset = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
			  uint32_t size = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
			  uint32_t totSize = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]
			  	itsdk_secstore_getStoreSize(&size);
 8006572:	240c      	movs	r4, #12
 8006574:	193b      	adds	r3, r7, r4
 8006576:	0018      	movs	r0, r3
 8006578:	f000 faff 	bl	8006b7a <itsdk_secstore_getStoreSize>
			  	_itsdk_console_printf("SecureStore: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	18d2      	adds	r2, r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6979      	ldr	r1, [r7, #20]
 8006586:	48bd      	ldr	r0, [pc, #756]	; (800687c <_itsdk_config_consolePriv+0x3d0>)
 8006588:	f7ff faa8 	bl	8005adc <_itsdk_console_printf>
			  	offset += size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	18d3      	adds	r3, r2, r3
 8006592:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	18d3      	adds	r3, r2, r3
 800659a:	613b      	str	r3, [r7, #16]
			  	itsdk_error_getSize(&size);
 800659c:	193b      	adds	r3, r7, r4
 800659e:	0018      	movs	r0, r3
 80065a0:	f002 fbd3 	bl	8008d4a <itsdk_error_getSize>
			  	_itsdk_console_printf("ErrorLog: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	18d2      	adds	r2, r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6979      	ldr	r1, [r7, #20]
 80065ae:	48b4      	ldr	r0, [pc, #720]	; (8006880 <_itsdk_config_consolePriv+0x3d4>)
 80065b0:	f7ff fa94 	bl	8005adc <_itsdk_console_printf>
			  	offset += size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	18d3      	adds	r3, r2, r3
 80065ba:	617b      	str	r3, [r7, #20]
			  	totSize += size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	18d3      	adds	r3, r2, r3
 80065c2:	613b      	str	r3, [r7, #16]
			  eeprom_getConfigSize(&size);
 80065c4:	193b      	adds	r3, r7, r4
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7ff fd3f 	bl	800604a <eeprom_getConfigSize>
  		  	  totSize += size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	18d3      	adds	r3, r2, r3
 80065d2:	613b      	str	r3, [r7, #16]
			  _itsdk_console_printf("ApplicationConfig: 0x%08X->0x%08X (%dB)\r\n",offset,offset+size,size);
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	18d2      	adds	r2, r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6979      	ldr	r1, [r7, #20]
 80065de:	48a9      	ldr	r0, [pc, #676]	; (8006884 <_itsdk_config_consolePriv+0x3d8>)
 80065e0:	f7ff fa7c 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("UsedMemory: %dB on %dB\r\n",totSize,ITSDK_EPROM_SIZE);
 80065e4:	23c0      	movs	r3, #192	; 0xc0
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	6939      	ldr	r1, [r7, #16]
 80065ea:	4ba7      	ldr	r3, [pc, #668]	; (8006888 <_itsdk_config_consolePriv+0x3dc>)
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7ff fa75 	bl	8005adc <_itsdk_console_printf>
			  _itsdk_console_printf("OK\r\n");
 80065f2:	4ba0      	ldr	r3, [pc, #640]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 80065f4:	0018      	movs	r0, r3
 80065f6:	f7ff fa71 	bl	8005adc <_itsdk_console_printf>
			 return ITSDK_CONSOLE_SUCCES;
 80065fa:	2300      	movs	r3, #0
 80065fc:	e1b6      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
	  }
	} else if ( sz == 4 ) {
 80065fe:	1cfb      	adds	r3, r7, #3
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b04      	cmp	r3, #4
 8006604:	d116      	bne.n	8006634 <_itsdk_config_consolePriv+0x188>
		if ( buffer[0] == 's' && buffer[1] == 'c' && buffer[2] == ':' ) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b73      	cmp	r3, #115	; 0x73
 800660c:	d000      	beq.n	8006610 <_itsdk_config_consolePriv+0x164>
 800660e:	e1ac      	b.n	800696a <_itsdk_config_consolePriv+0x4be>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3301      	adds	r3, #1
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b63      	cmp	r3, #99	; 0x63
 8006618:	d000      	beq.n	800661c <_itsdk_config_consolePriv+0x170>
 800661a:	e1a6      	b.n	800696a <_itsdk_config_consolePriv+0x4be>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3302      	adds	r3, #2
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b3a      	cmp	r3, #58	; 0x3a
 8006624:	d000      	beq.n	8006628 <_itsdk_config_consolePriv+0x17c>
 8006626:	e1a0      	b.n	800696a <_itsdk_config_consolePriv+0x4be>
						return ITSDK_CONSOLE_SUCCES;
					}
					break;
				#endif
				default:
					_itsdk_console_printf("KO\r\n");
 8006628:	4b98      	ldr	r3, [pc, #608]	; (800688c <_itsdk_config_consolePriv+0x3e0>)
 800662a:	0018      	movs	r0, r3
 800662c:	f7ff fa56 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 8006630:	2302      	movs	r3, #2
 8006632:	e19b      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			}
		}
	} else if ( sz >= 6 ) {
 8006634:	1cfb      	adds	r3, r7, #3
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b05      	cmp	r3, #5
 800663a:	d800      	bhi.n	800663e <_itsdk_config_consolePriv+0x192>
 800663c:	e192      	b.n	8006964 <_itsdk_config_consolePriv+0x4b8>
		if ( buffer[0] == 'S' && buffer[1] == 'C' && buffer[2] == ':' && buffer[4] == ':' ) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b53      	cmp	r3, #83	; 0x53
 8006644:	d000      	beq.n	8006648 <_itsdk_config_consolePriv+0x19c>
 8006646:	e18d      	b.n	8006964 <_itsdk_config_consolePriv+0x4b8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3301      	adds	r3, #1
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b43      	cmp	r3, #67	; 0x43
 8006650:	d000      	beq.n	8006654 <_itsdk_config_consolePriv+0x1a8>
 8006652:	e187      	b.n	8006964 <_itsdk_config_consolePriv+0x4b8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3302      	adds	r3, #2
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b3a      	cmp	r3, #58	; 0x3a
 800665c:	d000      	beq.n	8006660 <_itsdk_config_consolePriv+0x1b4>
 800665e:	e181      	b.n	8006964 <_itsdk_config_consolePriv+0x4b8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b3a      	cmp	r3, #58	; 0x3a
 8006668:	d000      	beq.n	800666c <_itsdk_config_consolePriv+0x1c0>
 800666a:	e17b      	b.n	8006964 <_itsdk_config_consolePriv+0x4b8>
			switch(buffer[3]) {
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3303      	adds	r3, #3
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	3b30      	subs	r3, #48	; 0x30
 8006674:	2b22      	cmp	r3, #34	; 0x22
 8006676:	d900      	bls.n	800667a <_itsdk_config_consolePriv+0x1ce>
 8006678:	e176      	b.n	8006968 <_itsdk_config_consolePriv+0x4bc>
 800667a:	009a      	lsls	r2, r3, #2
 800667c:	4b84      	ldr	r3, [pc, #528]	; (8006890 <_itsdk_config_consolePriv+0x3e4>)
 800667e:	18d3      	adds	r3, r2, r3
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	469f      	mov	pc, r3
			#if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case 'N': {
				// sdk.activeNetwork
				switch ( buffer[5] ) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3305      	adds	r3, #5
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b31      	cmp	r3, #49	; 0x31
 800668c:	d007      	beq.n	800669e <_itsdk_config_consolePriv+0x1f2>
 800668e:	2b32      	cmp	r3, #50	; 0x32
 8006690:	d009      	beq.n	80066a6 <_itsdk_config_consolePriv+0x1fa>
 8006692:	2b30      	cmp	r3, #48	; 0x30
 8006694:	d10b      	bne.n	80066ae <_itsdk_config_consolePriv+0x202>
					case '0':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_NONE;
 8006696:	4b7f      	ldr	r3, [pc, #508]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 8006698:	2200      	movs	r2, #0
 800669a:	80da      	strh	r2, [r3, #6]
					   break;
 800669c:	e00d      	b.n	80066ba <_itsdk_config_consolePriv+0x20e>
					case '1':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_SIGFOX;
 800669e:	4b7d      	ldr	r3, [pc, #500]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 80066a0:	2201      	movs	r2, #1
 80066a2:	80da      	strh	r2, [r3, #6]
					   break;
 80066a4:	e009      	b.n	80066ba <_itsdk_config_consolePriv+0x20e>
					case '2':
					   itsdk_config_shadow.sdk.activeNetwork = __ACTIV_NETWORK_LORAWAN;
 80066a6:	4b7b      	ldr	r3, [pc, #492]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 80066a8:	2202      	movs	r2, #2
 80066aa:	80da      	strh	r2, [r3, #6]
					   break;
 80066ac:	e005      	b.n	80066ba <_itsdk_config_consolePriv+0x20e>
					default:
						_itsdk_console_printf("KO\r\n");
 80066ae:	4b77      	ldr	r3, [pc, #476]	; (800688c <_itsdk_config_consolePriv+0x3e0>)
 80066b0:	0018      	movs	r0, r3
 80066b2:	f7ff fa13 	bl	8005adc <_itsdk_console_printf>
						return ITSDK_CONSOLE_FAILED;
 80066b6:	2302      	movs	r3, #2
 80066b8:	e158      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
				}
				_itsdk_console_printf("OK\r\n");
 80066ba:	4b6e      	ldr	r3, [pc, #440]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 80066bc:	0018      	movs	r0, r3
 80066be:	f7ff fa0d 	bl	8005adc <_itsdk_console_printf>
				return ITSDK_CONSOLE_SUCCES;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e152      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			}
			case 'R': {
				if ( itdt_isHexString( &buffer[5],4,false) ) {
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3305      	adds	r3, #5
 80066ca:	2200      	movs	r2, #0
 80066cc:	2104      	movs	r1, #4
 80066ce:	0018      	movs	r0, r3
 80066d0:	f002 ffa8 	bl	8009624 <itdt_isHexString>
 80066d4:	1e03      	subs	r3, r0, #0
 80066d6:	d01b      	beq.n	8006710 <_itsdk_config_consolePriv+0x264>
					uint16_t v = itdt_convertHexChar4Int(&buffer[5]);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3305      	adds	r3, #5
 80066dc:	251a      	movs	r5, #26
 80066de:	197c      	adds	r4, r7, r5
 80066e0:	0018      	movs	r0, r3
 80066e2:	f002 ff4c 	bl	800957e <itdt_convertHexChar4Int>
 80066e6:	0003      	movs	r3, r0
 80066e8:	8023      	strh	r3, [r4, #0]
					if ( itdt_count_bits_1(v) <= 1 ) {
 80066ea:	197b      	adds	r3, r7, r5
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	0018      	movs	r0, r3
 80066f0:	f002 ffe4 	bl	80096bc <itdt_count_bits_1>
 80066f4:	0003      	movs	r3, r0
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d80a      	bhi.n	8006710 <_itsdk_config_consolePriv+0x264>
						itsdk_config_shadow.sdk.activeRegion = v;
 80066fa:	4b66      	ldr	r3, [pc, #408]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 80066fc:	221a      	movs	r2, #26
 80066fe:	18ba      	adds	r2, r7, r2
 8006700:	8812      	ldrh	r2, [r2, #0]
 8006702:	811a      	strh	r2, [r3, #8]
						_itsdk_console_printf("OK\r\n");
 8006704:	4b5b      	ldr	r3, [pc, #364]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 8006706:	0018      	movs	r0, r3
 8006708:	f7ff f9e8 	bl	8005adc <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 800670c:	2300      	movs	r3, #0
 800670e:	e12d      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8006710:	4b5e      	ldr	r3, [pc, #376]	; (800688c <_itsdk_config_consolePriv+0x3e0>)
 8006712:	0018      	movs	r0, r3
 8006714:	f7ff f9e2 	bl	8005adc <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8006718:	2302      	movs	r3, #2
 800671a:	e127      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			#endif

 	 	 	#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
			case '0':
				// lora.adrmode
				if ( buffer[5] == '1' ) {
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3305      	adds	r3, #5
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b31      	cmp	r3, #49	; 0x31
 8006724:	d10d      	bne.n	8006742 <_itsdk_config_consolePriv+0x296>
					itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_OFF;
 8006726:	4b5b      	ldr	r3, [pc, #364]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 8006728:	7a9a      	ldrb	r2, [r3, #10]
 800672a:	213f      	movs	r1, #63	; 0x3f
 800672c:	400a      	ands	r2, r1
 800672e:	1c11      	adds	r1, r2, #0
 8006730:	2240      	movs	r2, #64	; 0x40
 8006732:	430a      	orrs	r2, r1
 8006734:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8006736:	4b4f      	ldr	r3, [pc, #316]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 8006738:	0018      	movs	r0, r3
 800673a:	f7ff f9cf 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 800673e:	2300      	movs	r3, #0
 8006740:	e114      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
				}
			    if ( buffer[5] == '2' ) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3305      	adds	r3, #5
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b32      	cmp	r3, #50	; 0x32
 800674a:	d10e      	bne.n	800676a <_itsdk_config_consolePriv+0x2be>
			    	itsdk_config_shadow.sdk.lorawan.adrMode = __LORAWAN_ADR_ON;
 800674c:	4b51      	ldr	r3, [pc, #324]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 800674e:	7a9a      	ldrb	r2, [r3, #10]
 8006750:	213f      	movs	r1, #63	; 0x3f
 8006752:	400a      	ands	r2, r1
 8006754:	1c11      	adds	r1, r2, #0
 8006756:	2280      	movs	r2, #128	; 0x80
 8006758:	4252      	negs	r2, r2
 800675a:	430a      	orrs	r2, r1
 800675c:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 800675e:	4b45      	ldr	r3, [pc, #276]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 8006760:	0018      	movs	r0, r3
 8006762:	f7ff f9bb 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8006766:	2300      	movs	r3, #0
 8006768:	e100      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			    }
				_itsdk_console_printf("KO\r\n");
 800676a:	4b48      	ldr	r3, [pc, #288]	; (800688c <_itsdk_config_consolePriv+0x3e0>)
 800676c:	0018      	movs	r0, r3
 800676e:	f7ff f9b5 	bl	8005adc <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8006772:	2302      	movs	r3, #2
 8006774:	e0fa      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
				break;
			case '1':
				// lora.devEuiType
				if ( buffer[5] == '1' ) {
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3305      	adds	r3, #5
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b31      	cmp	r3, #49	; 0x31
 800677e:	d10d      	bne.n	800679c <_itsdk_config_consolePriv+0x2f0>
					itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_STATIC;
 8006780:	4b44      	ldr	r3, [pc, #272]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 8006782:	7a9a      	ldrb	r2, [r3, #10]
 8006784:	2130      	movs	r1, #48	; 0x30
 8006786:	438a      	bics	r2, r1
 8006788:	1c11      	adds	r1, r2, #0
 800678a:	2210      	movs	r2, #16
 800678c:	430a      	orrs	r2, r1
 800678e:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8006790:	4b38      	ldr	r3, [pc, #224]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 8006792:	0018      	movs	r0, r3
 8006794:	f7ff f9a2 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8006798:	2300      	movs	r3, #0
 800679a:	e0e7      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
				}
			    if ( buffer[5] == '2' ) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3305      	adds	r3, #5
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b32      	cmp	r3, #50	; 0x32
 80067a4:	d10d      	bne.n	80067c2 <_itsdk_config_consolePriv+0x316>
			    	itsdk_config_shadow.sdk.lorawan.devEuiType = __LORAWAN_DEVEUI_GENERATED;
 80067a6:	4b3b      	ldr	r3, [pc, #236]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 80067a8:	7a9a      	ldrb	r2, [r3, #10]
 80067aa:	2130      	movs	r1, #48	; 0x30
 80067ac:	438a      	bics	r2, r1
 80067ae:	1c11      	adds	r1, r2, #0
 80067b0:	2220      	movs	r2, #32
 80067b2:	430a      	orrs	r2, r1
 80067b4:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80067b6:	4b2f      	ldr	r3, [pc, #188]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 80067b8:	0018      	movs	r0, r3
 80067ba:	f7ff f98f 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80067be:	2300      	movs	r3, #0
 80067c0:	e0d4      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			    }
				_itsdk_console_printf("KO\r\n");
 80067c2:	4b32      	ldr	r3, [pc, #200]	; (800688c <_itsdk_config_consolePriv+0x3e0>)
 80067c4:	0018      	movs	r0, r3
 80067c6:	f7ff f989 	bl	8005adc <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80067ca:	2302      	movs	r3, #2
 80067cc:	e0ce      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
				break;
			case '2':
				// lora.joinMode
				if ( buffer[5] == '1' ) {
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3305      	adds	r3, #5
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b31      	cmp	r3, #49	; 0x31
 80067d6:	d10d      	bne.n	80067f4 <_itsdk_config_consolePriv+0x348>
					itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_OTAA;
 80067d8:	4b2e      	ldr	r3, [pc, #184]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 80067da:	7a9a      	ldrb	r2, [r3, #10]
 80067dc:	2103      	movs	r1, #3
 80067de:	438a      	bics	r2, r1
 80067e0:	1c11      	adds	r1, r2, #0
 80067e2:	2201      	movs	r2, #1
 80067e4:	430a      	orrs	r2, r1
 80067e6:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80067e8:	4b22      	ldr	r3, [pc, #136]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 80067ea:	0018      	movs	r0, r3
 80067ec:	f7ff f976 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e0bb      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
				}
			    if ( buffer[5] == '2' ) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3305      	adds	r3, #5
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b32      	cmp	r3, #50	; 0x32
 80067fc:	d10d      	bne.n	800681a <_itsdk_config_consolePriv+0x36e>
			    	itsdk_config_shadow.sdk.lorawan.joinMode = __LORAWAN_ABP;
 80067fe:	4b25      	ldr	r3, [pc, #148]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 8006800:	7a9a      	ldrb	r2, [r3, #10]
 8006802:	2103      	movs	r1, #3
 8006804:	438a      	bics	r2, r1
 8006806:	1c11      	adds	r1, r2, #0
 8006808:	2202      	movs	r2, #2
 800680a:	430a      	orrs	r2, r1
 800680c:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 8006810:	0018      	movs	r0, r3
 8006812:	f7ff f963 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8006816:	2300      	movs	r3, #0
 8006818:	e0a8      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			    }
				_itsdk_console_printf("KO\r\n");
 800681a:	4b1c      	ldr	r3, [pc, #112]	; (800688c <_itsdk_config_consolePriv+0x3e0>)
 800681c:	0018      	movs	r0, r3
 800681e:	f7ff f95d 	bl	8005adc <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8006822:	2302      	movs	r3, #2
 8006824:	e0a2      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
				break;
			case '3':
				// lora.networkType
				if ( buffer[5] == '1' ) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3305      	adds	r3, #5
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b31      	cmp	r3, #49	; 0x31
 800682e:	d133      	bne.n	8006898 <_itsdk_config_consolePriv+0x3ec>
					itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PUBLIC;
 8006830:	4b18      	ldr	r3, [pc, #96]	; (8006894 <_itsdk_config_consolePriv+0x3e8>)
 8006832:	7a9a      	ldrb	r2, [r3, #10]
 8006834:	210c      	movs	r1, #12
 8006836:	438a      	bics	r2, r1
 8006838:	1c11      	adds	r1, r2, #0
 800683a:	2204      	movs	r2, #4
 800683c:	430a      	orrs	r2, r1
 800683e:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 8006840:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <_itsdk_config_consolePriv+0x3c8>)
 8006842:	0018      	movs	r0, r3
 8006844:	f7ff f94a 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 8006848:	2300      	movs	r3, #0
 800684a:	e08f      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
 800684c:	0800c454 	.word	0x0800c454
 8006850:	0800c478 	.word	0x0800c478
 8006854:	0800c4a8 	.word	0x0800c4a8
 8006858:	0800c4d0 	.word	0x0800c4d0
 800685c:	0800c500 	.word	0x0800c500
 8006860:	0800c534 	.word	0x0800c534
 8006864:	0800c55c 	.word	0x0800c55c
 8006868:	0800c590 	.word	0x0800c590
 800686c:	0800c5bc 	.word	0x0800c5bc
 8006870:	0800c5f0 	.word	0x0800c5f0
 8006874:	0800c44c 	.word	0x0800c44c
 8006878:	50000071 	.word	0x50000071
 800687c:	0800c614 	.word	0x0800c614
 8006880:	0800c638 	.word	0x0800c638
 8006884:	0800c65c 	.word	0x0800c65c
 8006888:	0800c688 	.word	0x0800c688
 800688c:	0800c6a4 	.word	0x0800c6a4
 8006890:	0800cc20 	.word	0x0800cc20
 8006894:	20000474 	.word	0x20000474
				}
			    if ( buffer[5] == '2' ) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3305      	adds	r3, #5
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b32      	cmp	r3, #50	; 0x32
 80068a0:	d10d      	bne.n	80068be <_itsdk_config_consolePriv+0x412>
			    	itsdk_config_shadow.sdk.lorawan.networkType = __LORAWAN_NWK_PRIVATE;
 80068a2:	4b34      	ldr	r3, [pc, #208]	; (8006974 <_itsdk_config_consolePriv+0x4c8>)
 80068a4:	7a9a      	ldrb	r2, [r3, #10]
 80068a6:	210c      	movs	r1, #12
 80068a8:	438a      	bics	r2, r1
 80068aa:	1c11      	adds	r1, r2, #0
 80068ac:	2208      	movs	r2, #8
 80068ae:	430a      	orrs	r2, r1
 80068b0:	729a      	strb	r2, [r3, #10]
					_itsdk_console_printf("OK\r\n");
 80068b2:	4b31      	ldr	r3, [pc, #196]	; (8006978 <_itsdk_config_consolePriv+0x4cc>)
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7ff f911 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e056      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
			    }
				_itsdk_console_printf("KO\r\n");
 80068be:	4b2f      	ldr	r3, [pc, #188]	; (800697c <_itsdk_config_consolePriv+0x4d0>)
 80068c0:	0018      	movs	r0, r3
 80068c2:	f7ff f90b 	bl	8005adc <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 80068c6:	2302      	movs	r3, #2
 80068c8:	e050      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
				break;
			case '4':
				// lora.retries
				if ( sz >= 7 ) {
 80068ca:	1cfb      	adds	r3, r7, #3
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d942      	bls.n	8006958 <_itsdk_config_consolePriv+0x4ac>
					int v = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
					char c = buffer[5];
 80068d6:	2119      	movs	r1, #25
 80068d8:	187b      	adds	r3, r7, r1
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	7952      	ldrb	r2, [r2, #5]
 80068de:	701a      	strb	r2, [r3, #0]
					if ( c >= '0' && c <= '9' ) {
 80068e0:	187b      	adds	r3, r7, r1
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b2f      	cmp	r3, #47	; 0x2f
 80068e6:	d927      	bls.n	8006938 <_itsdk_config_consolePriv+0x48c>
 80068e8:	2319      	movs	r3, #25
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b39      	cmp	r3, #57	; 0x39
 80068f0:	d822      	bhi.n	8006938 <_itsdk_config_consolePriv+0x48c>
						v = 10*(c - '0');
 80068f2:	2119      	movs	r1, #25
 80068f4:	187b      	adds	r3, r7, r1
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	3b30      	subs	r3, #48	; 0x30
 80068fa:	001a      	movs	r2, r3
 80068fc:	0013      	movs	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	189b      	adds	r3, r3, r2
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
						c = buffer[6];
 8006906:	187b      	adds	r3, r7, r1
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	7992      	ldrb	r2, [r2, #6]
 800690c:	701a      	strb	r2, [r3, #0]
						if ( c >= '0' && c <= '9' ) {
 800690e:	187b      	adds	r3, r7, r1
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b2f      	cmp	r3, #47	; 0x2f
 8006914:	d90c      	bls.n	8006930 <_itsdk_config_consolePriv+0x484>
 8006916:	2319      	movs	r3, #25
 8006918:	18fb      	adds	r3, r7, r3
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b39      	cmp	r3, #57	; 0x39
 800691e:	d807      	bhi.n	8006930 <_itsdk_config_consolePriv+0x484>
							v = v + (c - '0');
 8006920:	2319      	movs	r3, #25
 8006922:	18fb      	adds	r3, r7, r3
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	3b30      	subs	r3, #48	; 0x30
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	18d3      	adds	r3, r2, r3
 800692c:	61fb      	str	r3, [r7, #28]
						if ( c >= '0' && c <= '9' ) {
 800692e:	e006      	b.n	800693e <_itsdk_config_consolePriv+0x492>
						} else 	v = -1;
 8006930:	2301      	movs	r3, #1
 8006932:	425b      	negs	r3, r3
 8006934:	61fb      	str	r3, [r7, #28]
						if ( c >= '0' && c <= '9' ) {
 8006936:	e002      	b.n	800693e <_itsdk_config_consolePriv+0x492>
					} else v = -1;
 8006938:	2301      	movs	r3, #1
 800693a:	425b      	negs	r3, r3
 800693c:	61fb      	str	r3, [r7, #28]
					if ( v >= 0 ) {
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	2b00      	cmp	r3, #0
 8006942:	db09      	blt.n	8006958 <_itsdk_config_consolePriv+0x4ac>
						itsdk_config_shadow.sdk.lorawan.retries = v;
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <_itsdk_config_consolePriv+0x4c8>)
 800694a:	72da      	strb	r2, [r3, #11]
						_itsdk_console_printf("OK\r\n");
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <_itsdk_config_consolePriv+0x4cc>)
 800694e:	0018      	movs	r0, r3
 8006950:	f7ff f8c4 	bl	8005adc <_itsdk_console_printf>
						return ITSDK_CONSOLE_SUCCES;
 8006954:	2300      	movs	r3, #0
 8006956:	e009      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
					}
				}
				_itsdk_console_printf("KO\r\n");
 8006958:	4b08      	ldr	r3, [pc, #32]	; (800697c <_itsdk_config_consolePriv+0x4d0>)
 800695a:	0018      	movs	r0, r3
 800695c:	f7ff f8be 	bl	8005adc <_itsdk_console_printf>
				return ITSDK_CONSOLE_FAILED;
 8006960:	2302      	movs	r3, #2
 8006962:	e003      	b.n	800696c <_itsdk_config_consolePriv+0x4c0>
				break;
			#endif	// ITSDK_WITH_SIGFOX_LIB
			default:
				break;
			}
		}
 8006964:	46c0      	nop			; (mov r8, r8)
 8006966:	e000      	b.n	800696a <_itsdk_config_consolePriv+0x4be>
				break;
 8006968:	46c0      	nop			; (mov r8, r8)
	}
#endif
  return ITSDK_CONSOLE_NOTFOUND;
 800696a:	2301      	movs	r3, #1
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b008      	add	sp, #32
 8006972:	bdb0      	pop	{r4, r5, r7, pc}
 8006974:	20000474 	.word	0x20000474
 8006978:	0800c44c 	.word	0x0800c44c
 800697c:	0800c6a4 	.word	0x0800c6a4

08006980 <itsdk_state_init>:
#endif
#include <it_sdk/lorawan/lorawan.h>

itsdk_state_t itsdk_state;

void itsdk_state_init() {
 8006980:	b5b0      	push	{r4, r5, r7, lr}
 8006982:	af00      	add	r7, sp, #0
	itsdk_state.lastWakeUpTimeUs = 0;
 8006984:	4a09      	ldr	r2, [pc, #36]	; (80069ac <itsdk_state_init+0x2c>)
 8006986:	2300      	movs	r3, #0
 8006988:	2400      	movs	r4, #0
 800698a:	6093      	str	r3, [r2, #8]
 800698c:	60d4      	str	r4, [r2, #12]
	itsdk_state.lastResetCause = itsdk_getResetCause();
 800698e:	f003 fd83 	bl	800a498 <itsdk_getResetCause>
 8006992:	0003      	movs	r3, r0
 8006994:	001a      	movs	r2, r3
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <itsdk_state_init+0x2c>)
 8006998:	701a      	strb	r2, [r3, #0]

#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	itsdk_state.activeNetwork = (uint8_t)itsdk_config.sdk.activeNetwork;
 800699a:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <itsdk_state_init+0x30>)
 800699c:	88db      	ldrh	r3, [r3, #6]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	4b02      	ldr	r3, [pc, #8]	; (80069ac <itsdk_state_init+0x2c>)
 80069a2:	705a      	strb	r2, [r3, #1]
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

	return;
 80069a4:	46c0      	nop			; (mov r8, r8)
}
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bdb0      	pop	{r4, r5, r7, pc}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	200004b0 	.word	0x200004b0
 80069b0:	20000490 	.word	0x20000490

080069b4 <itsdk_print_state>:

#if ITSDK_WITH_CONSOLE == __ENABLE
void itsdk_print_state() {
 80069b4:	b5b0      	push	{r4, r5, r7, lr}
 80069b6:	af00      	add	r7, sp, #0
	_itsdk_console_printf("state.lastWakeUpTimeUs %d ms\r\n",(uint32_t)(itsdk_state.lastWakeUpTimeUs/1000));
 80069b8:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <itsdk_print_state+0x6c>)
 80069ba:	6898      	ldr	r0, [r3, #8]
 80069bc:	68d9      	ldr	r1, [r3, #12]
 80069be:	22fa      	movs	r2, #250	; 0xfa
 80069c0:	0092      	lsls	r2, r2, #2
 80069c2:	2300      	movs	r3, #0
 80069c4:	f7f9 fd42 	bl	800044c <__aeabi_uldivmod>
 80069c8:	0003      	movs	r3, r0
 80069ca:	000c      	movs	r4, r1
 80069cc:	001a      	movs	r2, r3
 80069ce:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <itsdk_print_state+0x70>)
 80069d0:	0011      	movs	r1, r2
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7ff f882 	bl	8005adc <_itsdk_console_printf>
	_itsdk_console_printf("state.lastResetCause 0x%X \r\n",(uint32_t)(itsdk_state.lastResetCause));
 80069d8:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <itsdk_print_state+0x6c>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	001a      	movs	r2, r3
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <itsdk_print_state+0x74>)
 80069e0:	0011      	movs	r1, r2
 80069e2:	0018      	movs	r0, r3
 80069e4:	f7ff f87a 	bl	8005adc <_itsdk_console_printf>
#if ITSDK_CONFIGURATION_MODE != __CONFIG_STATIC
   #if ITSDK_WITH_SIGFOX_LIB == __ENABLE || ITSDK_WITH_LORAWAN_LIB == __ENABLE
	_itsdk_console_printf("state.activeNetwork : %d\r\n",itsdk_state.activeNetwork);
 80069e8:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <itsdk_print_state+0x6c>)
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	001a      	movs	r2, r3
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <itsdk_print_state+0x78>)
 80069f0:	0011      	movs	r1, r2
 80069f2:	0018      	movs	r0, r3
 80069f4:	f7ff f872 	bl	8005adc <_itsdk_console_printf>
	#if ITSDK_WITH_SIGFOX_LIB == __ENABLE
	#endif
   #endif
#endif
#if ITSDK_WITH_LORAWAN_LIB == __ENABLE
	if ( itsdk_state.activeNetwork == __ACTIV_NETWORK_LORAWAN ) {
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <itsdk_print_state+0x6c>)
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d10c      	bne.n	8006a1a <itsdk_print_state+0x66>
  	  _itsdk_console_printf("state.lorawan.joined: %c\r\n",((itsdk_lorawan_getJoinState() == LORAWAN_JOIN_SUCCESS)?'Y':'N'));
 8006a00:	f002 fbdc 	bl	80091bc <itsdk_lorawan_getJoinState>
 8006a04:	0003      	movs	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <itsdk_print_state+0x5a>
 8006a0a:	2359      	movs	r3, #89	; 0x59
 8006a0c:	e000      	b.n	8006a10 <itsdk_print_state+0x5c>
 8006a0e:	234e      	movs	r3, #78	; 0x4e
 8006a10:	4a07      	ldr	r2, [pc, #28]	; (8006a30 <itsdk_print_state+0x7c>)
 8006a12:	0019      	movs	r1, r3
 8006a14:	0010      	movs	r0, r2
 8006a16:	f7ff f861 	bl	8005adc <_itsdk_console_printf>
  #else
    #error INVALID ITSDK_SIGFOX_NVM_SOURCE VALUE
  #endif
#endif

}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8006a20:	200004b0 	.word	0x200004b0
 8006a24:	0800c6ac 	.word	0x0800c6ac
 8006a28:	0800c6cc 	.word	0x0800c6cc
 8006a2c:	0800c6ec 	.word	0x0800c6ec
 8006a30:	0800c708 	.word	0x0800c708

08006a34 <_itsdk_secstore_getOffset>:
/**
 * Compute the offset of a block in the EEPROM Memory for a given
 * Entry ID.
 *
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getOffset(uint32_t * offset, uint8_t * blockId, itsdk_secStoreBlocks_e block ) {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	1dfb      	adds	r3, r7, #7
 8006a40:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreBlocks_t * fakeStore = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	613b      	str	r3, [r7, #16]
	uint32_t _offset;
	switch (block) {
 8006a46:	1dfb      	adds	r3, r7, #7
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b13      	cmp	r3, #19
 8006a4c:	d83d      	bhi.n	8006aca <_itsdk_secstore_getOffset+0x96>
 8006a4e:	009a      	lsls	r2, r3, #2
 8006a50:	4b27      	ldr	r3, [pc, #156]	; (8006af0 <_itsdk_secstore_getOffset+0xbc>)
 8006a52:	18d3      	adds	r3, r2, r3
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	469f      	mov	pc, r3
	case ITSDK_SS_CONSOLEKEY:
		_offset = (uint32_t)&fakeStore->consolePasswd;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	617b      	str	r3, [r7, #20]
		break;
 8006a5c:	e037      	b.n	8006ace <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_SIGFOXKEY:
	  #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->sigfoxKey;
	  #else
		return SS_FAILED_NOTEXISTING;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e041      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	case ITSDK_SS_LORA_ABP_NETIDDEVID:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netID_devID;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3310      	adds	r3, #16
 8006a66:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8006a68:	e031      	b.n	8006ace <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYF:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeyf;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	3320      	adds	r3, #32
 8006a6e:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8006a70:	e02d      	b.n	8006ace <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETKEYS:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netkeys;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3330      	adds	r3, #48	; 0x30
 8006a76:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8006a78:	e029      	b.n	8006ace <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_NETSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.netSkey;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	3340      	adds	r3, #64	; 0x40
 8006a7e:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8006a80:	e025      	b.n	8006ace <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_ABP_APPSKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.abp.appSkey;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	3350      	adds	r3, #80	; 0x50
 8006a86:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8006a88:	e021      	b.n	8006ace <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.devEUI_appAUI;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	3310      	adds	r3, #16
 8006a8e:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8006a90:	e01d      	b.n	8006ace <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_APPKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.appKey;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3320      	adds	r3, #32
 8006a96:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8006a98:	e019      	b.n	8006ace <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_LORA_OTAA_NWKKEY:
      #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
		_offset = (uint32_t)&fakeStore->lorawan.otaa.nwkKey;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	3330      	adds	r3, #48	; 0x30
 8006a9e:	617b      	str	r3, [r7, #20]
  	  #else
		return SS_FAILED_NOTEXISTING;
	  #endif
		break;
 8006aa0:	e015      	b.n	8006ace <_itsdk_secstore_getOffset+0x9a>
	case ITSDK_SS_AES_MASTERK:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0 ) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && (( ITSDK_LORAWAN_ENCRYPTION & __PAYLOAD_ENCRYPT_AESCTR ) > 0) )
		_offset = (uint32_t)&fakeStore->aesMasterKey;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e01f      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_AES_SHARED_NONCE_SPECKKEY:
      #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || ( defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0 ))
		_offset = (uint32_t)&fakeStore->encryptSharedNonceSpeck;
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e01d      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER0:
	  #if ITSDK_SECSTORE_USRBLOCK >= 1
		_offset = (uint32_t)&fakeStore->user[0];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e01b      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER1:
	  #if ITSDK_SECSTORE_USRBLOCK >= 2
		_offset = (uint32_t)&fakeStore->user[1];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e019      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER2:
	  #if ITSDK_SECSTORE_USRBLOCK >= 3
		_offset = (uint32_t)&fakeStore->user[2];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e017      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER3:
	  #if ITSDK_SECSTORE_USRBLOCK >= 4
		_offset = (uint32_t)&fakeStore->user[3];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e015      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER4:
	  #if ITSDK_SECSTORE_USRBLOCK >= 5
		_offset = (uint32_t)&fakeStore->user[4];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e013      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER5:
	  #if ITSDK_SECSTORE_USRBLOCK >= 6
		_offset = (uint32_t)&fakeStore->user[5];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e011      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER6:
	  #if ITSDK_SECSTORE_USRBLOCK >= 7
		_offset = (uint32_t)&fakeStore->user[6];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e00f      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
		break;
	case ITSDK_SS_USER7:
	  #if ITSDK_SECSTORE_USRBLOCK >= 8
		_offset = (uint32_t)&fakeStore->user[7];
  	  #else
		return SS_FAILED_NOTEXISTING;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e00d      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>
	  #endif
		break;
	default:
		return SS_FAILED_NOTEXISTING;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e00b      	b.n	8006ae6 <_itsdk_secstore_getOffset+0xb2>

	}
	*blockId = (_offset/16);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	701a      	strb	r2, [r3, #0]
	_offset+=sizeof(itsdk_secStoreHead_t);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	3310      	adds	r3, #16
 8006adc:	617b      	str	r3, [r7, #20]
	*offset=_offset;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b006      	add	sp, #24
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	0800ccac 	.word	0x0800ccac

08006af4 <_itsdk_secstore_getEntries>:

/**
 * Evaluate the number of block entries regarding the configuration
 * The size is a static value.
 */
static itsdk_secStoreReturn_e _itsdk_secstore_getEntries(uint8_t * entries) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	uint8_t _entries=1;	// at lease the console
 8006afc:	210f      	movs	r1, #15
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	2201      	movs	r2, #1
 8006b02:	701a      	strb	r2, [r3, #0]
   #if defined(ITSDK_WITH_SIGFOX_LIB) && ITSDK_WITH_SIGFOX_LIB == __ENABLE
	_entries++;
   #endif
   #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
   _entries+=5;
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	187a      	adds	r2, r7, r1
 8006b08:	7812      	ldrb	r2, [r2, #0]
 8006b0a:	3205      	adds	r2, #5
 8006b0c:	701a      	strb	r2, [r3, #0]
   #endif
   #if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
	_entries+=2;
   #endif
	_entries+=ITSDK_SECSTORE_USRBLOCK;
 8006b0e:	187b      	adds	r3, r7, r1
 8006b10:	187a      	adds	r2, r7, r1
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	701a      	strb	r2, [r3, #0]
	*entries=_entries;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	187a      	adds	r2, r7, r1
 8006b1a:	7812      	ldrb	r2, [r2, #0]
 8006b1c:	701a      	strb	r2, [r3, #0]
	return SS_SUCCESS;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	0018      	movs	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b004      	add	sp, #16
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_itsdk_secstore_controlHeader>:

static itsdk_secStoreReturn_e _itsdk_secstore_controlHeader(itsdk_secStoreHead_t * _head) {
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	// Read the header
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) _head, sizeof(itsdk_secStoreHead_t));
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	2310      	movs	r3, #16
 8006b34:	2100      	movs	r1, #0
 8006b36:	2000      	movs	r0, #0
 8006b38:	f003 ffe6 	bl	800ab08 <_eeprom_read>
	// Control the header validity
	if ( _head->magic1 != ITSDK_SECSTORE_EEPROM_MAGIC ) return SS_FAILED_NOTINITIALIZED;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	220f      	movs	r2, #15
 8006b42:	4013      	ands	r3, r2
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b0c      	cmp	r3, #12
 8006b48:	d001      	beq.n	8006b4e <_itsdk_secstore_controlHeader+0x26>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e011      	b.n	8006b72 <_itsdk_secstore_controlHeader+0x4a>
	uint8_t _count;
	_itsdk_secstore_getEntries(&_count);
 8006b4e:	240f      	movs	r4, #15
 8006b50:	193b      	adds	r3, r7, r4
 8006b52:	0018      	movs	r0, r3
 8006b54:	f7ff ffce 	bl	8006af4 <_itsdk_secstore_getEntries>
	if ( _head->blockCount != _count) return SS_FAILED_NOTINITIALIZED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	061b      	lsls	r3, r3, #24
 8006b5e:	0f1b      	lsrs	r3, r3, #28
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	001a      	movs	r2, r3
 8006b64:	193b      	adds	r3, r7, r4
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d001      	beq.n	8006b70 <_itsdk_secstore_controlHeader+0x48>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e000      	b.n	8006b72 <_itsdk_secstore_controlHeader+0x4a>
	return SS_SUCCESS;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	0018      	movs	r0, r3
 8006b74:	46bd      	mov	sp, r7
 8006b76:	b005      	add	sp, #20
 8006b78:	bd90      	pop	{r4, r7, pc}

08006b7a <itsdk_secstore_getStoreSize>:

/**
 * Return the store size in byte.
 * This function is use to determine the configuration starting address => after the secureStore
 */
itsdk_secStoreReturn_e itsdk_secstore_getStoreSize(uint32_t * sz) {
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
	*sz=sizeof(itsdk_secStoreHead_t)+sizeof(itsdk_secStoreBlocks_t);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2270      	movs	r2, #112	; 0x70
 8006b86:	601a      	str	r2, [r3, #0]
	return SS_SUCCESS;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b002      	add	sp, #8
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <itsdk_secstore_generateMasterKey>:
 * For this reason the transformation executed here is going to be simple.
 * Params:
 *   dynamicKey is 12B long
 *   masterKey is 16B long
 */
__weak void itsdk_secstore_generateMasterKey(uint8_t * dynamicKey,uint8_t * masterKey) {
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]

	// we are creating a 16B array from the elements available
	uint8_t _devId[4];
	itsdk_getUniqId(_devId,4);
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	2104      	movs	r1, #4
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f003 fd0a 	bl	800a5bc <itsdk_getUniqId>

	for ( int i = 0 ; i < 16 ; i++ ) {
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e081      	b.n	8006cb2 <itsdk_secstore_generateMasterKey+0x120>
		if ( i < 2 ) {											// 0, 1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	dc21      	bgt.n	8006bf8 <itsdk_secstore_generateMasterKey+0x66>
			masterKey[i] = _devId[i];
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	18d3      	adds	r3, r2, r3
 8006bba:	2208      	movs	r2, #8
 8006bbc:	18b9      	adds	r1, r7, r2
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	188a      	adds	r2, r1, r2
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i];
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	18d3      	adds	r3, r2, r3
 8006bcc:	7819      	ldrb	r1, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	18d3      	adds	r3, r2, r3
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6838      	ldr	r0, [r7, #0]
 8006bda:	18c3      	adds	r3, r0, r3
 8006bdc:	404a      	eors	r2, r1
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
			masterKey[i] += (ITSDK_PROTECT_KEY >> 9) & 0xFF;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	18d3      	adds	r3, r2, r3
 8006be8:	781a      	ldrb	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	18cb      	adds	r3, r1, r3
 8006bf0:	3a33      	subs	r2, #51	; 0x33
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e059      	b.n	8006cac <itsdk_secstore_generateMasterKey+0x11a>
		} else if ( i < 14 ) {									// 2 .. 13
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b0d      	cmp	r3, #13
 8006bfc:	dc33      	bgt.n	8006c66 <itsdk_secstore_generateMasterKey+0xd4>
			masterKey[i] = dynamicKey[i-2];
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3b02      	subs	r3, #2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	18d2      	adds	r2, r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	18cb      	adds	r3, r1, r3
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= _devId[i & 3];
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	18d3      	adds	r3, r2, r3
 8006c16:	7819      	ldrb	r1, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	2208      	movs	r2, #8
 8006c20:	18ba      	adds	r2, r7, r2
 8006c22:	5cd2      	ldrb	r2, [r2, r3]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6838      	ldr	r0, [r7, #0]
 8006c28:	18c3      	adds	r3, r0, r3
 8006c2a:	404a      	eors	r2, r1
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= (ITSDK_PROTECT_KEY >> 13) & 0xFF;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	18d3      	adds	r3, r2, r3
 8006c36:	781a      	ldrb	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	18cb      	adds	r3, r1, r3
 8006c3e:	212c      	movs	r1, #44	; 0x2c
 8006c40:	404a      	eors	r2, r1
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= masterKey[i-1];
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	18d3      	adds	r3, r2, r3
 8006c4c:	7819      	ldrb	r1, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	18d3      	adds	r3, r2, r3
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6838      	ldr	r0, [r7, #0]
 8006c5c:	18c3      	adds	r3, r0, r3
 8006c5e:	404a      	eors	r2, r1
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	e022      	b.n	8006cac <itsdk_secstore_generateMasterKey+0x11a>
		} else {												 // 14 .. 15
			masterKey[i] = _devId[3-(15-i)];
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3b0c      	subs	r3, #12
 8006c6a:	001a      	movs	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	18cb      	adds	r3, r1, r3
 8006c72:	2108      	movs	r1, #8
 8006c74:	1879      	adds	r1, r7, r1
 8006c76:	5c8a      	ldrb	r2, [r1, r2]
 8006c78:	701a      	strb	r2, [r3, #0]
			masterKey[i] ^= dynamicKey[i-5];
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	18d3      	adds	r3, r2, r3
 8006c80:	7819      	ldrb	r1, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3b05      	subs	r3, #5
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	18d3      	adds	r3, r2, r3
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6838      	ldr	r0, [r7, #0]
 8006c90:	18c3      	adds	r3, r0, r3
 8006c92:	404a      	eors	r2, r1
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
			masterKey[i] -= (ITSDK_PROTECT_KEY >> 6) & 0xFF;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	18d3      	adds	r3, r2, r3
 8006c9e:	781a      	ldrb	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	18cb      	adds	r3, r1, r3
 8006ca6:	3a6f      	subs	r2, #111	; 0x6f
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 16 ; i++ ) {
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b0f      	cmp	r3, #15
 8006cb6:	dc00      	bgt.n	8006cba <itsdk_secstore_generateMasterKey+0x128>
 8006cb8:	e779      	b.n	8006bae <itsdk_secstore_generateMasterKey+0x1c>
		}
	}
	itsdk_encrypt_cifferKey(masterKey,16);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2110      	movs	r1, #16
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f000 fd96 	bl	80077f0 <itsdk_encrypt_cifferKey>
}
 8006cc4:	46c0      	nop			; (mov r8, r8)
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b004      	add	sp, #16
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <itsdk_secstore_readBlock>:

/**
 * Read the given block and returns the decrypted value into the buffer
 */
itsdk_secStoreReturn_e itsdk_secstore_readBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b08d      	sub	sp, #52	; 0x34
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	0002      	movs	r2, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	1dfb      	adds	r3, r7, #7
 8006cd8:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control Header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8006cda:	2320      	movs	r3, #32
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f7ff ff22 	bl	8006b28 <_itsdk_secstore_controlHeader>
 8006ce4:	1e03      	subs	r3, r0, #0
 8006ce6:	d001      	beq.n	8006cec <itsdk_secstore_readBlock+0x20>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e038      	b.n	8006d5e <itsdk_secstore_readBlock+0x92>

	// Control the blockId validity
	uint32_t _offset = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8006cf0:	211b      	movs	r1, #27
 8006cf2:	187b      	adds	r3, r7, r1
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8006cf8:	1dfb      	adds	r3, r7, #7
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	1879      	adds	r1, r7, r1
 8006cfe:	231c      	movs	r3, #28
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	0018      	movs	r0, r3
 8006d04:	f7ff fe96 	bl	8006a34 <_itsdk_secstore_getOffset>
 8006d08:	1e03      	subs	r3, r0, #0
 8006d0a:	d001      	beq.n	8006d10 <itsdk_secstore_readBlock+0x44>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e026      	b.n	8006d5e <itsdk_secstore_readBlock+0x92>

	// Control the blockId have been initialized
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) return SS_FAILED_NOTSET;
 8006d10:	2320      	movs	r3, #32
 8006d12:	18fb      	adds	r3, r7, r3
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	001a      	movs	r2, r3
 8006d1e:	231b      	movs	r3, #27
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	411a      	asrs	r2, r3
 8006d26:	0013      	movs	r3, r2
 8006d28:	2201      	movs	r2, #1
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d101      	bne.n	8006d32 <itsdk_secstore_readBlock+0x66>
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e015      	b.n	8006d5e <itsdk_secstore_readBlock+0x92>

	// Read block
	_eeprom_read(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8006d32:	69f9      	ldr	r1, [r7, #28]
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	2310      	movs	r3, #16
 8006d38:	2000      	movs	r0, #0
 8006d3a:	f003 fee5 	bl	800ab08 <_eeprom_read>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8006d3e:	2408      	movs	r4, #8
 8006d40:	193a      	adds	r2, r7, r4
 8006d42:	2320      	movs	r3, #32
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	3304      	adds	r3, #4
 8006d48:	0011      	movs	r1, r2
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f7ff ff21 	bl	8006b92 <itsdk_secstore_generateMasterKey>

	// Decode with AES-128
	itsdk_aes_ecb_decrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8006d50:	193b      	adds	r3, r7, r4
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6838      	ldr	r0, [r7, #0]
 8006d56:	2210      	movs	r2, #16
 8006d58:	f000 fd0a 	bl	8007770 <itsdk_aes_ecb_decrypt_128B>

	return SS_SUCCESS;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	0018      	movs	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b00d      	add	sp, #52	; 0x34
 8006d64:	bd90      	pop	{r4, r7, pc}

08006d66 <itsdk_secstore_writeBlock>:

/**
 * Encrypt and Write the given block into the store
 */
itsdk_secStoreReturn_e itsdk_secstore_writeBlock(itsdk_secStoreBlocks_e blockType, uint8_t * buffer) {
 8006d66:	b5b0      	push	{r4, r5, r7, lr}
 8006d68:	b08c      	sub	sp, #48	; 0x30
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	0002      	movs	r2, r0
 8006d6e:	6039      	str	r1, [r7, #0]
 8006d70:	1dfb      	adds	r3, r7, #7
 8006d72:	701a      	strb	r2, [r3, #0]
	itsdk_secStoreHead_t	_head;

	// Control header validity
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) return SS_FAILED_NOTINITIALIZED;
 8006d74:	2320      	movs	r3, #32
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7ff fed5 	bl	8006b28 <_itsdk_secstore_controlHeader>
 8006d7e:	1e03      	subs	r3, r0, #0
 8006d80:	d001      	beq.n	8006d86 <itsdk_secstore_writeBlock+0x20>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e061      	b.n	8006e4a <itsdk_secstore_writeBlock+0xe4>

	// Control the blockId validity
	uint32_t _offset = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
	uint8_t  _id = 0;
 8006d8a:	211b      	movs	r1, #27
 8006d8c:	187b      	adds	r3, r7, r1
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8006d92:	1dfb      	adds	r3, r7, #7
 8006d94:	781a      	ldrb	r2, [r3, #0]
 8006d96:	1879      	adds	r1, r7, r1
 8006d98:	231c      	movs	r3, #28
 8006d9a:	18fb      	adds	r3, r7, r3
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f7ff fe49 	bl	8006a34 <_itsdk_secstore_getOffset>
 8006da2:	1e03      	subs	r3, r0, #0
 8006da4:	d001      	beq.n	8006daa <itsdk_secstore_writeBlock+0x44>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e04f      	b.n	8006e4a <itsdk_secstore_writeBlock+0xe4>

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(_head.dynamicKey,masterKey);
 8006daa:	2408      	movs	r4, #8
 8006dac:	193a      	adds	r2, r7, r4
 8006dae:	2520      	movs	r5, #32
 8006db0:	197b      	adds	r3, r7, r5
 8006db2:	3304      	adds	r3, #4
 8006db4:	0011      	movs	r1, r2
 8006db6:	0018      	movs	r0, r3
 8006db8:	f7ff feeb 	bl	8006b92 <itsdk_secstore_generateMasterKey>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8006dbc:	193b      	adds	r3, r7, r4
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6838      	ldr	r0, [r7, #0]
 8006dc2:	2210      	movs	r2, #16
 8006dc4:	f000 fc90 	bl	80076e8 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8006dc8:	69f9      	ldr	r1, [r7, #28]
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	2310      	movs	r3, #16
 8006dce:	2000      	movs	r0, #0
 8006dd0:	f003 fdf6 	bl	800a9c0 <_eeprom_write>

	// Update the header
	if ( (_head.blockUsed & ( 1 << _id )) == 0 ) {
 8006dd4:	197b      	adds	r3, r7, r5
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	0c1b      	lsrs	r3, r3, #16
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	001a      	movs	r2, r3
 8006de0:	231b      	movs	r3, #27
 8006de2:	18fb      	adds	r3, r7, r3
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	411a      	asrs	r2, r3
 8006de8:	0013      	movs	r3, r2
 8006dea:	2201      	movs	r2, #1
 8006dec:	4013      	ands	r3, r2
 8006dee:	d12b      	bne.n	8006e48 <itsdk_secstore_writeBlock+0xe2>
		_head.blockUsed |= ( 1 << _id );
 8006df0:	2520      	movs	r5, #32
 8006df2:	197b      	adds	r3, r7, r5
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	021b      	lsls	r3, r3, #8
 8006df8:	0c1b      	lsrs	r3, r3, #16
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	b21a      	sxth	r2, r3
 8006dfe:	231b      	movs	r3, #27
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	0019      	movs	r1, r3
 8006e06:	2301      	movs	r3, #1
 8006e08:	408b      	lsls	r3, r1
 8006e0a:	b21b      	sxth	r3, r3
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	b21b      	sxth	r3, r3
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	197b      	adds	r3, r7, r5
 8006e14:	3301      	adds	r3, #1
 8006e16:	21ff      	movs	r1, #255	; 0xff
 8006e18:	4011      	ands	r1, r2
 8006e1a:	000c      	movs	r4, r1
 8006e1c:	7819      	ldrb	r1, [r3, #0]
 8006e1e:	2000      	movs	r0, #0
 8006e20:	4001      	ands	r1, r0
 8006e22:	1c08      	adds	r0, r1, #0
 8006e24:	1c21      	adds	r1, r4, #0
 8006e26:	4301      	orrs	r1, r0
 8006e28:	7019      	strb	r1, [r3, #0]
 8006e2a:	0a12      	lsrs	r2, r2, #8
 8006e2c:	b290      	uxth	r0, r2
 8006e2e:	785a      	ldrb	r2, [r3, #1]
 8006e30:	2100      	movs	r1, #0
 8006e32:	400a      	ands	r2, r1
 8006e34:	1c11      	adds	r1, r2, #0
 8006e36:	1c02      	adds	r2, r0, #0
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	705a      	strb	r2, [r3, #1]
		_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8006e3c:	197a      	adds	r2, r7, r5
 8006e3e:	2310      	movs	r3, #16
 8006e40:	2100      	movs	r1, #0
 8006e42:	2000      	movs	r0, #0
 8006e44:	f003 fdbc 	bl	800a9c0 <_eeprom_write>
	}

	return SS_SUCCESS;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b00c      	add	sp, #48	; 0x30
 8006e50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e54 <itsdk_secstore_init>:


/**
 * Init the Secure Store - create the store structure with the default values
 */
itsdk_secStoreReturn_e itsdk_secstore_init() {
 8006e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e56:	b08d      	sub	sp, #52	; 0x34
 8006e58:	af00      	add	r7, sp, #0
	// Create the header
	itsdk_secStoreHead_t	_head;
	_head.magic1 = ITSDK_SECSTORE_EEPROM_MAGIC;
 8006e5a:	2020      	movs	r0, #32
 8006e5c:	0004      	movs	r4, r0
 8006e5e:	183b      	adds	r3, r7, r0
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	210f      	movs	r1, #15
 8006e64:	438a      	bics	r2, r1
 8006e66:	1c11      	adds	r1, r2, #0
 8006e68:	220c      	movs	r2, #12
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	701a      	strb	r2, [r3, #0]
	uint8_t	count;
	_itsdk_secstore_getEntries(&count);
 8006e6e:	251f      	movs	r5, #31
 8006e70:	197b      	adds	r3, r7, r5
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7ff fe3e 	bl	8006af4 <_itsdk_secstore_getEntries>
	_head.blockCount=count;
 8006e78:	197b      	adds	r3, r7, r5
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	1c1a      	adds	r2, r3, #0
 8006e7e:	230f      	movs	r3, #15
 8006e80:	4013      	ands	r3, r2
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	193b      	adds	r3, r7, r4
 8006e86:	0110      	lsls	r0, r2, #4
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	210f      	movs	r1, #15
 8006e8c:	400a      	ands	r2, r1
 8006e8e:	1c11      	adds	r1, r2, #0
 8006e90:	1c02      	adds	r2, r0, #0
 8006e92:	430a      	orrs	r2, r1
 8006e94:	701a      	strb	r2, [r3, #0]
	_head.blockUsed = 0x1;
 8006e96:	0020      	movs	r0, r4
 8006e98:	193b      	adds	r3, r7, r4
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	781a      	ldrb	r2, [r3, #0]
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	400a      	ands	r2, r1
 8006ea2:	1c11      	adds	r1, r2, #0
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	785a      	ldrb	r2, [r3, #1]
 8006eac:	2100      	movs	r1, #0
 8006eae:	400a      	ands	r2, r1
 8006eb0:	705a      	strb	r2, [r3, #1]
	uint8_t _buff[12] = ITSDK_SECSTORE_DEFKEY;
 8006eb2:	2110      	movs	r1, #16
 8006eb4:	187b      	adds	r3, r7, r1
 8006eb6:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <itsdk_secstore_init+0xb8>)
 8006eb8:	ca70      	ldmia	r2!, {r4, r5, r6}
 8006eba:	c370      	stmia	r3!, {r4, r5, r6}
	memcpy(_head.dynamicKey,_buff,12);
 8006ebc:	183b      	adds	r3, r7, r0
 8006ebe:	187a      	adds	r2, r7, r1
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	ca32      	ldmia	r2!, {r1, r4, r5}
 8006ec4:	c332      	stmia	r3!, {r1, r4, r5}

	// Store it
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 8006ec6:	183a      	adds	r2, r7, r0
 8006ec8:	2310      	movs	r3, #16
 8006eca:	2100      	movs	r1, #0
 8006ecc:	2000      	movs	r0, #0
 8006ece:	f003 fd77 	bl	800a9c0 <_eeprom_write>

	// Init the console login
	uint8_t _buff2[16] = ITSDK_SECSTORE_CONSOLEKEY;
 8006ed2:	0039      	movs	r1, r7
 8006ed4:	4a0e      	ldr	r2, [pc, #56]	; (8006f10 <itsdk_secstore_init+0xbc>)
 8006ed6:	000b      	movs	r3, r1
 8006ed8:	ca11      	ldmia	r2!, {r0, r4}
 8006eda:	c311      	stmia	r3!, {r0, r4}
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	2309      	movs	r3, #9
 8006ee2:	18cb      	adds	r3, r1, r3
 8006ee4:	2207      	movs	r2, #7
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f004 fbf5 	bl	800b6d8 <memset>
	itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY,_buff2);
 8006eee:	003b      	movs	r3, r7
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	f7ff ff37 	bl	8006d66 <itsdk_secstore_writeBlock>
	bzero(_buff2,16);
 8006ef8:	003b      	movs	r3, r7
 8006efa:	2110      	movs	r1, #16
 8006efc:	0018      	movs	r0, r3
 8006efe:	f004 fb9f 	bl	800b640 <bzero>

	return SS_SUCCESS;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	0018      	movs	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	b00d      	add	sp, #52	; 0x34
 8006f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f0c:	0800c724 	.word	0x0800c724
 8006f10:	0800c730 	.word	0x0800c730

08006f14 <itsdk_secstore_isInit>:

/**
 * Return SS_SUCCESS when the secure Store is already initialized
 */
itsdk_secStoreReturn_e itsdk_secstore_isInit() {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
	itsdk_secStoreHead_t	_head;
	// Control header validity
	return _itsdk_secstore_controlHeader(&_head);
 8006f1a:	003b      	movs	r3, r7
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f7ff fe03 	bl	8006b28 <_itsdk_secstore_controlHeader>
 8006f22:	0003      	movs	r3, r0
}
 8006f24:	0018      	movs	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	b004      	add	sp, #16
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <_itsdk_secstore_writeBlockKey>:
								      }

/**
 * Write a block with a specified MasterKey
 */
static itsdk_secStoreReturn_e _itsdk_secstore_writeBlockKey(itsdk_secStoreBlocks_e blockType, uint8_t * buffer, uint8_t * masterKey) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	210f      	movs	r1, #15
 8006f38:	187b      	adds	r3, r7, r1
 8006f3a:	1c02      	adds	r2, r0, #0
 8006f3c:	701a      	strb	r2, [r3, #0]

	// Control the blockId validity
	uint32_t _offset = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]
	uint8_t  _id = 0;
 8006f42:	2013      	movs	r0, #19
 8006f44:	183b      	adds	r3, r7, r0
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
	if ( _itsdk_secstore_getOffset(&_offset,&_id, blockType) != SS_SUCCESS ) return SS_FAILED_NOTEXISTING;
 8006f4a:	187b      	adds	r3, r7, r1
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	1839      	adds	r1, r7, r0
 8006f50:	2314      	movs	r3, #20
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	0018      	movs	r0, r3
 8006f56:	f7ff fd6d 	bl	8006a34 <_itsdk_secstore_getOffset>
 8006f5a:	1e03      	subs	r3, r0, #0
 8006f5c:	d001      	beq.n	8006f62 <_itsdk_secstore_writeBlockKey+0x36>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e00c      	b.n	8006f7c <_itsdk_secstore_writeBlockKey+0x50>

	// Encode with AES-128
	itsdk_aes_ecb_encrypt_128B(buffer,buffer,ITSDK_SECSTORE_BLOCKSZ,masterKey);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	68b8      	ldr	r0, [r7, #8]
 8006f68:	2210      	movs	r2, #16
 8006f6a:	f000 fbbd 	bl	80076e8 <itsdk_aes_ecb_encrypt_128B>

	// Write block
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET+_offset, (void *) buffer, ITSDK_SECSTORE_BLOCKSZ);
 8006f6e:	6979      	ldr	r1, [r7, #20]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	2310      	movs	r3, #16
 8006f74:	2000      	movs	r0, #0
 8006f76:	f003 fd23 	bl	800a9c0 <_eeprom_write>

	return SS_SUCCESS;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b006      	add	sp, #24
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <_itsk_secstore_rekey>:


/**
 * Change the dyn key and update all the encrypted elements
 */
static itsdk_console_return_e _itsk_secstore_rekey(uint8_t * newKey){
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b090      	sub	sp, #64	; 0x40
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]

	itsdk_secStoreHead_t	_head;
	uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];

	// Control Header validity & load previous header
	if ( _itsdk_secstore_controlHeader(&_head) != SS_SUCCESS ) {
 8006f8c:	232c      	movs	r3, #44	; 0x2c
 8006f8e:	18fb      	adds	r3, r7, r3
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7ff fdc9 	bl	8006b28 <_itsdk_secstore_controlHeader>
 8006f96:	1e03      	subs	r3, r0, #0
 8006f98:	d005      	beq.n	8006fa6 <_itsk_secstore_rekey+0x22>
		_itsdk_console_printf("KO\r\n");
 8006f9a:	4b4b      	ldr	r3, [pc, #300]	; (80070c8 <_itsk_secstore_rekey+0x144>)
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7fe fd9d 	bl	8005adc <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e08c      	b.n	80070c0 <_itsk_secstore_rekey+0x13c>
	}

	// Generate the Master key
	uint8_t masterKey[16];
	itsdk_secstore_generateMasterKey(newKey,masterKey);
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	18fa      	adds	r2, r7, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	0011      	movs	r1, r2
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7ff fdef 	bl	8006b92 <itsdk_secstore_generateMasterKey>

	if ( itsdk_secstore_readBlock(ITSDK_SS_CONSOLEKEY, _b) != SS_FAILED_NOTSET ) {
 8006fb4:	231c      	movs	r3, #28
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	0019      	movs	r1, r3
 8006fba:	2000      	movs	r0, #0
 8006fbc:	f7ff fe86 	bl	8006ccc <itsdk_secstore_readBlock>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d007      	beq.n	8006fd6 <_itsk_secstore_rekey+0x52>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_CONSOLEKEY,_b,masterKey);
 8006fc6:	230c      	movs	r3, #12
 8006fc8:	18fa      	adds	r2, r7, r3
 8006fca:	231c      	movs	r3, #28
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	0019      	movs	r1, r3
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f7ff ffab 	bl	8006f2c <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_SIGFOXKEY,_b,masterKey);
	}
#endif
#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
	// we have more ABP in the UNION when Staticly compiled
	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETIDDEVID, _b) != SS_FAILED_NOTSET ) {
 8006fd6:	231c      	movs	r3, #28
 8006fd8:	18fb      	adds	r3, r7, r3
 8006fda:	0019      	movs	r1, r3
 8006fdc:	2002      	movs	r0, #2
 8006fde:	f7ff fe75 	bl	8006ccc <itsdk_secstore_readBlock>
 8006fe2:	0003      	movs	r3, r0
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d007      	beq.n	8006ff8 <_itsk_secstore_rekey+0x74>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETIDDEVID,_b,masterKey);
 8006fe8:	230c      	movs	r3, #12
 8006fea:	18fa      	adds	r2, r7, r3
 8006fec:	231c      	movs	r3, #28
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	0019      	movs	r1, r3
 8006ff2:	2002      	movs	r0, #2
 8006ff4:	f7ff ff9a 	bl	8006f2c <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYF, _b) != SS_FAILED_NOTSET ) {
 8006ff8:	231c      	movs	r3, #28
 8006ffa:	18fb      	adds	r3, r7, r3
 8006ffc:	0019      	movs	r1, r3
 8006ffe:	2003      	movs	r0, #3
 8007000:	f7ff fe64 	bl	8006ccc <itsdk_secstore_readBlock>
 8007004:	0003      	movs	r3, r0
 8007006:	2b03      	cmp	r3, #3
 8007008:	d007      	beq.n	800701a <_itsk_secstore_rekey+0x96>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYF,_b,masterKey);
 800700a:	230c      	movs	r3, #12
 800700c:	18fa      	adds	r2, r7, r3
 800700e:	231c      	movs	r3, #28
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	0019      	movs	r1, r3
 8007014:	2003      	movs	r0, #3
 8007016:	f7ff ff89 	bl	8006f2c <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETKEYS, _b) != SS_FAILED_NOTSET ) {
 800701a:	231c      	movs	r3, #28
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	0019      	movs	r1, r3
 8007020:	2004      	movs	r0, #4
 8007022:	f7ff fe53 	bl	8006ccc <itsdk_secstore_readBlock>
 8007026:	0003      	movs	r3, r0
 8007028:	2b03      	cmp	r3, #3
 800702a:	d007      	beq.n	800703c <_itsk_secstore_rekey+0xb8>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETKEYS,_b,masterKey);
 800702c:	230c      	movs	r3, #12
 800702e:	18fa      	adds	r2, r7, r3
 8007030:	231c      	movs	r3, #28
 8007032:	18fb      	adds	r3, r7, r3
 8007034:	0019      	movs	r1, r3
 8007036:	2004      	movs	r0, #4
 8007038:	f7ff ff78 	bl	8006f2c <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_NETSKEY, _b) != SS_FAILED_NOTSET ) {
 800703c:	231c      	movs	r3, #28
 800703e:	18fb      	adds	r3, r7, r3
 8007040:	0019      	movs	r1, r3
 8007042:	2005      	movs	r0, #5
 8007044:	f7ff fe42 	bl	8006ccc <itsdk_secstore_readBlock>
 8007048:	0003      	movs	r3, r0
 800704a:	2b03      	cmp	r3, #3
 800704c:	d007      	beq.n	800705e <_itsk_secstore_rekey+0xda>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_NETSKEY,_b,masterKey);
 800704e:	230c      	movs	r3, #12
 8007050:	18fa      	adds	r2, r7, r3
 8007052:	231c      	movs	r3, #28
 8007054:	18fb      	adds	r3, r7, r3
 8007056:	0019      	movs	r1, r3
 8007058:	2005      	movs	r0, #5
 800705a:	f7ff ff67 	bl	8006f2c <_itsdk_secstore_writeBlockKey>
	}

	if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_ABP_APPSKEY, _b) != SS_FAILED_NOTSET ) {
 800705e:	231c      	movs	r3, #28
 8007060:	18fb      	adds	r3, r7, r3
 8007062:	0019      	movs	r1, r3
 8007064:	2006      	movs	r0, #6
 8007066:	f7ff fe31 	bl	8006ccc <itsdk_secstore_readBlock>
 800706a:	0003      	movs	r3, r0
 800706c:	2b03      	cmp	r3, #3
 800706e:	d007      	beq.n	8007080 <_itsk_secstore_rekey+0xfc>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_LORA_ABP_APPSKEY,_b,masterKey);
 8007070:	230c      	movs	r3, #12
 8007072:	18fa      	adds	r2, r7, r3
 8007074:	231c      	movs	r3, #28
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	0019      	movs	r1, r3
 800707a:	2006      	movs	r0, #6
 800707c:	f7ff ff56 	bl	8006f2c <_itsdk_secstore_writeBlockKey>
		_itsdk_secstore_writeBlockKey(ITSDK_SS_USER7,_b,masterKey);
	}
#endif

	// Write Header
	for ( int i = 0 ; i < 12 ; i++) {
 8007080:	2300      	movs	r3, #0
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007084:	e00d      	b.n	80070a2 <_itsk_secstore_rekey+0x11e>
		_head.dynamicKey[i] = newKey[i];
 8007086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	18d3      	adds	r3, r2, r3
 800708c:	7819      	ldrb	r1, [r3, #0]
 800708e:	232c      	movs	r3, #44	; 0x2c
 8007090:	18fa      	adds	r2, r7, r3
 8007092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007094:	18d3      	adds	r3, r2, r3
 8007096:	3304      	adds	r3, #4
 8007098:	1c0a      	adds	r2, r1, #0
 800709a:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < 12 ; i++) {
 800709c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709e:	3301      	adds	r3, #1
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a4:	2b0b      	cmp	r3, #11
 80070a6:	ddee      	ble.n	8007086 <_itsk_secstore_rekey+0x102>
	}
	_eeprom_write(ITDT_EEPROM_BANK0, ITSDK_SECSTORE_EEPROM_OFFSET, (void *) &_head, sizeof(itsdk_secStoreHead_t));
 80070a8:	232c      	movs	r3, #44	; 0x2c
 80070aa:	18fa      	adds	r2, r7, r3
 80070ac:	2310      	movs	r3, #16
 80070ae:	2100      	movs	r1, #0
 80070b0:	2000      	movs	r0, #0
 80070b2:	f003 fc85 	bl	800a9c0 <_eeprom_write>
	_itsdk_console_printf("OK\r\n");
 80070b6:	4b05      	ldr	r3, [pc, #20]	; (80070cc <_itsk_secstore_rekey+0x148>)
 80070b8:	0018      	movs	r0, r3
 80070ba:	f7fe fd0f 	bl	8005adc <_itsdk_console_printf>
	return ITSDK_CONSOLE_SUCCES;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	0018      	movs	r0, r3
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b010      	add	sp, #64	; 0x40
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	0800c740 	.word	0x0800c740
 80070cc:	0800c748 	.word	0x0800c748

080070d0 <__checkAndConvert>:
/**
 * convert and verify a char * hex string into a uint8_t array
 * verify : size of the string regarding the sz
 * verify : format of the char to match Hex number
 */
static bool __checkAndConvert(char * str,uint8_t start,uint8_t stop,uint8_t sz,uint8_t * buf) {
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	000c      	movs	r4, r1
 80070da:	0010      	movs	r0, r2
 80070dc:	0019      	movs	r1, r3
 80070de:	1cfb      	adds	r3, r7, #3
 80070e0:	1c22      	adds	r2, r4, #0
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	1cbb      	adds	r3, r7, #2
 80070e6:	1c02      	adds	r2, r0, #0
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	1c7b      	adds	r3, r7, #1
 80070ec:	1c0a      	adds	r2, r1, #0
 80070ee:	701a      	strb	r2, [r3, #0]
	if ( (stop - start) < 2*sz ) return false;
 80070f0:	1cbb      	adds	r3, r7, #2
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	1cfb      	adds	r3, r7, #3
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	1c7b      	adds	r3, r7, #1
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	429a      	cmp	r2, r3
 8007102:	da01      	bge.n	8007108 <__checkAndConvert+0x38>
 8007104:	2300      	movs	r3, #0
 8007106:	e034      	b.n	8007172 <__checkAndConvert+0xa2>
	int k = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 800710c:	1cfb      	adds	r3, r7, #3
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	60bb      	str	r3, [r7, #8]
 8007112:	e028      	b.n	8007166 <__checkAndConvert+0x96>
		if ( itdt_isHexChar(str[i],false) && itdt_isHexChar(str[i+1],false) ) {
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	18d3      	adds	r3, r2, r3
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2100      	movs	r1, #0
 800711e:	0018      	movs	r0, r3
 8007120:	f002 fa51 	bl	80095c6 <itdt_isHexChar>
 8007124:	1e03      	subs	r3, r0, #0
 8007126:	d01c      	beq.n	8007162 <__checkAndConvert+0x92>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	3301      	adds	r3, #1
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	18d3      	adds	r3, r2, r3
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2100      	movs	r1, #0
 8007134:	0018      	movs	r0, r3
 8007136:	f002 fa46 	bl	80095c6 <itdt_isHexChar>
 800713a:	1e03      	subs	r3, r0, #0
 800713c:	d011      	beq.n	8007162 <__checkAndConvert+0x92>
			buf[k] = itdt_convertHexChar2Int(&str[i]);
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	18d1      	adds	r1, r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a3a      	ldr	r2, [r7, #32]
 8007148:	18d4      	adds	r4, r2, r3
 800714a:	0008      	movs	r0, r1
 800714c:	f002 f9f4 	bl	8009538 <itdt_convertHexChar2Int>
 8007150:	0003      	movs	r3, r0
 8007152:	7023      	strb	r3, [r4, #0]
			k++;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3301      	adds	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]
	for ( int i = start ; i < stop ; i+=2 ) {
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	3302      	adds	r3, #2
 800715e:	60bb      	str	r3, [r7, #8]
 8007160:	e001      	b.n	8007166 <__checkAndConvert+0x96>
		} else return false;
 8007162:	2300      	movs	r3, #0
 8007164:	e005      	b.n	8007172 <__checkAndConvert+0xa2>
	for ( int i = start ; i < stop ; i+=2 ) {
 8007166:	1cbb      	adds	r3, r7, #2
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	dbd1      	blt.n	8007114 <__checkAndConvert+0x44>
	}
	return true;
 8007170:	2301      	movs	r3, #1
}
 8007172:	0018      	movs	r0, r3
 8007174:	46bd      	mov	sp, r7
 8007176:	b005      	add	sp, #20
 8007178:	bd90      	pop	{r4, r7, pc}
	...

0800717c <__updateField>:

static itsdk_console_return_e __updateField(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type) {
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b087      	sub	sp, #28
 8007180:	af02      	add	r7, sp, #8
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	0008      	movs	r0, r1
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	0019      	movs	r1, r3
 800718a:	240b      	movs	r4, #11
 800718c:	193b      	adds	r3, r7, r4
 800718e:	1c02      	adds	r2, r0, #0
 8007190:	701a      	strb	r2, [r3, #0]
 8007192:	230a      	movs	r3, #10
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	1c0a      	adds	r2, r1, #0
 8007198:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,16,b) ) {
 800719a:	193b      	adds	r3, r7, r4
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	2310      	movs	r3, #16
 80071a6:	2105      	movs	r1, #5
 80071a8:	f7ff ff92 	bl	80070d0 <__checkAndConvert>
 80071ac:	1e03      	subs	r3, r0, #0
 80071ae:	d01f      	beq.n	80071f0 <__updateField+0x74>
		if ( type == ITSDK_SS_SIGFOXKEY ) {
 80071b0:	230a      	movs	r3, #10
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d104      	bne.n	80071c4 <__updateField+0x48>
		   itsdk_encrypt_cifferKey(b,16);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2110      	movs	r1, #16
 80071be:	0018      	movs	r0, r3
 80071c0:	f000 fb16 	bl	80077f0 <itsdk_encrypt_cifferKey>
		}
		if ( itsdk_secstore_writeBlock(type, b) == SS_SUCCESS ) {
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	230a      	movs	r3, #10
 80071c8:	18fb      	adds	r3, r7, r3
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	0011      	movs	r1, r2
 80071ce:	0018      	movs	r0, r3
 80071d0:	f7ff fdc9 	bl	8006d66 <itsdk_secstore_writeBlock>
 80071d4:	1e03      	subs	r3, r0, #0
 80071d6:	d105      	bne.n	80071e4 <__updateField+0x68>
			_itsdk_console_printf("OK\r\n");
 80071d8:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <__updateField+0x88>)
 80071da:	0018      	movs	r0, r3
 80071dc:	f7fe fc7e 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80071e0:	2300      	movs	r3, #0
 80071e2:	e00a      	b.n	80071fa <__updateField+0x7e>
		} else {
			_itsdk_console_printf("KO\r\n");
 80071e4:	4b08      	ldr	r3, [pc, #32]	; (8007208 <__updateField+0x8c>)
 80071e6:	0018      	movs	r0, r3
 80071e8:	f7fe fc78 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 80071ec:	2302      	movs	r3, #2
 80071ee:	e004      	b.n	80071fa <__updateField+0x7e>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <__updateField+0x8c>)
 80071f2:	0018      	movs	r0, r3
 80071f4:	f7fe fc72 	bl	8005adc <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 80071f8:	2302      	movs	r3, #2
	}
}
 80071fa:	0018      	movs	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b005      	add	sp, #20
 8007200:	bd90      	pop	{r4, r7, pc}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	0800c748 	.word	0x0800c748
 8007208:	0800c740 	.word	0x0800c740

0800720c <__updateField2>:

static itsdk_console_return_e __updateField2(char * buffer, uint8_t sz, uint8_t *b, itsdk_secStoreBlocks_e type, uint8_t offset,uint8_t size) {
 800720c:	b590      	push	{r4, r7, lr}
 800720e:	b08d      	sub	sp, #52	; 0x34
 8007210:	af02      	add	r7, sp, #8
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	0008      	movs	r0, r1
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	0019      	movs	r1, r3
 800721a:	240b      	movs	r4, #11
 800721c:	193b      	adds	r3, r7, r4
 800721e:	1c02      	adds	r2, r0, #0
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	230a      	movs	r3, #10
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	1c0a      	adds	r2, r1, #0
 8007228:	701a      	strb	r2, [r3, #0]
	if ( __checkAndConvert(buffer,5,sz,size,b) ) {
 800722a:	2334      	movs	r3, #52	; 0x34
 800722c:	2208      	movs	r2, #8
 800722e:	4694      	mov	ip, r2
 8007230:	44bc      	add	ip, r7
 8007232:	4463      	add	r3, ip
 8007234:	7819      	ldrb	r1, [r3, #0]
 8007236:	193b      	adds	r3, r7, r4
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	000b      	movs	r3, r1
 8007242:	2105      	movs	r1, #5
 8007244:	f7ff ff44 	bl	80070d0 <__checkAndConvert>
 8007248:	1e03      	subs	r3, r0, #0
 800724a:	d045      	beq.n	80072d8 <__updateField2+0xcc>
		uint8_t _b[ITSDK_SECSTORE_BLOCKSZ];
		if ( itsdk_secstore_readBlock(type, _b) != SS_SUCCESS ) {
 800724c:	2314      	movs	r3, #20
 800724e:	18fa      	adds	r2, r7, r3
 8007250:	230a      	movs	r3, #10
 8007252:	18fb      	adds	r3, r7, r3
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	0011      	movs	r1, r2
 8007258:	0018      	movs	r0, r3
 800725a:	f7ff fd37 	bl	8006ccc <itsdk_secstore_readBlock>
 800725e:	1e03      	subs	r3, r0, #0
 8007260:	d005      	beq.n	800726e <__updateField2+0x62>
			_itsdk_console_printf("KO\r\n");
 8007262:	4b22      	ldr	r3, [pc, #136]	; (80072ec <__updateField2+0xe0>)
 8007264:	0018      	movs	r0, r3
 8007266:	f7fe fc39 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 800726a:	2302      	movs	r3, #2
 800726c:	e039      	b.n	80072e2 <__updateField2+0xd6>
		}
		for ( int i = 0 ; i < size ; i++) {
 800726e:	2300      	movs	r3, #0
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
 8007272:	e011      	b.n	8007298 <__updateField2+0x8c>
			_b[i+offset] = b[i];
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	18d2      	adds	r2, r2, r3
 800727a:	2330      	movs	r3, #48	; 0x30
 800727c:	2108      	movs	r1, #8
 800727e:	468c      	mov	ip, r1
 8007280:	44bc      	add	ip, r7
 8007282:	4463      	add	r3, ip
 8007284:	7819      	ldrb	r1, [r3, #0]
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	18cb      	adds	r3, r1, r3
 800728a:	7811      	ldrb	r1, [r2, #0]
 800728c:	2214      	movs	r2, #20
 800728e:	18ba      	adds	r2, r7, r2
 8007290:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i < size ; i++) {
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	3301      	adds	r3, #1
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
 8007298:	2334      	movs	r3, #52	; 0x34
 800729a:	2208      	movs	r2, #8
 800729c:	4694      	mov	ip, r2
 800729e:	44bc      	add	ip, r7
 80072a0:	4463      	add	r3, ip
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a6:	429a      	cmp	r2, r3
 80072a8:	dbe4      	blt.n	8007274 <__updateField2+0x68>
		}
		if ( itsdk_secstore_writeBlock(type, _b) == SS_SUCCESS ) {
 80072aa:	2314      	movs	r3, #20
 80072ac:	18fa      	adds	r2, r7, r3
 80072ae:	230a      	movs	r3, #10
 80072b0:	18fb      	adds	r3, r7, r3
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	0011      	movs	r1, r2
 80072b6:	0018      	movs	r0, r3
 80072b8:	f7ff fd55 	bl	8006d66 <itsdk_secstore_writeBlock>
 80072bc:	1e03      	subs	r3, r0, #0
 80072be:	d105      	bne.n	80072cc <__updateField2+0xc0>
			_itsdk_console_printf("OK\r\n");
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <__updateField2+0xe4>)
 80072c2:	0018      	movs	r0, r3
 80072c4:	f7fe fc0a 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_SUCCES;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e00a      	b.n	80072e2 <__updateField2+0xd6>
		} else {
			_itsdk_console_printf("KO\r\n");
 80072cc:	4b07      	ldr	r3, [pc, #28]	; (80072ec <__updateField2+0xe0>)
 80072ce:	0018      	movs	r0, r3
 80072d0:	f7fe fc04 	bl	8005adc <_itsdk_console_printf>
			return ITSDK_CONSOLE_FAILED;
 80072d4:	2302      	movs	r3, #2
 80072d6:	e004      	b.n	80072e2 <__updateField2+0xd6>
		}
	} else {
		_itsdk_console_printf("KO\r\n");
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <__updateField2+0xe0>)
 80072da:	0018      	movs	r0, r3
 80072dc:	f7fe fbfe 	bl	8005adc <_itsdk_console_printf>
		return ITSDK_CONSOLE_FAILED;
 80072e0:	2302      	movs	r3, #2
	}
}
 80072e2:	0018      	movs	r0, r3
 80072e4:	46bd      	mov	sp, r7
 80072e6:	b00b      	add	sp, #44	; 0x2c
 80072e8:	bd90      	pop	{r4, r7, pc}
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	0800c740 	.word	0x0800c740
 80072f0:	0800c748 	.word	0x0800c748

080072f4 <_itsdk_secStore_consolePriv>:

/**
 * Extends the console function
 */
static itsdk_console_return_e _itsdk_secStore_consolePriv(char * buffer, uint8_t sz) {
 80072f4:	b5b0      	push	{r4, r5, r7, lr}
 80072f6:	b090      	sub	sp, #64	; 0x40
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	000a      	movs	r2, r1
 80072fe:	1cfb      	adds	r3, r7, #3
 8007300:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 8007302:	1cfb      	adds	r3, r7, #3
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d136      	bne.n	8007378 <_itsdk_secStore_consolePriv+0x84>
		switch(buffer[0]){
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b3f      	cmp	r3, #63	; 0x3f
 8007310:	d000      	beq.n	8007314 <_itsdk_secStore_consolePriv+0x20>
			_itsdk_console_printf("SS:P:xxxx  : User change key 7 (16B hex)\r\n");
		  #endif
		  return ITSDK_CONSOLE_SUCCES;
		  break;
		default:
			break;
 8007312:	e1cb      	b.n	80076ac <_itsdk_secStore_consolePriv+0x3b8>
			_itsdk_console_printf("--- SecureStore\r\n");
 8007314:	4bd3      	ldr	r3, [pc, #844]	; (8007664 <_itsdk_secStore_consolePriv+0x370>)
 8007316:	0018      	movs	r0, r3
 8007318:	f7fe fbe0 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("ss:R       : restore all SS to factory default\r\n");
 800731c:	4bd2      	ldr	r3, [pc, #840]	; (8007668 <_itsdk_secStore_consolePriv+0x374>)
 800731e:	0018      	movs	r0, r3
 8007320:	f7fe fbdc 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("SS:0:xxxx  : change the secure store dyn Key (12B)\r\n");
 8007324:	4bd1      	ldr	r3, [pc, #836]	; (800766c <_itsdk_secStore_consolePriv+0x378>)
 8007326:	0018      	movs	r0, r3
 8007328:	f7fe fbd8 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("SS:1:xxxx  : change the console password (max 15 char)\r\n");
 800732c:	4bd0      	ldr	r3, [pc, #832]	; (8007670 <_itsdk_secStore_consolePriv+0x37c>)
 800732e:	0018      	movs	r0, r3
 8007330:	f7fe fbd4 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("ss:Z       : LoRa restore factory setting\r\n");
 8007334:	4bcf      	ldr	r3, [pc, #828]	; (8007674 <_itsdk_secStore_consolePriv+0x380>)
 8007336:	0018      	movs	r0, r3
 8007338:	f7fe fbd0 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("ss:9       : LoRa OTAA print DevEUI (8B hex)\r\n");
 800733c:	4bce      	ldr	r3, [pc, #824]	; (8007678 <_itsdk_secStore_consolePriv+0x384>)
 800733e:	0018      	movs	r0, r3
 8007340:	f7fe fbcc 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("SS:9:xxxx  : LoRa OTAA change DevEUI (8B hex)\r\n");
 8007344:	4bcd      	ldr	r3, [pc, #820]	; (800767c <_itsdk_secStore_consolePriv+0x388>)
 8007346:	0018      	movs	r0, r3
 8007348:	f7fe fbc8 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("ss:A       : LoRa OTAA print AppEUI (8B hex)\r\n");
 800734c:	4bcc      	ldr	r3, [pc, #816]	; (8007680 <_itsdk_secStore_consolePriv+0x38c>)
 800734e:	0018      	movs	r0, r3
 8007350:	f7fe fbc4 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("SS:A:xxxx  : LoRa OTAA change AppEUI (8B hex)\r\n");
 8007354:	4bcb      	ldr	r3, [pc, #812]	; (8007684 <_itsdk_secStore_consolePriv+0x390>)
 8007356:	0018      	movs	r0, r3
 8007358:	f7fe fbc0 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("SS:B:xxxx  : LoRa OTAA change AppKey (16B hex)\r\n");
 800735c:	4bca      	ldr	r3, [pc, #808]	; (8007688 <_itsdk_secStore_consolePriv+0x394>)
 800735e:	0018      	movs	r0, r3
 8007360:	f7fe fbbc 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("SS:C:xxxx  : LoRa OTAA change NwkKey (16B hex)\r\n");
 8007364:	4bc9      	ldr	r3, [pc, #804]	; (800768c <_itsdk_secStore_consolePriv+0x398>)
 8007366:	0018      	movs	r0, r3
 8007368:	f7fe fbb8 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("SS:D:xxxx  : LoRa OTAA change Nwk+App (16B hex)\r\n");
 800736c:	4bc8      	ldr	r3, [pc, #800]	; (8007690 <_itsdk_secStore_consolePriv+0x39c>)
 800736e:	0018      	movs	r0, r3
 8007370:	f7fe fbb4 	bl	8005adc <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 8007374:	2300      	movs	r3, #0
 8007376:	e19a      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
		}
	} else if ( sz >= 4 ) {
 8007378:	1cfb      	adds	r3, r7, #3
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b03      	cmp	r3, #3
 800737e:	d800      	bhi.n	8007382 <_itsdk_secStore_consolePriv+0x8e>
 8007380:	e194      	b.n	80076ac <_itsdk_secStore_consolePriv+0x3b8>
		uint8_t b[ITSDK_SECSTORE_BLOCKSZ];
		// READ CASE
		if ( buffer[0] == 's' && buffer[1] == 's' && buffer[2] == ':' ) {
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b73      	cmp	r3, #115	; 0x73
 8007388:	d000      	beq.n	800738c <_itsdk_secStore_consolePriv+0x98>
 800738a:	e096      	b.n	80074ba <_itsdk_secStore_consolePriv+0x1c6>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3301      	adds	r3, #1
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b73      	cmp	r3, #115	; 0x73
 8007394:	d000      	beq.n	8007398 <_itsdk_secStore_consolePriv+0xa4>
 8007396:	e090      	b.n	80074ba <_itsdk_secStore_consolePriv+0x1c6>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3302      	adds	r3, #2
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b3a      	cmp	r3, #58	; 0x3a
 80073a0:	d000      	beq.n	80073a4 <_itsdk_secStore_consolePriv+0xb0>
 80073a2:	e08a      	b.n	80074ba <_itsdk_secStore_consolePriv+0x1c6>
			switch(buffer[3]) {
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3303      	adds	r3, #3
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	3b39      	subs	r3, #57	; 0x39
 80073ac:	2b28      	cmp	r3, #40	; 0x28
 80073ae:	d900      	bls.n	80073b2 <_itsdk_secStore_consolePriv+0xbe>
 80073b0:	e085      	b.n	80074be <_itsdk_secStore_consolePriv+0x1ca>
 80073b2:	009a      	lsls	r2, r3, #2
 80073b4:	4bb7      	ldr	r3, [pc, #732]	; (8007694 <_itsdk_secStore_consolePriv+0x3a0>)
 80073b6:	18d3      	adds	r3, r2, r3
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	469f      	mov	pc, r3
			case 'R':
				// all config factory default
				{
					uint8_t ret = 0;
 80073bc:	2337      	movs	r3, #55	; 0x37
 80073be:	18fb      	adds	r3, r7, r3
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
					#endif
					#if ( defined(ITSDK_SIGFOX_ENCRYPTION) && ( ITSDK_SIGFOX_ENCRYPTION > 0 )) || (defined(ITSDK_LORAWAN_ENCRYPTION) && ( ITSDK_LORAWAN_ENCRYPTION > 0))
					  if ( itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE) != ENCRYPT_RETURN_SUCESS ) ret =1;
					#endif
					#if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
					  if ( itsdk_lorawan_resetFactoryDefaults(true) != LORAWAN_RETURN_SUCESS ) ret=1;
 80073c4:	2001      	movs	r0, #1
 80073c6:	f001 ff11 	bl	80091ec <itsdk_lorawan_resetFactoryDefaults>
 80073ca:	1e03      	subs	r3, r0, #0
 80073cc:	d003      	beq.n	80073d6 <_itsdk_secStore_consolePriv+0xe2>
 80073ce:	2337      	movs	r3, #55	; 0x37
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	2201      	movs	r2, #1
 80073d4:	701a      	strb	r2, [r3, #0]
					#endif
					if ( ret == 0 ) {
 80073d6:	2337      	movs	r3, #55	; 0x37
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <_itsdk_secStore_consolePriv+0xf8>
					  _itsdk_console_printf("OK\r\n");
 80073e0:	4bad      	ldr	r3, [pc, #692]	; (8007698 <_itsdk_secStore_consolePriv+0x3a4>)
 80073e2:	0018      	movs	r0, r3
 80073e4:	f7fe fb7a 	bl	8005adc <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e160      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				    } else {
					  _itsdk_console_printf("KO\r\n");
 80073ec:	4bab      	ldr	r3, [pc, #684]	; (800769c <_itsdk_secStore_consolePriv+0x3a8>)
 80073ee:	0018      	movs	r0, r3
 80073f0:	f7fe fb74 	bl	8005adc <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 80073f4:	2302      	movs	r3, #2
 80073f6:	e15a      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				  }
				break;
			 #endif
			 #if defined(ITSDK_WITH_LORAWAN_LIB) && ITSDK_WITH_LORAWAN_LIB == __ENABLE
			  case 'Z':
				  if ( itsdk_lorawan_resetFactoryDefaults(true) == LORAWAN_RETURN_SUCESS ) {
 80073f8:	2001      	movs	r0, #1
 80073fa:	f001 fef7 	bl	80091ec <itsdk_lorawan_resetFactoryDefaults>
 80073fe:	1e03      	subs	r3, r0, #0
 8007400:	d105      	bne.n	800740e <_itsdk_secStore_consolePriv+0x11a>
					  _itsdk_console_printf("OK\r\n");
 8007402:	4ba5      	ldr	r3, [pc, #660]	; (8007698 <_itsdk_secStore_consolePriv+0x3a4>)
 8007404:	0018      	movs	r0, r3
 8007406:	f7fe fb69 	bl	8005adc <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 800740a:	2300      	movs	r3, #0
 800740c:	e14f      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 800740e:	4ba3      	ldr	r3, [pc, #652]	; (800769c <_itsdk_secStore_consolePriv+0x3a8>)
 8007410:	0018      	movs	r0, r3
 8007412:	f7fe fb63 	bl	8005adc <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8007416:	2302      	movs	r3, #2
 8007418:	e149      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				  }
              #endif
              #if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			  case '9':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 800741a:	230c      	movs	r3, #12
 800741c:	18fb      	adds	r3, r7, r3
 800741e:	0019      	movs	r1, r3
 8007420:	2007      	movs	r0, #7
 8007422:	f7ff fc53 	bl	8006ccc <itsdk_secstore_readBlock>
 8007426:	1e03      	subs	r3, r0, #0
 8007428:	d119      	bne.n	800745e <_itsdk_secStore_consolePriv+0x16a>
					  __console_print_hex(b,0,8);
 800742a:	2300      	movs	r3, #0
 800742c:	633b      	str	r3, [r7, #48]	; 0x30
 800742e:	e00d      	b.n	800744c <_itsdk_secStore_consolePriv+0x158>
 8007430:	230c      	movs	r3, #12
 8007432:	18fa      	adds	r2, r7, r3
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	18d3      	adds	r3, r2, r3
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	001a      	movs	r2, r3
 800743c:	4b98      	ldr	r3, [pc, #608]	; (80076a0 <_itsdk_secStore_consolePriv+0x3ac>)
 800743e:	0011      	movs	r1, r2
 8007440:	0018      	movs	r0, r3
 8007442:	f7fe fb4b 	bl	8005adc <_itsdk_console_printf>
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	3301      	adds	r3, #1
 800744a:	633b      	str	r3, [r7, #48]	; 0x30
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	2b07      	cmp	r3, #7
 8007450:	ddee      	ble.n	8007430 <_itsdk_secStore_consolePriv+0x13c>
 8007452:	4b94      	ldr	r3, [pc, #592]	; (80076a4 <_itsdk_secStore_consolePriv+0x3b0>)
 8007454:	0018      	movs	r0, r3
 8007456:	f7fe fb41 	bl	8005adc <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 800745a:	2300      	movs	r3, #0
 800745c:	e127      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 800745e:	4b8f      	ldr	r3, [pc, #572]	; (800769c <_itsdk_secStore_consolePriv+0x3a8>)
 8007460:	0018      	movs	r0, r3
 8007462:	f7fe fb3b 	bl	8005adc <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 8007466:	2302      	movs	r3, #2
 8007468:	e121      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				  }
			  case 'A':
			  case 'a':
				  // ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				  if ( itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, b) == SS_SUCCESS ) {
 800746a:	230c      	movs	r3, #12
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	0019      	movs	r1, r3
 8007470:	2007      	movs	r0, #7
 8007472:	f7ff fc2b 	bl	8006ccc <itsdk_secstore_readBlock>
 8007476:	1e03      	subs	r3, r0, #0
 8007478:	d119      	bne.n	80074ae <_itsdk_secStore_consolePriv+0x1ba>
					  __console_print_hex(b,8,8);
 800747a:	2308      	movs	r3, #8
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800747e:	e00d      	b.n	800749c <_itsdk_secStore_consolePriv+0x1a8>
 8007480:	230c      	movs	r3, #12
 8007482:	18fa      	adds	r2, r7, r3
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	18d3      	adds	r3, r2, r3
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	001a      	movs	r2, r3
 800748c:	4b84      	ldr	r3, [pc, #528]	; (80076a0 <_itsdk_secStore_consolePriv+0x3ac>)
 800748e:	0011      	movs	r1, r2
 8007490:	0018      	movs	r0, r3
 8007492:	f7fe fb23 	bl	8005adc <_itsdk_console_printf>
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	3301      	adds	r3, #1
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	2b0f      	cmp	r3, #15
 80074a0:	ddee      	ble.n	8007480 <_itsdk_secStore_consolePriv+0x18c>
 80074a2:	4b80      	ldr	r3, [pc, #512]	; (80076a4 <_itsdk_secStore_consolePriv+0x3b0>)
 80074a4:	0018      	movs	r0, r3
 80074a6:	f7fe fb19 	bl	8005adc <_itsdk_console_printf>
					  return ITSDK_CONSOLE_SUCCES;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e0ff      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				  } else {
					  _itsdk_console_printf("KO\r\n");
 80074ae:	4b7b      	ldr	r3, [pc, #492]	; (800769c <_itsdk_secStore_consolePriv+0x3a8>)
 80074b0:	0018      	movs	r0, r3
 80074b2:	f7fe fb13 	bl	8005adc <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 80074b6:	2302      	movs	r3, #2
 80074b8:	e0f9      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				  return ITSDK_CONSOLE_SUCCES;
			  #endif
			  default:
				  break;
			}
		}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	e000      	b.n	80074c0 <_itsdk_secStore_consolePriv+0x1cc>
				  break;
 80074be:	46c0      	nop			; (mov r8, r8)
		// WRITE CASE
		if ( buffer[0] == 'S' && buffer[1] == 'S' && buffer[2] == ':' && buffer[4] == ':' ) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b53      	cmp	r3, #83	; 0x53
 80074c6:	d000      	beq.n	80074ca <_itsdk_secStore_consolePriv+0x1d6>
 80074c8:	e0f0      	b.n	80076ac <_itsdk_secStore_consolePriv+0x3b8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3301      	adds	r3, #1
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b53      	cmp	r3, #83	; 0x53
 80074d2:	d000      	beq.n	80074d6 <_itsdk_secStore_consolePriv+0x1e2>
 80074d4:	e0ea      	b.n	80076ac <_itsdk_secStore_consolePriv+0x3b8>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3302      	adds	r3, #2
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b3a      	cmp	r3, #58	; 0x3a
 80074de:	d000      	beq.n	80074e2 <_itsdk_secStore_consolePriv+0x1ee>
 80074e0:	e0e4      	b.n	80076ac <_itsdk_secStore_consolePriv+0x3b8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3304      	adds	r3, #4
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b3a      	cmp	r3, #58	; 0x3a
 80074ea:	d000      	beq.n	80074ee <_itsdk_secStore_consolePriv+0x1fa>
 80074ec:	e0de      	b.n	80076ac <_itsdk_secStore_consolePriv+0x3b8>
			int ssz = sz-5;
 80074ee:	1cfb      	adds	r3, r7, #3
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	3b05      	subs	r3, #5
 80074f4:	61fb      	str	r3, [r7, #28]
			switch(buffer[3]) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3303      	adds	r3, #3
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	3b30      	subs	r3, #48	; 0x30
 80074fe:	2b34      	cmp	r3, #52	; 0x34
 8007500:	d900      	bls.n	8007504 <_itsdk_secStore_consolePriv+0x210>
 8007502:	e0d3      	b.n	80076ac <_itsdk_secStore_consolePriv+0x3b8>
 8007504:	009a      	lsls	r2, r3, #2
 8007506:	4b68      	ldr	r3, [pc, #416]	; (80076a8 <_itsdk_secStore_consolePriv+0x3b4>)
 8007508:	18d3      	adds	r3, r2, r3
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	469f      	mov	pc, r3
			case '0':
				// DYNKEY
				if ( __checkAndConvert(buffer,5,sz,12,b) ) {
 800750e:	1cfb      	adds	r3, r7, #3
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	230c      	movs	r3, #12
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	230c      	movs	r3, #12
 800751c:	2105      	movs	r1, #5
 800751e:	f7ff fdd7 	bl	80070d0 <__checkAndConvert>
 8007522:	1e03      	subs	r3, r0, #0
 8007524:	d006      	beq.n	8007534 <_itsdk_secStore_consolePriv+0x240>
					return _itsk_secstore_rekey(b);
 8007526:	230c      	movs	r3, #12
 8007528:	18fb      	adds	r3, r7, r3
 800752a:	0018      	movs	r0, r3
 800752c:	f7ff fd2a 	bl	8006f84 <_itsk_secstore_rekey>
 8007530:	0003      	movs	r3, r0
 8007532:	e0bc      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 8007534:	4b59      	ldr	r3, [pc, #356]	; (800769c <_itsdk_secStore_consolePriv+0x3a8>)
 8007536:	0018      	movs	r0, r3
 8007538:	f7fe fad0 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 800753c:	2302      	movs	r3, #2
 800753e:	e0b6      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				}
			case '1':
				// ITSDK_SS_CONSOLEKEY
				if ( ssz > 15 ) {
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2b0f      	cmp	r3, #15
 8007544:	dd05      	ble.n	8007552 <_itsdk_secStore_consolePriv+0x25e>
					  _itsdk_console_printf("KO\r\n");
 8007546:	4b55      	ldr	r3, [pc, #340]	; (800769c <_itsdk_secStore_consolePriv+0x3a8>)
 8007548:	0018      	movs	r0, r3
 800754a:	f7fe fac7 	bl	8005adc <_itsdk_console_printf>
					  return ITSDK_CONSOLE_FAILED;
 800754e:	2302      	movs	r3, #2
 8007550:	e0ad      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				}
				for ( int i = 0 ; i < ssz ; i++) {
 8007552:	2300      	movs	r3, #0
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28
 8007556:	e00d      	b.n	8007574 <_itsdk_secStore_consolePriv+0x280>
					b[i] = buffer[i+5];
 8007558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755a:	3305      	adds	r3, #5
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	18d3      	adds	r3, r2, r3
 8007560:	7819      	ldrb	r1, [r3, #0]
 8007562:	230c      	movs	r3, #12
 8007564:	18fa      	adds	r2, r7, r3
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	18d3      	adds	r3, r2, r3
 800756a:	1c0a      	adds	r2, r1, #0
 800756c:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < ssz ; i++) {
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	3301      	adds	r3, #1
 8007572:	62bb      	str	r3, [r7, #40]	; 0x28
 8007574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	429a      	cmp	r2, r3
 800757a:	dbed      	blt.n	8007558 <_itsdk_secStore_consolePriv+0x264>
				}
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
 8007580:	e008      	b.n	8007594 <_itsdk_secStore_consolePriv+0x2a0>
					b[i] = 0;
 8007582:	230c      	movs	r3, #12
 8007584:	18fa      	adds	r2, r7, r3
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	18d3      	adds	r3, r2, r3
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
				for ( int i = ssz ; i < ITSDK_SECSTORE_BLOCKSZ ; i++) {
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	3301      	adds	r3, #1
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	2b0f      	cmp	r3, #15
 8007598:	ddf3      	ble.n	8007582 <_itsdk_secStore_consolePriv+0x28e>
				}
				if ( itsdk_secstore_writeBlock(ITSDK_SS_CONSOLEKEY, b) == SS_SUCCESS ) {
 800759a:	230c      	movs	r3, #12
 800759c:	18fb      	adds	r3, r7, r3
 800759e:	0019      	movs	r1, r3
 80075a0:	2000      	movs	r0, #0
 80075a2:	f7ff fbe0 	bl	8006d66 <itsdk_secstore_writeBlock>
 80075a6:	1e03      	subs	r3, r0, #0
 80075a8:	d105      	bne.n	80075b6 <_itsdk_secStore_consolePriv+0x2c2>
					_itsdk_console_printf("OK\r\n");
 80075aa:	4b3b      	ldr	r3, [pc, #236]	; (8007698 <_itsdk_secStore_consolePriv+0x3a4>)
 80075ac:	0018      	movs	r0, r3
 80075ae:	f7fe fa95 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_SUCCES;
 80075b2:	2300      	movs	r3, #0
 80075b4:	e07b      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				} else {
					_itsdk_console_printf("KO\r\n");
 80075b6:	4b39      	ldr	r3, [pc, #228]	; (800769c <_itsdk_secStore_consolePriv+0x3a8>)
 80075b8:	0018      	movs	r0, r3
 80075ba:	f7fe fa8f 	bl	8005adc <_itsdk_console_printf>
					return ITSDK_CONSOLE_FAILED;
 80075be:	2302      	movs	r3, #2
 80075c0:	e075      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_ABP_APPSKEY);
		#endif
		#if (ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_STATIC && ITSDK_LORAWAN_ACTIVATION == __LORAWAN_OTAA )  || ITSDK_LORAWAN_ACTTYPE == __LORAWAN_ACTIVATION_DYNAMIC
			case '9':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,0,8);
 80075c2:	230c      	movs	r3, #12
 80075c4:	18fa      	adds	r2, r7, r3
 80075c6:	1cfb      	adds	r3, r7, #3
 80075c8:	7819      	ldrb	r1, [r3, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	2308      	movs	r3, #8
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	2300      	movs	r3, #0
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	2307      	movs	r3, #7
 80075d6:	f7ff fe19 	bl	800720c <__updateField2>
 80075da:	0003      	movs	r3, r0
 80075dc:	e067      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
			case 'a':
			case 'A':
				// ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI
				return __updateField2(buffer,sz,b,ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI,8,8);
 80075de:	230c      	movs	r3, #12
 80075e0:	18fa      	adds	r2, r7, r3
 80075e2:	1cfb      	adds	r3, r7, #3
 80075e4:	7819      	ldrb	r1, [r3, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	2308      	movs	r3, #8
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	2308      	movs	r3, #8
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	2307      	movs	r3, #7
 80075f2:	f7ff fe0b 	bl	800720c <__updateField2>
 80075f6:	0003      	movs	r3, r0
 80075f8:	e059      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
			case 'b':
			case 'B':
				// ITSDK_SS_LORA_OTAA_APPKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 80075fa:	230c      	movs	r3, #12
 80075fc:	18fa      	adds	r2, r7, r3
 80075fe:	1cfb      	adds	r3, r7, #3
 8007600:	7819      	ldrb	r1, [r3, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	2308      	movs	r3, #8
 8007606:	f7ff fdb9 	bl	800717c <__updateField>
 800760a:	0003      	movs	r3, r0
 800760c:	e04f      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
			case 'c':
			case 'C':
				// ITSDK_SS_LORA_OTAA_NWKKEY
				return __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY);
 800760e:	230c      	movs	r3, #12
 8007610:	18fa      	adds	r2, r7, r3
 8007612:	1cfb      	adds	r3, r7, #3
 8007614:	7819      	ldrb	r1, [r3, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	2309      	movs	r3, #9
 800761a:	f7ff fdaf 	bl	800717c <__updateField>
 800761e:	0003      	movs	r3, r0
 8007620:	e045      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
			case 'd':
			case 'D': {
				// ITSDK_SS_LORA_OTAA_APPKEY + ITSDK_SS_LORA_OTAA_NWKKEY
				itsdk_console_return_e ret;
				if ( (ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_NWKKEY)) == ITSDK_CONSOLE_SUCCES ) {
 8007622:	2523      	movs	r5, #35	; 0x23
 8007624:	197c      	adds	r4, r7, r5
 8007626:	230c      	movs	r3, #12
 8007628:	18fa      	adds	r2, r7, r3
 800762a:	1cfb      	adds	r3, r7, #3
 800762c:	7819      	ldrb	r1, [r3, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	2309      	movs	r3, #9
 8007632:	f7ff fda3 	bl	800717c <__updateField>
 8007636:	0003      	movs	r3, r0
 8007638:	7023      	strb	r3, [r4, #0]
 800763a:	197b      	adds	r3, r7, r5
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <_itsdk_secStore_consolePriv+0x366>
					ret = __updateField(buffer, sz, b, ITSDK_SS_LORA_OTAA_APPKEY);
 8007642:	2323      	movs	r3, #35	; 0x23
 8007644:	18fc      	adds	r4, r7, r3
 8007646:	230c      	movs	r3, #12
 8007648:	18fa      	adds	r2, r7, r3
 800764a:	1cfb      	adds	r3, r7, #3
 800764c:	7819      	ldrb	r1, [r3, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	2308      	movs	r3, #8
 8007652:	f7ff fd93 	bl	800717c <__updateField>
 8007656:	0003      	movs	r3, r0
 8007658:	7023      	strb	r3, [r4, #0]
				}
				return ret;
 800765a:	2323      	movs	r3, #35	; 0x23
 800765c:	18fb      	adds	r3, r7, r3
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	e025      	b.n	80076ae <_itsdk_secStore_consolePriv+0x3ba>
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	0800c750 	.word	0x0800c750
 8007668:	0800c764 	.word	0x0800c764
 800766c:	0800c798 	.word	0x0800c798
 8007670:	0800c7d0 	.word	0x0800c7d0
 8007674:	0800c80c 	.word	0x0800c80c
 8007678:	0800c838 	.word	0x0800c838
 800767c:	0800c868 	.word	0x0800c868
 8007680:	0800c898 	.word	0x0800c898
 8007684:	0800c8c8 	.word	0x0800c8c8
 8007688:	0800c8f8 	.word	0x0800c8f8
 800768c:	0800c92c 	.word	0x0800c92c
 8007690:	0800c960 	.word	0x0800c960
 8007694:	0800ccfc 	.word	0x0800ccfc
 8007698:	0800c748 	.word	0x0800c748
 800769c:	0800c740 	.word	0x0800c740
 80076a0:	0800c994 	.word	0x0800c994
 80076a4:	0800c99c 	.word	0x0800c99c
 80076a8:	0800cda0 	.word	0x0800cda0
				return __updateField(buffer, sz, b, ITSDK_SS_USER7);
	#endif
			} // switch
		} // Write case end
  } //Sz > 4
  return ITSDK_CONSOLE_NOTFOUND;
 80076ac:	2301      	movs	r3, #1
}
 80076ae:	0018      	movs	r0, r3
 80076b0:	46bd      	mov	sp, r7
 80076b2:	b00e      	add	sp, #56	; 0x38
 80076b4:	bdb0      	pop	{r4, r5, r7, pc}
 80076b6:	46c0      	nop			; (mov r8, r8)

080076b8 <itsdk_secStore_RegisterConsole>:
static itsdk_console_chain_t __console_secStore;

#endif // ITSDK_WITH_CONSOLE

itsdk_secStoreReturn_e itsdk_secStore_RegisterConsole() {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_secStore.console_private = _itsdk_secStore_consolePriv;
 80076bc:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <itsdk_secStore_RegisterConsole+0x28>)
 80076be:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <itsdk_secStore_RegisterConsole+0x2c>)
 80076c0:	601a      	str	r2, [r3, #0]
	__console_secStore.console_public = NULL;
 80076c2:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <itsdk_secStore_RegisterConsole+0x28>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	605a      	str	r2, [r3, #4]
	__console_secStore.next = NULL;
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <itsdk_secStore_RegisterConsole+0x28>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_secStore);
 80076ce:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <itsdk_secStore_RegisterConsole+0x28>)
 80076d0:	0018      	movs	r0, r3
 80076d2:	f7fe fbc3 	bl	8005e5c <itsdk_console_registerCommand>
#endif
	return SS_SUCCESS;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	0018      	movs	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	20000118 	.word	0x20000118
 80076e4:	080072f5 	.word	0x080072f5

080076e8 <itsdk_aes_ecb_encrypt_128B>:
void itsdk_aes_ecb_encrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 80076e8:	b5b0      	push	{r4, r5, r7, lr}
 80076ea:	b0b8      	sub	sp, #224	; 0xe0
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	603b      	str	r3, [r7, #0]
 80076f4:	1dfb      	adds	r3, r7, #7
 80076f6:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2110      	movs	r1, #16
 80076fc:	0018      	movs	r0, r3
 80076fe:	f000 f8cd 	bl	800789c <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 8007702:	24d0      	movs	r4, #208	; 0xd0
 8007704:	193a      	adds	r2, r7, r4
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	0010      	movs	r0, r2
 800770a:	0019      	movs	r1, r3
 800770c:	2310      	movs	r3, #16
 800770e:	001a      	movs	r2, r3
 8007710:	f003 ffc6 	bl	800b6a0 <memcpy>
	bzero(ctx.Iv,16);
 8007714:	2510      	movs	r5, #16
 8007716:	197b      	adds	r3, r7, r5
 8007718:	33b0      	adds	r3, #176	; 0xb0
 800771a:	2110      	movs	r1, #16
 800771c:	0018      	movs	r0, r3
 800771e:	f003 ff8f 	bl	800b640 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	197b      	adds	r3, r7, r5
 8007726:	0011      	movs	r1, r2
 8007728:	0018      	movs	r0, r3
 800772a:	f000 f9c5 	bl	8007ab8 <tiny_AES_init_ctx>
	tiny_AES_CBC_encrypt_buffer(&ctx, aesResult, 16);
 800772e:	1939      	adds	r1, r7, r4
 8007730:	197b      	adds	r3, r7, r5
 8007732:	2210      	movs	r2, #16
 8007734:	0018      	movs	r0, r3
 8007736:	f001 f8d8 	bl	80088ea <tiny_AES_CBC_encrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2110      	movs	r1, #16
 800773e:	0018      	movs	r0, r3
 8007740:	f000 f856 	bl	80077f0 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	193b      	adds	r3, r7, r4
 8007748:	0010      	movs	r0, r2
 800774a:	0019      	movs	r1, r3
 800774c:	2310      	movs	r3, #16
 800774e:	001a      	movs	r2, r3
 8007750:	f003 ffa6 	bl	800b6a0 <memcpy>
	bzero(aesResult,16);
 8007754:	193b      	adds	r3, r7, r4
 8007756:	2110      	movs	r1, #16
 8007758:	0018      	movs	r0, r3
 800775a:	f003 ff71 	bl	800b640 <bzero>
	bzero(&ctx,sizeof(struct AES_ctx));
 800775e:	197b      	adds	r3, r7, r5
 8007760:	21c0      	movs	r1, #192	; 0xc0
 8007762:	0018      	movs	r0, r3
 8007764:	f003 ff6c 	bl	800b640 <bzero>
}
 8007768:	46c0      	nop			; (mov r8, r8)
 800776a:	46bd      	mov	sp, r7
 800776c:	b038      	add	sp, #224	; 0xe0
 800776e:	bdb0      	pop	{r4, r5, r7, pc}

08007770 <itsdk_aes_ecb_decrypt_128B>:
void itsdk_aes_ecb_decrypt_128B(
		uint8_t	* clearData,			// Data to be encrypted
		uint8_t * encryptedData,		// Can be the same as clearData
		uint8_t   dataLen,				// Size of data to be encrypted
		uint8_t * masterKey				// 128B key used for encryption (hidden with ITSDK_PROTECT_KEY)
) {
 8007770:	b5b0      	push	{r4, r5, r7, lr}
 8007772:	b0b8      	sub	sp, #224	; 0xe0
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	1dfb      	adds	r3, r7, #7
 800777e:	701a      	strb	r2, [r3, #0]
	uint8_t aesResult[16];
	itsdk_encrypt_unCifferKey(masterKey,16);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2110      	movs	r1, #16
 8007784:	0018      	movs	r0, r3
 8007786:	f000 f889 	bl	800789c <itsdk_encrypt_unCifferKey>
	struct AES_ctx ctx;
	memcpy(aesResult,clearData,16);
 800778a:	24d0      	movs	r4, #208	; 0xd0
 800778c:	193a      	adds	r2, r7, r4
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	0010      	movs	r0, r2
 8007792:	0019      	movs	r1, r3
 8007794:	2310      	movs	r3, #16
 8007796:	001a      	movs	r2, r3
 8007798:	f003 ff82 	bl	800b6a0 <memcpy>
	bzero(ctx.Iv,16);
 800779c:	2510      	movs	r5, #16
 800779e:	197b      	adds	r3, r7, r5
 80077a0:	33b0      	adds	r3, #176	; 0xb0
 80077a2:	2110      	movs	r1, #16
 80077a4:	0018      	movs	r0, r3
 80077a6:	f003 ff4b 	bl	800b640 <bzero>
	tiny_AES_init_ctx(&ctx,masterKey);
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	197b      	adds	r3, r7, r5
 80077ae:	0011      	movs	r1, r2
 80077b0:	0018      	movs	r0, r3
 80077b2:	f000 f981 	bl	8007ab8 <tiny_AES_init_ctx>
	tiny_AES_CBC_decrypt_buffer(&ctx, aesResult, 16);
 80077b6:	1939      	adds	r1, r7, r4
 80077b8:	197b      	adds	r3, r7, r5
 80077ba:	2210      	movs	r2, #16
 80077bc:	0018      	movs	r0, r3
 80077be:	f001 f8c3 	bl	8008948 <tiny_AES_CBC_decrypt_buffer>
	itsdk_encrypt_cifferKey(masterKey,16);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2110      	movs	r1, #16
 80077c6:	0018      	movs	r0, r3
 80077c8:	f000 f812 	bl	80077f0 <itsdk_encrypt_cifferKey>
	memcpy(encryptedData,aesResult,16);
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	193b      	adds	r3, r7, r4
 80077d0:	0010      	movs	r0, r2
 80077d2:	0019      	movs	r1, r3
 80077d4:	2310      	movs	r3, #16
 80077d6:	001a      	movs	r2, r3
 80077d8:	f003 ff62 	bl	800b6a0 <memcpy>
	bzero(aesResult,16);
 80077dc:	193b      	adds	r3, r7, r4
 80077de:	2110      	movs	r1, #16
 80077e0:	0018      	movs	r0, r3
 80077e2:	f003 ff2d 	bl	800b640 <bzero>
}
 80077e6:	46c0      	nop			; (mov r8, r8)
 80077e8:	46bd      	mov	sp, r7
 80077ea:	b038      	add	sp, #224	; 0xe0
 80077ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080077f0 <itsdk_encrypt_cifferKey>:
/**
 * Protect inMemory key with a simple XOR with a hardcoded
 * 32b value. Not good at all but always better than clear
 * text key in memory.
 */
void itsdk_encrypt_cifferKey(uint8_t * key, int len) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]

	if ( (len & 3 ) > 0 ) {
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2203      	movs	r2, #3
 80077fe:	4013      	ands	r3, r2
 8007800:	2b00      	cmp	r3, #0
 8007802:	dd06      	ble.n	8007812 <itsdk_encrypt_cifferKey+0x22>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_ENCRYP_INVALID_DATALEN,(uint16_t)len);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	4a23      	ldr	r2, [pc, #140]	; (8007898 <itsdk_encrypt_cifferKey+0xa8>)
 800780a:	0019      	movs	r1, r3
 800780c:	0010      	movs	r0, r2
 800780e:	f001 f977 	bl	8008b00 <itsdk_error_report>
	}
	for ( int i = 0 ; i < len ; i+=4 ) {
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e037      	b.n	8007888 <itsdk_encrypt_cifferKey+0x98>
		key[i]   ^= (ITSDK_PROTECT_KEY & 0xFF000000) >> 24;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	18d3      	adds	r3, r2, r3
 800781e:	781a      	ldrb	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	18cb      	adds	r3, r1, r3
 8007826:	2159      	movs	r1, #89	; 0x59
 8007828:	4249      	negs	r1, r1
 800782a:	404a      	eors	r2, r1
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]
		key[i+1] ^= (ITSDK_PROTECT_KEY & 0x00FF0000) >> 16;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	18d3      	adds	r3, r2, r3
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	18cb      	adds	r3, r1, r3
 8007842:	2145      	movs	r1, #69	; 0x45
 8007844:	404a      	eors	r2, r1
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]
		key[i+2] ^= (ITSDK_PROTECT_KEY & 0x0000FF00) >> 8;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3302      	adds	r3, #2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	18d3      	adds	r3, r2, r3
 8007852:	781a      	ldrb	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3302      	adds	r3, #2
 8007858:	6879      	ldr	r1, [r7, #4]
 800785a:	18cb      	adds	r3, r1, r3
 800785c:	2165      	movs	r1, #101	; 0x65
 800785e:	4249      	negs	r1, r1
 8007860:	404a      	eors	r2, r1
 8007862:	b2d2      	uxtb	r2, r2
 8007864:	701a      	strb	r2, [r3, #0]
		key[i+3] ^= (ITSDK_PROTECT_KEY & 0x000000FF);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3303      	adds	r3, #3
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	18d3      	adds	r3, r2, r3
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3303      	adds	r3, #3
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	18cb      	adds	r3, r1, r3
 8007878:	213d      	movs	r1, #61	; 0x3d
 800787a:	4249      	negs	r1, r1
 800787c:	404a      	eors	r2, r1
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]
	for ( int i = 0 ; i < len ; i+=4 ) {
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3304      	adds	r3, #4
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	429a      	cmp	r2, r3
 800788e:	dbc3      	blt.n	8007818 <itsdk_encrypt_cifferKey+0x28>
	}
}
 8007890:	46c0      	nop			; (mov r8, r8)
 8007892:	46bd      	mov	sp, r7
 8007894:	b004      	add	sp, #16
 8007896:	bd80      	pop	{r7, pc}
 8007898:	d0000020 	.word	0xd0000020

0800789c <itsdk_encrypt_unCifferKey>:

/**
 * Un protect inMemory key.
 */
void itsdk_encrypt_unCifferKey(uint8_t * key, int len) {
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
	itsdk_encrypt_cifferKey(key,len);
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	0011      	movs	r1, r2
 80078ac:	0018      	movs	r0, r3
 80078ae:	f7ff ff9f 	bl	80077f0 <itsdk_encrypt_cifferKey>
}
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b002      	add	sp, #8
 80078b8:	bd80      	pop	{r7, pc}

080078ba <itsdk_encrypt_resetFactoryDefaults>:
	}
	bzero(buffer,16);
	return ENCRYPT_RETURN_SUCESS;
}
#else
itsdk_encrypt_return_t itsdk_encrypt_resetFactoryDefaults(itsdk_bool_e force) {
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	0002      	movs	r2, r0
 80078c2:	1dfb      	adds	r3, r7, #7
 80078c4:	701a      	strb	r2, [r3, #0]
	return ENCRYPT_RETURN_SUCESS;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	0018      	movs	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b002      	add	sp, #8
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b089      	sub	sp, #36	; 0x24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
 80078de:	e030      	b.n	8007942 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	18d2      	adds	r2, r2, r3
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	18cb      	adds	r3, r1, r3
 80078f0:	7812      	ldrb	r2, [r2, #0]
 80078f2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	3301      	adds	r3, #1
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	18d2      	adds	r2, r2, r3
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	3301      	adds	r3, #1
 8007904:	6879      	ldr	r1, [r7, #4]
 8007906:	18cb      	adds	r3, r1, r3
 8007908:	7812      	ldrb	r2, [r2, #0]
 800790a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	3302      	adds	r3, #2
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	18d2      	adds	r2, r2, r3
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	3302      	adds	r3, #2
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	18cb      	adds	r3, r1, r3
 8007920:	7812      	ldrb	r2, [r2, #0]
 8007922:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	3303      	adds	r3, #3
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	18d2      	adds	r2, r2, r3
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	3303      	adds	r3, #3
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	18cb      	adds	r3, r1, r3
 8007938:	7812      	ldrb	r2, [r2, #0]
 800793a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	3301      	adds	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d9cb      	bls.n	80078e0 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8007948:	2304      	movs	r3, #4
 800794a:	61fb      	str	r3, [r7, #28]
 800794c:	e0a4      	b.n	8007a98 <KeyExpansion+0x1c8>
  {
    {
      k = (i - 1) * 4;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4a55      	ldr	r2, [pc, #340]	; (8007aa8 <KeyExpansion+0x1d8>)
 8007952:	4694      	mov	ip, r2
 8007954:	4463      	add	r3, ip
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	18d3      	adds	r3, r2, r3
 8007960:	781a      	ldrb	r2, [r3, #0]
 8007962:	210c      	movs	r1, #12
 8007964:	187b      	adds	r3, r7, r1
 8007966:	701a      	strb	r2, [r3, #0]
      tempa[1]=RoundKey[k + 1];
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	3301      	adds	r3, #1
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	18d3      	adds	r3, r2, r3
 8007970:	781a      	ldrb	r2, [r3, #0]
 8007972:	187b      	adds	r3, r7, r1
 8007974:	705a      	strb	r2, [r3, #1]
      tempa[2]=RoundKey[k + 2];
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	3302      	adds	r3, #2
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	18d3      	adds	r3, r2, r3
 800797e:	781a      	ldrb	r2, [r3, #0]
 8007980:	187b      	adds	r3, r7, r1
 8007982:	709a      	strb	r2, [r3, #2]
      tempa[3]=RoundKey[k + 3];
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	3303      	adds	r3, #3
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	18d3      	adds	r3, r2, r3
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	187b      	adds	r3, r7, r1
 8007990:	70da      	strb	r2, [r3, #3]

    }

    if (i % Nk == 0)
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	2203      	movs	r2, #3
 8007996:	4013      	ands	r3, r2
 8007998:	d13b      	bne.n	8007a12 <KeyExpansion+0x142>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800799a:	2117      	movs	r1, #23
 800799c:	187b      	adds	r3, r7, r1
 800799e:	200c      	movs	r0, #12
 80079a0:	183a      	adds	r2, r7, r0
 80079a2:	7812      	ldrb	r2, [r2, #0]
 80079a4:	701a      	strb	r2, [r3, #0]
        tempa[0] = tempa[1];
 80079a6:	183b      	adds	r3, r7, r0
 80079a8:	785a      	ldrb	r2, [r3, #1]
 80079aa:	183b      	adds	r3, r7, r0
 80079ac:	701a      	strb	r2, [r3, #0]
        tempa[1] = tempa[2];
 80079ae:	183b      	adds	r3, r7, r0
 80079b0:	789a      	ldrb	r2, [r3, #2]
 80079b2:	183b      	adds	r3, r7, r0
 80079b4:	705a      	strb	r2, [r3, #1]
        tempa[2] = tempa[3];
 80079b6:	183b      	adds	r3, r7, r0
 80079b8:	78da      	ldrb	r2, [r3, #3]
 80079ba:	183b      	adds	r3, r7, r0
 80079bc:	709a      	strb	r2, [r3, #2]
        tempa[3] = u8tmp;
 80079be:	183b      	adds	r3, r7, r0
 80079c0:	187a      	adds	r2, r7, r1
 80079c2:	7812      	ldrb	r2, [r2, #0]
 80079c4:	70da      	strb	r2, [r3, #3]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 80079c6:	183b      	adds	r3, r7, r0
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	001a      	movs	r2, r3
 80079cc:	4b37      	ldr	r3, [pc, #220]	; (8007aac <KeyExpansion+0x1dc>)
 80079ce:	5c9a      	ldrb	r2, [r3, r2]
 80079d0:	183b      	adds	r3, r7, r0
 80079d2:	701a      	strb	r2, [r3, #0]
        tempa[1] = getSBoxValue(tempa[1]);
 80079d4:	183b      	adds	r3, r7, r0
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	001a      	movs	r2, r3
 80079da:	4b34      	ldr	r3, [pc, #208]	; (8007aac <KeyExpansion+0x1dc>)
 80079dc:	5c9a      	ldrb	r2, [r3, r2]
 80079de:	183b      	adds	r3, r7, r0
 80079e0:	705a      	strb	r2, [r3, #1]
        tempa[2] = getSBoxValue(tempa[2]);
 80079e2:	183b      	adds	r3, r7, r0
 80079e4:	789b      	ldrb	r3, [r3, #2]
 80079e6:	001a      	movs	r2, r3
 80079e8:	4b30      	ldr	r3, [pc, #192]	; (8007aac <KeyExpansion+0x1dc>)
 80079ea:	5c9a      	ldrb	r2, [r3, r2]
 80079ec:	183b      	adds	r3, r7, r0
 80079ee:	709a      	strb	r2, [r3, #2]
        tempa[3] = getSBoxValue(tempa[3]);
 80079f0:	183b      	adds	r3, r7, r0
 80079f2:	78db      	ldrb	r3, [r3, #3]
 80079f4:	001a      	movs	r2, r3
 80079f6:	4b2d      	ldr	r3, [pc, #180]	; (8007aac <KeyExpansion+0x1dc>)
 80079f8:	5c9a      	ldrb	r2, [r3, r2]
 80079fa:	183b      	adds	r3, r7, r0
 80079fc:	70da      	strb	r2, [r3, #3]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 80079fe:	183b      	adds	r3, r7, r0
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	089b      	lsrs	r3, r3, #2
 8007a06:	492a      	ldr	r1, [pc, #168]	; (8007ab0 <KeyExpansion+0x1e0>)
 8007a08:	5ccb      	ldrb	r3, [r1, r3]
 8007a0a:	4053      	eors	r3, r2
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	183b      	adds	r3, r7, r0
 8007a10:	701a      	strb	r2, [r3, #0]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4a26      	ldr	r2, [pc, #152]	; (8007ab4 <KeyExpansion+0x1e4>)
 8007a1c:	4694      	mov	ip, r2
 8007a1e:	4463      	add	r3, ip
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	18d3      	adds	r3, r2, r3
 8007a2a:	7819      	ldrb	r1, [r3, #0]
 8007a2c:	240c      	movs	r4, #12
 8007a2e:	193b      	adds	r3, r7, r4
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	18c3      	adds	r3, r0, r3
 8007a38:	404a      	eors	r2, r1
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	3301      	adds	r3, #1
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	18d3      	adds	r3, r2, r3
 8007a46:	7819      	ldrb	r1, [r3, #0]
 8007a48:	193b      	adds	r3, r7, r4
 8007a4a:	785a      	ldrb	r2, [r3, #1]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	18c3      	adds	r3, r0, r3
 8007a54:	404a      	eors	r2, r1
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	3302      	adds	r3, #2
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	18d3      	adds	r3, r2, r3
 8007a62:	7819      	ldrb	r1, [r3, #0]
 8007a64:	193b      	adds	r3, r7, r4
 8007a66:	789a      	ldrb	r2, [r3, #2]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	18c3      	adds	r3, r0, r3
 8007a70:	404a      	eors	r2, r1
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	3303      	adds	r3, #3
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	18d3      	adds	r3, r2, r3
 8007a7e:	7819      	ldrb	r1, [r3, #0]
 8007a80:	193b      	adds	r3, r7, r4
 8007a82:	78da      	ldrb	r2, [r3, #3]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	3303      	adds	r3, #3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	18c3      	adds	r3, r0, r3
 8007a8c:	404a      	eors	r2, r1
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	3301      	adds	r3, #1
 8007a96:	61fb      	str	r3, [r7, #28]
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	2b2b      	cmp	r3, #43	; 0x2b
 8007a9c:	d800      	bhi.n	8007aa0 <KeyExpansion+0x1d0>
 8007a9e:	e756      	b.n	800794e <KeyExpansion+0x7e>
  }
}
 8007aa0:	46c0      	nop			; (mov r8, r8)
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b009      	add	sp, #36	; 0x24
 8007aa6:	bd90      	pop	{r4, r7, pc}
 8007aa8:	3fffffff 	.word	0x3fffffff
 8007aac:	0800ce74 	.word	0x0800ce74
 8007ab0:	0800d074 	.word	0x0800d074
 8007ab4:	3ffffffc 	.word	0x3ffffffc

08007ab8 <tiny_AES_init_ctx>:

void tiny_AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	0011      	movs	r1, r2
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f7ff ff01 	bl	80078d0 <KeyExpansion>
}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	b002      	add	sp, #8
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 8007ad6:	b5b0      	push	{r4, r5, r7, lr}
 8007ad8:	b086      	sub	sp, #24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	230f      	movs	r3, #15
 8007ae2:	18fb      	adds	r3, r7, r3
 8007ae4:	1c02      	adds	r2, r0, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8007ae8:	2317      	movs	r3, #23
 8007aea:	18fb      	adds	r3, r7, r3
 8007aec:	2200      	movs	r2, #0
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	e038      	b.n	8007b64 <AddRoundKey+0x8e>
  {
    for (j = 0; j < 4; ++j)
 8007af2:	2316      	movs	r3, #22
 8007af4:	18fb      	adds	r3, r7, r3
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	e028      	b.n	8007b4e <AddRoundKey+0x78>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8007afc:	2517      	movs	r5, #23
 8007afe:	197b      	adds	r3, r7, r5
 8007b00:	781a      	ldrb	r2, [r3, #0]
 8007b02:	2416      	movs	r4, #22
 8007b04:	193b      	adds	r3, r7, r4
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	68b9      	ldr	r1, [r7, #8]
 8007b0a:	0092      	lsls	r2, r2, #2
 8007b0c:	188a      	adds	r2, r1, r2
 8007b0e:	5cd0      	ldrb	r0, [r2, r3]
 8007b10:	230f      	movs	r3, #15
 8007b12:	18fb      	adds	r3, r7, r3
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009a      	lsls	r2, r3, #2
 8007b18:	197b      	adds	r3, r7, r5
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	18d3      	adds	r3, r2, r3
 8007b1e:	009a      	lsls	r2, r3, #2
 8007b20:	193b      	adds	r3, r7, r4
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	18d3      	adds	r3, r2, r3
 8007b26:	001a      	movs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	189b      	adds	r3, r3, r2
 8007b2c:	7819      	ldrb	r1, [r3, #0]
 8007b2e:	197b      	adds	r3, r7, r5
 8007b30:	781a      	ldrb	r2, [r3, #0]
 8007b32:	193b      	adds	r3, r7, r4
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	4041      	eors	r1, r0
 8007b38:	b2c8      	uxtb	r0, r1
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	0092      	lsls	r2, r2, #2
 8007b3e:	188a      	adds	r2, r1, r2
 8007b40:	1c01      	adds	r1, r0, #0
 8007b42:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8007b44:	193b      	adds	r3, r7, r4
 8007b46:	193a      	adds	r2, r7, r4
 8007b48:	7812      	ldrb	r2, [r2, #0]
 8007b4a:	3201      	adds	r2, #1
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	2316      	movs	r3, #22
 8007b50:	18fb      	adds	r3, r7, r3
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d9d1      	bls.n	8007afc <AddRoundKey+0x26>
  for (i = 0; i < 4; ++i)
 8007b58:	2217      	movs	r2, #23
 8007b5a:	18bb      	adds	r3, r7, r2
 8007b5c:	18ba      	adds	r2, r7, r2
 8007b5e:	7812      	ldrb	r2, [r2, #0]
 8007b60:	3201      	adds	r2, #1
 8007b62:	701a      	strb	r2, [r3, #0]
 8007b64:	2317      	movs	r3, #23
 8007b66:	18fb      	adds	r3, r7, r3
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d9c1      	bls.n	8007af2 <AddRoundKey+0x1c>
    }
  }
}
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	46bd      	mov	sp, r7
 8007b72:	b006      	add	sp, #24
 8007b74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b78 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8007b78:	b5b0      	push	{r4, r5, r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8007b80:	230f      	movs	r3, #15
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	e02a      	b.n	8007be0 <SubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 8007b8a:	230e      	movs	r3, #14
 8007b8c:	18fb      	adds	r3, r7, r3
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e01a      	b.n	8007bca <SubBytes+0x52>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8007b94:	240e      	movs	r4, #14
 8007b96:	193b      	adds	r3, r7, r4
 8007b98:	781a      	ldrb	r2, [r3, #0]
 8007b9a:	250f      	movs	r5, #15
 8007b9c:	197b      	adds	r3, r7, r5
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	0092      	lsls	r2, r2, #2
 8007ba4:	188a      	adds	r2, r1, r2
 8007ba6:	5cd3      	ldrb	r3, [r2, r3]
 8007ba8:	0018      	movs	r0, r3
 8007baa:	193b      	adds	r3, r7, r4
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	197b      	adds	r3, r7, r5
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4910      	ldr	r1, [pc, #64]	; (8007bf4 <SubBytes+0x7c>)
 8007bb4:	5c08      	ldrb	r0, [r1, r0]
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	0092      	lsls	r2, r2, #2
 8007bba:	188a      	adds	r2, r1, r2
 8007bbc:	1c01      	adds	r1, r0, #0
 8007bbe:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 8007bc0:	193b      	adds	r3, r7, r4
 8007bc2:	193a      	adds	r2, r7, r4
 8007bc4:	7812      	ldrb	r2, [r2, #0]
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	230e      	movs	r3, #14
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d9df      	bls.n	8007b94 <SubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 8007bd4:	220f      	movs	r2, #15
 8007bd6:	18bb      	adds	r3, r7, r2
 8007bd8:	18ba      	adds	r2, r7, r2
 8007bda:	7812      	ldrb	r2, [r2, #0]
 8007bdc:	3201      	adds	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	230f      	movs	r3, #15
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d9cf      	bls.n	8007b8a <SubBytes+0x12>
    }
  }
}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	46bd      	mov	sp, r7
 8007bee:	b004      	add	sp, #16
 8007bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	0800ce74 	.word	0x0800ce74

08007bf8 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8007c00:	210f      	movs	r1, #15
 8007c02:	187b      	adds	r3, r7, r1
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7852      	ldrb	r2, [r2, #1]
 8007c08:	701a      	strb	r2, [r3, #0]
  (*state)[0][1] = (*state)[1][1];
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	795a      	ldrb	r2, [r3, #5]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7a5a      	ldrb	r2, [r3, #9]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	7b5a      	ldrb	r2, [r3, #13]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	187a      	adds	r2, r7, r1
 8007c26:	7812      	ldrb	r2, [r2, #0]
 8007c28:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 8007c2a:	187b      	adds	r3, r7, r1
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7892      	ldrb	r2, [r2, #2]
 8007c30:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	7a9a      	ldrb	r2, [r3, #10]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	187a      	adds	r2, r7, r1
 8007c3e:	7812      	ldrb	r2, [r2, #0]
 8007c40:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8007c42:	187b      	adds	r3, r7, r1
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7992      	ldrb	r2, [r2, #6]
 8007c48:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7b9a      	ldrb	r2, [r3, #14]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	187a      	adds	r2, r7, r1
 8007c56:	7812      	ldrb	r2, [r2, #0]
 8007c58:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8007c5a:	187b      	adds	r3, r7, r1
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	78d2      	ldrb	r2, [r2, #3]
 8007c60:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[3][3];
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7bda      	ldrb	r2, [r3, #15]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	7ada      	ldrb	r2, [r3, #11]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	79da      	ldrb	r2, [r3, #7]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	187a      	adds	r2, r7, r1
 8007c7e:	7812      	ldrb	r2, [r2, #0]
 8007c80:	71da      	strb	r2, [r3, #7]
}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	46bd      	mov	sp, r7
 8007c86:	b004      	add	sp, #16
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <xtime>:

static uint8_t xtime(uint8_t x)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	0002      	movs	r2, r0
 8007c92:	1dfb      	adds	r3, r7, #7
 8007c94:	701a      	strb	r2, [r3, #0]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8007c96:	1dfb      	adds	r3, r7, #7
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	b25a      	sxtb	r2, r3
 8007c9e:	1dfb      	adds	r3, r7, #7
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	09db      	lsrs	r3, r3, #7
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	1c19      	adds	r1, r3, #0
 8007ca8:	1c0b      	adds	r3, r1, #0
 8007caa:	18db      	adds	r3, r3, r3
 8007cac:	185b      	adds	r3, r3, r1
 8007cae:	1c19      	adds	r1, r3, #0
 8007cb0:	00c8      	lsls	r0, r1, #3
 8007cb2:	1c19      	adds	r1, r3, #0
 8007cb4:	1c03      	adds	r3, r0, #0
 8007cb6:	18cb      	adds	r3, r1, r3
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	b25b      	sxtb	r3, r3
 8007cbc:	4053      	eors	r3, r2
 8007cbe:	b25b      	sxtb	r3, r3
 8007cc0:	b2db      	uxtb	r3, r3
}
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	b002      	add	sp, #8
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8007cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8007cd2:	230f      	movs	r3, #15
 8007cd4:	18fb      	adds	r3, r7, r3
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e0f0      	b.n	8007ebe <MixColumns+0x1f4>
  {
    t   = (*state)[i][0];
 8007cdc:	250f      	movs	r5, #15
 8007cde:	197b      	adds	r3, r7, r5
 8007ce0:	7819      	ldrb	r1, [r3, #0]
 8007ce2:	230e      	movs	r3, #14
 8007ce4:	18fb      	adds	r3, r7, r3
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	0089      	lsls	r1, r1, #2
 8007cea:	5c8a      	ldrb	r2, [r1, r2]
 8007cec:	701a      	strb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8007cee:	197b      	adds	r3, r7, r5
 8007cf0:	781a      	ldrb	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	0092      	lsls	r2, r2, #2
 8007cf6:	5cd2      	ldrb	r2, [r2, r3]
 8007cf8:	197b      	adds	r3, r7, r5
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	18cb      	adds	r3, r1, r3
 8007d02:	3301      	adds	r3, #1
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	4053      	eors	r3, r2
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	197b      	adds	r3, r7, r5
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	18cb      	adds	r3, r1, r3
 8007d14:	3302      	adds	r3, #2
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	4053      	eors	r3, r2
 8007d1a:	b2d9      	uxtb	r1, r3
 8007d1c:	197b      	adds	r3, r7, r5
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	18d3      	adds	r3, r2, r3
 8007d26:	3303      	adds	r3, #3
 8007d28:	781a      	ldrb	r2, [r3, #0]
 8007d2a:	230d      	movs	r3, #13
 8007d2c:	18fb      	adds	r3, r7, r3
 8007d2e:	404a      	eors	r2, r1
 8007d30:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8007d32:	197b      	adds	r3, r7, r5
 8007d34:	781a      	ldrb	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	0092      	lsls	r2, r2, #2
 8007d3a:	5cd1      	ldrb	r1, [r2, r3]
 8007d3c:	197b      	adds	r3, r7, r5
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	18d3      	adds	r3, r2, r3
 8007d46:	3301      	adds	r3, #1
 8007d48:	781a      	ldrb	r2, [r3, #0]
 8007d4a:	200c      	movs	r0, #12
 8007d4c:	183b      	adds	r3, r7, r0
 8007d4e:	404a      	eors	r2, r1
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	183c      	adds	r4, r7, r0
 8007d54:	0006      	movs	r6, r0
 8007d56:	183b      	adds	r3, r7, r0
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f7ff ff95 	bl	8007c8a <xtime>
 8007d60:	0003      	movs	r3, r0
 8007d62:	7023      	strb	r3, [r4, #0]
 8007d64:	197b      	adds	r3, r7, r5
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	0092      	lsls	r2, r2, #2
 8007d6c:	5cd1      	ldrb	r1, [r2, r3]
 8007d6e:	0030      	movs	r0, r6
 8007d70:	183a      	adds	r2, r7, r0
 8007d72:	230d      	movs	r3, #13
 8007d74:	18fb      	adds	r3, r7, r3
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	4053      	eors	r3, r2
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	197a      	adds	r2, r7, r5
 8007d80:	7812      	ldrb	r2, [r2, #0]
 8007d82:	404b      	eors	r3, r1
 8007d84:	b2d9      	uxtb	r1, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	0092      	lsls	r2, r2, #2
 8007d8a:	54d1      	strb	r1, [r2, r3]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8007d8c:	197b      	adds	r3, r7, r5
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	18d3      	adds	r3, r2, r3
 8007d96:	3301      	adds	r3, #1
 8007d98:	7819      	ldrb	r1, [r3, #0]
 8007d9a:	197b      	adds	r3, r7, r5
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	18d3      	adds	r3, r2, r3
 8007da4:	3302      	adds	r3, #2
 8007da6:	781a      	ldrb	r2, [r3, #0]
 8007da8:	183b      	adds	r3, r7, r0
 8007daa:	404a      	eors	r2, r1
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	183c      	adds	r4, r7, r0
 8007db0:	0006      	movs	r6, r0
 8007db2:	183b      	adds	r3, r7, r0
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7ff ff67 	bl	8007c8a <xtime>
 8007dbc:	0003      	movs	r3, r0
 8007dbe:	7023      	strb	r3, [r4, #0]
 8007dc0:	197b      	adds	r3, r7, r5
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	18d3      	adds	r3, r2, r3
 8007dca:	3301      	adds	r3, #1
 8007dcc:	7819      	ldrb	r1, [r3, #0]
 8007dce:	0030      	movs	r0, r6
 8007dd0:	183a      	adds	r2, r7, r0
 8007dd2:	230d      	movs	r3, #13
 8007dd4:	18fb      	adds	r3, r7, r3
 8007dd6:	7812      	ldrb	r2, [r2, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	4053      	eors	r3, r2
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	197b      	adds	r3, r7, r5
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	404a      	eors	r2, r1
 8007de4:	b2d1      	uxtb	r1, r2
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	18d3      	adds	r3, r2, r3
 8007dec:	3301      	adds	r3, #1
 8007dee:	1c0a      	adds	r2, r1, #0
 8007df0:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8007df2:	197b      	adds	r3, r7, r5
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	18d3      	adds	r3, r2, r3
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	7819      	ldrb	r1, [r3, #0]
 8007e00:	197b      	adds	r3, r7, r5
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	18d3      	adds	r3, r2, r3
 8007e0a:	3303      	adds	r3, #3
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	183b      	adds	r3, r7, r0
 8007e10:	404a      	eors	r2, r1
 8007e12:	701a      	strb	r2, [r3, #0]
 8007e14:	183c      	adds	r4, r7, r0
 8007e16:	0006      	movs	r6, r0
 8007e18:	183b      	adds	r3, r7, r0
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	f7ff ff34 	bl	8007c8a <xtime>
 8007e22:	0003      	movs	r3, r0
 8007e24:	7023      	strb	r3, [r4, #0]
 8007e26:	197b      	adds	r3, r7, r5
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	18d3      	adds	r3, r2, r3
 8007e30:	3302      	adds	r3, #2
 8007e32:	7819      	ldrb	r1, [r3, #0]
 8007e34:	0030      	movs	r0, r6
 8007e36:	183a      	adds	r2, r7, r0
 8007e38:	230d      	movs	r3, #13
 8007e3a:	18fb      	adds	r3, r7, r3
 8007e3c:	7812      	ldrb	r2, [r2, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	4053      	eors	r3, r2
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	197b      	adds	r3, r7, r5
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	404a      	eors	r2, r1
 8007e4a:	b2d1      	uxtb	r1, r2
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	18d3      	adds	r3, r2, r3
 8007e52:	3302      	adds	r3, #2
 8007e54:	1c0a      	adds	r2, r1, #0
 8007e56:	701a      	strb	r2, [r3, #0]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8007e58:	197b      	adds	r3, r7, r5
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	18d3      	adds	r3, r2, r3
 8007e62:	3303      	adds	r3, #3
 8007e64:	7819      	ldrb	r1, [r3, #0]
 8007e66:	183b      	adds	r3, r7, r0
 8007e68:	220e      	movs	r2, #14
 8007e6a:	18ba      	adds	r2, r7, r2
 8007e6c:	7812      	ldrb	r2, [r2, #0]
 8007e6e:	404a      	eors	r2, r1
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	183c      	adds	r4, r7, r0
 8007e74:	0006      	movs	r6, r0
 8007e76:	183b      	adds	r3, r7, r0
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f7ff ff05 	bl	8007c8a <xtime>
 8007e80:	0003      	movs	r3, r0
 8007e82:	7023      	strb	r3, [r4, #0]
 8007e84:	197b      	adds	r3, r7, r5
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	18d3      	adds	r3, r2, r3
 8007e8e:	3303      	adds	r3, #3
 8007e90:	7819      	ldrb	r1, [r3, #0]
 8007e92:	19ba      	adds	r2, r7, r6
 8007e94:	230d      	movs	r3, #13
 8007e96:	18fb      	adds	r3, r7, r3
 8007e98:	7812      	ldrb	r2, [r2, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	4053      	eors	r3, r2
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	197b      	adds	r3, r7, r5
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	404a      	eors	r2, r1
 8007ea6:	b2d1      	uxtb	r1, r2
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	18d3      	adds	r3, r2, r3
 8007eae:	3303      	adds	r3, #3
 8007eb0:	1c0a      	adds	r2, r1, #0
 8007eb2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8007eb4:	197b      	adds	r3, r7, r5
 8007eb6:	197a      	adds	r2, r7, r5
 8007eb8:	7812      	ldrb	r2, [r2, #0]
 8007eba:	3201      	adds	r2, #1
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	230f      	movs	r3, #15
 8007ec0:	18fb      	adds	r3, r7, r3
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d800      	bhi.n	8007eca <MixColumns+0x200>
 8007ec8:	e708      	b.n	8007cdc <MixColumns+0x12>
  }
}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b005      	add	sp, #20
 8007ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ed2 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8007ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e3c3      	b.n	8008668 <InvMixColumns+0x796>
  {
    a = (*state)[i][0];
 8007ee0:	260b      	movs	r6, #11
 8007ee2:	19bb      	adds	r3, r7, r6
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	68f9      	ldr	r1, [r7, #12]
 8007ee8:	0089      	lsls	r1, r1, #2
 8007eea:	5c8a      	ldrb	r2, [r1, r2]
 8007eec:	701a      	strb	r2, [r3, #0]
    b = (*state)[i][1];
 8007eee:	250a      	movs	r5, #10
 8007ef0:	197b      	adds	r3, r7, r5
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	0092      	lsls	r2, r2, #2
 8007ef8:	188a      	adds	r2, r1, r2
 8007efa:	3201      	adds	r2, #1
 8007efc:	7812      	ldrb	r2, [r2, #0]
 8007efe:	701a      	strb	r2, [r3, #0]
    c = (*state)[i][2];
 8007f00:	2409      	movs	r4, #9
 8007f02:	193b      	adds	r3, r7, r4
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	0092      	lsls	r2, r2, #2
 8007f0a:	188a      	adds	r2, r1, r2
 8007f0c:	3202      	adds	r2, #2
 8007f0e:	7812      	ldrb	r2, [r2, #0]
 8007f10:	701a      	strb	r2, [r3, #0]
    d = (*state)[i][3];
 8007f12:	2308      	movs	r3, #8
 8007f14:	18fb      	adds	r3, r7, r3
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	0092      	lsls	r2, r2, #2
 8007f1c:	188a      	adds	r2, r1, r2
 8007f1e:	3203      	adds	r2, #3
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	701a      	strb	r2, [r3, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8007f24:	19bb      	adds	r3, r7, r6
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f7ff feae 	bl	8007c8a <xtime>
 8007f2e:	0003      	movs	r3, r0
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7ff feaa 	bl	8007c8a <xtime>
 8007f36:	0003      	movs	r3, r0
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f7ff fea6 	bl	8007c8a <xtime>
 8007f3e:	0003      	movs	r3, r0
 8007f40:	0018      	movs	r0, r3
 8007f42:	f7ff fea2 	bl	8007c8a <xtime>
 8007f46:	197b      	adds	r3, r7, r5
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	0018      	movs	r0, r3
 8007f4c:	f7ff fe9d 	bl	8007c8a <xtime>
 8007f50:	0003      	movs	r3, r0
 8007f52:	0018      	movs	r0, r3
 8007f54:	f7ff fe99 	bl	8007c8a <xtime>
 8007f58:	197b      	adds	r3, r7, r5
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f7ff fe94 	bl	8007c8a <xtime>
 8007f62:	0003      	movs	r3, r0
 8007f64:	0018      	movs	r0, r3
 8007f66:	f7ff fe90 	bl	8007c8a <xtime>
 8007f6a:	0003      	movs	r3, r0
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	f7ff fe8c 	bl	8007c8a <xtime>
 8007f72:	0003      	movs	r3, r0
 8007f74:	0018      	movs	r0, r3
 8007f76:	f7ff fe88 	bl	8007c8a <xtime>
 8007f7a:	193b      	adds	r3, r7, r4
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f7ff fe83 	bl	8007c8a <xtime>
 8007f84:	193b      	adds	r3, r7, r4
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	0018      	movs	r0, r3
 8007f8a:	f7ff fe7e 	bl	8007c8a <xtime>
 8007f8e:	0003      	movs	r3, r0
 8007f90:	0018      	movs	r0, r3
 8007f92:	f7ff fe7a 	bl	8007c8a <xtime>
 8007f96:	0003      	movs	r3, r0
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f7ff fe76 	bl	8007c8a <xtime>
 8007f9e:	0003      	movs	r3, r0
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f7ff fe72 	bl	8007c8a <xtime>
 8007fa6:	2308      	movs	r3, #8
 8007fa8:	001c      	movs	r4, r3
 8007faa:	18fb      	adds	r3, r7, r3
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	0018      	movs	r0, r3
 8007fb0:	f7ff fe6b 	bl	8007c8a <xtime>
 8007fb4:	0023      	movs	r3, r4
 8007fb6:	001c      	movs	r4, r3
 8007fb8:	18fb      	adds	r3, r7, r3
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	f7ff fe64 	bl	8007c8a <xtime>
 8007fc2:	0003      	movs	r3, r0
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f7ff fe60 	bl	8007c8a <xtime>
 8007fca:	0023      	movs	r3, r4
 8007fcc:	18fb      	adds	r3, r7, r3
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f7ff fe5a 	bl	8007c8a <xtime>
 8007fd6:	0003      	movs	r3, r0
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f7ff fe56 	bl	8007c8a <xtime>
 8007fde:	0003      	movs	r3, r0
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f7ff fe52 	bl	8007c8a <xtime>
 8007fe6:	0003      	movs	r3, r0
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f7ff fe4e 	bl	8007c8a <xtime>
 8007fee:	19bb      	adds	r3, r7, r6
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	f7ff fe49 	bl	8007c8a <xtime>
 8007ff8:	0003      	movs	r3, r0
 8007ffa:	001c      	movs	r4, r3
 8007ffc:	19bb      	adds	r3, r7, r6
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	0018      	movs	r0, r3
 8008002:	f7ff fe42 	bl	8007c8a <xtime>
 8008006:	0003      	movs	r3, r0
 8008008:	0018      	movs	r0, r3
 800800a:	f7ff fe3e 	bl	8007c8a <xtime>
 800800e:	0003      	movs	r3, r0
 8008010:	4063      	eors	r3, r4
 8008012:	b2dc      	uxtb	r4, r3
 8008014:	19bb      	adds	r3, r7, r6
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	0018      	movs	r0, r3
 800801a:	f7ff fe36 	bl	8007c8a <xtime>
 800801e:	0003      	movs	r3, r0
 8008020:	0018      	movs	r0, r3
 8008022:	f7ff fe32 	bl	8007c8a <xtime>
 8008026:	0003      	movs	r3, r0
 8008028:	0018      	movs	r0, r3
 800802a:	f7ff fe2e 	bl	8007c8a <xtime>
 800802e:	0003      	movs	r3, r0
 8008030:	4063      	eors	r3, r4
 8008032:	b2dc      	uxtb	r4, r3
 8008034:	197b      	adds	r3, r7, r5
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	0018      	movs	r0, r3
 800803a:	f7ff fe26 	bl	8007c8a <xtime>
 800803e:	0003      	movs	r3, r0
 8008040:	001a      	movs	r2, r3
 8008042:	0029      	movs	r1, r5
 8008044:	197b      	adds	r3, r7, r5
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	4053      	eors	r3, r2
 800804a:	b2dd      	uxtb	r5, r3
 800804c:	187b      	adds	r3, r7, r1
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	0018      	movs	r0, r3
 8008052:	f7ff fe1a 	bl	8007c8a <xtime>
 8008056:	0003      	movs	r3, r0
 8008058:	0018      	movs	r0, r3
 800805a:	f7ff fe16 	bl	8007c8a <xtime>
 800805e:	0003      	movs	r3, r0
 8008060:	0018      	movs	r0, r3
 8008062:	f7ff fe12 	bl	8007c8a <xtime>
 8008066:	0003      	movs	r3, r0
 8008068:	406b      	eors	r3, r5
 800806a:	b2db      	uxtb	r3, r3
 800806c:	4063      	eors	r3, r4
 800806e:	b2dc      	uxtb	r4, r3
 8008070:	2309      	movs	r3, #9
 8008072:	001d      	movs	r5, r3
 8008074:	18fb      	adds	r3, r7, r3
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	0018      	movs	r0, r3
 800807a:	f7ff fe06 	bl	8007c8a <xtime>
 800807e:	0003      	movs	r3, r0
 8008080:	0018      	movs	r0, r3
 8008082:	f7ff fe02 	bl	8007c8a <xtime>
 8008086:	0003      	movs	r3, r0
 8008088:	001a      	movs	r2, r3
 800808a:	002b      	movs	r3, r5
 800808c:	0018      	movs	r0, r3
 800808e:	18fb      	adds	r3, r7, r3
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	4053      	eors	r3, r2
 8008094:	b2dd      	uxtb	r5, r3
 8008096:	0003      	movs	r3, r0
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	0018      	movs	r0, r3
 800809e:	f7ff fdf4 	bl	8007c8a <xtime>
 80080a2:	0003      	movs	r3, r0
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7ff fdf0 	bl	8007c8a <xtime>
 80080aa:	0003      	movs	r3, r0
 80080ac:	0018      	movs	r0, r3
 80080ae:	f7ff fdec 	bl	8007c8a <xtime>
 80080b2:	0003      	movs	r3, r0
 80080b4:	406b      	eors	r3, r5
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	4063      	eors	r3, r4
 80080ba:	b2dc      	uxtb	r4, r3
 80080bc:	2308      	movs	r3, #8
 80080be:	001d      	movs	r5, r3
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7ff fde0 	bl	8007c8a <xtime>
 80080ca:	0003      	movs	r3, r0
 80080cc:	0018      	movs	r0, r3
 80080ce:	f7ff fddc 	bl	8007c8a <xtime>
 80080d2:	0003      	movs	r3, r0
 80080d4:	0018      	movs	r0, r3
 80080d6:	f7ff fdd8 	bl	8007c8a <xtime>
 80080da:	0003      	movs	r3, r0
 80080dc:	001a      	movs	r2, r3
 80080de:	002b      	movs	r3, r5
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	4053      	eors	r3, r2
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	4063      	eors	r3, r4
 80080ea:	b2d9      	uxtb	r1, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	0092      	lsls	r2, r2, #2
 80080f2:	54d1      	strb	r1, [r2, r3]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80080f4:	19bb      	adds	r3, r7, r6
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	0018      	movs	r0, r3
 80080fa:	f7ff fdc6 	bl	8007c8a <xtime>
 80080fe:	19bb      	adds	r3, r7, r6
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	0018      	movs	r0, r3
 8008104:	f7ff fdc1 	bl	8007c8a <xtime>
 8008108:	0003      	movs	r3, r0
 800810a:	0018      	movs	r0, r3
 800810c:	f7ff fdbd 	bl	8007c8a <xtime>
 8008110:	19bb      	adds	r3, r7, r6
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	0018      	movs	r0, r3
 8008116:	f7ff fdb8 	bl	8007c8a <xtime>
 800811a:	0003      	movs	r3, r0
 800811c:	0018      	movs	r0, r3
 800811e:	f7ff fdb4 	bl	8007c8a <xtime>
 8008122:	0003      	movs	r3, r0
 8008124:	0018      	movs	r0, r3
 8008126:	f7ff fdb0 	bl	8007c8a <xtime>
 800812a:	0003      	movs	r3, r0
 800812c:	0018      	movs	r0, r3
 800812e:	f7ff fdac 	bl	8007c8a <xtime>
 8008132:	210a      	movs	r1, #10
 8008134:	000d      	movs	r5, r1
 8008136:	187b      	adds	r3, r7, r1
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	0018      	movs	r0, r3
 800813c:	f7ff fda5 	bl	8007c8a <xtime>
 8008140:	0003      	movs	r3, r0
 8008142:	0018      	movs	r0, r3
 8008144:	f7ff fda1 	bl	8007c8a <xtime>
 8008148:	0003      	movs	r3, r0
 800814a:	0018      	movs	r0, r3
 800814c:	f7ff fd9d 	bl	8007c8a <xtime>
 8008150:	0003      	movs	r3, r0
 8008152:	0018      	movs	r0, r3
 8008154:	f7ff fd99 	bl	8007c8a <xtime>
 8008158:	2409      	movs	r4, #9
 800815a:	193b      	adds	r3, r7, r4
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	0018      	movs	r0, r3
 8008160:	f7ff fd93 	bl	8007c8a <xtime>
 8008164:	0003      	movs	r3, r0
 8008166:	0018      	movs	r0, r3
 8008168:	f7ff fd8f 	bl	8007c8a <xtime>
 800816c:	193b      	adds	r3, r7, r4
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	0018      	movs	r0, r3
 8008172:	f7ff fd8a 	bl	8007c8a <xtime>
 8008176:	0003      	movs	r3, r0
 8008178:	0018      	movs	r0, r3
 800817a:	f7ff fd86 	bl	8007c8a <xtime>
 800817e:	0003      	movs	r3, r0
 8008180:	0018      	movs	r0, r3
 8008182:	f7ff fd82 	bl	8007c8a <xtime>
 8008186:	0003      	movs	r3, r0
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff fd7e 	bl	8007c8a <xtime>
 800818e:	2308      	movs	r3, #8
 8008190:	001c      	movs	r4, r3
 8008192:	18fb      	adds	r3, r7, r3
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	0018      	movs	r0, r3
 8008198:	f7ff fd77 	bl	8007c8a <xtime>
 800819c:	0023      	movs	r3, r4
 800819e:	18fb      	adds	r3, r7, r3
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	0018      	movs	r0, r3
 80081a4:	f7ff fd71 	bl	8007c8a <xtime>
 80081a8:	0003      	movs	r3, r0
 80081aa:	0018      	movs	r0, r3
 80081ac:	f7ff fd6d 	bl	8007c8a <xtime>
 80081b0:	0003      	movs	r3, r0
 80081b2:	0018      	movs	r0, r3
 80081b4:	f7ff fd69 	bl	8007c8a <xtime>
 80081b8:	0003      	movs	r3, r0
 80081ba:	0018      	movs	r0, r3
 80081bc:	f7ff fd65 	bl	8007c8a <xtime>
 80081c0:	19bb      	adds	r3, r7, r6
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	0018      	movs	r0, r3
 80081c6:	f7ff fd60 	bl	8007c8a <xtime>
 80081ca:	0003      	movs	r3, r0
 80081cc:	0018      	movs	r0, r3
 80081ce:	f7ff fd5c 	bl	8007c8a <xtime>
 80081d2:	0003      	movs	r3, r0
 80081d4:	0018      	movs	r0, r3
 80081d6:	f7ff fd58 	bl	8007c8a <xtime>
 80081da:	0003      	movs	r3, r0
 80081dc:	001a      	movs	r2, r3
 80081de:	19bb      	adds	r3, r7, r6
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	4053      	eors	r3, r2
 80081e4:	b2dc      	uxtb	r4, r3
 80081e6:	197b      	adds	r3, r7, r5
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	0018      	movs	r0, r3
 80081ec:	f7ff fd4d 	bl	8007c8a <xtime>
 80081f0:	0003      	movs	r3, r0
 80081f2:	001d      	movs	r5, r3
 80081f4:	230a      	movs	r3, #10
 80081f6:	18fb      	adds	r3, r7, r3
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	0018      	movs	r0, r3
 80081fc:	f7ff fd45 	bl	8007c8a <xtime>
 8008200:	0003      	movs	r3, r0
 8008202:	0018      	movs	r0, r3
 8008204:	f7ff fd41 	bl	8007c8a <xtime>
 8008208:	0003      	movs	r3, r0
 800820a:	406b      	eors	r3, r5
 800820c:	b2dd      	uxtb	r5, r3
 800820e:	230a      	movs	r3, #10
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	0018      	movs	r0, r3
 8008216:	f7ff fd38 	bl	8007c8a <xtime>
 800821a:	0003      	movs	r3, r0
 800821c:	0018      	movs	r0, r3
 800821e:	f7ff fd34 	bl	8007c8a <xtime>
 8008222:	0003      	movs	r3, r0
 8008224:	0018      	movs	r0, r3
 8008226:	f7ff fd30 	bl	8007c8a <xtime>
 800822a:	0003      	movs	r3, r0
 800822c:	406b      	eors	r3, r5
 800822e:	b2db      	uxtb	r3, r3
 8008230:	4063      	eors	r3, r4
 8008232:	b2dc      	uxtb	r4, r3
 8008234:	2209      	movs	r2, #9
 8008236:	0015      	movs	r5, r2
 8008238:	18bb      	adds	r3, r7, r2
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	0018      	movs	r0, r3
 800823e:	f7ff fd24 	bl	8007c8a <xtime>
 8008242:	0003      	movs	r3, r0
 8008244:	001a      	movs	r2, r3
 8008246:	0029      	movs	r1, r5
 8008248:	187b      	adds	r3, r7, r1
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	4053      	eors	r3, r2
 800824e:	b2dd      	uxtb	r5, r3
 8008250:	187b      	adds	r3, r7, r1
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	0018      	movs	r0, r3
 8008256:	f7ff fd18 	bl	8007c8a <xtime>
 800825a:	0003      	movs	r3, r0
 800825c:	0018      	movs	r0, r3
 800825e:	f7ff fd14 	bl	8007c8a <xtime>
 8008262:	0003      	movs	r3, r0
 8008264:	0018      	movs	r0, r3
 8008266:	f7ff fd10 	bl	8007c8a <xtime>
 800826a:	0003      	movs	r3, r0
 800826c:	406b      	eors	r3, r5
 800826e:	b2db      	uxtb	r3, r3
 8008270:	4063      	eors	r3, r4
 8008272:	b2dc      	uxtb	r4, r3
 8008274:	2208      	movs	r2, #8
 8008276:	0015      	movs	r5, r2
 8008278:	18bb      	adds	r3, r7, r2
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	0018      	movs	r0, r3
 800827e:	f7ff fd04 	bl	8007c8a <xtime>
 8008282:	0003      	movs	r3, r0
 8008284:	0018      	movs	r0, r3
 8008286:	f7ff fd00 	bl	8007c8a <xtime>
 800828a:	0003      	movs	r3, r0
 800828c:	001a      	movs	r2, r3
 800828e:	0028      	movs	r0, r5
 8008290:	183b      	adds	r3, r7, r0
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	4053      	eors	r3, r2
 8008296:	b2dd      	uxtb	r5, r3
 8008298:	0002      	movs	r2, r0
 800829a:	18bb      	adds	r3, r7, r2
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	0018      	movs	r0, r3
 80082a0:	f7ff fcf3 	bl	8007c8a <xtime>
 80082a4:	0003      	movs	r3, r0
 80082a6:	0018      	movs	r0, r3
 80082a8:	f7ff fcef 	bl	8007c8a <xtime>
 80082ac:	0003      	movs	r3, r0
 80082ae:	0018      	movs	r0, r3
 80082b0:	f7ff fceb 	bl	8007c8a <xtime>
 80082b4:	0003      	movs	r3, r0
 80082b6:	406b      	eors	r3, r5
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	4063      	eors	r3, r4
 80082bc:	b2d9      	uxtb	r1, r3
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	18d3      	adds	r3, r2, r3
 80082c6:	3301      	adds	r3, #1
 80082c8:	1c0a      	adds	r2, r1, #0
 80082ca:	701a      	strb	r2, [r3, #0]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 80082cc:	19bb      	adds	r3, r7, r6
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	0018      	movs	r0, r3
 80082d2:	f7ff fcda 	bl	8007c8a <xtime>
 80082d6:	19bb      	adds	r3, r7, r6
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	0018      	movs	r0, r3
 80082dc:	f7ff fcd5 	bl	8007c8a <xtime>
 80082e0:	0003      	movs	r3, r0
 80082e2:	0018      	movs	r0, r3
 80082e4:	f7ff fcd1 	bl	8007c8a <xtime>
 80082e8:	0003      	movs	r3, r0
 80082ea:	0018      	movs	r0, r3
 80082ec:	f7ff fccd 	bl	8007c8a <xtime>
 80082f0:	0003      	movs	r3, r0
 80082f2:	0018      	movs	r0, r3
 80082f4:	f7ff fcc9 	bl	8007c8a <xtime>
 80082f8:	250a      	movs	r5, #10
 80082fa:	197b      	adds	r3, r7, r5
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	0018      	movs	r0, r3
 8008300:	f7ff fcc3 	bl	8007c8a <xtime>
 8008304:	197b      	adds	r3, r7, r5
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	0018      	movs	r0, r3
 800830a:	f7ff fcbe 	bl	8007c8a <xtime>
 800830e:	0003      	movs	r3, r0
 8008310:	0018      	movs	r0, r3
 8008312:	f7ff fcba 	bl	8007c8a <xtime>
 8008316:	197b      	adds	r3, r7, r5
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	0018      	movs	r0, r3
 800831c:	f7ff fcb5 	bl	8007c8a <xtime>
 8008320:	0003      	movs	r3, r0
 8008322:	0018      	movs	r0, r3
 8008324:	f7ff fcb1 	bl	8007c8a <xtime>
 8008328:	0003      	movs	r3, r0
 800832a:	0018      	movs	r0, r3
 800832c:	f7ff fcad 	bl	8007c8a <xtime>
 8008330:	0003      	movs	r3, r0
 8008332:	0018      	movs	r0, r3
 8008334:	f7ff fca9 	bl	8007c8a <xtime>
 8008338:	2109      	movs	r1, #9
 800833a:	187b      	adds	r3, r7, r1
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	0018      	movs	r0, r3
 8008340:	f7ff fca3 	bl	8007c8a <xtime>
 8008344:	0003      	movs	r3, r0
 8008346:	0018      	movs	r0, r3
 8008348:	f7ff fc9f 	bl	8007c8a <xtime>
 800834c:	0003      	movs	r3, r0
 800834e:	0018      	movs	r0, r3
 8008350:	f7ff fc9b 	bl	8007c8a <xtime>
 8008354:	0003      	movs	r3, r0
 8008356:	0018      	movs	r0, r3
 8008358:	f7ff fc97 	bl	8007c8a <xtime>
 800835c:	2408      	movs	r4, #8
 800835e:	193b      	adds	r3, r7, r4
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	0018      	movs	r0, r3
 8008364:	f7ff fc91 	bl	8007c8a <xtime>
 8008368:	0003      	movs	r3, r0
 800836a:	0018      	movs	r0, r3
 800836c:	f7ff fc8d 	bl	8007c8a <xtime>
 8008370:	193b      	adds	r3, r7, r4
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	0018      	movs	r0, r3
 8008376:	f7ff fc88 	bl	8007c8a <xtime>
 800837a:	0003      	movs	r3, r0
 800837c:	0018      	movs	r0, r3
 800837e:	f7ff fc84 	bl	8007c8a <xtime>
 8008382:	0003      	movs	r3, r0
 8008384:	0018      	movs	r0, r3
 8008386:	f7ff fc80 	bl	8007c8a <xtime>
 800838a:	0003      	movs	r3, r0
 800838c:	0018      	movs	r0, r3
 800838e:	f7ff fc7c 	bl	8007c8a <xtime>
 8008392:	19bb      	adds	r3, r7, r6
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	0018      	movs	r0, r3
 8008398:	f7ff fc77 	bl	8007c8a <xtime>
 800839c:	0003      	movs	r3, r0
 800839e:	0018      	movs	r0, r3
 80083a0:	f7ff fc73 	bl	8007c8a <xtime>
 80083a4:	0003      	movs	r3, r0
 80083a6:	001a      	movs	r2, r3
 80083a8:	19bb      	adds	r3, r7, r6
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	4053      	eors	r3, r2
 80083ae:	b2dc      	uxtb	r4, r3
 80083b0:	19bb      	adds	r3, r7, r6
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	0018      	movs	r0, r3
 80083b6:	f7ff fc68 	bl	8007c8a <xtime>
 80083ba:	0003      	movs	r3, r0
 80083bc:	0018      	movs	r0, r3
 80083be:	f7ff fc64 	bl	8007c8a <xtime>
 80083c2:	0003      	movs	r3, r0
 80083c4:	0018      	movs	r0, r3
 80083c6:	f7ff fc60 	bl	8007c8a <xtime>
 80083ca:	0003      	movs	r3, r0
 80083cc:	4063      	eors	r3, r4
 80083ce:	b2dc      	uxtb	r4, r3
 80083d0:	197b      	adds	r3, r7, r5
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7ff fc58 	bl	8007c8a <xtime>
 80083da:	0003      	movs	r3, r0
 80083dc:	0018      	movs	r0, r3
 80083de:	f7ff fc54 	bl	8007c8a <xtime>
 80083e2:	0003      	movs	r3, r0
 80083e4:	0018      	movs	r0, r3
 80083e6:	f7ff fc50 	bl	8007c8a <xtime>
 80083ea:	0003      	movs	r3, r0
 80083ec:	001a      	movs	r2, r3
 80083ee:	197b      	adds	r3, r7, r5
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4053      	eors	r3, r2
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	4063      	eors	r3, r4
 80083f8:	b2dc      	uxtb	r4, r3
 80083fa:	2109      	movs	r1, #9
 80083fc:	187b      	adds	r3, r7, r1
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	0018      	movs	r0, r3
 8008402:	f7ff fc42 	bl	8007c8a <xtime>
 8008406:	0003      	movs	r3, r0
 8008408:	001d      	movs	r5, r3
 800840a:	2109      	movs	r1, #9
 800840c:	187b      	adds	r3, r7, r1
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	0018      	movs	r0, r3
 8008412:	f7ff fc3a 	bl	8007c8a <xtime>
 8008416:	0003      	movs	r3, r0
 8008418:	0018      	movs	r0, r3
 800841a:	f7ff fc36 	bl	8007c8a <xtime>
 800841e:	0003      	movs	r3, r0
 8008420:	406b      	eors	r3, r5
 8008422:	b2dd      	uxtb	r5, r3
 8008424:	2109      	movs	r1, #9
 8008426:	187b      	adds	r3, r7, r1
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	0018      	movs	r0, r3
 800842c:	f7ff fc2d 	bl	8007c8a <xtime>
 8008430:	0003      	movs	r3, r0
 8008432:	0018      	movs	r0, r3
 8008434:	f7ff fc29 	bl	8007c8a <xtime>
 8008438:	0003      	movs	r3, r0
 800843a:	0018      	movs	r0, r3
 800843c:	f7ff fc25 	bl	8007c8a <xtime>
 8008440:	0003      	movs	r3, r0
 8008442:	406b      	eors	r3, r5
 8008444:	b2db      	uxtb	r3, r3
 8008446:	4063      	eors	r3, r4
 8008448:	b2dc      	uxtb	r4, r3
 800844a:	2308      	movs	r3, #8
 800844c:	001d      	movs	r5, r3
 800844e:	18fb      	adds	r3, r7, r3
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	0018      	movs	r0, r3
 8008454:	f7ff fc19 	bl	8007c8a <xtime>
 8008458:	0003      	movs	r3, r0
 800845a:	001a      	movs	r2, r3
 800845c:	0028      	movs	r0, r5
 800845e:	183b      	adds	r3, r7, r0
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	4053      	eors	r3, r2
 8008464:	b2dd      	uxtb	r5, r3
 8008466:	0003      	movs	r3, r0
 8008468:	18fb      	adds	r3, r7, r3
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	0018      	movs	r0, r3
 800846e:	f7ff fc0c 	bl	8007c8a <xtime>
 8008472:	0003      	movs	r3, r0
 8008474:	0018      	movs	r0, r3
 8008476:	f7ff fc08 	bl	8007c8a <xtime>
 800847a:	0003      	movs	r3, r0
 800847c:	0018      	movs	r0, r3
 800847e:	f7ff fc04 	bl	8007c8a <xtime>
 8008482:	0003      	movs	r3, r0
 8008484:	406b      	eors	r3, r5
 8008486:	b2db      	uxtb	r3, r3
 8008488:	4063      	eors	r3, r4
 800848a:	b2d9      	uxtb	r1, r3
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	18d3      	adds	r3, r2, r3
 8008494:	3302      	adds	r3, #2
 8008496:	1c0a      	adds	r2, r1, #0
 8008498:	701a      	strb	r2, [r3, #0]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800849a:	19bb      	adds	r3, r7, r6
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	0018      	movs	r0, r3
 80084a0:	f7ff fbf3 	bl	8007c8a <xtime>
 80084a4:	0003      	movs	r3, r0
 80084a6:	0018      	movs	r0, r3
 80084a8:	f7ff fbef 	bl	8007c8a <xtime>
 80084ac:	19bb      	adds	r3, r7, r6
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	0018      	movs	r0, r3
 80084b2:	f7ff fbea 	bl	8007c8a <xtime>
 80084b6:	0003      	movs	r3, r0
 80084b8:	0018      	movs	r0, r3
 80084ba:	f7ff fbe6 	bl	8007c8a <xtime>
 80084be:	0003      	movs	r3, r0
 80084c0:	0018      	movs	r0, r3
 80084c2:	f7ff fbe2 	bl	8007c8a <xtime>
 80084c6:	0003      	movs	r3, r0
 80084c8:	0018      	movs	r0, r3
 80084ca:	f7ff fbde 	bl	8007c8a <xtime>
 80084ce:	250a      	movs	r5, #10
 80084d0:	197b      	adds	r3, r7, r5
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	0018      	movs	r0, r3
 80084d6:	f7ff fbd8 	bl	8007c8a <xtime>
 80084da:	197b      	adds	r3, r7, r5
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	0018      	movs	r0, r3
 80084e0:	f7ff fbd3 	bl	8007c8a <xtime>
 80084e4:	0003      	movs	r3, r0
 80084e6:	0018      	movs	r0, r3
 80084e8:	f7ff fbcf 	bl	8007c8a <xtime>
 80084ec:	0003      	movs	r3, r0
 80084ee:	0018      	movs	r0, r3
 80084f0:	f7ff fbcb 	bl	8007c8a <xtime>
 80084f4:	0003      	movs	r3, r0
 80084f6:	0018      	movs	r0, r3
 80084f8:	f7ff fbc7 	bl	8007c8a <xtime>
 80084fc:	2109      	movs	r1, #9
 80084fe:	000c      	movs	r4, r1
 8008500:	187b      	adds	r3, r7, r1
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	0018      	movs	r0, r3
 8008506:	f7ff fbc0 	bl	8007c8a <xtime>
 800850a:	193b      	adds	r3, r7, r4
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	0018      	movs	r0, r3
 8008510:	f7ff fbbb 	bl	8007c8a <xtime>
 8008514:	0003      	movs	r3, r0
 8008516:	0018      	movs	r0, r3
 8008518:	f7ff fbb7 	bl	8007c8a <xtime>
 800851c:	193b      	adds	r3, r7, r4
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	0018      	movs	r0, r3
 8008522:	f7ff fbb2 	bl	8007c8a <xtime>
 8008526:	0003      	movs	r3, r0
 8008528:	0018      	movs	r0, r3
 800852a:	f7ff fbae 	bl	8007c8a <xtime>
 800852e:	0003      	movs	r3, r0
 8008530:	0018      	movs	r0, r3
 8008532:	f7ff fbaa 	bl	8007c8a <xtime>
 8008536:	0003      	movs	r3, r0
 8008538:	0018      	movs	r0, r3
 800853a:	f7ff fba6 	bl	8007c8a <xtime>
 800853e:	2308      	movs	r3, #8
 8008540:	18fb      	adds	r3, r7, r3
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	0018      	movs	r0, r3
 8008546:	f7ff fba0 	bl	8007c8a <xtime>
 800854a:	0003      	movs	r3, r0
 800854c:	0018      	movs	r0, r3
 800854e:	f7ff fb9c 	bl	8007c8a <xtime>
 8008552:	0003      	movs	r3, r0
 8008554:	0018      	movs	r0, r3
 8008556:	f7ff fb98 	bl	8007c8a <xtime>
 800855a:	0003      	movs	r3, r0
 800855c:	0018      	movs	r0, r3
 800855e:	f7ff fb94 	bl	8007c8a <xtime>
 8008562:	19bb      	adds	r3, r7, r6
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	0018      	movs	r0, r3
 8008568:	f7ff fb8f 	bl	8007c8a <xtime>
 800856c:	0003      	movs	r3, r0
 800856e:	001a      	movs	r2, r3
 8008570:	19bb      	adds	r3, r7, r6
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	4053      	eors	r3, r2
 8008576:	b2dc      	uxtb	r4, r3
 8008578:	19bb      	adds	r3, r7, r6
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	0018      	movs	r0, r3
 800857e:	f7ff fb84 	bl	8007c8a <xtime>
 8008582:	0003      	movs	r3, r0
 8008584:	0018      	movs	r0, r3
 8008586:	f7ff fb80 	bl	8007c8a <xtime>
 800858a:	0003      	movs	r3, r0
 800858c:	0018      	movs	r0, r3
 800858e:	f7ff fb7c 	bl	8007c8a <xtime>
 8008592:	0003      	movs	r3, r0
 8008594:	4063      	eors	r3, r4
 8008596:	b2dc      	uxtb	r4, r3
 8008598:	197b      	adds	r3, r7, r5
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	0018      	movs	r0, r3
 800859e:	f7ff fb74 	bl	8007c8a <xtime>
 80085a2:	0003      	movs	r3, r0
 80085a4:	0018      	movs	r0, r3
 80085a6:	f7ff fb70 	bl	8007c8a <xtime>
 80085aa:	0003      	movs	r3, r0
 80085ac:	001a      	movs	r2, r3
 80085ae:	0029      	movs	r1, r5
 80085b0:	197b      	adds	r3, r7, r5
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	4053      	eors	r3, r2
 80085b6:	b2dd      	uxtb	r5, r3
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	0018      	movs	r0, r3
 80085be:	f7ff fb64 	bl	8007c8a <xtime>
 80085c2:	0003      	movs	r3, r0
 80085c4:	0018      	movs	r0, r3
 80085c6:	f7ff fb60 	bl	8007c8a <xtime>
 80085ca:	0003      	movs	r3, r0
 80085cc:	0018      	movs	r0, r3
 80085ce:	f7ff fb5c 	bl	8007c8a <xtime>
 80085d2:	0003      	movs	r3, r0
 80085d4:	406b      	eors	r3, r5
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	4063      	eors	r3, r4
 80085da:	b2dc      	uxtb	r4, r3
 80085dc:	2509      	movs	r5, #9
 80085de:	197b      	adds	r3, r7, r5
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	0018      	movs	r0, r3
 80085e4:	f7ff fb51 	bl	8007c8a <xtime>
 80085e8:	0003      	movs	r3, r0
 80085ea:	0018      	movs	r0, r3
 80085ec:	f7ff fb4d 	bl	8007c8a <xtime>
 80085f0:	0003      	movs	r3, r0
 80085f2:	0018      	movs	r0, r3
 80085f4:	f7ff fb49 	bl	8007c8a <xtime>
 80085f8:	0003      	movs	r3, r0
 80085fa:	001a      	movs	r2, r3
 80085fc:	197b      	adds	r3, r7, r5
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	4053      	eors	r3, r2
 8008602:	b2db      	uxtb	r3, r3
 8008604:	4063      	eors	r3, r4
 8008606:	b2dc      	uxtb	r4, r3
 8008608:	2608      	movs	r6, #8
 800860a:	19bb      	adds	r3, r7, r6
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	0018      	movs	r0, r3
 8008610:	f7ff fb3b 	bl	8007c8a <xtime>
 8008614:	0003      	movs	r3, r0
 8008616:	001d      	movs	r5, r3
 8008618:	19bb      	adds	r3, r7, r6
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	0018      	movs	r0, r3
 800861e:	f7ff fb34 	bl	8007c8a <xtime>
 8008622:	0003      	movs	r3, r0
 8008624:	0018      	movs	r0, r3
 8008626:	f7ff fb30 	bl	8007c8a <xtime>
 800862a:	0003      	movs	r3, r0
 800862c:	406b      	eors	r3, r5
 800862e:	b2dd      	uxtb	r5, r3
 8008630:	19bb      	adds	r3, r7, r6
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	0018      	movs	r0, r3
 8008636:	f7ff fb28 	bl	8007c8a <xtime>
 800863a:	0003      	movs	r3, r0
 800863c:	0018      	movs	r0, r3
 800863e:	f7ff fb24 	bl	8007c8a <xtime>
 8008642:	0003      	movs	r3, r0
 8008644:	0018      	movs	r0, r3
 8008646:	f7ff fb20 	bl	8007c8a <xtime>
 800864a:	0003      	movs	r3, r0
 800864c:	406b      	eors	r3, r5
 800864e:	b2db      	uxtb	r3, r3
 8008650:	4063      	eors	r3, r4
 8008652:	b2d9      	uxtb	r1, r3
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	18d3      	adds	r3, r2, r3
 800865c:	3303      	adds	r3, #3
 800865e:	1c0a      	adds	r2, r1, #0
 8008660:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3301      	adds	r3, #1
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b03      	cmp	r3, #3
 800866c:	dc00      	bgt.n	8008670 <InvMixColumns+0x79e>
 800866e:	e437      	b.n	8007ee0 <InvMixColumns+0xe>
  }
}
 8008670:	46c0      	nop			; (mov r8, r8)
 8008672:	46bd      	mov	sp, r7
 8008674:	b005      	add	sp, #20
 8008676:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008678 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8008678:	b5b0      	push	{r4, r5, r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8008680:	230f      	movs	r3, #15
 8008682:	18fb      	adds	r3, r7, r3
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e02a      	b.n	80086e0 <InvSubBytes+0x68>
  {
    for (j = 0; j < 4; ++j)
 800868a:	230e      	movs	r3, #14
 800868c:	18fb      	adds	r3, r7, r3
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	e01a      	b.n	80086ca <InvSubBytes+0x52>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8008694:	240e      	movs	r4, #14
 8008696:	193b      	adds	r3, r7, r4
 8008698:	781a      	ldrb	r2, [r3, #0]
 800869a:	250f      	movs	r5, #15
 800869c:	197b      	adds	r3, r7, r5
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	6879      	ldr	r1, [r7, #4]
 80086a2:	0092      	lsls	r2, r2, #2
 80086a4:	188a      	adds	r2, r1, r2
 80086a6:	5cd3      	ldrb	r3, [r2, r3]
 80086a8:	0018      	movs	r0, r3
 80086aa:	193b      	adds	r3, r7, r4
 80086ac:	781a      	ldrb	r2, [r3, #0]
 80086ae:	197b      	adds	r3, r7, r5
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	4910      	ldr	r1, [pc, #64]	; (80086f4 <InvSubBytes+0x7c>)
 80086b4:	5c08      	ldrb	r0, [r1, r0]
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	0092      	lsls	r2, r2, #2
 80086ba:	188a      	adds	r2, r1, r2
 80086bc:	1c01      	adds	r1, r0, #0
 80086be:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < 4; ++j)
 80086c0:	193b      	adds	r3, r7, r4
 80086c2:	193a      	adds	r2, r7, r4
 80086c4:	7812      	ldrb	r2, [r2, #0]
 80086c6:	3201      	adds	r2, #1
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	230e      	movs	r3, #14
 80086cc:	18fb      	adds	r3, r7, r3
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d9df      	bls.n	8008694 <InvSubBytes+0x1c>
  for (i = 0; i < 4; ++i)
 80086d4:	220f      	movs	r2, #15
 80086d6:	18bb      	adds	r3, r7, r2
 80086d8:	18ba      	adds	r2, r7, r2
 80086da:	7812      	ldrb	r2, [r2, #0]
 80086dc:	3201      	adds	r2, #1
 80086de:	701a      	strb	r2, [r3, #0]
 80086e0:	230f      	movs	r3, #15
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d9cf      	bls.n	800868a <InvSubBytes+0x12>
    }
  }
}
 80086ea:	46c0      	nop			; (mov r8, r8)
 80086ec:	46bd      	mov	sp, r7
 80086ee:	b004      	add	sp, #16
 80086f0:	bdb0      	pop	{r4, r5, r7, pc}
 80086f2:	46c0      	nop			; (mov r8, r8)
 80086f4:	0800cf74 	.word	0x0800cf74

080086f8 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 8008700:	210f      	movs	r1, #15
 8008702:	187b      	adds	r3, r7, r1
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	7b52      	ldrb	r2, [r2, #13]
 8008708:	701a      	strb	r2, [r3, #0]
  (*state)[3][1] = (*state)[2][1];
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7a5a      	ldrb	r2, [r3, #9]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	795a      	ldrb	r2, [r3, #5]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	785a      	ldrb	r2, [r3, #1]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	187a      	adds	r2, r7, r1
 8008726:	7812      	ldrb	r2, [r2, #0]
 8008728:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 800872a:	187b      	adds	r3, r7, r1
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	7892      	ldrb	r2, [r2, #2]
 8008730:	701a      	strb	r2, [r3, #0]
  (*state)[0][2] = (*state)[2][2];
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	7a9a      	ldrb	r2, [r3, #10]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	187a      	adds	r2, r7, r1
 800873e:	7812      	ldrb	r2, [r2, #0]
 8008740:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8008742:	187b      	adds	r3, r7, r1
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	7992      	ldrb	r2, [r2, #6]
 8008748:	701a      	strb	r2, [r3, #0]
  (*state)[1][2] = (*state)[3][2];
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7b9a      	ldrb	r2, [r3, #14]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	187a      	adds	r2, r7, r1
 8008756:	7812      	ldrb	r2, [r2, #0]
 8008758:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 800875a:	187b      	adds	r3, r7, r1
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	78d2      	ldrb	r2, [r2, #3]
 8008760:	701a      	strb	r2, [r3, #0]
  (*state)[0][3] = (*state)[1][3];
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	79da      	ldrb	r2, [r3, #7]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7ada      	ldrb	r2, [r3, #11]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7bda      	ldrb	r2, [r3, #15]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	187a      	adds	r2, r7, r1
 800877e:	7812      	ldrb	r2, [r2, #0]
 8008780:	73da      	strb	r2, [r3, #15]
}
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	46bd      	mov	sp, r7
 8008786:	b004      	add	sp, #16
 8008788:	bd80      	pop	{r7, pc}

0800878a <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 800878a:	b590      	push	{r4, r7, lr}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8008794:	240f      	movs	r4, #15
 8008796:	193b      	adds	r3, r7, r4
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	0019      	movs	r1, r3
 80087a2:	2000      	movs	r0, #0
 80087a4:	f7ff f997 	bl	8007ad6 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 80087a8:	193b      	adds	r3, r7, r4
 80087aa:	2201      	movs	r2, #1
 80087ac:	701a      	strb	r2, [r3, #0]
 80087ae:	e018      	b.n	80087e2 <Cipher+0x58>
  {
    SubBytes(state);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7ff f9e0 	bl	8007b78 <SubBytes>
    ShiftRows(state);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7ff fa1c 	bl	8007bf8 <ShiftRows>
    MixColumns(state);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	0018      	movs	r0, r3
 80087c4:	f7ff fa81 	bl	8007cca <MixColumns>
    AddRoundKey(round, state, RoundKey);
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	240f      	movs	r4, #15
 80087ce:	193b      	adds	r3, r7, r4
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	0018      	movs	r0, r3
 80087d4:	f7ff f97f 	bl	8007ad6 <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 80087d8:	193b      	adds	r3, r7, r4
 80087da:	193a      	adds	r2, r7, r4
 80087dc:	7812      	ldrb	r2, [r2, #0]
 80087de:	3201      	adds	r2, #1
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	230f      	movs	r3, #15
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b09      	cmp	r3, #9
 80087ea:	d9e1      	bls.n	80087b0 <Cipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	0018      	movs	r0, r3
 80087f0:	f7ff f9c2 	bl	8007b78 <SubBytes>
  ShiftRows(state);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	0018      	movs	r0, r3
 80087f8:	f7ff f9fe 	bl	8007bf8 <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	0019      	movs	r1, r3
 8008802:	200a      	movs	r0, #10
 8008804:	f7ff f967 	bl	8007ad6 <AddRoundKey>
}
 8008808:	46c0      	nop			; (mov r8, r8)
 800880a:	46bd      	mov	sp, r7
 800880c:	b005      	add	sp, #20
 800880e:	bd90      	pop	{r4, r7, pc}

08008810 <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 8008810:	b590      	push	{r4, r7, lr}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 800881a:	240f      	movs	r4, #15
 800881c:	193b      	adds	r3, r7, r4
 800881e:	2200      	movs	r2, #0
 8008820:	701a      	strb	r2, [r3, #0]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	0019      	movs	r1, r3
 8008828:	200a      	movs	r0, #10
 800882a:	f7ff f954 	bl	8007ad6 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 800882e:	193b      	adds	r3, r7, r4
 8008830:	2209      	movs	r2, #9
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	e018      	b.n	8008868 <InvCipher+0x58>
  {
    InvShiftRows(state);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	0018      	movs	r0, r3
 800883a:	f7ff ff5d 	bl	80086f8 <InvShiftRows>
    InvSubBytes(state);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	0018      	movs	r0, r3
 8008842:	f7ff ff19 	bl	8008678 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	240f      	movs	r4, #15
 800884c:	193b      	adds	r3, r7, r4
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	0018      	movs	r0, r3
 8008852:	f7ff f940 	bl	8007ad6 <AddRoundKey>
    InvMixColumns(state);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	0018      	movs	r0, r3
 800885a:	f7ff fb3a 	bl	8007ed2 <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 800885e:	193b      	adds	r3, r7, r4
 8008860:	193a      	adds	r2, r7, r4
 8008862:	7812      	ldrb	r2, [r2, #0]
 8008864:	3a01      	subs	r2, #1
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	230f      	movs	r3, #15
 800886a:	18fb      	adds	r3, r7, r3
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e1      	bne.n	8008836 <InvCipher+0x26>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	0018      	movs	r0, r3
 8008876:	f7ff ff3f 	bl	80086f8 <InvShiftRows>
  InvSubBytes(state);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	0018      	movs	r0, r3
 800887e:	f7ff fefb 	bl	8008678 <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	0019      	movs	r1, r3
 8008888:	2000      	movs	r0, #0
 800888a:	f7ff f924 	bl	8007ad6 <AddRoundKey>
}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b005      	add	sp, #20
 8008894:	bd90      	pop	{r4, r7, pc}

08008896 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, uint8_t* Iv)
{
 8008896:	b590      	push	{r4, r7, lr}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 80088a0:	230f      	movs	r3, #15
 80088a2:	18fb      	adds	r3, r7, r3
 80088a4:	2200      	movs	r2, #0
 80088a6:	701a      	strb	r2, [r3, #0]
 80088a8:	e016      	b.n	80088d8 <XorWithIv+0x42>
  {
    buf[i] ^= Iv[i];
 80088aa:	240f      	movs	r4, #15
 80088ac:	193b      	adds	r3, r7, r4
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	18d3      	adds	r3, r2, r3
 80088b4:	7819      	ldrb	r1, [r3, #0]
 80088b6:	193b      	adds	r3, r7, r4
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	18d3      	adds	r3, r2, r3
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	193b      	adds	r3, r7, r4
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	18c3      	adds	r3, r0, r3
 80088c8:	404a      	eors	r2, r1
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 80088ce:	193b      	adds	r3, r7, r4
 80088d0:	193a      	adds	r2, r7, r4
 80088d2:	7812      	ldrb	r2, [r2, #0]
 80088d4:	3201      	adds	r2, #1
 80088d6:	701a      	strb	r2, [r3, #0]
 80088d8:	230f      	movs	r3, #15
 80088da:	18fb      	adds	r3, r7, r3
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	2b0f      	cmp	r3, #15
 80088e0:	d9e3      	bls.n	80088aa <XorWithIv+0x14>
  }
}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	46bd      	mov	sp, r7
 80088e6:	b005      	add	sp, #20
 80088e8:	bd90      	pop	{r4, r7, pc}

080088ea <tiny_AES_CBC_encrypt_buffer>:

void tiny_AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b086      	sub	sp, #24
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t *Iv = ctx->Iv;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	33b0      	adds	r3, #176	; 0xb0
 80088fa:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80088fc:	2300      	movs	r3, #0
 80088fe:	617b      	str	r3, [r7, #20]
 8008900:	e013      	b.n	800892a <tiny_AES_CBC_encrypt_buffer+0x40>
  {
    XorWithIv(buf, Iv);
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	0011      	movs	r1, r2
 8008908:	0018      	movs	r0, r3
 800890a:	f7ff ffc4 	bl	8008896 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	0011      	movs	r1, r2
 8008914:	0018      	movs	r0, r3
 8008916:	f7ff ff38 	bl	800878a <Cipher>
    Iv = buf;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	3310      	adds	r3, #16
 8008922:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	3310      	adds	r3, #16
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	429a      	cmp	r2, r3
 8008930:	d3e7      	bcc.n	8008902 <tiny_AES_CBC_encrypt_buffer+0x18>
    //printf("Step %d - %d", i/16, i);
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	33b0      	adds	r3, #176	; 0xb0
 8008936:	6939      	ldr	r1, [r7, #16]
 8008938:	2210      	movs	r2, #16
 800893a:	0018      	movs	r0, r3
 800893c:	f002 feb0 	bl	800b6a0 <memcpy>
}
 8008940:	46c0      	nop			; (mov r8, r8)
 8008942:	46bd      	mov	sp, r7
 8008944:	b006      	add	sp, #24
 8008946:	bd80      	pop	{r7, pc}

08008948 <tiny_AES_CBC_decrypt_buffer>:

void tiny_AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
{
 8008948:	b590      	push	{r4, r7, lr}
 800894a:	b08b      	sub	sp, #44	; 0x2c
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  uintptr_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8008954:	2300      	movs	r3, #0
 8008956:	627b      	str	r3, [r7, #36]	; 0x24
 8008958:	e026      	b.n	80089a8 <tiny_AES_CBC_decrypt_buffer+0x60>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 800895a:	2414      	movs	r4, #20
 800895c:	193a      	adds	r2, r7, r4
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	0010      	movs	r0, r2
 8008962:	0019      	movs	r1, r3
 8008964:	2310      	movs	r3, #16
 8008966:	001a      	movs	r2, r3
 8008968:	f002 fe9a 	bl	800b6a0 <memcpy>
    InvCipher((state_t*)buf, ctx->RoundKey);
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	0011      	movs	r1, r2
 8008972:	0018      	movs	r0, r3
 8008974:	f7ff ff4c 	bl	8008810 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	33b0      	adds	r3, #176	; 0xb0
 800897c:	001a      	movs	r2, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	0011      	movs	r1, r2
 8008982:	0018      	movs	r0, r3
 8008984:	f7ff ff87 	bl	8008896 <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	33b0      	adds	r3, #176	; 0xb0
 800898c:	001a      	movs	r2, r3
 800898e:	193b      	adds	r3, r7, r4
 8008990:	0010      	movs	r0, r2
 8008992:	0019      	movs	r1, r3
 8008994:	2310      	movs	r3, #16
 8008996:	001a      	movs	r2, r3
 8008998:	f002 fe82 	bl	800b6a0 <memcpy>
    buf += AES_BLOCKLEN;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	3310      	adds	r3, #16
 80089a0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	3310      	adds	r3, #16
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
 80089a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d3d4      	bcc.n	800895a <tiny_AES_CBC_decrypt_buffer+0x12>
  }

}
 80089b0:	46c0      	nop			; (mov r8, r8)
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b00b      	add	sp, #44	; 0x2c
 80089b6:	bd90      	pop	{r4, r7, pc}

080089b8 <_itsdk_error_readHeader>:


/**
 * Get the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_readHeader(itsdk_error_head_t * header) {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 80089c4:	230c      	movs	r3, #12
 80089c6:	18fb      	adds	r3, r7, r3
 80089c8:	0018      	movs	r0, r3
 80089ca:	f7fe f8d6 	bl	8006b7a <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 80089ce:	68f9      	ldr	r1, [r7, #12]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	2308      	movs	r3, #8
 80089d4:	2000      	movs	r0, #0
 80089d6:	f002 f897 	bl	800ab08 <_eeprom_read>
	if ( header->magic != ITSDK_ERROR_STRUCT_MAGIC) return ITSDK_ERROR_FAILED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	4a05      	ldr	r2, [pc, #20]	; (80089f4 <_itsdk_error_readHeader+0x3c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d001      	beq.n	80089e8 <_itsdk_error_readHeader+0x30>
 80089e4:	2301      	movs	r3, #1
 80089e6:	e000      	b.n	80089ea <_itsdk_error_readHeader+0x32>
	return ITSDK_ERROR_SUCCESS;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	0018      	movs	r0, r3
 80089ec:	46bd      	mov	sp, r7
 80089ee:	b004      	add	sp, #16
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	0000ae73 	.word	0x0000ae73

080089f8 <_itsdk_error_writeHeader>:

/**
 * Update the header of the error blocks
 */
__weak itsdk_error_ret_e _itsdk_error_writeHeader(itsdk_error_head_t * header) {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	uint32_t offset = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8008a04:	230c      	movs	r3, #12
 8008a06:	18fb      	adds	r3, r7, r3
 8008a08:	0018      	movs	r0, r3
 8008a0a:	f7fe f8b6 	bl	8006b7a <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(ITDT_EEPROM_BANK0, offset, (void *) header, sizeof(itsdk_error_head_t));
 8008a0e:	68f9      	ldr	r1, [r7, #12]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	2308      	movs	r3, #8
 8008a14:	2000      	movs	r0, #0
 8008a16:	f001 ffd3 	bl	800a9c0 <_eeprom_write>
	return ITSDK_ERROR_SUCCESS;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	b004      	add	sp, #16
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <_itsdk_error_write>:
/**
 * Write the error in the NVM.
 * This function can be override if the MCU EEPROM is not used for this purpose.
 *
 */
__weak itsdk_error_ret_e _itsdk_error_write(uint16_t blockId, itsdk_error_entry_t * entry) {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	0002      	movs	r2, r0
 8008a2c:	6039      	str	r1, [r7, #0]
 8008a2e:	1dbb      	adds	r3, r7, #6
 8008a30:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8008a36:	230c      	movs	r3, #12
 8008a38:	18fb      	adds	r3, r7, r3
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	f7fe f89d 	bl	8006b7a <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_write(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 8008a40:	1dbb      	adds	r3, r7, #6
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	00da      	lsls	r2, r3, #3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	18d3      	adds	r3, r2, r3
	_eeprom_write(
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	0019      	movs	r1, r3
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	2308      	movs	r3, #8
 8008a52:	2000      	movs	r0, #0
 8008a54:	f001 ffb4 	bl	800a9c0 <_eeprom_write>
		(void *)entry, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	b004      	add	sp, #16
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <_itsdk_error_read>:

/**
 * Read a given error Id from the NVM
 */
__weak itsdk_error_ret_e _itsdk_error_read(uint16_t blockId,itsdk_error_entry_t * e) {
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	0002      	movs	r2, r0
 8008a6a:	6039      	str	r1, [r7, #0]
 8008a6c:	1dbb      	adds	r3, r7, #6
 8008a6e:	801a      	strh	r2, [r3, #0]
	uint32_t offset = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  itsdk_secstore_getStoreSize(&offset);
 8008a74:	230c      	movs	r3, #12
 8008a76:	18fb      	adds	r3, r7, r3
 8008a78:	0018      	movs	r0, r3
 8008a7a:	f7fe f87e 	bl	8006b7a <itsdk_secstore_getStoreSize>
	#endif
	_eeprom_read(
		ITDT_EEPROM_BANK0,
		offset+sizeof(itsdk_error_head_t)+(sizeof(itsdk_error_entry_t)*blockId),
 8008a7e:	1dbb      	adds	r3, r7, #6
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	00da      	lsls	r2, r3, #3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	18d3      	adds	r3, r2, r3
	_eeprom_read(
 8008a88:	3308      	adds	r3, #8
 8008a8a:	0019      	movs	r1, r3
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	2308      	movs	r3, #8
 8008a90:	2000      	movs	r0, #0
 8008a92:	f002 f839 	bl	800ab08 <_eeprom_read>
		(void *)e, sizeof(itsdk_error_entry_t)
	);
	return ITSDK_ERROR_SUCCESS;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	0018      	movs	r0, r3
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b004      	add	sp, #16
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <itsdk_error_setup>:

/**
 * Init the error block structure if needed
 * This function is called on every device restart
 */
itsdk_error_ret_e itsdk_error_setup() {
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) {
 8008aa6:	003b      	movs	r3, r7
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f7ff ff85 	bl	80089b8 <_itsdk_error_readHeader>
 8008aae:	0003      	movs	r3, r0
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d10c      	bne.n	8008ace <itsdk_error_setup+0x2e>
		// init the structure
		h.magic = ITSDK_ERROR_STRUCT_MAGIC;
 8008ab4:	003b      	movs	r3, r7
 8008ab6:	4a0f      	ldr	r2, [pc, #60]	; (8008af4 <itsdk_error_setup+0x54>)
 8008ab8:	801a      	strh	r2, [r3, #0]
		h.readPt = 0;
 8008aba:	003b      	movs	r3, r7
 8008abc:	2200      	movs	r2, #0
 8008abe:	805a      	strh	r2, [r3, #2]
		h.writePt = 0;
 8008ac0:	003b      	movs	r3, r7
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	809a      	strh	r2, [r3, #4]
		_itsdk_error_writeHeader(&h);
 8008ac6:	003b      	movs	r3, r7
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f7ff ff95 	bl	80089f8 <_itsdk_error_writeHeader>
	}
#if ITSDK_WITH_CONSOLE == __ENABLE
	__console_errorMng.console_private = _itsdk_error_consolePriv;
 8008ace:	4b0a      	ldr	r3, [pc, #40]	; (8008af8 <itsdk_error_setup+0x58>)
 8008ad0:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <itsdk_error_setup+0x5c>)
 8008ad2:	601a      	str	r2, [r3, #0]
	__console_errorMng.console_public = NULL;
 8008ad4:	4b08      	ldr	r3, [pc, #32]	; (8008af8 <itsdk_error_setup+0x58>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	605a      	str	r2, [r3, #4]
	__console_errorMng.next = NULL;
 8008ada:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <itsdk_error_setup+0x58>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	609a      	str	r2, [r3, #8]
	itsdk_console_registerCommand(&__console_errorMng);
 8008ae0:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <itsdk_error_setup+0x58>)
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f7fd f9ba 	bl	8005e5c <itsdk_console_registerCommand>
#endif

	return ITSDK_ERROR_SUCCESS;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	0018      	movs	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b002      	add	sp, #8
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	46c0      	nop			; (mov r8, r8)
 8008af4:	ffffae73 	.word	0xffffae73
 8008af8:	20000124 	.word	0x20000124
 8008afc:	08008d65 	.word	0x08008d65

08008b00 <itsdk_error_report>:
 * Register an error into the NVM
 * The error is enriched with the value when needed and written in the NVM
 * The NVM write can be override.
 * When the level is critical it loop forever after printing an error message
 */
itsdk_error_ret_e itsdk_error_report(uint32_t error,uint16_t value) {
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b08b      	sub	sp, #44	; 0x2c
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	000a      	movs	r2, r1
 8008b0a:	1cbb      	adds	r3, r7, #2
 8008b0c:	801a      	strh	r2, [r3, #0]
	// Add value into error when needed
	if ( ( error & ITSDK_ERROR_WITH_VALUE ) > 0 ) {
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	2380      	movs	r3, #128	; 0x80
 8008b12:	055b      	lsls	r3, r3, #21
 8008b14:	4013      	ands	r3, r2
 8008b16:	d008      	beq.n	8008b2a <itsdk_error_report+0x2a>
		error |= (value << ITSDK_ERROR_VALUE_SHIFT) & ITSDK_ERROR_VALUE_MASK;
 8008b18:	1cbb      	adds	r3, r7, #2
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	031b      	lsls	r3, r3, #12
 8008b1e:	001a      	movs	r2, r3
 8008b20:	4b4b      	ldr	r3, [pc, #300]	; (8008c50 <itsdk_error_report+0x150>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	607b      	str	r3, [r7, #4]
	}
	uint64_t time = itsdk_time_get_ms() / 1000;
 8008b2a:	f000 fe6f 	bl	800980c <itsdk_time_get_ms>
 8008b2e:	22fa      	movs	r2, #250	; 0xfa
 8008b30:	0092      	lsls	r2, r2, #2
 8008b32:	2300      	movs	r3, #0
 8008b34:	f7f7 fc8a 	bl	800044c <__aeabi_uldivmod>
 8008b38:	0003      	movs	r3, r0
 8008b3a:	000c      	movs	r4, r1
 8008b3c:	61bb      	str	r3, [r7, #24]
 8008b3e:	61fc      	str	r4, [r7, #28]
	itsdk_error_entry_t e;
	e.error = error;
 8008b40:	2110      	movs	r1, #16
 8008b42:	187b      	adds	r3, r7, r1
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	605a      	str	r2, [r3, #4]
	e.timeS = (uint32_t)time;
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	187b      	adds	r3, r7, r1
 8008b4c:	601a      	str	r2, [r3, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 8008b4e:	2308      	movs	r3, #8
 8008b50:	18fb      	adds	r3, r7, r3
 8008b52:	0018      	movs	r0, r3
 8008b54:	f7ff ff30 	bl	80089b8 <_itsdk_error_readHeader>
 8008b58:	0003      	movs	r3, r0
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d101      	bne.n	8008b62 <itsdk_error_report+0x62>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e072      	b.n	8008c48 <itsdk_error_report+0x148>

	// Register error
	_itsdk_error_write(h.writePt, &e);
 8008b62:	2408      	movs	r4, #8
 8008b64:	193b      	adds	r3, r7, r4
 8008b66:	889b      	ldrh	r3, [r3, #4]
 8008b68:	2210      	movs	r2, #16
 8008b6a:	18ba      	adds	r2, r7, r2
 8008b6c:	0011      	movs	r1, r2
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f7ff ff58 	bl	8008a24 <_itsdk_error_write>

	// Update the pointers
	h.writePt = (h.writePt + 1) % ITSDK_ERROR_BLOCKS;
 8008b74:	193b      	adds	r3, r7, r4
 8008b76:	889b      	ldrh	r3, [r3, #4]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	4a36      	ldr	r2, [pc, #216]	; (8008c54 <itsdk_error_report+0x154>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	d504      	bpl.n	8008b8a <itsdk_error_report+0x8a>
 8008b80:	3b01      	subs	r3, #1
 8008b82:	2240      	movs	r2, #64	; 0x40
 8008b84:	4252      	negs	r2, r2
 8008b86:	4313      	orrs	r3, r2
 8008b88:	3301      	adds	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	2108      	movs	r1, #8
 8008b8e:	187b      	adds	r3, r7, r1
 8008b90:	809a      	strh	r2, [r3, #4]
	if ( h.writePt == h.readPt ) {
 8008b92:	187b      	adds	r3, r7, r1
 8008b94:	889a      	ldrh	r2, [r3, #4]
 8008b96:	187b      	adds	r3, r7, r1
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d10f      	bne.n	8008bbe <itsdk_error_report+0xbe>
		h.readPt = (h.readPt + 1) % ITSDK_ERROR_BLOCKS;
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	18fb      	adds	r3, r7, r3
 8008ba2:	885b      	ldrh	r3, [r3, #2]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	4a2b      	ldr	r2, [pc, #172]	; (8008c54 <itsdk_error_report+0x154>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	d504      	bpl.n	8008bb6 <itsdk_error_report+0xb6>
 8008bac:	3b01      	subs	r3, #1
 8008bae:	2240      	movs	r2, #64	; 0x40
 8008bb0:	4252      	negs	r2, r2
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	2308      	movs	r3, #8
 8008bba:	18fb      	adds	r3, r7, r3
 8008bbc:	805a      	strh	r2, [r3, #2]
	}
	_itsdk_error_writeHeader(&h);
 8008bbe:	2308      	movs	r3, #8
 8008bc0:	18fb      	adds	r3, r7, r3
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f7ff ff18 	bl	80089f8 <_itsdk_error_writeHeader>

	char t = 'S';
 8008bc8:	2327      	movs	r3, #39	; 0x27
 8008bca:	18fb      	adds	r3, r7, r3
 8008bcc:	2253      	movs	r2, #83	; 0x53
 8008bce:	701a      	strb	r2, [r3, #0]
	if ((error & ITSDK_ERROR_TYPE_MASK) == ITSDK_ERROR_TYPE_APP) {
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	2380      	movs	r3, #128	; 0x80
 8008bd4:	059b      	lsls	r3, r3, #22
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	d003      	beq.n	8008be2 <itsdk_error_report+0xe2>
		t = 'A';
 8008bda:	2327      	movs	r3, #39	; 0x27
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	2241      	movs	r2, #65	; 0x41
 8008be0:	701a      	strb	r2, [r3, #0]
	}

	// Manage critical level
	if ( (error & ITSDK_ERROR_LEVEL_FATAL ) == ITSDK_ERROR_LEVEL_FATAL ){
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	0f9b      	lsrs	r3, r3, #30
 8008be6:	079a      	lsls	r2, r3, #30
 8008be8:	23c0      	movs	r3, #192	; 0xc0
 8008bea:	061b      	lsls	r3, r3, #24
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d108      	bne.n	8008c02 <itsdk_error_report+0x102>
		log_error("[CRITICAL ERROR] %c 0x%08X\r\n",t,error);
 8008bf0:	2327      	movs	r3, #39	; 0x27
 8008bf2:	18fb      	adds	r3, r7, r3
 8008bf4:	7819      	ldrb	r1, [r3, #0]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4b17      	ldr	r3, [pc, #92]	; (8008c58 <itsdk_error_report+0x158>)
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f000 fa0c 	bl	8009018 <log_error>
		while(1);
 8008c00:	e7fe      	b.n	8008c00 <itsdk_error_report+0x100>
	} else if ( (error & ITSDK_ERROR_LEVEL_ERROR ) == ITSDK_ERROR_LEVEL_ERROR ){
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da08      	bge.n	8008c1a <itsdk_error_report+0x11a>
		log_error("[ERROR] %c 0x%08X\r\n",t,error);
 8008c08:	2327      	movs	r3, #39	; 0x27
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	7819      	ldrb	r1, [r3, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	4b12      	ldr	r3, [pc, #72]	; (8008c5c <itsdk_error_report+0x15c>)
 8008c12:	0018      	movs	r0, r3
 8008c14:	f000 fa00 	bl	8009018 <log_error>
 8008c18:	e015      	b.n	8008c46 <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_WARN ) == ITSDK_ERROR_LEVEL_WARN ){
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	05db      	lsls	r3, r3, #23
 8008c20:	4013      	ands	r3, r2
 8008c22:	d008      	beq.n	8008c36 <itsdk_error_report+0x136>
		log_warn("[WARN] %c 0x%08X\r\n",t,error);
 8008c24:	2327      	movs	r3, #39	; 0x27
 8008c26:	18fb      	adds	r3, r7, r3
 8008c28:	7819      	ldrb	r1, [r3, #0]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	4b0c      	ldr	r3, [pc, #48]	; (8008c60 <itsdk_error_report+0x160>)
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f000 fa38 	bl	80090a4 <log_warn>
 8008c34:	e007      	b.n	8008c46 <itsdk_error_report+0x146>
	} else if ( (error & ITSDK_ERROR_LEVEL_INFO ) == ITSDK_ERROR_LEVEL_INFO ){
		log_info("[INFO] %c 0x%08X\r\n",t,error);
 8008c36:	2327      	movs	r3, #39	; 0x27
 8008c38:	18fb      	adds	r3, r7, r3
 8008c3a:	7819      	ldrb	r1, [r3, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <itsdk_error_report+0x164>)
 8008c40:	0018      	movs	r0, r3
 8008c42:	f000 fa75 	bl	8009130 <log_info>
	}
	return ITSDK_ERROR_SUCCESS;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	0018      	movs	r0, r3
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	b00b      	add	sp, #44	; 0x2c
 8008c4e:	bd90      	pop	{r4, r7, pc}
 8008c50:	0ffff000 	.word	0x0ffff000
 8008c54:	8000003f 	.word	0x8000003f
 8008c58:	0800c9a0 	.word	0x0800c9a0
 8008c5c:	0800c9c0 	.word	0x0800c9c0
 8008c60:	0800c9d4 	.word	0x0800c9d4
 8008c64:	0800c9e8 	.word	0x0800c9e8

08008c68 <itsdk_error_get>:
 * When blockId is ITSDK_ERROR_FIRSTBLOCK the first available block is returned
 * Returns the next blockId to be read. ITSDK_ERROR_LASTBLOCK when no more to read
 * The blockId is updated with next block Id value.
 *
 */
itsdk_error_ret_e itsdk_error_get(uint16_t * blockId,itsdk_error_entry_t * e) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]

	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_SUCCESS ) {
 8008c72:	2308      	movs	r3, #8
 8008c74:	18fb      	adds	r3, r7, r3
 8008c76:	0018      	movs	r0, r3
 8008c78:	f7ff fe9e 	bl	80089b8 <_itsdk_error_readHeader>
 8008c7c:	1e03      	subs	r3, r0, #0
 8008c7e:	d138      	bne.n	8008cf2 <itsdk_error_get+0x8a>
		// Manage blockId request
		if ( *blockId == ITSDK_ERROR_FIRSTBLOCK ) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	4a22      	ldr	r2, [pc, #136]	; (8008d10 <itsdk_error_get+0xa8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d104      	bne.n	8008c94 <itsdk_error_get+0x2c>
			*blockId = h.readPt;
 8008c8a:	2308      	movs	r3, #8
 8008c8c:	18fb      	adds	r3, r7, r3
 8008c8e:	885a      	ldrh	r2, [r3, #2]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	801a      	strh	r2, [r3, #0]
		}
		if ( *blockId != h.writePt ) {
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	881a      	ldrh	r2, [r3, #0]
 8008c98:	2308      	movs	r3, #8
 8008c9a:	18fb      	adds	r3, r7, r3
 8008c9c:	889b      	ldrh	r3, [r3, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d027      	beq.n	8008cf2 <itsdk_error_get+0x8a>
			if ( *blockId < ITSDK_ERROR_BLOCKS ) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	2b3f      	cmp	r3, #63	; 0x3f
 8008ca8:	d823      	bhi.n	8008cf2 <itsdk_error_get+0x8a>
				// Read the block
				if ( _itsdk_error_read(*blockId,e) == ITSDK_ERROR_SUCCESS ) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	0011      	movs	r1, r2
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f7ff fed5 	bl	8008a62 <_itsdk_error_read>
 8008cb8:	1e03      	subs	r3, r0, #0
 8008cba:	d11a      	bne.n	8008cf2 <itsdk_error_get+0x8a>
					*blockId = (*blockId + 1) % ITSDK_ERROR_BLOCKS;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	4a14      	ldr	r2, [pc, #80]	; (8008d14 <itsdk_error_get+0xac>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	d504      	bpl.n	8008cd2 <itsdk_error_get+0x6a>
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	2240      	movs	r2, #64	; 0x40
 8008ccc:	4252      	negs	r2, r2
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	801a      	strh	r2, [r3, #0]
					if ( *blockId == h.writePt ) *blockId = ITSDK_ERROR_LASTBLOCK;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	881a      	ldrh	r2, [r3, #0]
 8008cdc:	2308      	movs	r3, #8
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	889b      	ldrh	r3, [r3, #4]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d103      	bne.n	8008cee <itsdk_error_get+0x86>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	4252      	negs	r2, r2
 8008cec:	801a      	strh	r2, [r3, #0]
					return ITSDK_ERROR_SUCCESS;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e00a      	b.n	8008d08 <itsdk_error_get+0xa0>
				}
			}
		}
	}
	e->error = 0;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	605a      	str	r2, [r3, #4]
	e->timeS = 0;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
	*blockId = ITSDK_ERROR_LASTBLOCK;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	4252      	negs	r2, r2
 8008d04:	801a      	strh	r2, [r3, #0]
	return ITSDK_ERROR_FAILED;
 8008d06:	2301      	movs	r3, #1
}
 8008d08:	0018      	movs	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	b004      	add	sp, #16
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	0000fffe 	.word	0x0000fffe
 8008d14:	8000003f 	.word	0x8000003f

08008d18 <itsdk_error_clear>:


/**
 * clear the error log history
 */
itsdk_error_ret_e itsdk_error_clear() {
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
	itsdk_error_head_t h;
	if ( _itsdk_error_readHeader(&h) == ITSDK_ERROR_FAILED ) return ITSDK_ERROR_FAILED;
 8008d1e:	003b      	movs	r3, r7
 8008d20:	0018      	movs	r0, r3
 8008d22:	f7ff fe49 	bl	80089b8 <_itsdk_error_readHeader>
 8008d26:	0003      	movs	r3, r0
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d101      	bne.n	8008d30 <itsdk_error_clear+0x18>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e008      	b.n	8008d42 <itsdk_error_clear+0x2a>
	h.readPt = h.writePt;
 8008d30:	003b      	movs	r3, r7
 8008d32:	889a      	ldrh	r2, [r3, #4]
 8008d34:	003b      	movs	r3, r7
 8008d36:	805a      	strh	r2, [r3, #2]
	_itsdk_error_writeHeader(&h);
 8008d38:	003b      	movs	r3, r7
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	f7ff fe5c 	bl	80089f8 <_itsdk_error_writeHeader>
	return ITSDK_ERROR_SUCCESS;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	0018      	movs	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b002      	add	sp, #8
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <itsdk_error_getSize>:

/**
 * Get the size of the error blocks
 */
itsdk_error_ret_e itsdk_error_getSize(uint32_t * size) {
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
	*size=sizeof(itsdk_error_t);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2282      	movs	r2, #130	; 0x82
 8008d56:	0092      	lsls	r2, r2, #2
 8008d58:	601a      	str	r2, [r3, #0]
	return ITSDK_ERROR_SUCCESS;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	b002      	add	sp, #8
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_itsdk_error_consolePriv>:
// =================================================================================
// Console options
// =================================================================================

#if ITSDK_WITH_CONSOLE == __ENABLE
static itsdk_console_return_e _itsdk_error_consolePriv(char * buffer, uint8_t sz) {
 8008d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d66:	b08b      	sub	sp, #44	; 0x2c
 8008d68:	af04      	add	r7, sp, #16
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	000a      	movs	r2, r1
 8008d6e:	1cfb      	adds	r3, r7, #3
 8008d70:	701a      	strb	r2, [r3, #0]
	if ( sz == 1 ) {
 8008d72:	1cfb      	adds	r3, r7, #3
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d000      	beq.n	8008d7c <_itsdk_error_consolePriv+0x18>
 8008d7a:	e087      	b.n	8008e8c <_itsdk_error_consolePriv+0x128>
	  switch(buffer[0]){
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b45      	cmp	r3, #69	; 0x45
 8008d82:	d100      	bne.n	8008d86 <_itsdk_error_consolePriv+0x22>
 8008d84:	e07a      	b.n	8008e7c <_itsdk_error_consolePriv+0x118>
 8008d86:	2b65      	cmp	r3, #101	; 0x65
 8008d88:	d010      	beq.n	8008dac <_itsdk_error_consolePriv+0x48>
 8008d8a:	2b3f      	cmp	r3, #63	; 0x3f
 8008d8c:	d000      	beq.n	8008d90 <_itsdk_error_consolePriv+0x2c>
			itsdk_error_clear();
			_itsdk_console_printf("OK\r\n");
  		    return ITSDK_CONSOLE_SUCCES;
			break;
		default:
			break;
 8008d8e:	e07e      	b.n	8008e8e <_itsdk_error_consolePriv+0x12a>
			_itsdk_console_printf("--- ErrorMng\r\n");
 8008d90:	4b41      	ldr	r3, [pc, #260]	; (8008e98 <_itsdk_error_consolePriv+0x134>)
 8008d92:	0018      	movs	r0, r3
 8008d94:	f7fc fea2 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("e          : print errors log\r\n");
 8008d98:	4b40      	ldr	r3, [pc, #256]	; (8008e9c <_itsdk_error_consolePriv+0x138>)
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	f7fc fe9e 	bl	8005adc <_itsdk_console_printf>
			_itsdk_console_printf("E          : Clear the error logs\r\n");
 8008da0:	4b3f      	ldr	r3, [pc, #252]	; (8008ea0 <_itsdk_error_consolePriv+0x13c>)
 8008da2:	0018      	movs	r0, r3
 8008da4:	f7fc fe9a 	bl	8005adc <_itsdk_console_printf>
		  return ITSDK_CONSOLE_SUCCES;
 8008da8:	2300      	movs	r3, #0
 8008daa:	e071      	b.n	8008e90 <_itsdk_error_consolePriv+0x12c>
				uint16_t blockId = ITSDK_ERROR_FIRSTBLOCK;
 8008dac:	2314      	movs	r3, #20
 8008dae:	18fb      	adds	r3, r7, r3
 8008db0:	2202      	movs	r2, #2
 8008db2:	4252      	negs	r2, r2
 8008db4:	801a      	strh	r2, [r3, #0]
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 8008db6:	e051      	b.n	8008e5c <_itsdk_error_consolePriv+0xf8>
					switch (e.error & ITSDK_ERROR_LEVEL_MASK) {
 8008db8:	230c      	movs	r3, #12
 8008dba:	18fb      	adds	r3, r7, r3
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	0f9b      	lsrs	r3, r3, #30
 8008dc0:	079b      	lsls	r3, r3, #30
 8008dc2:	2280      	movs	r2, #128	; 0x80
 8008dc4:	0612      	lsls	r2, r2, #24
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d011      	beq.n	8008dee <_itsdk_error_consolePriv+0x8a>
 8008dca:	22c0      	movs	r2, #192	; 0xc0
 8008dcc:	0612      	lsls	r2, r2, #24
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d012      	beq.n	8008df8 <_itsdk_error_consolePriv+0x94>
 8008dd2:	2280      	movs	r2, #128	; 0x80
 8008dd4:	05d2      	lsls	r2, r2, #23
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d004      	beq.n	8008de4 <_itsdk_error_consolePriv+0x80>
					case ITSDK_ERROR_LEVEL_INFO:  l = 'I'; break;
 8008dda:	2317      	movs	r3, #23
 8008ddc:	18fb      	adds	r3, r7, r3
 8008dde:	2249      	movs	r2, #73	; 0x49
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	e00e      	b.n	8008e02 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_WARN:  l = 'W'; break;
 8008de4:	2317      	movs	r3, #23
 8008de6:	18fb      	adds	r3, r7, r3
 8008de8:	2257      	movs	r2, #87	; 0x57
 8008dea:	701a      	strb	r2, [r3, #0]
 8008dec:	e009      	b.n	8008e02 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_ERROR: l = 'E'; break;
 8008dee:	2317      	movs	r3, #23
 8008df0:	18fb      	adds	r3, r7, r3
 8008df2:	2245      	movs	r2, #69	; 0x45
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	e004      	b.n	8008e02 <_itsdk_error_consolePriv+0x9e>
					case ITSDK_ERROR_LEVEL_FATAL: l = 'F'; break;
 8008df8:	2317      	movs	r3, #23
 8008dfa:	18fb      	adds	r3, r7, r3
 8008dfc:	2246      	movs	r2, #70	; 0x46
 8008dfe:	701a      	strb	r2, [r3, #0]
 8008e00:	46c0      	nop			; (mov r8, r8)
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8008e02:	2317      	movs	r3, #23
 8008e04:	18fb      	adds	r3, r7, r3
 8008e06:	781c      	ldrb	r4, [r3, #0]
 8008e08:	220c      	movs	r2, #12
 8008e0a:	18bb      	adds	r3, r7, r2
 8008e0c:	681d      	ldr	r5, [r3, #0]
 8008e0e:	18bb      	adds	r3, r7, r2
 8008e10:	685e      	ldr	r6, [r3, #4]
						(((e.error & ITSDK_ERROR_TYPE_APP) > 0) ? 'A' : 'S'),
 8008e12:	18bb      	adds	r3, r7, r2
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	2380      	movs	r3, #128	; 0x80
 8008e18:	059b      	lsls	r3, r3, #22
 8008e1a:	4013      	ands	r3, r2
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8008e1c:	d001      	beq.n	8008e22 <_itsdk_error_consolePriv+0xbe>
 8008e1e:	2241      	movs	r2, #65	; 0x41
 8008e20:	e000      	b.n	8008e24 <_itsdk_error_consolePriv+0xc0>
 8008e22:	2253      	movs	r2, #83	; 0x53
						(e.error & ITSDK_ERROR_ERROR_MASK) >> ITSDK_ERROR_ERROR_SHIFT,
 8008e24:	200c      	movs	r0, #12
 8008e26:	183b      	adds	r3, r7, r0
 8008e28:	685b      	ldr	r3, [r3, #4]
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8008e2a:	051b      	lsls	r3, r3, #20
 8008e2c:	0d19      	lsrs	r1, r3, #20
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 8008e2e:	183b      	adds	r3, r7, r0
 8008e30:	6858      	ldr	r0, [r3, #4]
 8008e32:	2380      	movs	r3, #128	; 0x80
 8008e34:	055b      	lsls	r3, r3, #21
 8008e36:	4003      	ands	r3, r0
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8008e38:	d006      	beq.n	8008e48 <_itsdk_error_consolePriv+0xe4>
						( ((e.error & ITSDK_ERROR_WITH_VALUE) > 0)? (e.error & ITSDK_ERROR_VALUE_MASK) >> ITSDK_ERROR_VALUE_SHIFT:0)
 8008e3a:	230c      	movs	r3, #12
 8008e3c:	18fb      	adds	r3, r7, r3
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	0b1b      	lsrs	r3, r3, #12
					_itsdk_console_printf("%c %015d : 0x%08X ( %c 0x%03X / 0x%04X )\r\n",
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	0c1b      	lsrs	r3, r3, #16
 8008e46:	e000      	b.n	8008e4a <_itsdk_error_consolePriv+0xe6>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4816      	ldr	r0, [pc, #88]	; (8008ea4 <_itsdk_error_consolePriv+0x140>)
 8008e4c:	9302      	str	r3, [sp, #8]
 8008e4e:	9101      	str	r1, [sp, #4]
 8008e50:	9200      	str	r2, [sp, #0]
 8008e52:	0033      	movs	r3, r6
 8008e54:	002a      	movs	r2, r5
 8008e56:	0021      	movs	r1, r4
 8008e58:	f7fc fe40 	bl	8005adc <_itsdk_console_printf>
				while ( itsdk_error_get(&blockId,&e) == ITSDK_ERROR_SUCCESS ) {
 8008e5c:	230c      	movs	r3, #12
 8008e5e:	18fa      	adds	r2, r7, r3
 8008e60:	2314      	movs	r3, #20
 8008e62:	18fb      	adds	r3, r7, r3
 8008e64:	0011      	movs	r1, r2
 8008e66:	0018      	movs	r0, r3
 8008e68:	f7ff fefe 	bl	8008c68 <itsdk_error_get>
 8008e6c:	1e03      	subs	r3, r0, #0
 8008e6e:	d0a3      	beq.n	8008db8 <_itsdk_error_consolePriv+0x54>
				_itsdk_console_printf("OK\r\n");
 8008e70:	4b0d      	ldr	r3, [pc, #52]	; (8008ea8 <_itsdk_error_consolePriv+0x144>)
 8008e72:	0018      	movs	r0, r3
 8008e74:	f7fc fe32 	bl	8005adc <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e009      	b.n	8008e90 <_itsdk_error_consolePriv+0x12c>
			itsdk_error_clear();
 8008e7c:	f7ff ff4c 	bl	8008d18 <itsdk_error_clear>
			_itsdk_console_printf("OK\r\n");
 8008e80:	4b09      	ldr	r3, [pc, #36]	; (8008ea8 <_itsdk_error_consolePriv+0x144>)
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7fc fe2a 	bl	8005adc <_itsdk_console_printf>
  		    return ITSDK_CONSOLE_SUCCES;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	e001      	b.n	8008e90 <_itsdk_error_consolePriv+0x12c>
	  }
	} //Sz == 1
 8008e8c:	46c0      	nop			; (mov r8, r8)
  return ITSDK_CONSOLE_NOTFOUND;
 8008e8e:	2301      	movs	r3, #1
}
 8008e90:	0018      	movs	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b007      	add	sp, #28
 8008e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e98:	0800c9fc 	.word	0x0800c9fc
 8008e9c:	0800ca0c 	.word	0x0800ca0c
 8008ea0:	0800ca2c 	.word	0x0800ca2c
 8008ea4:	0800ca50 	.word	0x0800ca50
 8008ea8:	0800ca7c 	.word	0x0800ca7c

08008eac <log_init>:
__t_log __log;

/**
 * Setup the logging level and target
 */
bool log_init(uint16_t config) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	0002      	movs	r2, r0
 8008eb4:	1dbb      	adds	r3, r7, #6
 8008eb6:	801a      	strh	r2, [r3, #0]

  __log.logError  = (( config & LOGGER_CONFIG_ERROR_LVL_MASK  ) > 0)?1:0;
 8008eb8:	1dbb      	adds	r3, r7, #6
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	4a51      	ldr	r2, [pc, #324]	; (8009004 <log_init+0x158>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	17da      	asrs	r2, r3, #31
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	0fdb      	lsrs	r3, r3, #31
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	4b4f      	ldr	r3, [pc, #316]	; (8009008 <log_init+0x15c>)
 8008eca:	2101      	movs	r1, #1
 8008ecc:	400a      	ands	r2, r1
 8008ece:	1890      	adds	r0, r2, r2
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	2102      	movs	r1, #2
 8008ed4:	438a      	bics	r2, r1
 8008ed6:	1c11      	adds	r1, r2, #0
 8008ed8:	1c02      	adds	r2, r0, #0
 8008eda:	430a      	orrs	r2, r1
 8008edc:	701a      	strb	r2, [r3, #0]
  __log.logWarn   = (( config & LOGGER_CONFIG_WARN_LVL_MASK   ) > 0)?1:0;
 8008ede:	1dbb      	adds	r3, r7, #6
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	4a4a      	ldr	r2, [pc, #296]	; (800900c <log_init+0x160>)
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	17da      	asrs	r2, r3, #31
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	0fdb      	lsrs	r3, r3, #31
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	4b46      	ldr	r3, [pc, #280]	; (8009008 <log_init+0x15c>)
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	400a      	ands	r2, r1
 8008ef4:	0090      	lsls	r0, r2, #2
 8008ef6:	781a      	ldrb	r2, [r3, #0]
 8008ef8:	2104      	movs	r1, #4
 8008efa:	438a      	bics	r2, r1
 8008efc:	1c11      	adds	r1, r2, #0
 8008efe:	1c02      	adds	r2, r0, #0
 8008f00:	430a      	orrs	r2, r1
 8008f02:	701a      	strb	r2, [r3, #0]
  __log.logInfo   = (( config & LOGGER_CONFIG_INFO_LVL_MASK   ) > 0)?1:0;
 8008f04:	1dbb      	adds	r3, r7, #6
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	4a41      	ldr	r2, [pc, #260]	; (8009010 <log_init+0x164>)
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	17da      	asrs	r2, r3, #31
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	0fdb      	lsrs	r3, r3, #31
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	4b3c      	ldr	r3, [pc, #240]	; (8009008 <log_init+0x15c>)
 8008f16:	2101      	movs	r1, #1
 8008f18:	400a      	ands	r2, r1
 8008f1a:	00d0      	lsls	r0, r2, #3
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	2108      	movs	r1, #8
 8008f20:	438a      	bics	r2, r1
 8008f22:	1c11      	adds	r1, r2, #0
 8008f24:	1c02      	adds	r2, r0, #0
 8008f26:	430a      	orrs	r2, r1
 8008f28:	701a      	strb	r2, [r3, #0]
  __log.logDebug  = (( config & LOGGER_CONFIG_DEBUG_LVL_MASK  ) > 0)?1:0;
 8008f2a:	1dbb      	adds	r3, r7, #6
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	4a39      	ldr	r2, [pc, #228]	; (8009014 <log_init+0x168>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	17da      	asrs	r2, r3, #31
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	0fdb      	lsrs	r3, r3, #31
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	4b33      	ldr	r3, [pc, #204]	; (8009008 <log_init+0x15c>)
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	400a      	ands	r2, r1
 8008f40:	0110      	lsls	r0, r2, #4
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	2110      	movs	r1, #16
 8008f46:	438a      	bics	r2, r1
 8008f48:	1c11      	adds	r1, r2, #0
 8008f4a:	1c02      	adds	r2, r0, #0
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	701a      	strb	r2, [r3, #0]
  __log.onSerial1 = (( config & LOGGER_CONFIG_SERIAL1_MASK    ) > 0)?1:0;
 8008f50:	1dbb      	adds	r3, r7, #6
 8008f52:	881a      	ldrh	r2, [r3, #0]
 8008f54:	23f0      	movs	r3, #240	; 0xf0
 8008f56:	011b      	lsls	r3, r3, #4
 8008f58:	4013      	ands	r3, r2
 8008f5a:	17da      	asrs	r2, r3, #31
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	0fdb      	lsrs	r3, r3, #31
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	4b29      	ldr	r3, [pc, #164]	; (8009008 <log_init+0x15c>)
 8008f64:	2101      	movs	r1, #1
 8008f66:	400a      	ands	r2, r1
 8008f68:	0150      	lsls	r0, r2, #5
 8008f6a:	781a      	ldrb	r2, [r3, #0]
 8008f6c:	2120      	movs	r1, #32
 8008f6e:	438a      	bics	r2, r1
 8008f70:	1c11      	adds	r1, r2, #0
 8008f72:	1c02      	adds	r2, r0, #0
 8008f74:	430a      	orrs	r2, r1
 8008f76:	701a      	strb	r2, [r3, #0]
  __log.onSerial2 = (( config & LOGGER_CONFIG_SERIAL2_MASK    ) > 0)?1:0;
 8008f78:	1dbb      	adds	r3, r7, #6
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	22f0      	movs	r2, #240	; 0xf0
 8008f7e:	4013      	ands	r3, r2
 8008f80:	17da      	asrs	r2, r3, #31
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	0fdb      	lsrs	r3, r3, #31
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	4b1f      	ldr	r3, [pc, #124]	; (8009008 <log_init+0x15c>)
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	400a      	ands	r2, r1
 8008f8e:	0190      	lsls	r0, r2, #6
 8008f90:	781a      	ldrb	r2, [r3, #0]
 8008f92:	2140      	movs	r1, #64	; 0x40
 8008f94:	438a      	bics	r2, r1
 8008f96:	1c11      	adds	r1, r2, #0
 8008f98:	1c02      	adds	r2, r0, #0
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	701a      	strb	r2, [r3, #0]
  __log.onDebug   = (( config & LOGGER_CONFIG_DEBUGLNK_MASK   ) > 0)?1:0;
 8008f9e:	1dbb      	adds	r3, r7, #6
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	220f      	movs	r2, #15
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	17da      	asrs	r2, r3, #31
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	0fdb      	lsrs	r3, r3, #31
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	4b16      	ldr	r3, [pc, #88]	; (8009008 <log_init+0x15c>)
 8008fb0:	01d0      	lsls	r0, r2, #7
 8008fb2:	781a      	ldrb	r2, [r3, #0]
 8008fb4:	217f      	movs	r1, #127	; 0x7f
 8008fb6:	400a      	ands	r2, r1
 8008fb8:	1c11      	adds	r1, r2, #0
 8008fba:	1c02      	adds	r2, r0, #0
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	701a      	strb	r2, [r3, #0]
  __log.onFile    = (( config & LOGGER_CONFIG_FILE_MASK       ) > 0)?1:0;
 8008fc0:	1dbb      	adds	r3, r7, #6
 8008fc2:	881a      	ldrh	r2, [r3, #0]
 8008fc4:	23f0      	movs	r3, #240	; 0xf0
 8008fc6:	021b      	lsls	r3, r3, #8
 8008fc8:	4013      	ands	r3, r2
 8008fca:	17da      	asrs	r2, r3, #31
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	0fdb      	lsrs	r3, r3, #31
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	4b0d      	ldr	r3, [pc, #52]	; (8009008 <log_init+0x15c>)
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	400a      	ands	r2, r1
 8008fd8:	0010      	movs	r0, r2
 8008fda:	785a      	ldrb	r2, [r3, #1]
 8008fdc:	2101      	movs	r1, #1
 8008fde:	438a      	bics	r2, r1
 8008fe0:	1c11      	adds	r1, r2, #0
 8008fe2:	1c02      	adds	r2, r0, #0
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	705a      	strb	r2, [r3, #1]
  // Init the loggers
  if (__log.onFile) {
	  // Init file logger
	  // @TODO support file logger
  }
  __log.logConf = config;
 8008fe8:	4b07      	ldr	r3, [pc, #28]	; (8009008 <log_init+0x15c>)
 8008fea:	1dba      	adds	r2, r7, #6
 8008fec:	8812      	ldrh	r2, [r2, #0]
 8008fee:	805a      	strh	r2, [r3, #2]
  __log.ready = true;
 8008ff0:	4b05      	ldr	r3, [pc, #20]	; (8009008 <log_init+0x15c>)
 8008ff2:	781a      	ldrb	r2, [r3, #0]
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	701a      	strb	r2, [r3, #0]
  return true;
 8008ffa:	2301      	movs	r3, #1
}
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	46bd      	mov	sp, r7
 8009000:	b002      	add	sp, #8
 8009002:	bd80      	pop	{r7, pc}
 8009004:	00001111 	.word	0x00001111
 8009008:	200004c0 	.word	0x200004c0
 800900c:	00002222 	.word	0x00002222
 8009010:	00004444 	.word	0x00004444
 8009014:	00008888 	.word	0x00008888

08009018 <log_error>:

/**
 * Log an error according to the configuration on the different
 * possible logger
 */
void log_error(char *format, ...) {
 8009018:	b40f      	push	{r0, r1, r2, r3}
 800901a:	b580      	push	{r7, lr}
 800901c:	b096      	sub	sp, #88	; 0x58
 800901e:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logError && __log.ready ) {
 8009020:	4b1f      	ldr	r3, [pc, #124]	; (80090a0 <log_error+0x88>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2202      	movs	r2, #2
 8009026:	4013      	ands	r3, r2
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d031      	beq.n	8009092 <log_error+0x7a>
 800902e:	4b1c      	ldr	r3, [pc, #112]	; (80090a0 <log_error+0x88>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2201      	movs	r2, #1
 8009034:	4013      	ands	r3, r2
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d02a      	beq.n	8009092 <log_error+0x7a>
    va_start(args,format);
 800903c:	2364      	movs	r3, #100	; 0x64
 800903e:	18fb      	adds	r3, r7, r3
 8009040:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 8009042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009046:	1d38      	adds	r0, r7, #4
 8009048:	2150      	movs	r1, #80	; 0x50
 800904a:	f002 fb79 	bl	800b740 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 800904e:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <log_error+0x88>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2220      	movs	r2, #32
 8009054:	4013      	ands	r3, r2
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <log_error+0x4c>
      serial1_print(fmtBuffer);
 800905c:	1d3b      	adds	r3, r7, #4
 800905e:	0018      	movs	r0, r3
 8009060:	f001 fb58 	bl	800a714 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 8009064:	4b0e      	ldr	r3, [pc, #56]	; (80090a0 <log_error+0x88>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2240      	movs	r2, #64	; 0x40
 800906a:	4013      	ands	r3, r2
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <log_error+0x62>
      serial2_print(fmtBuffer);
 8009072:	1d3b      	adds	r3, r7, #4
 8009074:	0018      	movs	r0, r3
 8009076:	f001 fba7 	bl	800a7c8 <serial2_print>
    }

    if ( __log.onDebug  ) {
 800907a:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <log_error+0x88>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	227f      	movs	r2, #127	; 0x7f
 8009080:	4393      	bics	r3, r2
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <log_error+0x7a>
      debug_print(DEBUG_PRINT_ERROR,fmtBuffer);
 8009088:	1d3b      	adds	r3, r7, #4
 800908a:	0019      	movs	r1, r3
 800908c:	2003      	movs	r0, #3
 800908e:	f001 fc8b 	bl	800a9a8 <debug_print>
      //logfile_print(fmtBuffer);
    }

  }
#endif
}
 8009092:	46c0      	nop			; (mov r8, r8)
 8009094:	46bd      	mov	sp, r7
 8009096:	b016      	add	sp, #88	; 0x58
 8009098:	bc80      	pop	{r7}
 800909a:	bc08      	pop	{r3}
 800909c:	b004      	add	sp, #16
 800909e:	4718      	bx	r3
 80090a0:	200004c0 	.word	0x200004c0

080090a4 <log_warn>:

/**
 * Log a warning according to the configuration on the different
 * possible logger
 */
void log_warn(char *format, ...) {
 80090a4:	b40f      	push	{r0, r1, r2, r3}
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b096      	sub	sp, #88	; 0x58
 80090aa:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logWarn  && __log.ready ) {
 80090ac:	4b1f      	ldr	r3, [pc, #124]	; (800912c <log_warn+0x88>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2204      	movs	r2, #4
 80090b2:	4013      	ands	r3, r2
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d031      	beq.n	800911e <log_warn+0x7a>
 80090ba:	4b1c      	ldr	r3, [pc, #112]	; (800912c <log_warn+0x88>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	2201      	movs	r2, #1
 80090c0:	4013      	ands	r3, r2
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d02a      	beq.n	800911e <log_warn+0x7a>
    va_start(args,format);
 80090c8:	2364      	movs	r3, #100	; 0x64
 80090ca:	18fb      	adds	r3, r7, r3
 80090cc:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 80090ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090d2:	1d38      	adds	r0, r7, #4
 80090d4:	2150      	movs	r1, #80	; 0x50
 80090d6:	f002 fb33 	bl	800b740 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 80090da:	4b14      	ldr	r3, [pc, #80]	; (800912c <log_warn+0x88>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2220      	movs	r2, #32
 80090e0:	4013      	ands	r3, r2
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <log_warn+0x4c>
    	serial1_print(fmtBuffer);
 80090e8:	1d3b      	adds	r3, r7, #4
 80090ea:	0018      	movs	r0, r3
 80090ec:	f001 fb12 	bl	800a714 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 80090f0:	4b0e      	ldr	r3, [pc, #56]	; (800912c <log_warn+0x88>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2240      	movs	r2, #64	; 0x40
 80090f6:	4013      	ands	r3, r2
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <log_warn+0x62>
    	serial2_print(fmtBuffer);
 80090fe:	1d3b      	adds	r3, r7, #4
 8009100:	0018      	movs	r0, r3
 8009102:	f001 fb61 	bl	800a7c8 <serial2_print>
    }

    if ( __log.onDebug ) {
 8009106:	4b09      	ldr	r3, [pc, #36]	; (800912c <log_warn+0x88>)
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	227f      	movs	r2, #127	; 0x7f
 800910c:	4393      	bics	r3, r2
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	d004      	beq.n	800911e <log_warn+0x7a>
    	debug_print(DEBUG_PRINT_WARNING,fmtBuffer);
 8009114:	1d3b      	adds	r3, r7, #4
 8009116:	0019      	movs	r1, r3
 8009118:	2002      	movs	r0, #2
 800911a:	f001 fc45 	bl	800a9a8 <debug_print>
        // @ TODO logfile_printf("%lu [warn] ",time_get_ms());
        //logfile_print(fmtBuffer);
    }
  }
#endif
}
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	46bd      	mov	sp, r7
 8009122:	b016      	add	sp, #88	; 0x58
 8009124:	bc80      	pop	{r7}
 8009126:	bc08      	pop	{r3}
 8009128:	b004      	add	sp, #16
 800912a:	4718      	bx	r3
 800912c:	200004c0 	.word	0x200004c0

08009130 <log_info>:

/**
 * Log a info according to the configuration on the different
 * possible logger
 */
void log_info(char *format, ...) {
 8009130:	b40f      	push	{r0, r1, r2, r3}
 8009132:	b580      	push	{r7, lr}
 8009134:	b096      	sub	sp, #88	; 0x58
 8009136:	af00      	add	r7, sp, #0
#if ITSDK_LOGGER_CONF > 0
  va_list args;
  char 	fmtBuffer[LOGGER_MAX_BUF_SZ]; 				// buffer for log line formating before printing
  if ( __log.logInfo  && __log.ready ) {
 8009138:	4b1f      	ldr	r3, [pc, #124]	; (80091b8 <log_info+0x88>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2208      	movs	r2, #8
 800913e:	4013      	ands	r3, r2
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d031      	beq.n	80091aa <log_info+0x7a>
 8009146:	4b1c      	ldr	r3, [pc, #112]	; (80091b8 <log_info+0x88>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2201      	movs	r2, #1
 800914c:	4013      	ands	r3, r2
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b00      	cmp	r3, #0
 8009152:	d02a      	beq.n	80091aa <log_info+0x7a>
    va_start(args,format);
 8009154:	2364      	movs	r3, #100	; 0x64
 8009156:	18fb      	adds	r3, r7, r3
 8009158:	657b      	str	r3, [r7, #84]	; 0x54
    vsnprintf(fmtBuffer,LOGGER_MAX_BUF_SZ,format,args);
 800915a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800915c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800915e:	1d38      	adds	r0, r7, #4
 8009160:	2150      	movs	r1, #80	; 0x50
 8009162:	f002 faed 	bl	800b740 <vsniprintf>
    va_end(args);

    if ( __log.onSerial1 ) {
 8009166:	4b14      	ldr	r3, [pc, #80]	; (80091b8 <log_info+0x88>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2220      	movs	r2, #32
 800916c:	4013      	ands	r3, r2
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <log_info+0x4c>
    	serial1_print(fmtBuffer);
 8009174:	1d3b      	adds	r3, r7, #4
 8009176:	0018      	movs	r0, r3
 8009178:	f001 facc 	bl	800a714 <serial1_print>
    }

    if ( __log.onSerial2 ) {
 800917c:	4b0e      	ldr	r3, [pc, #56]	; (80091b8 <log_info+0x88>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2240      	movs	r2, #64	; 0x40
 8009182:	4013      	ands	r3, r2
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <log_info+0x62>
    	serial2_print(fmtBuffer);
 800918a:	1d3b      	adds	r3, r7, #4
 800918c:	0018      	movs	r0, r3
 800918e:	f001 fb1b 	bl	800a7c8 <serial2_print>
    }

    if ( __log.onDebug ) {
 8009192:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <log_info+0x88>)
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	227f      	movs	r2, #127	; 0x7f
 8009198:	4393      	bics	r3, r2
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <log_info+0x7a>
    	debug_print(DEBUG_PRINT_INFO, fmtBuffer);
 80091a0:	1d3b      	adds	r3, r7, #4
 80091a2:	0019      	movs	r1, r3
 80091a4:	2001      	movs	r0, #1
 80091a6:	f001 fbff 	bl	800a9a8 <debug_print>
        // @ TODO logfile_printf("%lu [info] ",time_get_ms());
        //logfile_print(__log.fmtBuffer);
    }
  }
#endif
}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	46bd      	mov	sp, r7
 80091ae:	b016      	add	sp, #88	; 0x58
 80091b0:	bc80      	pop	{r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	b004      	add	sp, #16
 80091b6:	4718      	bx	r3
 80091b8:	200004c0 	.word	0x200004c0

080091bc <itsdk_lorawan_getJoinState>:
bool itsdk_lorawan_hasjoined() {
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_hasjoined\r\n"));
	return ( lorawan_driver_LORA_getJoinState() == LORAWAN_STATE_JOIN_SUCCESS);
}

itsdk_lorawan_join_t itsdk_lorawan_getJoinState() {
 80091bc:	b590      	push	{r4, r7, lr}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
	LOG_DEBUG_LORAWANSTK(("itsdk_lorawan_getJoinState\r\n"));
	lorawan_driver_joinState r = lorawan_driver_LORA_getSendState();
 80091c2:	1dfc      	adds	r4, r7, #7
 80091c4:	f7fc fa34 	bl	8005630 <lorawan_driver_LORA_getSendState>
 80091c8:	0003      	movs	r3, r0
 80091ca:	7023      	strb	r3, [r4, #0]
	switch(r) {
 80091cc:	1dfb      	adds	r3, r7, #7
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d002      	beq.n	80091da <itsdk_lorawan_getJoinState+0x1e>
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d002      	beq.n	80091de <itsdk_lorawan_getJoinState+0x22>
 80091d8:	e003      	b.n	80091e2 <itsdk_lorawan_getJoinState+0x26>
	case LORAWAN_STATE_JOIN_SUCCESS:
		return LORAWAN_JOIN_SUCCESS;
 80091da:	2301      	movs	r3, #1
 80091dc:	e002      	b.n	80091e4 <itsdk_lorawan_getJoinState+0x28>
	case LORAWAN_STATE_JOIN_FAILED:
		return LORAWAN_JOIN_FAILED;
 80091de:	2302      	movs	r3, #2
 80091e0:	e000      	b.n	80091e4 <itsdk_lorawan_getJoinState+0x28>
	default:
	case LORAWAN_STATE_NONE:
	case LORAWAN_STATE_INITIALIZED:
	case LORAWAN_STATE_JOINING:
	case LORAWAN_STATE_END:
		return LORAWAN_JOIN_PENDING;
 80091e2:	2300      	movs	r3, #0
	}
}
 80091e4:	0018      	movs	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b003      	add	sp, #12
 80091ea:	bd90      	pop	{r4, r7, pc}

080091ec <itsdk_lorawan_resetFactoryDefaults>:
 * Configure the SecureStore with the Static values obtained from configLoRaWan.h
 * When force is false, the secure store will be refreshed only if there is no
 * configuration already setup.
 */
#if ITSDK_WITH_SECURESTORE == __ENABLE
itsdk_lorawan_return_t itsdk_lorawan_resetFactoryDefaults(bool force) {
 80091ec:	b5b0      	push	{r4, r5, r7, lr}
 80091ee:	b090      	sub	sp, #64	; 0x40
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	0002      	movs	r2, r0
 80091f4:	1dfb      	adds	r3, r7, #7
 80091f6:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[16];
	if ( force || itsdk_secstore_readBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer) != SS_SUCCESS ) {
 80091f8:	1dfb      	adds	r3, r7, #7
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d107      	bne.n	8009210 <itsdk_lorawan_resetFactoryDefaults+0x24>
 8009200:	232c      	movs	r3, #44	; 0x2c
 8009202:	18fb      	adds	r3, r7, r3
 8009204:	0019      	movs	r1, r3
 8009206:	2007      	movs	r0, #7
 8009208:	f7fd fd60 	bl	8006ccc <itsdk_secstore_readBlock>
 800920c:	1e03      	subs	r3, r0, #0
 800920e:	d038      	beq.n	8009282 <itsdk_lorawan_resetFactoryDefaults+0x96>
		uint8_t de[8] = ITSDK_LORAWAN_DEVEUI;
 8009210:	2324      	movs	r3, #36	; 0x24
 8009212:	18fb      	adds	r3, r7, r3
 8009214:	4a1d      	ldr	r2, [pc, #116]	; (800928c <itsdk_lorawan_resetFactoryDefaults+0xa0>)
 8009216:	ca03      	ldmia	r2!, {r0, r1}
 8009218:	c303      	stmia	r3!, {r0, r1}
		uint8_t ap[8] = ITSDK_LORAWAN_APPEUI;
 800921a:	231c      	movs	r3, #28
 800921c:	18fb      	adds	r3, r7, r3
 800921e:	4a1c      	ldr	r2, [pc, #112]	; (8009290 <itsdk_lorawan_resetFactoryDefaults+0xa4>)
 8009220:	ca03      	ldmia	r2!, {r0, r1}
 8009222:	c303      	stmia	r3!, {r0, r1}
		for ( int i = 0 ; i< 8 ; i++) {
 8009224:	2300      	movs	r3, #0
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009228:	e016      	b.n	8009258 <itsdk_lorawan_resetFactoryDefaults+0x6c>
			buffer[ITSDK_SECSTORE_OTAA_DEV_ID+i] = de[i];
 800922a:	2324      	movs	r3, #36	; 0x24
 800922c:	18fa      	adds	r2, r7, r3
 800922e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009230:	18d3      	adds	r3, r2, r3
 8009232:	7819      	ldrb	r1, [r3, #0]
 8009234:	202c      	movs	r0, #44	; 0x2c
 8009236:	183a      	adds	r2, r7, r0
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923a:	18d3      	adds	r3, r2, r3
 800923c:	1c0a      	adds	r2, r1, #0
 800923e:	701a      	strb	r2, [r3, #0]
			buffer[ITSDK_SECSTORE_OTAA_APP_ID+i] = ap[i];
 8009240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009242:	3308      	adds	r3, #8
 8009244:	221c      	movs	r2, #28
 8009246:	18b9      	adds	r1, r7, r2
 8009248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800924a:	188a      	adds	r2, r1, r2
 800924c:	7811      	ldrb	r1, [r2, #0]
 800924e:	183a      	adds	r2, r7, r0
 8009250:	54d1      	strb	r1, [r2, r3]
		for ( int i = 0 ; i< 8 ; i++) {
 8009252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009254:	3301      	adds	r3, #1
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925a:	2b07      	cmp	r3, #7
 800925c:	dde5      	ble.n	800922a <itsdk_lorawan_resetFactoryDefaults+0x3e>
		}
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_DEVEUIAPPEUI, buffer);
 800925e:	232c      	movs	r3, #44	; 0x2c
 8009260:	18fb      	adds	r3, r7, r3
 8009262:	0019      	movs	r1, r3
 8009264:	2007      	movs	r0, #7
 8009266:	f7fd fd7e 	bl	8006d66 <itsdk_secstore_writeBlock>

		uint8_t appkey[16] = ITSDK_LORAWAN_APPKEY;
 800926a:	210c      	movs	r1, #12
 800926c:	187b      	adds	r3, r7, r1
 800926e:	4a09      	ldr	r2, [pc, #36]	; (8009294 <itsdk_lorawan_resetFactoryDefaults+0xa8>)
 8009270:	ca31      	ldmia	r2!, {r0, r4, r5}
 8009272:	c331      	stmia	r3!, {r0, r4, r5}
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	601a      	str	r2, [r3, #0]
		itsdk_secstore_writeBlock(ITSDK_SS_LORA_OTAA_APPKEY, appkey);
 8009278:	187b      	adds	r3, r7, r1
 800927a:	0019      	movs	r1, r3
 800927c:	2008      	movs	r0, #8
 800927e:	f7fd fd72 	bl	8006d66 <itsdk_secstore_writeBlock>
	}
	return LORAWAN_RETURN_SUCESS;
 8009282:	2300      	movs	r3, #0
}
 8009284:	0018      	movs	r0, r3
 8009286:	46bd      	mov	sp, r7
 8009288:	b010      	add	sp, #64	; 0x40
 800928a:	bdb0      	pop	{r4, r5, r7, pc}
 800928c:	0800ca84 	.word	0x0800ca84
 8009290:	0800ca8c 	.word	0x0800ca8c
 8009294:	0800ca94 	.word	0x0800ca94

08009298 <lowPower_switch>:
/**
 * Switch to low power mode selected for the expected platform
 */
void __attribute__((optimize("O3"))) lowPower_switch() {

	if (__lowPowerState==LOWPRW_ENABLE) {
 8009298:	4b11      	ldr	r3, [pc, #68]	; (80092e0 <lowPower_switch+0x48>)
void __attribute__((optimize("O3"))) lowPower_switch() {
 800929a:	b510      	push	{r4, lr}
	if (__lowPowerState==LOWPRW_ENABLE) {
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d000      	beq.n	80092a4 <lowPower_switch+0xc>
			}
			#endif
		}
	}

}
 80092a2:	bd10      	pop	{r4, pc}
			uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 80092a4:	f000 fb6c 	bl	8009980 <itsdk_stimer_nextTimeoutMs>
			if ( maxDur < duration ) duration = maxDur;
 80092a8:	23f4      	movs	r3, #244	; 0xf4
 80092aa:	33ff      	adds	r3, #255	; 0xff
 80092ac:	4298      	cmp	r0, r3
 80092ae:	d80e      	bhi.n	80092ce <lowPower_switch+0x36>
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 80092b0:	2805      	cmp	r0, #5
 80092b2:	d9f6      	bls.n	80092a2 <lowPower_switch+0xa>
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 80092b4:	2100      	movs	r1, #0
 80092b6:	f001 fcf9 	bl	800acac <stm32l_lowPowerSetup>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d1f1      	bne.n	80092a2 <lowPower_switch+0xa>
				stm32l_lowPowerResume(STM32L_LOWPOWER_NORMAL_STOP);
 80092be:	f001 fd71 	bl	800ada4 <stm32l_lowPowerResume>
				itsdk_state.lastWakeUpTimeUs = itsdk_time_get_us();
 80092c2:	f000 fab5 	bl	8009830 <itsdk_time_get_us>
 80092c6:	4b07      	ldr	r3, [pc, #28]	; (80092e4 <lowPower_switch+0x4c>)
 80092c8:	6098      	str	r0, [r3, #8]
 80092ca:	60d9      	str	r1, [r3, #12]
}
 80092cc:	e7e9      	b.n	80092a2 <lowPower_switch+0xa>
			duration = ITSDK_LOWPOWER_RTC_MS;
 80092ce:	20fa      	movs	r0, #250	; 0xfa
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 80092d0:	2100      	movs	r1, #0
			duration = ITSDK_LOWPOWER_RTC_MS;
 80092d2:	0040      	lsls	r0, r0, #1
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_NORMAL_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 80092d4:	f001 fcea 	bl	800acac <stm32l_lowPowerSetup>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d1e2      	bne.n	80092a2 <lowPower_switch+0xa>
 80092dc:	e7ef      	b.n	80092be <lowPower_switch+0x26>
 80092de:	46c0      	nop			; (mov r8, r8)
 80092e0:	20000130 	.word	0x20000130
 80092e4:	200004b0 	.word	0x200004b0

080092e8 <lowPower_enable>:

/**
 * Disable LowPower mode
 */
void lowPower_enable() {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_ENABLE;
 80092ec:	4b02      	ldr	r3, [pc, #8]	; (80092f8 <lowPower_enable+0x10>)
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
}
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20000130 	.word	0x20000130

080092fc <lowPower_disable>:

/**
 * Enable LowPower mode
 */
void lowPower_disable() {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
	__lowPowerState= LOWPRW_DISABLE;
 8009300:	4b02      	ldr	r3, [pc, #8]	; (800930c <lowPower_disable+0x10>)
 8009302:	2201      	movs	r2, #1
 8009304:	701a      	strb	r2, [r3, #0]
}
 8009306:	46c0      	nop			; (mov r8, r8)
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	20000130 	.word	0x20000130

08009310 <lowPower_delayMs>:
/**
 * Have a delay in low power with no wake-up reason other than RTC
 * end. The duration won't be respected if a timer ends before the
 * expected duration. The pending duration is returned
 */
uint32_t lowPower_delayMs(uint32_t duration) {
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	uint32_t pendingDur = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
	uint32_t maxDur = itsdk_stimer_nextTimeoutMs();
 800931c:	f000 fb30 	bl	8009980 <itsdk_stimer_nextTimeoutMs>
 8009320:	0003      	movs	r3, r0
 8009322:	60bb      	str	r3, [r7, #8]
	if ( maxDur < duration ) {
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	429a      	cmp	r2, r3
 800932a:	d205      	bcs.n	8009338 <lowPower_delayMs+0x28>
		pendingDur = duration - maxDur;
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	60fb      	str	r3, [r7, #12]
		duration = maxDur;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	607b      	str	r3, [r7, #4]
	}
	if ( itsdk_stimer_isLowPowerSwitchAutorized()  && __lowPowerState == LOWPRW_ENABLE ) {
 8009338:	f000 fa9a 	bl	8009870 <itsdk_stimer_isLowPowerSwitchAutorized>
 800933c:	1e03      	subs	r3, r0, #0
 800933e:	d016      	beq.n	800936e <lowPower_delayMs+0x5e>
 8009340:	4b10      	ldr	r3, [pc, #64]	; (8009384 <lowPower_delayMs+0x74>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d112      	bne.n	800936e <lowPower_delayMs+0x5e>
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b05      	cmp	r3, #5
 800934c:	d90a      	bls.n	8009364 <lowPower_delayMs+0x54>
			#if ITSDK_PLATFORM == __PLATFORM_STM32L0
			// sleeping
			if ( stm32l_lowPowerSetup(duration,STM32L_LOWPOWER_RTCONLY_STOP) == STM32L_LOWPOWER_SUCCESS ) {
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2101      	movs	r1, #1
 8009352:	0018      	movs	r0, r3
 8009354:	f001 fcaa 	bl	800acac <stm32l_lowPowerSetup>
 8009358:	1e03      	subs	r3, r0, #0
 800935a:	d10d      	bne.n	8009378 <lowPower_delayMs+0x68>
				// waking up
				stm32l_lowPowerResume(STM32L_LOWPOWER_RTCONLY_STOP);
 800935c:	2001      	movs	r0, #1
 800935e:	f001 fd21 	bl	800ada4 <stm32l_lowPowerResume>
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 8009362:	e009      	b.n	8009378 <lowPower_delayMs+0x68>
			}
			#endif
		} else {
			itsdk_delayMs(duration);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	0018      	movs	r0, r3
 8009368:	f001 f8e2 	bl	800a530 <itsdk_delayMs>
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 800936c:	e004      	b.n	8009378 <lowPower_delayMs+0x68>
		}
	} else {
		itsdk_delayMs(duration);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	0018      	movs	r0, r3
 8009372:	f001 f8dd 	bl	800a530 <itsdk_delayMs>
 8009376:	e000      	b.n	800937a <lowPower_delayMs+0x6a>
		if ( duration > ITSDK_LOWPOWER_MINDUR_MS ) {
 8009378:	46c0      	nop			; (mov r8, r8)
	}

	return pendingDur;
 800937a:	68fb      	ldr	r3, [r7, #12]
}
 800937c:	0018      	movs	r0, r3
 800937e:	46bd      	mov	sp, r7
 8009380:	b004      	add	sp, #16
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000130 	.word	0x20000130

08009388 <itsdk_setup>:
/**
 * The setup function is called on every MCU Reset but not on wakeup from sleep
 * This function init the SDK library and underlaying hardware.
 * Then it calls the project specific setup function
 */
void itsdk_setup() {
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0

	itsdk_time_init();
 800938c:	f000 fa5c 	bl	8009848 <itsdk_time_init>
	#if ITSDK_LOGGER_CONF > 0
	log_init(ITSDK_LOGGER_CONF);
 8009390:	20f0      	movs	r0, #240	; 0xf0
 8009392:	f7ff fd8b 	bl	8008eac <log_init>
	#endif
	#if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	  wdg_setupWithMaxMs(ITSDK_WDG_MS);
 8009396:	4b19      	ldr	r3, [pc, #100]	; (80093fc <itsdk_setup+0x74>)
 8009398:	0018      	movs	r0, r3
 800939a:	f002 f8e9 	bl	800b570 <wdg_setupWithMaxMs>
	#endif
	serial1_init();
 800939e:	f001 f973 	bl	800a688 <serial1_init>
	serial2_init();
 80093a2:	f001 f9cf 	bl	800a744 <serial2_init>
	#if ITSDK_WITH_CONSOLE == __ENABLE
		itsdk_console_setup();
 80093a6:	f7fc fb29 	bl	80059fc <itsdk_console_setup>
	#endif
	#if ITSDK_WITH_ERROR_RPT == __ENABLE
	  itsdk_error_setup();
 80093aa:	f7ff fb79 	bl	8008aa0 <itsdk_error_setup>
	  ITSDK_ERROR_REPORT(ITSDK_ERROR_RESET,(uint16_t)itsdk_getResetCause());
 80093ae:	f001 f873 	bl	800a498 <itsdk_getResetCause>
 80093b2:	0003      	movs	r3, r0
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4a12      	ldr	r2, [pc, #72]	; (8009400 <itsdk_setup+0x78>)
 80093b8:	0019      	movs	r1, r3
 80093ba:	0010      	movs	r0, r2
 80093bc:	f7ff fba0 	bl	8008b00 <itsdk_error_report>
	#endif
	#if ITSDK_WITH_SECURESTORE == __ENABLE
	  // Init the secure store if not yet initialized
	  if ( itsdk_secstore_isInit() != SS_SUCCESS ) {
 80093c0:	f7fd fda8 	bl	8006f14 <itsdk_secstore_isInit>
 80093c4:	1e03      	subs	r3, r0, #0
 80093c6:	d008      	beq.n	80093da <itsdk_setup+0x52>
		  itsdk_secstore_init();
 80093c8:	f7fd fd44 	bl	8006e54 <itsdk_secstore_init>
		  itsdk_encrypt_resetFactoryDefaults(BOOL_TRUE);
 80093cc:	2001      	movs	r0, #1
 80093ce:	f7fe fa74 	bl	80078ba <itsdk_encrypt_resetFactoryDefaults>
		  #if ITSDK_WITH_LORAWAN_LIB == __ENABLE
		    itsdk_lorawan_resetFactoryDefaults(true);
 80093d2:	2001      	movs	r0, #1
 80093d4:	f7ff ff0a 	bl	80091ec <itsdk_lorawan_resetFactoryDefaults>
 80093d8:	e002      	b.n	80093e0 <itsdk_setup+0x58>
		  #endif
		  #if ITSDK_WITH_SIGFOX_LIB == __ENABLE
 		    itsdk_sigfox_resetFactoryDefaults(true);
		  #endif
	  } else {
	     itsdk_encrypt_resetFactoryDefaults(BOOL_FALSE);	// on first boot init the ss communication credentials
 80093da:	2000      	movs	r0, #0
 80093dc:	f7fe fa6d 	bl	80078ba <itsdk_encrypt_resetFactoryDefaults>
	  }
	  itsdk_secStore_RegisterConsole();
 80093e0:	f7fe f96a 	bl	80076b8 <itsdk_secStore_RegisterConsole>
	#endif
	// load the configuration according to setting
	itsdk_config_loadConfiguration(CONFIG_NORMAL_LOAD);
 80093e4:	2000      	movs	r0, #0
 80093e6:	f7fc fed5 	bl	8006194 <itsdk_config_loadConfiguration>
	itsdk_state_init();
 80093ea:	f7fd fac9 	bl	8006980 <itsdk_state_init>
	// Application setup
	project_setup();
 80093ee:	f7f7 fd47 	bl	8000e80 <project_setup>
    #if ITSDK_WITH_ERROR_RPT == __ENABLE
      itsdk_cleanResetCause();
 80093f2:	f001 f88f 	bl	800a514 <itsdk_cleanResetCause>
    #endif

}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	00006d60 	.word	0x00006d60
 8009400:	10000001 	.word	0x10000001

08009404 <itsdk_loop>:
 * if the MCU have no lowpower mode. The function update the time component, call
 * all the recurrent SDK operations to be maintained.
 * When a scheduler has been activated it calls the scheduler task when needed.
 * Then is calls the project specific loop function.
 */
void itsdk_loop() {
 8009404:	b580      	push	{r7, lr}
 8009406:	af00      	add	r7, sp, #0

    #if ITSDK_WITH_WDG != __WDG_NONE && ITSDK_WDG_MS > 0
	   wdg_refresh();
 8009408:	f002 f90e 	bl	800b628 <wdg_refresh>
	#endif
	#if ITSDK_TIMER_SLOTS > 0
	   itsdk_stimer_run();
 800940c:	f000 fa5c 	bl	80098c8 <itsdk_stimer_run>
	   accel_process_loop();
    #endif
	#if ITSDK_DRIVERS_WITH_GNSS_DRIVER == __ENABLE
	   gnss_process_loop(BOOL_FALSE);
	#endif
	project_loop();
 8009410:	f7f7 fd4a 	bl	8000ea8 <project_loop>
	#if ITSDK_WITH_CONSOLE == __ENABLE
	   itsdk_console_loop();
 8009414:	f7fc fb16 	bl	8005a44 <itsdk_console_loop>
	#endif
	#if ITSDK_TIMER_SLOTS > 0
		if ( itsdk_stimer_isLowPowerSwitchAutorized() ) {
 8009418:	f000 fa2a 	bl	8009870 <itsdk_stimer_isLowPowerSwitchAutorized>
 800941c:	1e03      	subs	r3, r0, #0
 800941e:	d001      	beq.n	8009424 <itsdk_loop+0x20>
	#endif
			lowPower_switch();
 8009420:	f7ff ff3a 	bl	8009298 <lowPower_switch>
	#if ITSDK_TIMER_SLOTS > 0
		}
	#endif
}
 8009424:	46c0      	nop			; (mov r8, r8)
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <itsdk_computeCRC32>:


/**
 * Return CRC32 value for data.
 */
uint32_t itsdk_computeCRC32(const uint8_t *data, uint16_t length) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	000a      	movs	r2, r1
 8009436:	1cbb      	adds	r3, r7, #2
 8009438:	801a      	strh	r2, [r3, #0]
  uint32_t crc = 0xffffffff;
 800943a:	2301      	movs	r3, #1
 800943c:	425b      	negs	r3, r3
 800943e:	617b      	str	r3, [r7, #20]
  while (length--) {
 8009440:	e039      	b.n	80094b6 <itsdk_computeCRC32+0x8a>
    uint8_t c = *data++;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	220e      	movs	r2, #14
 800944a:	18ba      	adds	r2, r7, r2
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	7013      	strb	r3, [r2, #0]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 8009450:	2380      	movs	r3, #128	; 0x80
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	e02c      	b.n	80094b0 <itsdk_computeCRC32+0x84>
      bool bit = crc & 0x80000000;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	0fdb      	lsrs	r3, r3, #31
 800945a:	07da      	lsls	r2, r3, #31
 800945c:	230f      	movs	r3, #15
 800945e:	18fb      	adds	r3, r7, r3
 8009460:	1e51      	subs	r1, r2, #1
 8009462:	418a      	sbcs	r2, r1
 8009464:	701a      	strb	r2, [r3, #0]
      if (c & i) {
 8009466:	230e      	movs	r3, #14
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4013      	ands	r3, r2
 8009470:	d00f      	beq.n	8009492 <itsdk_computeCRC32+0x66>
        bit = !bit;
 8009472:	210f      	movs	r1, #15
 8009474:	187b      	adds	r3, r7, r1
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	1e5a      	subs	r2, r3, #1
 800947a:	4193      	sbcs	r3, r2
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2201      	movs	r2, #1
 8009480:	4053      	eors	r3, r2
 8009482:	b2db      	uxtb	r3, r3
 8009484:	001a      	movs	r2, r3
 8009486:	187b      	adds	r3, r7, r1
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	2101      	movs	r1, #1
 800948e:	400a      	ands	r2, r1
 8009490:	701a      	strb	r2, [r3, #0]
      }
      crc <<= 1;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	617b      	str	r3, [r7, #20]
      if (bit) {
 8009498:	230f      	movs	r3, #15
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <itsdk_computeCRC32+0x7e>
        crc ^= 0x04c11db7;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	4a0a      	ldr	r2, [pc, #40]	; (80094d0 <itsdk_computeCRC32+0xa4>)
 80094a6:	4053      	eors	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0x80; i > 0; i >>= 1) {
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	085b      	lsrs	r3, r3, #1
 80094ae:	613b      	str	r3, [r7, #16]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1cf      	bne.n	8009456 <itsdk_computeCRC32+0x2a>
  while (length--) {
 80094b6:	1cbb      	adds	r3, r7, #2
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	1cba      	adds	r2, r7, #2
 80094bc:	1e59      	subs	r1, r3, #1
 80094be:	8011      	strh	r1, [r2, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1be      	bne.n	8009442 <itsdk_computeCRC32+0x16>
      }
    }
  }
  return crc;
 80094c4:	697b      	ldr	r3, [r7, #20]
}
 80094c6:	0018      	movs	r0, r3
 80094c8:	46bd      	mov	sp, r7
 80094ca:	b006      	add	sp, #24
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	46c0      	nop			; (mov r8, r8)
 80094d0:	04c11db7 	.word	0x04c11db7

080094d4 <itdt_convertHexChar2HalfInt>:
}

/* -----------------------------------------------------------
 * Convert a 0-F char to a 0-16 value
 */
uint8_t itdt_convertHexChar2HalfInt(char c) {
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	0002      	movs	r2, r0
 80094dc:	1dfb      	adds	r3, r7, #7
 80094de:	701a      	strb	r2, [r3, #0]
  if ( c >= '0' && c <= '9' ) return c-'0';
 80094e0:	1dfb      	adds	r3, r7, #7
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b2f      	cmp	r3, #47	; 0x2f
 80094e6:	d908      	bls.n	80094fa <itdt_convertHexChar2HalfInt+0x26>
 80094e8:	1dfb      	adds	r3, r7, #7
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b39      	cmp	r3, #57	; 0x39
 80094ee:	d804      	bhi.n	80094fa <itdt_convertHexChar2HalfInt+0x26>
 80094f0:	1dfb      	adds	r3, r7, #7
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	3b30      	subs	r3, #48	; 0x30
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	e01a      	b.n	8009530 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'a' && c <= 'f' ) return 10+c-'a';
 80094fa:	1dfb      	adds	r3, r7, #7
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b60      	cmp	r3, #96	; 0x60
 8009500:	d908      	bls.n	8009514 <itdt_convertHexChar2HalfInt+0x40>
 8009502:	1dfb      	adds	r3, r7, #7
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b66      	cmp	r3, #102	; 0x66
 8009508:	d804      	bhi.n	8009514 <itdt_convertHexChar2HalfInt+0x40>
 800950a:	1dfb      	adds	r3, r7, #7
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	3b57      	subs	r3, #87	; 0x57
 8009510:	b2db      	uxtb	r3, r3
 8009512:	e00d      	b.n	8009530 <itdt_convertHexChar2HalfInt+0x5c>
  if ( c >= 'A' && c <= 'F' ) return 10+c-'A';
 8009514:	1dfb      	adds	r3, r7, #7
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b40      	cmp	r3, #64	; 0x40
 800951a:	d908      	bls.n	800952e <itdt_convertHexChar2HalfInt+0x5a>
 800951c:	1dfb      	adds	r3, r7, #7
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	2b46      	cmp	r3, #70	; 0x46
 8009522:	d804      	bhi.n	800952e <itdt_convertHexChar2HalfInt+0x5a>
 8009524:	1dfb      	adds	r3, r7, #7
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	3b37      	subs	r3, #55	; 0x37
 800952a:	b2db      	uxtb	r3, r3
 800952c:	e000      	b.n	8009530 <itdt_convertHexChar2HalfInt+0x5c>
  return 0;
 800952e:	2300      	movs	r3, #0
}
 8009530:	0018      	movs	r0, r3
 8009532:	46bd      	mov	sp, r7
 8009534:	b002      	add	sp, #8
 8009536:	bd80      	pop	{r7, pc}

08009538 <itdt_convertHexChar2Int>:
}

/* -----------------------------------------------------------
 * Convert a "0"-"FF" value to 0-255 uint8_t value
 */
uint8_t itdt_convertHexChar2Int(char * v) {
 8009538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint8_t q0 = itdt_convertHexChar2HalfInt(v[0]);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	250f      	movs	r5, #15
 8009546:	197c      	adds	r4, r7, r5
 8009548:	0018      	movs	r0, r3
 800954a:	f7ff ffc3 	bl	80094d4 <itdt_convertHexChar2HalfInt>
 800954e:	0003      	movs	r3, r0
 8009550:	7023      	strb	r3, [r4, #0]
  uint8_t q1 = itdt_convertHexChar2HalfInt(v[1]);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3301      	adds	r3, #1
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	260e      	movs	r6, #14
 800955a:	19bc      	adds	r4, r7, r6
 800955c:	0018      	movs	r0, r3
 800955e:	f7ff ffb9 	bl	80094d4 <itdt_convertHexChar2HalfInt>
 8009562:	0003      	movs	r3, r0
 8009564:	7023      	strb	r3, [r4, #0]
  return (q0*16)+q1;
 8009566:	197b      	adds	r3, r7, r5
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	011b      	lsls	r3, r3, #4
 800956c:	b2da      	uxtb	r2, r3
 800956e:	19bb      	adds	r3, r7, r6
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	18d3      	adds	r3, r2, r3
 8009574:	b2db      	uxtb	r3, r3
}
 8009576:	0018      	movs	r0, r3
 8009578:	46bd      	mov	sp, r7
 800957a:	b005      	add	sp, #20
 800957c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800957e <itdt_convertHexChar4Int>:
}

/* -----------------------------------------------------------
 *  Convert a 16bit hex string value into uint16_t value
 */
uint16_t itdt_convertHexChar4Int(char * v) {
 800957e:	b590      	push	{r4, r7, lr}
 8009580:	b085      	sub	sp, #20
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  uint16_t ret = itdt_convertHexChar2Int(&v[0]);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	0018      	movs	r0, r3
 800958a:	f7ff ffd5 	bl	8009538 <itdt_convertHexChar2Int>
 800958e:	0003      	movs	r3, r0
 8009590:	001a      	movs	r2, r3
 8009592:	240e      	movs	r4, #14
 8009594:	193b      	adds	r3, r7, r4
 8009596:	801a      	strh	r2, [r3, #0]
  ret <<= 8;
 8009598:	193b      	adds	r3, r7, r4
 800959a:	193a      	adds	r2, r7, r4
 800959c:	8812      	ldrh	r2, [r2, #0]
 800959e:	0212      	lsls	r2, r2, #8
 80095a0:	801a      	strh	r2, [r3, #0]
  ret += itdt_convertHexChar2Int(&v[2]);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	3302      	adds	r3, #2
 80095a6:	0018      	movs	r0, r3
 80095a8:	f7ff ffc6 	bl	8009538 <itdt_convertHexChar2Int>
 80095ac:	0003      	movs	r3, r0
 80095ae:	b299      	uxth	r1, r3
 80095b0:	193b      	adds	r3, r7, r4
 80095b2:	193a      	adds	r2, r7, r4
 80095b4:	8812      	ldrh	r2, [r2, #0]
 80095b6:	188a      	adds	r2, r1, r2
 80095b8:	801a      	strh	r2, [r3, #0]
  return ret;
 80095ba:	193b      	adds	r3, r7, r4
 80095bc:	881b      	ldrh	r3, [r3, #0]
}
 80095be:	0018      	movs	r0, r3
 80095c0:	46bd      	mov	sp, r7
 80095c2:	b005      	add	sp, #20
 80095c4:	bd90      	pop	{r4, r7, pc}

080095c6 <itdt_isHexChar>:
}

/* ----------------------------------------------------------
 * Verify a char is an Hex Char
 */
bool itdt_isHexChar(char c, bool upper) {
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	0002      	movs	r2, r0
 80095ce:	1dfb      	adds	r3, r7, #7
 80095d0:	701a      	strb	r2, [r3, #0]
 80095d2:	1dbb      	adds	r3, r7, #6
 80095d4:	1c0a      	adds	r2, r1, #0
 80095d6:	701a      	strb	r2, [r3, #0]
  if (    (c >= '0' && c <= '9' )
 80095d8:	1dfb      	adds	r3, r7, #7
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b2f      	cmp	r3, #47	; 0x2f
 80095de:	d903      	bls.n	80095e8 <itdt_isHexChar+0x22>
 80095e0:	1dfb      	adds	r3, r7, #7
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b39      	cmp	r3, #57	; 0x39
 80095e6:	d916      	bls.n	8009616 <itdt_isHexChar+0x50>
       || (c >= 'A' && c <= 'F' )
 80095e8:	1dfb      	adds	r3, r7, #7
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	d903      	bls.n	80095f8 <itdt_isHexChar+0x32>
 80095f0:	1dfb      	adds	r3, r7, #7
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b46      	cmp	r3, #70	; 0x46
 80095f6:	d90e      	bls.n	8009616 <itdt_isHexChar+0x50>
     || (!upper   && c >= 'a' && c <= 'f')
 80095f8:	1dbb      	adds	r3, r7, #6
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2201      	movs	r2, #1
 80095fe:	4053      	eors	r3, r2
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d009      	beq.n	800961a <itdt_isHexChar+0x54>
 8009606:	1dfb      	adds	r3, r7, #7
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b60      	cmp	r3, #96	; 0x60
 800960c:	d905      	bls.n	800961a <itdt_isHexChar+0x54>
 800960e:	1dfb      	adds	r3, r7, #7
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b66      	cmp	r3, #102	; 0x66
 8009614:	d801      	bhi.n	800961a <itdt_isHexChar+0x54>
    ) {
    return true;
 8009616:	2301      	movs	r3, #1
 8009618:	e000      	b.n	800961c <itdt_isHexChar+0x56>
  }
  return false;
 800961a:	2300      	movs	r3, #0
}
 800961c:	0018      	movs	r0, r3
 800961e:	46bd      	mov	sp, r7
 8009620:	b002      	add	sp, #8
 8009622:	bd80      	pop	{r7, pc}

08009624 <itdt_isHexString>:

/* ----------------------------------------------------------
 * Verify a string is a valid Hex string with given size
 */
bool itdt_isHexString(char * str,int n,itsdk_bool_e upper) {
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	1dfb      	adds	r3, r7, #7
 8009630:	701a      	strb	r2, [r3, #0]
  int i = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	617b      	str	r3, [r7, #20]
  while ( i < n && str[i] != 0 ) {
 8009636:	e02d      	b.n	8009694 <itdt_isHexString+0x70>
    if (    (str[i] >= '0' && str[i] <= '9' )
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	18d3      	adds	r3, r2, r3
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b2f      	cmp	r3, #47	; 0x2f
 8009642:	d905      	bls.n	8009650 <itdt_isHexString+0x2c>
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	18d3      	adds	r3, r2, r3
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	2b39      	cmp	r3, #57	; 0x39
 800964e:	d91b      	bls.n	8009688 <itdt_isHexString+0x64>
       || (str[i] >= 'A' && str[i] <= 'F' )
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	18d3      	adds	r3, r2, r3
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	2b40      	cmp	r3, #64	; 0x40
 800965a:	d905      	bls.n	8009668 <itdt_isHexString+0x44>
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	18d3      	adds	r3, r2, r3
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b46      	cmp	r3, #70	; 0x46
 8009666:	d90f      	bls.n	8009688 <itdt_isHexString+0x64>
       || (!upper && str[i] >= 'a' && str[i] <= 'f')
 8009668:	1dfb      	adds	r3, r7, #7
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10f      	bne.n	8009690 <itdt_isHexString+0x6c>
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	18d3      	adds	r3, r2, r3
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b60      	cmp	r3, #96	; 0x60
 800967a:	d909      	bls.n	8009690 <itdt_isHexString+0x6c>
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	18d3      	adds	r3, r2, r3
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	2b66      	cmp	r3, #102	; 0x66
 8009686:	d803      	bhi.n	8009690 <itdt_isHexString+0x6c>
       ) {
      i++;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	3301      	adds	r3, #1
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	e001      	b.n	8009694 <itdt_isHexString+0x70>
    } else {
      return false;
 8009690:	2300      	movs	r3, #0
 8009692:	e00f      	b.n	80096b4 <itdt_isHexString+0x90>
  while ( i < n && str[i] != 0 ) {
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	429a      	cmp	r2, r3
 800969a:	da05      	bge.n	80096a8 <itdt_isHexString+0x84>
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	18d3      	adds	r3, r2, r3
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1c7      	bne.n	8009638 <itdt_isHexString+0x14>
    }
  }
  return ( i == n )?true:false;
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	425a      	negs	r2, r3
 80096b0:	4153      	adcs	r3, r2
 80096b2:	b2db      	uxtb	r3, r3
}
 80096b4:	0018      	movs	r0, r3
 80096b6:	46bd      	mov	sp, r7
 80096b8:	b006      	add	sp, #24
 80096ba:	bd80      	pop	{r7, pc}

080096bc <itdt_count_bits_1>:


/* ---------------------------------------------------
 * Count the number of bit at 1 in a given word
 */
uint8_t itdt_count_bits_1(uint32_t v) {
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 80096c4:	230f      	movs	r3, #15
 80096c6:	18fb      	adds	r3, r7, r3
 80096c8:	2200      	movs	r2, #0
 80096ca:	701a      	strb	r2, [r3, #0]
	while ( v > 0 ) {
 80096cc:	e00c      	b.n	80096e8 <itdt_count_bits_1+0x2c>
		if ( v & 1 ) ret++;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	4013      	ands	r3, r2
 80096d4:	d005      	beq.n	80096e2 <itdt_count_bits_1+0x26>
 80096d6:	210f      	movs	r1, #15
 80096d8:	187b      	adds	r3, r7, r1
 80096da:	781a      	ldrb	r2, [r3, #0]
 80096dc:	187b      	adds	r3, r7, r1
 80096de:	3201      	adds	r2, #1
 80096e0:	701a      	strb	r2, [r3, #0]
		v >>= 1;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	085b      	lsrs	r3, r3, #1
 80096e6:	607b      	str	r3, [r7, #4]
	while ( v > 0 ) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1ef      	bne.n	80096ce <itdt_count_bits_1+0x12>
	}
	return ret;
 80096ee:	230f      	movs	r3, #15
 80096f0:	18fb      	adds	r3, r7, r3
 80096f2:	781b      	ldrb	r3, [r3, #0]
}
 80096f4:	0018      	movs	r0, r3
 80096f6:	46bd      	mov	sp, r7
 80096f8:	b004      	add	sp, #16
 80096fa:	bd80      	pop	{r7, pc}

080096fc <itsdk_time_add_us>:


/**
 * Add the given number of uS to the uS global timer
 */
void itsdk_time_add_us(uint32_t us) {
 80096fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
	// apply correction
	#if ITSDK_CLK_CORRECTION != 0
	us = us + ( (int64_t)us * ITSDK_CLK_CORRECTION ) / 1000;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	603b      	str	r3, [r7, #0]
 8009708:	2300      	movs	r3, #0
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	22fa      	movs	r2, #250	; 0xfa
 800970e:	0092      	lsls	r2, r2, #2
 8009710:	2300      	movs	r3, #0
 8009712:	6838      	ldr	r0, [r7, #0]
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	f7f6 feb9 	bl	800048c <__aeabi_lmul>
 800971a:	0003      	movs	r3, r0
 800971c:	000c      	movs	r4, r1
 800971e:	0018      	movs	r0, r3
 8009720:	0021      	movs	r1, r4
 8009722:	22fa      	movs	r2, #250	; 0xfa
 8009724:	0092      	lsls	r2, r2, #2
 8009726:	2300      	movs	r3, #0
 8009728:	f7f6 fe6c 	bl	8000404 <__aeabi_ldivmod>
 800972c:	0003      	movs	r3, r0
 800972e:	000c      	movs	r4, r1
 8009730:	001a      	movs	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	189b      	adds	r3, r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
	#endif
	uint64_t n = __timeus + us;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	001d      	movs	r5, r3
 800973c:	2300      	movs	r3, #0
 800973e:	001e      	movs	r6, r3
 8009740:	4b12      	ldr	r3, [pc, #72]	; (800978c <itsdk_time_add_us+0x90>)
 8009742:	685c      	ldr	r4, [r3, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	195b      	adds	r3, r3, r5
 8009748:	4174      	adcs	r4, r6
 800974a:	613b      	str	r3, [r7, #16]
 800974c:	617c      	str	r4, [r7, #20]
	if ( n < __timeus  ) {
 800974e:	4b0f      	ldr	r3, [pc, #60]	; (800978c <itsdk_time_add_us+0x90>)
 8009750:	685c      	ldr	r4, [r3, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	42a2      	cmp	r2, r4
 8009758:	d305      	bcc.n	8009766 <itsdk_time_add_us+0x6a>
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	42a2      	cmp	r2, r4
 800975e:	d10b      	bne.n	8009778 <itsdk_time_add_us+0x7c>
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	429a      	cmp	r2, r3
 8009764:	d208      	bcs.n	8009778 <itsdk_time_add_us+0x7c>
		__time_has_overrun=1;
 8009766:	4b0a      	ldr	r3, [pc, #40]	; (8009790 <itsdk_time_add_us+0x94>)
 8009768:	2201      	movs	r2, #1
 800976a:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 800976c:	4b09      	ldr	r3, [pc, #36]	; (8009794 <itsdk_time_add_us+0x98>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	b2da      	uxtb	r2, r3
 8009774:	4b07      	ldr	r3, [pc, #28]	; (8009794 <itsdk_time_add_us+0x98>)
 8009776:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 8009778:	4a04      	ldr	r2, [pc, #16]	; (800978c <itsdk_time_add_us+0x90>)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	697c      	ldr	r4, [r7, #20]
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	6054      	str	r4, [r2, #4]
}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	46bd      	mov	sp, r7
 8009786:	b007      	add	sp, #28
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	20000138 	.word	0x20000138
 8009790:	20000140 	.word	0x20000140
 8009794:	20000141 	.word	0x20000141

08009798 <itsdk_time_set_ms>:

/**
 * Set current time in ms
 */
void itsdk_time_set_ms(uint64_t ms) {
 8009798:	b590      	push	{r4, r7, lr}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6038      	str	r0, [r7, #0]
 80097a0:	6079      	str	r1, [r7, #4]
	uint64_t n = ms * 1000L;
 80097a2:	22fa      	movs	r2, #250	; 0xfa
 80097a4:	0092      	lsls	r2, r2, #2
 80097a6:	2300      	movs	r3, #0
 80097a8:	6838      	ldr	r0, [r7, #0]
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	f7f6 fe6e 	bl	800048c <__aeabi_lmul>
 80097b0:	0003      	movs	r3, r0
 80097b2:	000c      	movs	r4, r1
 80097b4:	60bb      	str	r3, [r7, #8]
 80097b6:	60fc      	str	r4, [r7, #12]
	if ( (__timeus - n) > 1000000L   ) {	// difference is > 1m assuming the counter has restarted
 80097b8:	4b10      	ldr	r3, [pc, #64]	; (80097fc <itsdk_time_set_ms+0x64>)
 80097ba:	6819      	ldr	r1, [r3, #0]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	68fc      	ldr	r4, [r7, #12]
 80097c2:	1ac9      	subs	r1, r1, r3
 80097c4:	41a2      	sbcs	r2, r4
 80097c6:	000b      	movs	r3, r1
 80097c8:	0014      	movs	r4, r2
 80097ca:	2c00      	cmp	r4, #0
 80097cc:	d103      	bne.n	80097d6 <itsdk_time_set_ms+0x3e>
 80097ce:	d10b      	bne.n	80097e8 <itsdk_time_set_ms+0x50>
 80097d0:	4a0b      	ldr	r2, [pc, #44]	; (8009800 <itsdk_time_set_ms+0x68>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d908      	bls.n	80097e8 <itsdk_time_set_ms+0x50>
		__time_has_overrun=1;
 80097d6:	4b0b      	ldr	r3, [pc, #44]	; (8009804 <itsdk_time_set_ms+0x6c>)
 80097d8:	2201      	movs	r2, #1
 80097da:	701a      	strb	r2, [r3, #0]
		__time_overrun_cnt++;
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <itsdk_time_set_ms+0x70>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	3301      	adds	r3, #1
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	4b08      	ldr	r3, [pc, #32]	; (8009808 <itsdk_time_set_ms+0x70>)
 80097e6:	701a      	strb	r2, [r3, #0]
	}
	__timeus = n;
 80097e8:	4a04      	ldr	r2, [pc, #16]	; (80097fc <itsdk_time_set_ms+0x64>)
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	68fc      	ldr	r4, [r7, #12]
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	6054      	str	r4, [r2, #4]
}
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	46bd      	mov	sp, r7
 80097f6:	b005      	add	sp, #20
 80097f8:	bd90      	pop	{r4, r7, pc}
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	20000138 	.word	0x20000138
 8009800:	000f4240 	.word	0x000f4240
 8009804:	20000140 	.word	0x20000140
 8009808:	20000141 	.word	0x20000141

0800980c <itsdk_time_get_ms>:

/**
 * Get current time in ms
 */
uint64_t itsdk_time_get_ms() {
 800980c:	b5b0      	push	{r4, r5, r7, lr}
 800980e:	af00      	add	r7, sp, #0
	return __timeus / 1000;
 8009810:	4b06      	ldr	r3, [pc, #24]	; (800982c <itsdk_time_get_ms+0x20>)
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	6859      	ldr	r1, [r3, #4]
 8009816:	22fa      	movs	r2, #250	; 0xfa
 8009818:	0092      	lsls	r2, r2, #2
 800981a:	2300      	movs	r3, #0
 800981c:	f7f6 fe16 	bl	800044c <__aeabi_uldivmod>
 8009820:	0003      	movs	r3, r0
 8009822:	000c      	movs	r4, r1
}
 8009824:	0018      	movs	r0, r3
 8009826:	0021      	movs	r1, r4
 8009828:	46bd      	mov	sp, r7
 800982a:	bdb0      	pop	{r4, r5, r7, pc}
 800982c:	20000138 	.word	0x20000138

08009830 <itsdk_time_get_us>:

/**
 * Get current time in us
 */
uint64_t itsdk_time_get_us() {
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	af00      	add	r7, sp, #0
	return __timeus;
 8009834:	4b03      	ldr	r3, [pc, #12]	; (8009844 <itsdk_time_get_us+0x14>)
 8009836:	685c      	ldr	r4, [r3, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
}
 800983a:	0018      	movs	r0, r3
 800983c:	0021      	movs	r1, r4
 800983e:	46bd      	mov	sp, r7
 8009840:	bd90      	pop	{r4, r7, pc}
 8009842:	46c0      	nop			; (mov r8, r8)
 8009844:	20000138 	.word	0x20000138

08009848 <itsdk_time_init>:
}

/**
 * Init time functions
 */
void itsdk_time_init() {
 8009848:	b5b0      	push	{r4, r5, r7, lr}
 800984a:	af00      	add	r7, sp, #0
#if ITSDK_PLATFORM == __PLATFORM_STM32L0
  #if ITSDK_WITH_RTC != __RTC_NONE
	rtc_resetTime();
 800984c:	f001 fd24 	bl	800b298 <rtc_resetTime>
	rtc_adjustTime();
 8009850:	f001 fdba 	bl	800b3c8 <rtc_adjustTime>
  #endif
	systick_adjustTime();
 8009854:	f001 fe16 	bl	800b484 <systick_adjustTime>
  #if ITSDK_WITH_RTC != __RTC_NONE
	itsdk_time_set_ms(rtc_getTimestampMs());
 8009858:	f001 fc30 	bl	800b0bc <rtc_getTimestampMs>
 800985c:	0003      	movs	r3, r0
 800985e:	000c      	movs	r4, r1
 8009860:	0018      	movs	r0, r3
 8009862:	0021      	movs	r1, r4
 8009864:	f7ff ff98 	bl	8009798 <itsdk_time_set_ms>
  #endif
#else
	#error "platform not supported"
#endif
}
 8009868:	46c0      	nop			; (mov r8, r8)
 800986a:	46bd      	mov	sp, r7
 800986c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009870 <itsdk_stimer_isLowPowerSwitchAutorized>:
 * Some soft timers need to have a precise timing and are not supporting
 * the variation due to the deep sleep RTC duration.
 * An improvement will be to moderate the RTC sleep duration to the duration
 * of these timer to avoid the timing GAP. See it later.
 */
bool itsdk_stimer_isLowPowerSwitchAutorized() {
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
	int i = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 800987a:	e01b      	b.n	80098b4 <itsdk_stimer_isLowPowerSwitchAutorized+0x44>
		if (__stimer_slots[i].inUse && __stimer_slots[i].allowLowPower == false ) {
 800987c:	4911      	ldr	r1, [pc, #68]	; (80098c4 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	0013      	movs	r3, r2
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	189b      	adds	r3, r3, r2
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	5c5b      	ldrb	r3, [r3, r1]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00f      	beq.n	80098ae <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
 800988e:	490d      	ldr	r1, [pc, #52]	; (80098c4 <itsdk_stimer_isLowPowerSwitchAutorized+0x54>)
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	0013      	movs	r3, r2
 8009894:	005b      	lsls	r3, r3, #1
 8009896:	189b      	adds	r3, r3, r2
 8009898:	00db      	lsls	r3, r3, #3
 800989a:	18cb      	adds	r3, r1, r3
 800989c:	3301      	adds	r3, #1
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2201      	movs	r2, #1
 80098a2:	4053      	eors	r3, r2
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <itsdk_stimer_isLowPowerSwitchAutorized+0x3e>
			return false;
 80098aa:	2300      	movs	r3, #0
 80098ac:	e006      	b.n	80098bc <itsdk_stimer_isLowPowerSwitchAutorized+0x4c>
		}
		i++;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	3301      	adds	r3, #1
 80098b2:	607b      	str	r3, [r7, #4]
	while ( i < ITSDK_TIMER_SLOTS) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b04      	cmp	r3, #4
 80098b8:	dde0      	ble.n	800987c <itsdk_stimer_isLowPowerSwitchAutorized+0xc>
	}
	return true;
 80098ba:	2301      	movs	r3, #1
}
 80098bc:	0018      	movs	r0, r3
 80098be:	46bd      	mov	sp, r7
 80098c0:	b002      	add	sp, #8
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000148 	.word	0x20000148

080098c8 <itsdk_stimer_run>:

/**
 * Run the software timer execution. Call this function as much as
 * possible. At least on every wake-up from sleep
 */
void itsdk_stimer_run() {
 80098c8:	b590      	push	{r4, r7, lr}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 80098ce:	f7ff ff9d 	bl	800980c <itsdk_time_get_ms>
 80098d2:	0003      	movs	r3, r0
 80098d4:	000c      	movs	r4, r1
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	607c      	str	r4, [r7, #4]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 80098da:	2300      	movs	r3, #0
 80098dc:	60fb      	str	r3, [r7, #12]
 80098de:	e045      	b.n	800996c <itsdk_stimer_run+0xa4>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs <= t ) {
 80098e0:	4926      	ldr	r1, [pc, #152]	; (800997c <itsdk_stimer_run+0xb4>)
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	0013      	movs	r3, r2
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	189b      	adds	r3, r3, r2
 80098ea:	00db      	lsls	r3, r3, #3
 80098ec:	5c5b      	ldrb	r3, [r3, r1]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d039      	beq.n	8009966 <itsdk_stimer_run+0x9e>
 80098f2:	4922      	ldr	r1, [pc, #136]	; (800997c <itsdk_stimer_run+0xb4>)
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	0013      	movs	r3, r2
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	189b      	adds	r3, r3, r2
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	18cb      	adds	r3, r1, r3
 8009900:	3308      	adds	r3, #8
 8009902:	685c      	ldr	r4, [r3, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	42a2      	cmp	r2, r4
 800990a:	d32c      	bcc.n	8009966 <itsdk_stimer_run+0x9e>
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	42a2      	cmp	r2, r4
 8009910:	d102      	bne.n	8009918 <itsdk_stimer_run+0x50>
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d326      	bcc.n	8009966 <itsdk_stimer_run+0x9e>
			__stimer_slots[i].inUse = false;
 8009918:	4918      	ldr	r1, [pc, #96]	; (800997c <itsdk_stimer_run+0xb4>)
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	0013      	movs	r3, r2
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	189b      	adds	r3, r3, r2
 8009922:	00db      	lsls	r3, r3, #3
 8009924:	2200      	movs	r2, #0
 8009926:	545a      	strb	r2, [r3, r1]
			if (__stimer_slots[i].callback_func != NULL )
 8009928:	4914      	ldr	r1, [pc, #80]	; (800997c <itsdk_stimer_run+0xb4>)
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	0013      	movs	r3, r2
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	189b      	adds	r3, r3, r2
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	18cb      	adds	r3, r1, r3
 8009936:	3310      	adds	r3, #16
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d013      	beq.n	8009966 <itsdk_stimer_run+0x9e>
				__stimer_slots[i].callback_func(__stimer_slots[i].customValue);
 800993e:	490f      	ldr	r1, [pc, #60]	; (800997c <itsdk_stimer_run+0xb4>)
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	0013      	movs	r3, r2
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	189b      	adds	r3, r3, r2
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	18cb      	adds	r3, r1, r3
 800994c:	3310      	adds	r3, #16
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	480a      	ldr	r0, [pc, #40]	; (800997c <itsdk_stimer_run+0xb4>)
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	0013      	movs	r3, r2
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	189b      	adds	r3, r3, r2
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	18c3      	adds	r3, r0, r3
 800995e:	3314      	adds	r3, #20
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	0018      	movs	r0, r3
 8009964:	4788      	blx	r1
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3301      	adds	r3, #1
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b04      	cmp	r3, #4
 8009970:	ddb6      	ble.n	80098e0 <itsdk_stimer_run+0x18>
		}
	}
}
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	46bd      	mov	sp, r7
 8009976:	b005      	add	sp, #20
 8009978:	bd90      	pop	{r4, r7, pc}
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	20000148 	.word	0x20000148

08009980 <itsdk_stimer_nextTimeoutMs>:

/**
 * Compute the number of Ms from Now to the next Timer to expire.
 * return ITSDK_STIMER_INFINITE when none are in execution or in the future.
 */
uint32_t itsdk_stimer_nextTimeoutMs(){
 8009980:	b590      	push	{r4, r7, lr}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
	uint64_t t = itsdk_time_get_ms();
 8009986:	f7ff ff41 	bl	800980c <itsdk_time_get_ms>
 800998a:	0003      	movs	r3, r0
 800998c:	000c      	movs	r4, r1
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	607c      	str	r4, [r7, #4]
	uint64_t min = __INFINITE_64B;
 8009992:	2301      	movs	r3, #1
 8009994:	425b      	negs	r3, r3
 8009996:	17dc      	asrs	r4, r3, #31
 8009998:	613b      	str	r3, [r7, #16]
 800999a:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 800999c:	2300      	movs	r3, #0
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e03d      	b.n	8009a1e <itsdk_stimer_nextTimeoutMs+0x9e>
		if ( __stimer_slots[i].inUse && __stimer_slots[i].timeoutMs >= t ) {
 80099a2:	492c      	ldr	r1, [pc, #176]	; (8009a54 <itsdk_stimer_nextTimeoutMs+0xd4>)
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	0013      	movs	r3, r2
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	189b      	adds	r3, r3, r2
 80099ac:	00db      	lsls	r3, r3, #3
 80099ae:	5c5b      	ldrb	r3, [r3, r1]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d031      	beq.n	8009a18 <itsdk_stimer_nextTimeoutMs+0x98>
 80099b4:	4927      	ldr	r1, [pc, #156]	; (8009a54 <itsdk_stimer_nextTimeoutMs+0xd4>)
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	0013      	movs	r3, r2
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	189b      	adds	r3, r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	18cb      	adds	r3, r1, r3
 80099c2:	3308      	adds	r3, #8
 80099c4:	685c      	ldr	r4, [r3, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	42a2      	cmp	r2, r4
 80099cc:	d824      	bhi.n	8009a18 <itsdk_stimer_nextTimeoutMs+0x98>
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	42a2      	cmp	r2, r4
 80099d2:	d102      	bne.n	80099da <itsdk_stimer_nextTimeoutMs+0x5a>
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d81e      	bhi.n	8009a18 <itsdk_stimer_nextTimeoutMs+0x98>
			if ( __stimer_slots[i].timeoutMs < min ) min = __stimer_slots[i].timeoutMs;
 80099da:	491e      	ldr	r1, [pc, #120]	; (8009a54 <itsdk_stimer_nextTimeoutMs+0xd4>)
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	0013      	movs	r3, r2
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	189b      	adds	r3, r3, r2
 80099e4:	00db      	lsls	r3, r3, #3
 80099e6:	18cb      	adds	r3, r1, r3
 80099e8:	3308      	adds	r3, #8
 80099ea:	685c      	ldr	r4, [r3, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	42a2      	cmp	r2, r4
 80099f2:	d805      	bhi.n	8009a00 <itsdk_stimer_nextTimeoutMs+0x80>
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	42a2      	cmp	r2, r4
 80099f8:	d10e      	bne.n	8009a18 <itsdk_stimer_nextTimeoutMs+0x98>
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d90b      	bls.n	8009a18 <itsdk_stimer_nextTimeoutMs+0x98>
 8009a00:	4914      	ldr	r1, [pc, #80]	; (8009a54 <itsdk_stimer_nextTimeoutMs+0xd4>)
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	0013      	movs	r3, r2
 8009a06:	005b      	lsls	r3, r3, #1
 8009a08:	189b      	adds	r3, r3, r2
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	18cb      	adds	r3, r1, r3
 8009a0e:	3308      	adds	r3, #8
 8009a10:	685c      	ldr	r4, [r3, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	613b      	str	r3, [r7, #16]
 8009a16:	617c      	str	r4, [r7, #20]
	for ( int i = 0 ; i < ITSDK_TIMER_SLOTS ; i++ ) {
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	60fb      	str	r3, [r7, #12]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	ddbe      	ble.n	80099a2 <itsdk_stimer_nextTimeoutMs+0x22>
		}
	}
	if ( min < __INFINITE_64B ) {
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	3301      	adds	r3, #1
 8009a28:	d102      	bne.n	8009a30 <itsdk_stimer_nextTimeoutMs+0xb0>
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	d00b      	beq.n	8009a48 <itsdk_stimer_nextTimeoutMs+0xc8>
		min = min - t;
 8009a30:	6939      	ldr	r1, [r7, #16]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	687c      	ldr	r4, [r7, #4]
 8009a38:	1ac9      	subs	r1, r1, r3
 8009a3a:	41a2      	sbcs	r2, r4
 8009a3c:	000b      	movs	r3, r1
 8009a3e:	0014      	movs	r4, r2
 8009a40:	613b      	str	r3, [r7, #16]
 8009a42:	617c      	str	r4, [r7, #20]
		return min;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	e001      	b.n	8009a4c <itsdk_stimer_nextTimeoutMs+0xcc>
	}
	return __INFINITE_32B;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	425b      	negs	r3, r3
}
 8009a4c:	0018      	movs	r0, r3
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	b007      	add	sp, #28
 8009a52:	bd90      	pop	{r4, r7, pc}
 8009a54:	20000148 	.word	0x20000148

08009a58 <__getAdcValue>:
#if ITSDK_ADC_OPTIMIZE_SIZE == __ENABLE

/**
 * Read adc
 */
uint32_t __getAdcValue(uint32_t channel, uint8_t oversampling) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	000a      	movs	r2, r1
 8009a62:	1cfb      	adds	r3, r7, #3
 8009a64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a66:	b672      	cpsid	i
  uint32_t i;

  __disable_irq();

  // ADC RESET
  RCC->APB2ENR |= RCC_APB2ENR_ADCEN;		// enable ADC clock
 8009a68:	4b73      	ldr	r3, [pc, #460]	; (8009c38 <__getAdcValue+0x1e0>)
 8009a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a6c:	4b72      	ldr	r3, [pc, #456]	; (8009c38 <__getAdcValue+0x1e0>)
 8009a6e:	2180      	movs	r1, #128	; 0x80
 8009a70:	0089      	lsls	r1, r1, #2
 8009a72:	430a      	orrs	r2, r1
 8009a74:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("nop");
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;
 8009a7a:	4b6f      	ldr	r3, [pc, #444]	; (8009c38 <__getAdcValue+0x1e0>)
 8009a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a7e:	4b6e      	ldr	r3, [pc, #440]	; (8009c38 <__getAdcValue+0x1e0>)
 8009a80:	2180      	movs	r1, #128	; 0x80
 8009a82:	0089      	lsls	r1, r1, #2
 8009a84:	430a      	orrs	r2, r1
 8009a86:	625a      	str	r2, [r3, #36]	; 0x24
 8009a88:	46c0      	nop			; (mov r8, r8)
 8009a8a:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();
  RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;
 8009a8c:	4b6a      	ldr	r3, [pc, #424]	; (8009c38 <__getAdcValue+0x1e0>)
 8009a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a90:	4b69      	ldr	r3, [pc, #420]	; (8009c38 <__getAdcValue+0x1e0>)
 8009a92:	496a      	ldr	r1, [pc, #424]	; (8009c3c <__getAdcValue+0x1e4>)
 8009a94:	400a      	ands	r2, r1
 8009a96:	625a      	str	r2, [r3, #36]	; 0x24
 8009a98:	46c0      	nop			; (mov r8, r8)
 8009a9a:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // Enable some basic parts
  ADC1->IER = 0;						// do not allow any interrupts
 8009a9c:	4b68      	ldr	r3, [pc, #416]	; (8009c40 <__getAdcValue+0x1e8>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	605a      	str	r2, [r3, #4]
  ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;		// select HSI16 clock
 8009aa2:	4b67      	ldr	r3, [pc, #412]	; (8009c40 <__getAdcValue+0x1e8>)
 8009aa4:	691a      	ldr	r2, [r3, #16]
 8009aa6:	4b66      	ldr	r3, [pc, #408]	; (8009c40 <__getAdcValue+0x1e8>)
 8009aa8:	0092      	lsls	r2, r2, #2
 8009aaa:	0892      	lsrs	r2, r2, #2
 8009aac:	611a      	str	r2, [r3, #16]

  ADC1->CR |= ADC_CR_ADVREGEN;			// enable ADC voltage regulator, probably not required, because this is automatically activated
 8009aae:	4b64      	ldr	r3, [pc, #400]	; (8009c40 <__getAdcValue+0x1e8>)
 8009ab0:	689a      	ldr	r2, [r3, #8]
 8009ab2:	4b63      	ldr	r3, [pc, #396]	; (8009c40 <__getAdcValue+0x1e8>)
 8009ab4:	2180      	movs	r1, #128	; 0x80
 8009ab6:	0549      	lsls	r1, r1, #21
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	609a      	str	r2, [r3, #8]
  ADC->CCR |= ADC_CCR_VREFEN; 			// Wake-up the VREFINT
 8009abc:	4b61      	ldr	r3, [pc, #388]	; (8009c44 <__getAdcValue+0x1ec>)
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	4b60      	ldr	r3, [pc, #384]	; (8009c44 <__getAdcValue+0x1ec>)
 8009ac2:	2180      	movs	r1, #128	; 0x80
 8009ac4:	03c9      	lsls	r1, r1, #15
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= ADC_CCR_TSEN; 			// Wake-up the temperature sensor
 8009aca:	4b5e      	ldr	r3, [pc, #376]	; (8009c44 <__getAdcValue+0x1ec>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	4b5d      	ldr	r3, [pc, #372]	; (8009c44 <__getAdcValue+0x1ec>)
 8009ad0:	2180      	movs	r1, #128	; 0x80
 8009ad2:	0409      	lsls	r1, r1, #16
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	46c0      	nop			; (mov r8, r8)
 8009ada:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // CALIBRATION
  if ((ADC1->CR & ADC_CR_ADEN) != 0) {		// clear ADEN flag if required
 8009adc:	4b58      	ldr	r3, [pc, #352]	; (8009c40 <__getAdcValue+0x1e8>)
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	d005      	beq.n	8009af2 <__getAdcValue+0x9a>
    ADC1->CR &= (uint32_t)(~ADC_CR_ADEN);
 8009ae6:	4b56      	ldr	r3, [pc, #344]	; (8009c40 <__getAdcValue+0x1e8>)
 8009ae8:	689a      	ldr	r2, [r3, #8]
 8009aea:	4b55      	ldr	r3, [pc, #340]	; (8009c40 <__getAdcValue+0x1e8>)
 8009aec:	2101      	movs	r1, #1
 8009aee:	438a      	bics	r2, r1
 8009af0:	609a      	str	r2, [r3, #8]
  }
  ADC1->CR |= ADC_CR_ADCAL; 				// start calibration
 8009af2:	4b53      	ldr	r3, [pc, #332]	; (8009c40 <__getAdcValue+0x1e8>)
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	4b52      	ldr	r3, [pc, #328]	; (8009c40 <__getAdcValue+0x1e8>)
 8009af8:	2180      	movs	r1, #128	; 0x80
 8009afa:	0609      	lsls	r1, r1, #24
 8009afc:	430a      	orrs	r2, r1
 8009afe:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_EOCAL) == 0);	// wait for calibration finished
 8009b00:	46c0      	nop			; (mov r8, r8)
 8009b02:	4b4f      	ldr	r3, [pc, #316]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	2380      	movs	r3, #128	; 0x80
 8009b08:	011b      	lsls	r3, r3, #4
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	d0f9      	beq.n	8009b02 <__getAdcValue+0xaa>
  ADC1->ISR |= ADC_ISR_EOCAL; 				// clear the status flag, by writing 1 to it
 8009b0e:	4b4c      	ldr	r3, [pc, #304]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4b4b      	ldr	r3, [pc, #300]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b14:	2180      	movs	r1, #128	; 0x80
 8009b16:	0109      	lsls	r1, r1, #4
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	46c0      	nop			; (mov r8, r8)
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	46c0      	nop			; (mov r8, r8)
 8009b22:	46c0      	nop			; (mov r8, r8)
 8009b24:	46c0      	nop			; (mov r8, r8)
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	46c0      	nop			; (mov r8, r8)
 8009b2a:	46c0      	nop			; (mov r8, r8)
 8009b2c:	46c0      	nop			; (mov r8, r8)
 8009b2e:	46c0      	nop			; (mov r8, r8)
  __NOP();
  __NOP();


  // ENABLE ADC
  ADC1->ISR |= ADC_ISR_ADRDY; 					// clear ready flag
 8009b30:	4b43      	ldr	r3, [pc, #268]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	4b42      	ldr	r3, [pc, #264]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b36:	2101      	movs	r1, #1
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	601a      	str	r2, [r3, #0]
  ADC1->CR |= ADC_CR_ADEN; 						// enable ADC
 8009b3c:	4b40      	ldr	r3, [pc, #256]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	4b3f      	ldr	r3, [pc, #252]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b42:	2101      	movs	r1, #1
 8009b44:	430a      	orrs	r2, r1
 8009b46:	609a      	str	r2, [r3, #8]
  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0);		// wait for ADC
 8009b48:	46c0      	nop			; (mov r8, r8)
 8009b4a:	4b3d      	ldr	r3, [pc, #244]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4013      	ands	r3, r2
 8009b52:	d0fa      	beq.n	8009b4a <__getAdcValue+0xf2>


  // CONFIGURE ADC
  ADC1->CFGR1 &= ~ADC_CFGR1_EXTEN;				// software enabled conversion start
 8009b54:	4b3a      	ldr	r3, [pc, #232]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	4b39      	ldr	r3, [pc, #228]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b5a:	493b      	ldr	r1, [pc, #236]	; (8009c48 <__getAdcValue+0x1f0>)
 8009b5c:	400a      	ands	r2, r1
 8009b5e:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_ALIGN;				// right alignment
 8009b60:	4b37      	ldr	r3, [pc, #220]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b62:	68da      	ldr	r2, [r3, #12]
 8009b64:	4b36      	ldr	r3, [pc, #216]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b66:	2120      	movs	r1, #32
 8009b68:	438a      	bics	r2, r1
 8009b6a:	60da      	str	r2, [r3, #12]
  ADC1->CFGR1 &= ~ADC_CFGR1_RES;				// 12 bit resolution
 8009b6c:	4b34      	ldr	r3, [pc, #208]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b6e:	68da      	ldr	r2, [r3, #12]
 8009b70:	4b33      	ldr	r3, [pc, #204]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b72:	2118      	movs	r1, #24
 8009b74:	438a      	bics	r2, r1
 8009b76:	60da      	str	r2, [r3, #12]
  ADC1->CHSELR = channel & ADC_CHANNEL_MASK; 	// Select channel (1 << channel number)
 8009b78:	4b31      	ldr	r3, [pc, #196]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	0352      	lsls	r2, r2, #13
 8009b7e:	0b52      	lsrs	r2, r2, #13
 8009b80:	629a      	str	r2, [r3, #40]	; 0x28
  ADC1->SMPR |= ADC_SMPR_SMP_0 | ADC_SMPR_SMP_1 | ADC_SMPR_SMP_2;
 8009b82:	4b2f      	ldr	r3, [pc, #188]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b84:	695a      	ldr	r2, [r3, #20]
 8009b86:	4b2e      	ldr	r3, [pc, #184]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b88:	2107      	movs	r1, #7
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	615a      	str	r2, [r3, #20]
  	  	  	  	  	  	  	  	  	  	  	  	// Select a sampling mode of 111 (very slow)

  // DO MUTIPLE READ & AVERAGE
  data = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 8009b92:	2300      	movs	r3, #0
 8009b94:	60bb      	str	r3, [r7, #8]
 8009b96:	e013      	b.n	8009bc0 <__getAdcValue+0x168>
  {
    ADC1->CR |= ADC_CR_ADSTART; 				// start the ADC conversion
 8009b98:	4b29      	ldr	r3, [pc, #164]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	4b28      	ldr	r3, [pc, #160]	; (8009c40 <__getAdcValue+0x1e8>)
 8009b9e:	2104      	movs	r1, #4
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	609a      	str	r2, [r3, #8]
    while ((ADC1->ISR & ADC_ISR_EOC) == 0); 	// wait end of conversion
 8009ba4:	46c0      	nop			; (mov r8, r8)
 8009ba6:	4b26      	ldr	r3, [pc, #152]	; (8009c40 <__getAdcValue+0x1e8>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2204      	movs	r2, #4
 8009bac:	4013      	ands	r3, r2
 8009bae:	d0fa      	beq.n	8009ba6 <__getAdcValue+0x14e>
    data += ADC1->DR;							// get ADC result and clear the ISR_EOC flag
 8009bb0:	4b23      	ldr	r3, [pc, #140]	; (8009c40 <__getAdcValue+0x1e8>)
 8009bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	18d3      	adds	r3, r2, r3
 8009bb8:	60fb      	str	r3, [r7, #12]
  for( i = 0; i < oversampling ; i++ )
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	60bb      	str	r3, [r7, #8]
 8009bc0:	1cfb      	adds	r3, r7, #3
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d3e6      	bcc.n	8009b98 <__getAdcValue+0x140>
  }
  data = data / oversampling;
 8009bca:	1cfb      	adds	r3, r7, #3
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	0019      	movs	r1, r3
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f7f6 faa1 	bl	8000118 <__udivsi3>
 8009bd6:	0003      	movs	r3, r0
 8009bd8:	60fb      	str	r3, [r7, #12]

  // DISABLE ADC
  // at this point the end of sampling and end of sequence bits are also set in ISR registr
  if ( (ADC1->CR & ADC_CR_ADEN) != 0 )
 8009bda:	4b19      	ldr	r3, [pc, #100]	; (8009c40 <__getAdcValue+0x1e8>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	2201      	movs	r2, #1
 8009be0:	4013      	ands	r3, r2
 8009be2:	d00b      	beq.n	8009bfc <__getAdcValue+0x1a4>
  {
    ADC1->CR |= ADC_CR_ADDIS; 					// disable ADC... maybe better execute a reset
 8009be4:	4b16      	ldr	r3, [pc, #88]	; (8009c40 <__getAdcValue+0x1e8>)
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <__getAdcValue+0x1e8>)
 8009bea:	2102      	movs	r1, #2
 8009bec:	430a      	orrs	r2, r1
 8009bee:	609a      	str	r2, [r3, #8]
    while ((ADC1->CR & ADC_CR_ADEN) != 0); 		// wait for ADC disable, ADEN is also cleared
 8009bf0:	46c0      	nop			; (mov r8, r8)
 8009bf2:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <__getAdcValue+0x1e8>)
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	d1fa      	bne.n	8009bf2 <__getAdcValue+0x19a>
  }

  // DISABLE OTHER PARTS, INCLUDING CLOCK
  ADC->CCR &= ~ADC_CCR_VREFEN; 					// disable VREFINT
 8009bfc:	4b11      	ldr	r3, [pc, #68]	; (8009c44 <__getAdcValue+0x1ec>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	4b10      	ldr	r3, [pc, #64]	; (8009c44 <__getAdcValue+0x1ec>)
 8009c02:	4912      	ldr	r1, [pc, #72]	; (8009c4c <__getAdcValue+0x1f4>)
 8009c04:	400a      	ands	r2, r1
 8009c06:	601a      	str	r2, [r3, #0]
  ADC->CCR &= ~ADC_CCR_TSEN; 					// disable temperature sensor
 8009c08:	4b0e      	ldr	r3, [pc, #56]	; (8009c44 <__getAdcValue+0x1ec>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	4b0d      	ldr	r3, [pc, #52]	; (8009c44 <__getAdcValue+0x1ec>)
 8009c0e:	4910      	ldr	r1, [pc, #64]	; (8009c50 <__getAdcValue+0x1f8>)
 8009c10:	400a      	ands	r2, r1
 8009c12:	601a      	str	r2, [r3, #0]
  ADC1->CR &= ~ADC_CR_ADVREGEN;					// disable ADC voltage regulator
 8009c14:	4b0a      	ldr	r3, [pc, #40]	; (8009c40 <__getAdcValue+0x1e8>)
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <__getAdcValue+0x1e8>)
 8009c1a:	490e      	ldr	r1, [pc, #56]	; (8009c54 <__getAdcValue+0x1fc>)
 8009c1c:	400a      	ands	r2, r1
 8009c1e:	609a      	str	r2, [r3, #8]
  RCC->APB2ENR &= ~RCC_APB2ENR_ADCEN;			// disable ADC clock
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <__getAdcValue+0x1e0>)
 8009c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c24:	4b04      	ldr	r3, [pc, #16]	; (8009c38 <__getAdcValue+0x1e0>)
 8009c26:	4905      	ldr	r1, [pc, #20]	; (8009c3c <__getAdcValue+0x1e4>)
 8009c28:	400a      	ands	r2, r1
 8009c2a:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsie i" : : : "memory");
 8009c2c:	b662      	cpsie	i

  __enable_irq();
  return data;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
}
 8009c30:	0018      	movs	r0, r3
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b004      	add	sp, #16
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	40021000 	.word	0x40021000
 8009c3c:	fffffdff 	.word	0xfffffdff
 8009c40:	40012400 	.word	0x40012400
 8009c44:	40012708 	.word	0x40012708
 8009c48:	fffff3ff 	.word	0xfffff3ff
 8009c4c:	ffbfffff 	.word	0xffbfffff
 8009c50:	ff7fffff 	.word	0xff7fffff
 8009c54:	efffffff 	.word	0xefffffff

08009c58 <adc_getTemperature>:
/**
 * Return temperature from Adc the temp is in centi-degrés Celcius
 * Ensure to read Temperature at least 8ms after wake up ...
 * Time to get accurate getVdd response
 */
int16_t adc_getTemperature() {
 8009c58:	b5b0      	push	{r4, r5, r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0

	uint16_t vdd = adc_getVdd();
 8009c5e:	240e      	movs	r4, #14
 8009c60:	0025      	movs	r5, r4
 8009c62:	193c      	adds	r4, r7, r4
 8009c64:	f000 f850 	bl	8009d08 <adc_getVdd>
 8009c68:	0003      	movs	r3, r0
 8009c6a:	8023      	strh	r3, [r4, #0]
	uint32_t v = __getAdcValue(ADC_CHANNEL_TEMPSENSOR,ITSDK_ADC_OVERSAMPLING);
 8009c6c:	4b21      	ldr	r3, [pc, #132]	; (8009cf4 <adc_getTemperature+0x9c>)
 8009c6e:	2110      	movs	r1, #16
 8009c70:	0018      	movs	r0, r3
 8009c72:	f7ff fef1 	bl	8009a58 <__getAdcValue>
 8009c76:	0003      	movs	r3, r0
 8009c78:	60bb      	str	r3, [r7, #8]

	// adapt the calibration values to the current VDD reference
	uint16_t cal1_vdd = (*CAL1_VALUE * VDD_CALIB) / vdd;
 8009c7a:	4b1f      	ldr	r3, [pc, #124]	; (8009cf8 <adc_getTemperature+0xa0>)
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	001a      	movs	r2, r3
 8009c80:	4b1e      	ldr	r3, [pc, #120]	; (8009cfc <adc_getTemperature+0xa4>)
 8009c82:	435a      	muls	r2, r3
 8009c84:	002c      	movs	r4, r5
 8009c86:	193b      	adds	r3, r7, r4
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	0019      	movs	r1, r3
 8009c8c:	0010      	movs	r0, r2
 8009c8e:	f7f6 facd 	bl	800022c <__divsi3>
 8009c92:	0003      	movs	r3, r0
 8009c94:	001a      	movs	r2, r3
 8009c96:	1dbb      	adds	r3, r7, #6
 8009c98:	801a      	strh	r2, [r3, #0]
	uint16_t cal2_vdd = (*CAL2_VALUE * VDD_CALIB) / vdd;
 8009c9a:	4b19      	ldr	r3, [pc, #100]	; (8009d00 <adc_getTemperature+0xa8>)
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	001a      	movs	r2, r3
 8009ca0:	4b16      	ldr	r3, [pc, #88]	; (8009cfc <adc_getTemperature+0xa4>)
 8009ca2:	435a      	muls	r2, r3
 8009ca4:	193b      	adds	r3, r7, r4
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	0019      	movs	r1, r3
 8009caa:	0010      	movs	r0, r2
 8009cac:	f7f6 fabe 	bl	800022c <__divsi3>
 8009cb0:	0003      	movs	r3, r0
 8009cb2:	001a      	movs	r2, r3
 8009cb4:	1d3b      	adds	r3, r7, #4
 8009cb6:	801a      	strh	r2, [r3, #0]

	// convert in 0.01�C according to the calibration ref
	int32_t temperature = 100 * (CAL2_TEMP - CAL1_TEMP)*(v - cal1_vdd);
 8009cb8:	1dbb      	adds	r3, r7, #6
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	1ad3      	subs	r3, r2, r3
 8009cc0:	4a10      	ldr	r2, [pc, #64]	; (8009d04 <adc_getTemperature+0xac>)
 8009cc2:	4353      	muls	r3, r2
 8009cc4:	603b      	str	r3, [r7, #0]
	temperature /= (cal2_vdd - cal1_vdd);
 8009cc6:	1d3b      	adds	r3, r7, #4
 8009cc8:	881a      	ldrh	r2, [r3, #0]
 8009cca:	1dbb      	adds	r3, r7, #6
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	0019      	movs	r1, r3
 8009cd2:	6838      	ldr	r0, [r7, #0]
 8009cd4:	f7f6 faaa 	bl	800022c <__divsi3>
 8009cd8:	0003      	movs	r3, r0
 8009cda:	603b      	str	r3, [r7, #0]
    temperature = temperature + (100*CAL1_TEMP);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	4a07      	ldr	r2, [pc, #28]	; (8009cfc <adc_getTemperature+0xa4>)
 8009ce0:	4694      	mov	ip, r2
 8009ce2:	4463      	add	r3, ip
 8009ce4:	603b      	str	r3, [r7, #0]
    return (int16_t)temperature;
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	b21b      	sxth	r3, r3

}
 8009cea:	0018      	movs	r0, r3
 8009cec:	46bd      	mov	sp, r7
 8009cee:	b004      	add	sp, #16
 8009cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8009cf2:	46c0      	nop			; (mov r8, r8)
 8009cf4:	48040000 	.word	0x48040000
 8009cf8:	1ff8007a 	.word	0x1ff8007a
 8009cfc:	00000bb8 	.word	0x00000bb8
 8009d00:	1ff8007e 	.word	0x1ff8007e
 8009d04:	00002710 	.word	0x00002710

08009d08 <adc_getVdd>:
 * Return VDD in mV ( internal VDD )
 * Be Careful -> right after wakeup from STOP the
 * value can be invalid (200mv error). The solution is to
 * sleep a bit (8ms recommanded) before sampling Vdd
 */
uint16_t adc_getVdd() {
 8009d08:	b590      	push	{r4, r7, lr}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
	// The value measured is not good until we wait about 8ms after MCU wakeup from stop
	uint64_t t = ( itsdk_time_get_us() - itsdk_state.lastWakeUpTimeUs) / 1000;
 8009d0e:	f7ff fd8f 	bl	8009830 <itsdk_time_get_us>
 8009d12:	000a      	movs	r2, r1
 8009d14:	0001      	movs	r1, r0
 8009d16:	4b13      	ldr	r3, [pc, #76]	; (8009d64 <adc_getVdd+0x5c>)
 8009d18:	68dc      	ldr	r4, [r3, #12]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	1ac9      	subs	r1, r1, r3
 8009d1e:	41a2      	sbcs	r2, r4
 8009d20:	0008      	movs	r0, r1
 8009d22:	0011      	movs	r1, r2
 8009d24:	22fa      	movs	r2, #250	; 0xfa
 8009d26:	0092      	lsls	r2, r2, #2
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f7f6 fb8f 	bl	800044c <__aeabi_uldivmod>
 8009d2e:	0003      	movs	r3, r0
 8009d30:	000c      	movs	r4, r1
 8009d32:	603b      	str	r3, [r7, #0]
 8009d34:	607c      	str	r4, [r7, #4]
	if ( t < 8 ) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10b      	bne.n	8009d54 <adc_getVdd+0x4c>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d102      	bne.n	8009d48 <adc_getVdd+0x40>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b07      	cmp	r3, #7
 8009d46:	d805      	bhi.n	8009d54 <adc_getVdd+0x4c>
		itsdk_delayMs(8 - t);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2208      	movs	r2, #8
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f000 fbee 	bl	800a530 <itsdk_delayMs>
	}
	return adc_getValue(0);
 8009d54:	2000      	movs	r0, #0
 8009d56:	f000 f80f 	bl	8009d78 <adc_getValue>
 8009d5a:	0003      	movs	r3, r0
}
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b003      	add	sp, #12
 8009d62:	bd90      	pop	{r4, r7, pc}
 8009d64:	200004b0 	.word	0x200004b0

08009d68 <adc_getVBat>:

/**
 * Return VBAT in mV - external VDD when a VBAT pin has been configured with a voltage divider by 2
 * Assuming VBAT have a /2 in front of the ADC
 */
uint16_t adc_getVBat() {
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
#if ITSDK_VBAT_ADC_PIN >= 0
	return adc_getValue(ITSDK_VBAT_ADC_PIN)*2;
#else
	return adc_getVdd();
 8009d6c:	f7ff ffcc 	bl	8009d08 <adc_getVdd>
 8009d70:	0003      	movs	r3, r0
#endif
}
 8009d72:	0018      	movs	r0, r3
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <adc_getValue>:
/**
 * Return ADC Value for an external PIN or internal
 * Get the pin number (hardware one)...
 * Pin 0 = internal VDD
 */
uint16_t adc_getValue(uint32_t pin) {
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b08c      	sub	sp, #48	; 0x30
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_TypeDef  	* GPIO_TypeDefStruct = GPIOA;
 8009d80:	23a0      	movs	r3, #160	; 0xa0
 8009d82:	05db      	lsls	r3, r3, #23
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009d86:	2108      	movs	r1, #8
 8009d88:	187b      	adds	r3, r7, r1
 8009d8a:	2203      	movs	r2, #3
 8009d8c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d8e:	187b      	adds	r3, r7, r1
 8009d90:	2200      	movs	r2, #0
 8009d92:	609a      	str	r2, [r3, #8]
	uint32_t channel = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	62bb      	str	r3, [r7, #40]	; 0x28
	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#elif  ITSDK_DEVICE == __DEVICE_STM32L072XX
	// For the BGA device I consider the pin number as Line||Column 65 => line 6 Column 5
	switch (pin) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b4d      	cmp	r3, #77	; 0x4d
 8009d9c:	d900      	bls.n	8009da0 <adc_getValue+0x28>
 8009d9e:	e085      	b.n	8009eac <adc_getValue+0x134>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	009a      	lsls	r2, r3, #2
 8009da4:	4b5f      	ldr	r3, [pc, #380]	; (8009f24 <adc_getValue+0x1ac>)
 8009da6:	18d3      	adds	r3, r2, r3
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	469f      	mov	pc, r3
	case 0:
		channel = ADC_CHANNEL_VREFINT; 	// VDD
 8009dac:	4b5e      	ldr	r3, [pc, #376]	; (8009f28 <adc_getValue+0x1b0>)
 8009dae:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009db0:	e083      	b.n	8009eba <adc_getValue+0x142>
	case 55:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009db2:	2308      	movs	r3, #8
 8009db4:	18fb      	adds	r3, r7, r3
 8009db6:	2201      	movs	r2, #1
 8009db8:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8009dba:	23a0      	movs	r3, #160	; 0xa0
 8009dbc:	05db      	lsls	r3, r3, #23
 8009dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_0;	// PA0
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009dc4:	e079      	b.n	8009eba <adc_getValue+0x142>
	case 54:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009dc6:	2308      	movs	r3, #8
 8009dc8:	18fb      	adds	r3, r7, r3
 8009dca:	2202      	movs	r2, #2
 8009dcc:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8009dce:	23a0      	movs	r3, #160	; 0xa0
 8009dd0:	05db      	lsls	r3, r3, #23
 8009dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_1;	// PA1
 8009dd4:	4b55      	ldr	r3, [pc, #340]	; (8009f2c <adc_getValue+0x1b4>)
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009dd8:	e06f      	b.n	8009eba <adc_getValue+0x142>
	case 66:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009dda:	2308      	movs	r3, #8
 8009ddc:	18fb      	adds	r3, r7, r3
 8009dde:	2204      	movs	r2, #4
 8009de0:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8009de2:	23a0      	movs	r3, #160	; 0xa0
 8009de4:	05db      	lsls	r3, r3, #23
 8009de6:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_2;	// PA2
 8009de8:	4b51      	ldr	r3, [pc, #324]	; (8009f30 <adc_getValue+0x1b8>)
 8009dea:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009dec:	e065      	b.n	8009eba <adc_getValue+0x142>
	case 77:
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009dee:	2308      	movs	r3, #8
 8009df0:	18fb      	adds	r3, r7, r3
 8009df2:	2208      	movs	r2, #8
 8009df4:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8009df6:	23a0      	movs	r3, #160	; 0xa0
 8009df8:	05db      	lsls	r3, r3, #23
 8009dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_3;	// PA3
 8009dfc:	4b4d      	ldr	r3, [pc, #308]	; (8009f34 <adc_getValue+0x1bc>)
 8009dfe:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009e00:	e05b      	b.n	8009eba <adc_getValue+0x142>
	case 65:
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009e02:	2308      	movs	r3, #8
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	2210      	movs	r2, #16
 8009e08:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8009e0a:	23a0      	movs	r3, #160	; 0xa0
 8009e0c:	05db      	lsls	r3, r3, #23
 8009e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_4; 	// PA4
 8009e10:	4b49      	ldr	r3, [pc, #292]	; (8009f38 <adc_getValue+0x1c0>)
 8009e12:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009e14:	e051      	b.n	8009eba <adc_getValue+0x142>
	case 76:
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009e16:	2308      	movs	r3, #8
 8009e18:	18fb      	adds	r3, r7, r3
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8009e1e:	23a0      	movs	r3, #160	; 0xa0
 8009e20:	05db      	lsls	r3, r3, #23
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_5;	// PA5
 8009e24:	4b45      	ldr	r3, [pc, #276]	; (8009f3c <adc_getValue+0x1c4>)
 8009e26:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009e28:	e047      	b.n	8009eba <adc_getValue+0x142>
	case 75:
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009e2a:	2308      	movs	r3, #8
 8009e2c:	18fb      	adds	r3, r7, r3
 8009e2e:	2240      	movs	r2, #64	; 0x40
 8009e30:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8009e32:	23a0      	movs	r3, #160	; 0xa0
 8009e34:	05db      	lsls	r3, r3, #23
 8009e36:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_6;	// PA6
 8009e38:	4b41      	ldr	r3, [pc, #260]	; (8009f40 <adc_getValue+0x1c8>)
 8009e3a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009e3c:	e03d      	b.n	8009eba <adc_getValue+0x142>
	case 64:
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009e3e:	2308      	movs	r3, #8
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	2280      	movs	r2, #128	; 0x80
 8009e44:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOA;
 8009e46:	23a0      	movs	r3, #160	; 0xa0
 8009e48:	05db      	lsls	r3, r3, #23
 8009e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_7;	// PA7
 8009e4c:	4b3d      	ldr	r3, [pc, #244]	; (8009f44 <adc_getValue+0x1cc>)
 8009e4e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009e50:	e033      	b.n	8009eba <adc_getValue+0x142>
	case 74:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009e52:	2308      	movs	r3, #8
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	2201      	movs	r2, #1
 8009e58:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 8009e5a:	4b3b      	ldr	r3, [pc, #236]	; (8009f48 <adc_getValue+0x1d0>)
 8009e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_8;	// PB0
 8009e5e:	4b3b      	ldr	r3, [pc, #236]	; (8009f4c <adc_getValue+0x1d4>)
 8009e60:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009e62:	e02a      	b.n	8009eba <adc_getValue+0x142>
	case 43:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009e64:	2308      	movs	r3, #8
 8009e66:	18fb      	adds	r3, r7, r3
 8009e68:	2202      	movs	r2, #2
 8009e6a:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOB;
 8009e6c:	4b36      	ldr	r3, [pc, #216]	; (8009f48 <adc_getValue+0x1d0>)
 8009e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_9;	// PB1
 8009e70:	4b37      	ldr	r3, [pc, #220]	; (8009f50 <adc_getValue+0x1d8>)
 8009e72:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009e74:	e021      	b.n	8009eba <adc_getValue+0x142>
	case 35:
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009e76:	2308      	movs	r3, #8
 8009e78:	18fb      	adds	r3, r7, r3
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 8009e7e:	4b35      	ldr	r3, [pc, #212]	; (8009f54 <adc_getValue+0x1dc>)
 8009e80:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_10;	// PC0
 8009e82:	4b35      	ldr	r3, [pc, #212]	; (8009f58 <adc_getValue+0x1e0>)
 8009e84:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009e86:	e018      	b.n	8009eba <adc_getValue+0x142>
	case 34:
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009e88:	2308      	movs	r3, #8
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 8009e90:	4b30      	ldr	r3, [pc, #192]	; (8009f54 <adc_getValue+0x1dc>)
 8009e92:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_11;	// PC1
 8009e94:	4b31      	ldr	r3, [pc, #196]	; (8009f5c <adc_getValue+0x1e4>)
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009e98:	e00f      	b.n	8009eba <adc_getValue+0x142>
	case 57:
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009e9a:	2308      	movs	r3, #8
 8009e9c:	18fb      	adds	r3, r7, r3
 8009e9e:	2204      	movs	r2, #4
 8009ea0:	601a      	str	r2, [r3, #0]
		GPIO_TypeDefStruct = GPIOC;
 8009ea2:	4b2c      	ldr	r3, [pc, #176]	; (8009f54 <adc_getValue+0x1dc>)
 8009ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
		channel = ADC_CHANNEL_12;	// PC2
 8009ea6:	4b2e      	ldr	r3, [pc, #184]	; (8009f60 <adc_getValue+0x1e8>)
 8009ea8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009eaa:	e006      	b.n	8009eba <adc_getValue+0x142>

	default:
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	4a2c      	ldr	r2, [pc, #176]	; (8009f64 <adc_getValue+0x1ec>)
 8009eb2:	0019      	movs	r1, r3
 8009eb4:	0010      	movs	r0, r2
 8009eb6:	f7fe fe23 	bl	8008b00 <itsdk_error_report>
  	    ITSDK_ERROR_REPORT(ITSDK_ERROR_ADC_INVALID_PIN,(uint16_t)pin);
	}
#else
	#error DEVICE NOT DEFINED
#endif
	if(pin!= 0) {
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d006      	beq.n	8009ece <adc_getValue+0x156>
		HAL_GPIO_Init(GPIO_TypeDefStruct, &GPIO_InitStruct);
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	18fa      	adds	r2, r7, r3
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec6:	0011      	movs	r1, r2
 8009ec8:	0018      	movs	r0, r3
 8009eca:	f7f8 f84d 	bl	8001f68 <HAL_GPIO_Init>
	}

	uint32_t v = __getAdcValue(channel,ITSDK_ADC_OVERSAMPLING);
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	2110      	movs	r1, #16
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	f7ff fdc0 	bl	8009a58 <__getAdcValue>
 8009ed8:	0003      	movs	r3, r0
 8009eda:	627b      	str	r3, [r7, #36]	; 0x24
	if (pin == 0) {
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d112      	bne.n	8009f08 <adc_getValue+0x190>
		if ( v == 0 ) return 0; // securing
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <adc_getValue+0x174>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	e017      	b.n	8009f1c <adc_getValue+0x1a4>
   	    int32_t vdd = ((int32_t)(*VREFINT_CAL) * VDD_CALIB) / v;
 8009eec:	4b1e      	ldr	r3, [pc, #120]	; (8009f68 <adc_getValue+0x1f0>)
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	001a      	movs	r2, r3
 8009ef2:	4b1e      	ldr	r3, [pc, #120]	; (8009f6c <adc_getValue+0x1f4>)
 8009ef4:	4353      	muls	r3, r2
 8009ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ef8:	0018      	movs	r0, r3
 8009efa:	f7f6 f90d 	bl	8000118 <__udivsi3>
 8009efe:	0003      	movs	r3, r0
 8009f00:	61fb      	str	r3, [r7, #28]
	    return (uint16_t)vdd;
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	e009      	b.n	8009f1c <adc_getValue+0x1a4>
	} else {
		int32_t vdd = ((uint32_t)adc_getVdd() * v )/4096;
 8009f08:	f7ff fefe 	bl	8009d08 <adc_getVdd>
 8009f0c:	0003      	movs	r3, r0
 8009f0e:	001a      	movs	r2, r3
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	4353      	muls	r3, r2
 8009f14:	0b1b      	lsrs	r3, r3, #12
 8009f16:	623b      	str	r3, [r7, #32]
	    return (uint16_t)vdd;
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	b29b      	uxth	r3, r3
	}

}
 8009f1c:	0018      	movs	r0, r3
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	b00c      	add	sp, #48	; 0x30
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	0800d080 	.word	0x0800d080
 8009f28:	44020000 	.word	0x44020000
 8009f2c:	04000002 	.word	0x04000002
 8009f30:	08000004 	.word	0x08000004
 8009f34:	0c000008 	.word	0x0c000008
 8009f38:	10000010 	.word	0x10000010
 8009f3c:	14000020 	.word	0x14000020
 8009f40:	18000040 	.word	0x18000040
 8009f44:	1c000080 	.word	0x1c000080
 8009f48:	50000400 	.word	0x50000400
 8009f4c:	20000100 	.word	0x20000100
 8009f50:	24000200 	.word	0x24000200
 8009f54:	50000800 	.word	0x50000800
 8009f58:	28000400 	.word	0x28000400
 8009f5c:	2c000800 	.word	0x2c000800
 8009f60:	30001000 	.word	0x30001000
 8009f64:	d0000008 	.word	0xd0000008
 8009f68:	1ff80078 	.word	0x1ff80078
 8009f6c:	00000bb8 	.word	0x00000bb8

08009f70 <getPortFromBankId>:
#endif

/**
 * Convert the bankId used as a generic Id to the right GPIO structure
 */
GPIO_TypeDef * getPortFromBankId(uint8_t bankId) {
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	0002      	movs	r2, r0
 8009f78:	1dfb      	adds	r3, r7, #7
 8009f7a:	701a      	strb	r2, [r3, #0]
	switch ( bankId ) {
 8009f7c:	1dfb      	adds	r3, r7, #7
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	2b07      	cmp	r3, #7
 8009f82:	d811      	bhi.n	8009fa8 <getPortFromBankId+0x38>
 8009f84:	009a      	lsls	r2, r3, #2
 8009f86:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <getPortFromBankId+0x54>)
 8009f88:	18d3      	adds	r3, r2, r3
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	469f      	mov	pc, r3
	case __BANK_A: return GPIOA;
 8009f8e:	23a0      	movs	r3, #160	; 0xa0
 8009f90:	05db      	lsls	r3, r3, #23
 8009f92:	e012      	b.n	8009fba <getPortFromBankId+0x4a>
	case __BANK_B: return GPIOB;
 8009f94:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <getPortFromBankId+0x58>)
 8009f96:	e010      	b.n	8009fba <getPortFromBankId+0x4a>
	case __BANK_C: return GPIOC;
 8009f98:	4b0c      	ldr	r3, [pc, #48]	; (8009fcc <getPortFromBankId+0x5c>)
 8009f9a:	e00e      	b.n	8009fba <getPortFromBankId+0x4a>
#if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D: return GPIOD;
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <getPortFromBankId+0x60>)
 8009f9e:	e00c      	b.n	8009fba <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E: return GPIOE;
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <getPortFromBankId+0x64>)
 8009fa2:	e00a      	b.n	8009fba <getPortFromBankId+0x4a>
#endif
#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H: return GPIOH;
 8009fa4:	4b0c      	ldr	r3, [pc, #48]	; (8009fd8 <getPortFromBankId+0x68>)
 8009fa6:	e008      	b.n	8009fba <getPortFromBankId+0x4a>
#endif
	default:
		ITSDK_ERROR_REPORT(ITSDK_ERROR_GPIO_UNSUPPORTED_BANK,(uint16_t)bankId);
 8009fa8:	1dfb      	adds	r3, r7, #7
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	4a0b      	ldr	r2, [pc, #44]	; (8009fdc <getPortFromBankId+0x6c>)
 8009fb0:	0019      	movs	r1, r3
 8009fb2:	0010      	movs	r0, r2
 8009fb4:	f7fe fda4 	bl	8008b00 <itsdk_error_report>
	}
	return NULL;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	0018      	movs	r0, r3
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	b002      	add	sp, #8
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	46c0      	nop			; (mov r8, r8)
 8009fc4:	0800d1b8 	.word	0x0800d1b8
 8009fc8:	50000400 	.word	0x50000400
 8009fcc:	50000800 	.word	0x50000800
 8009fd0:	50000c00 	.word	0x50000c00
 8009fd4:	50001000 	.word	0x50001000
 8009fd8:	50001c00 	.word	0x50001c00
 8009fdc:	d0000004 	.word	0xd0000004

08009fe0 <gpio_configure_ext>:
void gpio_configure(uint8_t bank, uint16_t id, itsdk_gpio_type_t type ) {
	gpio_configure_ext(bank, id, type, ITSDK_GPIO_SPEED_LOW, ITSDK_GPIO_ALT_NONE );
}


void gpio_configure_ext(uint8_t bank, uint16_t id, itsdk_gpio_type_t type, itsdk_gpio_speed_t speed, itsdk_gpio_alternate_t alternate ) {
 8009fe0:	b5b0      	push	{r4, r5, r7, lr}
 8009fe2:	b08e      	sub	sp, #56	; 0x38
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	0005      	movs	r5, r0
 8009fe8:	000c      	movs	r4, r1
 8009fea:	0010      	movs	r0, r2
 8009fec:	0019      	movs	r1, r3
 8009fee:	1dfb      	adds	r3, r7, #7
 8009ff0:	1c2a      	adds	r2, r5, #0
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	1d3b      	adds	r3, r7, #4
 8009ff6:	1c22      	adds	r2, r4, #0
 8009ff8:	801a      	strh	r2, [r3, #0]
 8009ffa:	1dbb      	adds	r3, r7, #6
 8009ffc:	1c02      	adds	r2, r0, #0
 8009ffe:	701a      	strb	r2, [r3, #0]
 800a000:	1cfb      	adds	r3, r7, #3
 800a002:	1c0a      	adds	r2, r1, #0
 800a004:	701a      	strb	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;

	switch ( bank ) {
 800a006:	1dfb      	adds	r3, r7, #7
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b07      	cmp	r3, #7
 800a00c:	d852      	bhi.n	800a0b4 <gpio_configure_ext+0xd4>
 800a00e:	009a      	lsls	r2, r3, #2
 800a010:	4bd0      	ldr	r3, [pc, #832]	; (800a354 <gpio_configure_ext+0x374>)
 800a012:	18d3      	adds	r3, r2, r3
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	469f      	mov	pc, r3
	case __BANK_A:
		  __GPIOA_CLK_ENABLE();
 800a018:	4bcf      	ldr	r3, [pc, #828]	; (800a358 <gpio_configure_ext+0x378>)
 800a01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01c:	4bce      	ldr	r3, [pc, #824]	; (800a358 <gpio_configure_ext+0x378>)
 800a01e:	2101      	movs	r1, #1
 800a020:	430a      	orrs	r2, r1
 800a022:	62da      	str	r2, [r3, #44]	; 0x2c
 800a024:	4bcc      	ldr	r3, [pc, #816]	; (800a358 <gpio_configure_ext+0x378>)
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	2201      	movs	r2, #1
 800a02a:	4013      	ands	r3, r2
 800a02c:	61fb      	str	r3, [r7, #28]
 800a02e:	69fb      	ldr	r3, [r7, #28]
		  break;
 800a030:	e040      	b.n	800a0b4 <gpio_configure_ext+0xd4>
	case __BANK_B:
		  __GPIOB_CLK_ENABLE();
 800a032:	4bc9      	ldr	r3, [pc, #804]	; (800a358 <gpio_configure_ext+0x378>)
 800a034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a036:	4bc8      	ldr	r3, [pc, #800]	; (800a358 <gpio_configure_ext+0x378>)
 800a038:	2102      	movs	r1, #2
 800a03a:	430a      	orrs	r2, r1
 800a03c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a03e:	4bc6      	ldr	r3, [pc, #792]	; (800a358 <gpio_configure_ext+0x378>)
 800a040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a042:	2202      	movs	r2, #2
 800a044:	4013      	ands	r3, r2
 800a046:	61bb      	str	r3, [r7, #24]
 800a048:	69bb      	ldr	r3, [r7, #24]
		  break;
 800a04a:	e033      	b.n	800a0b4 <gpio_configure_ext+0xd4>
	case __BANK_C:
		  __GPIOC_CLK_ENABLE();
 800a04c:	4bc2      	ldr	r3, [pc, #776]	; (800a358 <gpio_configure_ext+0x378>)
 800a04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a050:	4bc1      	ldr	r3, [pc, #772]	; (800a358 <gpio_configure_ext+0x378>)
 800a052:	2104      	movs	r1, #4
 800a054:	430a      	orrs	r2, r1
 800a056:	62da      	str	r2, [r3, #44]	; 0x2c
 800a058:	4bbf      	ldr	r3, [pc, #764]	; (800a358 <gpio_configure_ext+0x378>)
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	2204      	movs	r2, #4
 800a05e:	4013      	ands	r3, r2
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	697b      	ldr	r3, [r7, #20]
		  break;
 800a064:	e026      	b.n	800a0b4 <gpio_configure_ext+0xd4>
    #if ITSDK_DEVICE == __DEVICE_STM32L072XX || ITSDK_DEVICE == __DEVICE_STM32L053R8
	case __BANK_D:
		  __GPIOD_CLK_ENABLE();
 800a066:	4bbc      	ldr	r3, [pc, #752]	; (800a358 <gpio_configure_ext+0x378>)
 800a068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06a:	4bbb      	ldr	r3, [pc, #748]	; (800a358 <gpio_configure_ext+0x378>)
 800a06c:	2108      	movs	r1, #8
 800a06e:	430a      	orrs	r2, r1
 800a070:	62da      	str	r2, [r3, #44]	; 0x2c
 800a072:	4bb9      	ldr	r3, [pc, #740]	; (800a358 <gpio_configure_ext+0x378>)
 800a074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a076:	2208      	movs	r2, #8
 800a078:	4013      	ands	r3, r2
 800a07a:	613b      	str	r3, [r7, #16]
 800a07c:	693b      	ldr	r3, [r7, #16]
		  break;
 800a07e:	e019      	b.n	800a0b4 <gpio_configure_ext+0xd4>
	#endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_E:
		  __GPIOE_CLK_ENABLE();
 800a080:	4bb5      	ldr	r3, [pc, #724]	; (800a358 <gpio_configure_ext+0x378>)
 800a082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a084:	4bb4      	ldr	r3, [pc, #720]	; (800a358 <gpio_configure_ext+0x378>)
 800a086:	2110      	movs	r1, #16
 800a088:	430a      	orrs	r2, r1
 800a08a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a08c:	4bb2      	ldr	r3, [pc, #712]	; (800a358 <gpio_configure_ext+0x378>)
 800a08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a090:	2210      	movs	r2, #16
 800a092:	4013      	ands	r3, r2
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	68fb      	ldr	r3, [r7, #12]
		  break;
 800a098:	e00c      	b.n	800a0b4 <gpio_configure_ext+0xd4>
    #endif
	#if ITSDK_DEVICE == __DEVICE_STM32L072XX
	case __BANK_H:
		  __GPIOH_CLK_ENABLE();
 800a09a:	4baf      	ldr	r3, [pc, #700]	; (800a358 <gpio_configure_ext+0x378>)
 800a09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09e:	4bae      	ldr	r3, [pc, #696]	; (800a358 <gpio_configure_ext+0x378>)
 800a0a0:	2180      	movs	r1, #128	; 0x80
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	62da      	str	r2, [r3, #44]	; 0x2c
 800a0a6:	4bac      	ldr	r3, [pc, #688]	; (800a358 <gpio_configure_ext+0x378>)
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	2280      	movs	r2, #128	; 0x80
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	60bb      	str	r3, [r7, #8]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
		  break;
 800a0b2:	46c0      	nop			; (mov r8, r8)
	#endif
	}

	GPIO_InitStruct.Pin = id;
 800a0b4:	1d3b      	adds	r3, r7, #4
 800a0b6:	881a      	ldrh	r2, [r3, #0]
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	18fb      	adds	r3, r7, r3
 800a0bc:	601a      	str	r2, [r3, #0]
	switch ( speed ) {
 800a0be:	1cfb      	adds	r3, r7, #3
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <gpio_configure_ext+0xec>
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d005      	beq.n	800a0d6 <gpio_configure_ext+0xf6>
 800a0ca:	e009      	b.n	800a0e0 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_LOW:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0cc:	2320      	movs	r3, #32
 800a0ce:	18fb      	adds	r3, r7, r3
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	60da      	str	r2, [r3, #12]
		break;
 800a0d4:	e004      	b.n	800a0e0 <gpio_configure_ext+0x100>
	case ITSDK_GPIO_SPEED_HIGH:
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0d6:	2320      	movs	r3, #32
 800a0d8:	18fb      	adds	r3, r7, r3
 800a0da:	2203      	movs	r2, #3
 800a0dc:	60da      	str	r2, [r3, #12]
		break;
 800a0de:	46c0      	nop			; (mov r8, r8)

	}

	switch (type) {
 800a0e0:	1dbb      	adds	r3, r7, #6
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	2b13      	cmp	r3, #19
 800a0e6:	d900      	bls.n	800a0ea <gpio_configure_ext+0x10a>
 800a0e8:	e0a4      	b.n	800a234 <gpio_configure_ext+0x254>
 800a0ea:	009a      	lsls	r2, r3, #2
 800a0ec:	4b9b      	ldr	r3, [pc, #620]	; (800a35c <gpio_configure_ext+0x37c>)
 800a0ee:	18d3      	adds	r3, r2, r3
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	469f      	mov	pc, r3

	case GPIO_OUTPUT_PP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0f4:	2120      	movs	r1, #32
 800a0f6:	187b      	adds	r3, r7, r1
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0fc:	187b      	adds	r3, r7, r1
 800a0fe:	2200      	movs	r2, #0
 800a100:	609a      	str	r2, [r3, #8]
		break;
 800a102:	e097      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a104:	2120      	movs	r1, #32
 800a106:	187b      	adds	r3, r7, r1
 800a108:	2201      	movs	r2, #1
 800a10a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a10c:	187b      	adds	r3, r7, r1
 800a10e:	2201      	movs	r2, #1
 800a110:	609a      	str	r2, [r3, #8]
		break;
 800a112:	e08f      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a114:	2120      	movs	r1, #32
 800a116:	187b      	adds	r3, r7, r1
 800a118:	2201      	movs	r2, #1
 800a11a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a11c:	187b      	adds	r3, r7, r1
 800a11e:	2202      	movs	r2, #2
 800a120:	609a      	str	r2, [r3, #8]
		break;
 800a122:	e087      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_OUTPUT_OD:
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800a124:	2120      	movs	r1, #32
 800a126:	187b      	adds	r3, r7, r1
 800a128:	2211      	movs	r2, #17
 800a12a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a12c:	187b      	adds	r3, r7, r1
 800a12e:	2200      	movs	r2, #0
 800a130:	609a      	str	r2, [r3, #8]
		break;
 800a132:	e07f      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INPUT:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a134:	2120      	movs	r1, #32
 800a136:	187b      	adds	r3, r7, r1
 800a138:	2200      	movs	r2, #0
 800a13a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a13c:	187b      	adds	r3, r7, r1
 800a13e:	2200      	movs	r2, #0
 800a140:	609a      	str	r2, [r3, #8]
		break;
 800a142:	e077      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a144:	2120      	movs	r1, #32
 800a146:	187b      	adds	r3, r7, r1
 800a148:	2200      	movs	r2, #0
 800a14a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a14c:	187b      	adds	r3, r7, r1
 800a14e:	2201      	movs	r2, #1
 800a150:	609a      	str	r2, [r3, #8]
		break;
 800a152:	e06f      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INPUT_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a154:	2120      	movs	r1, #32
 800a156:	187b      	adds	r3, r7, r1
 800a158:	2200      	movs	r2, #0
 800a15a:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a15c:	187b      	adds	r3, r7, r1
 800a15e:	2202      	movs	r2, #2
 800a160:	609a      	str	r2, [r3, #8]
		break;
 800a162:	e067      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a164:	2120      	movs	r1, #32
 800a166:	187b      	adds	r3, r7, r1
 800a168:	4a7d      	ldr	r2, [pc, #500]	; (800a360 <gpio_configure_ext+0x380>)
 800a16a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a16c:	187b      	adds	r3, r7, r1
 800a16e:	2200      	movs	r2, #0
 800a170:	609a      	str	r2, [r3, #8]
		break;
 800a172:	e05f      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a174:	2120      	movs	r1, #32
 800a176:	187b      	adds	r3, r7, r1
 800a178:	4a79      	ldr	r2, [pc, #484]	; (800a360 <gpio_configure_ext+0x380>)
 800a17a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a17c:	187b      	adds	r3, r7, r1
 800a17e:	2202      	movs	r2, #2
 800a180:	609a      	str	r2, [r3, #8]
		break;
 800a182:	e057      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_RISING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a184:	2120      	movs	r1, #32
 800a186:	187b      	adds	r3, r7, r1
 800a188:	4a75      	ldr	r2, [pc, #468]	; (800a360 <gpio_configure_ext+0x380>)
 800a18a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a18c:	187b      	adds	r3, r7, r1
 800a18e:	2201      	movs	r2, #1
 800a190:	609a      	str	r2, [r3, #8]
		break;
 800a192:	e04f      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a194:	2120      	movs	r1, #32
 800a196:	187b      	adds	r3, r7, r1
 800a198:	4a72      	ldr	r2, [pc, #456]	; (800a364 <gpio_configure_ext+0x384>)
 800a19a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a19c:	187b      	adds	r3, r7, r1
 800a19e:	2200      	movs	r2, #0
 800a1a0:	609a      	str	r2, [r3, #8]
		break;
 800a1a2:	e047      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLUP:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a1a4:	2120      	movs	r1, #32
 800a1a6:	187b      	adds	r3, r7, r1
 800a1a8:	4a6e      	ldr	r2, [pc, #440]	; (800a364 <gpio_configure_ext+0x384>)
 800a1aa:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a1ac:	187b      	adds	r3, r7, r1
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	609a      	str	r2, [r3, #8]
		break;
 800a1b2:	e03f      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_FALLING_PULLDWN:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a1b4:	2120      	movs	r1, #32
 800a1b6:	187b      	adds	r3, r7, r1
 800a1b8:	4a6a      	ldr	r2, [pc, #424]	; (800a364 <gpio_configure_ext+0x384>)
 800a1ba:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a1bc:	187b      	adds	r3, r7, r1
 800a1be:	2202      	movs	r2, #2
 800a1c0:	609a      	str	r2, [r3, #8]
		break;
 800a1c2:	e037      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_INTERRUPT_ANY:
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a1c4:	2120      	movs	r1, #32
 800a1c6:	187b      	adds	r3, r7, r1
 800a1c8:	4a67      	ldr	r2, [pc, #412]	; (800a368 <gpio_configure_ext+0x388>)
 800a1ca:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1cc:	187b      	adds	r3, r7, r1
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	609a      	str	r2, [r3, #8]
		break;
 800a1d2:	e02f      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_ANALOG:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a1d4:	2120      	movs	r1, #32
 800a1d6:	187b      	adds	r3, r7, r1
 800a1d8:	2203      	movs	r2, #3
 800a1da:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1dc:	187b      	adds	r3, r7, r1
 800a1de:	2200      	movs	r2, #0
 800a1e0:	609a      	str	r2, [r3, #8]
		break;
 800a1e2:	e027      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_OFF:
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a1e4:	2120      	movs	r1, #32
 800a1e6:	187b      	adds	r3, r7, r1
 800a1e8:	2203      	movs	r2, #3
 800a1ea:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ec:	187b      	adds	r3, r7, r1
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	609a      	str	r2, [r3, #8]
		break;
 800a1f2:	e01f      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_NOPULL:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1f4:	2120      	movs	r1, #32
 800a1f6:	187b      	adds	r3, r7, r1
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1fc:	187b      	adds	r3, r7, r1
 800a1fe:	2200      	movs	r2, #0
 800a200:	609a      	str	r2, [r3, #8]
	    break;
 800a202:	e017      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLUP:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a204:	2120      	movs	r1, #32
 800a206:	187b      	adds	r3, r7, r1
 800a208:	2202      	movs	r2, #2
 800a20a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a20c:	187b      	adds	r3, r7, r1
 800a20e:	2201      	movs	r2, #1
 800a210:	609a      	str	r2, [r3, #8]
	    break;
 800a212:	e00f      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_PP_PULLDOWN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a214:	2120      	movs	r1, #32
 800a216:	187b      	adds	r3, r7, r1
 800a218:	2202      	movs	r2, #2
 800a21a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a21c:	187b      	adds	r3, r7, r1
 800a21e:	2202      	movs	r2, #2
 800a220:	609a      	str	r2, [r3, #8]
	    break;
 800a222:	e007      	b.n	800a234 <gpio_configure_ext+0x254>

	case GPIO_ALTERNATE_OPENDRAIN:
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a224:	2120      	movs	r1, #32
 800a226:	187b      	adds	r3, r7, r1
 800a228:	2212      	movs	r2, #18
 800a22a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a22c:	187b      	adds	r3, r7, r1
 800a22e:	2200      	movs	r2, #0
 800a230:	609a      	str	r2, [r3, #8]
	    break;
 800a232:	46c0      	nop			; (mov r8, r8)

	}
	int err=0;
 800a234:	2300      	movs	r3, #0
 800a236:	637b      	str	r3, [r7, #52]	; 0x34
	switch (type) {
 800a238:	1dbb      	adds	r3, r7, #6
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	3b10      	subs	r3, #16
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d900      	bls.n	800a244 <gpio_configure_ext+0x264>
 800a242:	e0a1      	b.n	800a388 <gpio_configure_ext+0x3a8>
	case GPIO_ALTERNATE_PP_NOPULL:
	case GPIO_ALTERNATE_PP_PULLUP:
	case GPIO_ALTERNATE_PP_PULLDOWN:
	case GPIO_ALTERNATE_OPENDRAIN:
		switch (alternate) {
 800a244:	2348      	movs	r3, #72	; 0x48
 800a246:	18fb      	adds	r3, r7, r3
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	2b06      	cmp	r3, #6
 800a24c:	d900      	bls.n	800a250 <gpio_configure_ext+0x270>
 800a24e:	e092      	b.n	800a376 <gpio_configure_ext+0x396>
 800a250:	009a      	lsls	r2, r3, #2
 800a252:	4b46      	ldr	r3, [pc, #280]	; (800a36c <gpio_configure_ext+0x38c>)
 800a254:	18d3      	adds	r3, r2, r3
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	469f      	mov	pc, r3
		case ITSDK_GPIO_ALT_TIMER2_TR:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800a25a:	1dfb      	adds	r3, r7, #7
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10a      	bne.n	800a278 <gpio_configure_ext+0x298>
 800a262:	1d3b      	adds	r3, r7, #4
 800a264:	881a      	ldrh	r2, [r3, #0]
 800a266:	2380      	movs	r3, #128	; 0x80
 800a268:	021b      	lsls	r3, r3, #8
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d104      	bne.n	800a278 <gpio_configure_ext+0x298>
 800a26e:	2320      	movs	r3, #32
 800a270:	18fb      	adds	r3, r7, r3
 800a272:	2202      	movs	r2, #2
 800a274:	611a      	str	r2, [r3, #16]
 800a276:	e01c      	b.n	800a2b2 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800a278:	1dfb      	adds	r3, r7, #7
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d108      	bne.n	800a292 <gpio_configure_ext+0x2b2>
 800a280:	1d3b      	adds	r3, r7, #4
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	2b20      	cmp	r3, #32
 800a286:	d104      	bne.n	800a292 <gpio_configure_ext+0x2b2>
 800a288:	2320      	movs	r3, #32
 800a28a:	18fb      	adds	r3, r7, r3
 800a28c:	2202      	movs	r2, #2
 800a28e:	611a      	str	r2, [r3, #16]
 800a290:	e00f      	b.n	800a2b2 <gpio_configure_ext+0x2d2>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800a292:	1dfb      	adds	r3, r7, #7
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d108      	bne.n	800a2ac <gpio_configure_ext+0x2cc>
 800a29a:	1d3b      	adds	r3, r7, #4
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d104      	bne.n	800a2ac <gpio_configure_ext+0x2cc>
 800a2a2:	2320      	movs	r3, #32
 800a2a4:	18fb      	adds	r3, r7, r3
 800a2a6:	2205      	movs	r2, #5
 800a2a8:	611a      	str	r2, [r3, #16]
 800a2aa:	e002      	b.n	800a2b2 <gpio_configure_ext+0x2d2>
			else err=1;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
		#else
		  #warning This device will not accept alternate GPIO configuration: code is missing
		#endif
			break;
 800a2b0:	e062      	b.n	800a378 <gpio_configure_ext+0x398>
 800a2b2:	e061      	b.n	800a378 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_TIMER2_C1:
		#if ITSDK_DEVICE == __DEVICE_STM32L072XX ||  ITSDK_DEVICE == __DEVICE_STM32L052T8
			if ( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800a2b4:	1dfb      	adds	r3, r7, #7
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10a      	bne.n	800a2d2 <gpio_configure_ext+0x2f2>
 800a2bc:	1d3b      	adds	r3, r7, #4
 800a2be:	881a      	ldrh	r2, [r3, #0]
 800a2c0:	2380      	movs	r3, #128	; 0x80
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d104      	bne.n	800a2d2 <gpio_configure_ext+0x2f2>
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	18fb      	adds	r3, r7, r3
 800a2cc:	2205      	movs	r2, #5
 800a2ce:	611a      	str	r2, [r3, #16]
 800a2d0:	e01c      	b.n	800a30c <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800a2d2:	1dfb      	adds	r3, r7, #7
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d108      	bne.n	800a2ec <gpio_configure_ext+0x30c>
 800a2da:	1d3b      	adds	r3, r7, #4
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	2b20      	cmp	r3, #32
 800a2e0:	d104      	bne.n	800a2ec <gpio_configure_ext+0x30c>
 800a2e2:	2320      	movs	r3, #32
 800a2e4:	18fb      	adds	r3, r7, r3
 800a2e6:	2205      	movs	r2, #5
 800a2e8:	611a      	str	r2, [r3, #16]
 800a2ea:	e00f      	b.n	800a30c <gpio_configure_ext+0x32c>
			else if ( bank == __BANK_A && id == __LP_GPIO_0 ) GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800a2ec:	1dfb      	adds	r3, r7, #7
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d108      	bne.n	800a306 <gpio_configure_ext+0x326>
 800a2f4:	1d3b      	adds	r3, r7, #4
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d104      	bne.n	800a306 <gpio_configure_ext+0x326>
 800a2fc:	2320      	movs	r3, #32
 800a2fe:	18fb      	adds	r3, r7, r3
 800a300:	2202      	movs	r2, #2
 800a302:	611a      	str	r2, [r3, #16]
 800a304:	e002      	b.n	800a30c <gpio_configure_ext+0x32c>
			else err=1;
 800a306:	2301      	movs	r3, #1
 800a308:	637b      	str	r3, [r7, #52]	; 0x34
		#endif
			break;
 800a30a:	e035      	b.n	800a378 <gpio_configure_ext+0x398>
 800a30c:	e034      	b.n	800a378 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_SCLK:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a30e:	1dfb      	adds	r3, r7, #7
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d108      	bne.n	800a328 <gpio_configure_ext+0x348>
 800a316:	1d3b      	adds	r3, r7, #4
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	2b20      	cmp	r3, #32
 800a31c:	d104      	bne.n	800a328 <gpio_configure_ext+0x348>
 800a31e:	2320      	movs	r3, #32
 800a320:	18fb      	adds	r3, r7, r3
 800a322:	2200      	movs	r2, #0
 800a324:	611a      	str	r2, [r3, #16]
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_3 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 800a326:	e027      	b.n	800a378 <gpio_configure_ext+0x398>
				else err=1;
 800a328:	2301      	movs	r3, #1
 800a32a:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 800a32c:	e024      	b.n	800a378 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MOSI:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a32e:	1dfb      	adds	r3, r7, #7
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d108      	bne.n	800a348 <gpio_configure_ext+0x368>
 800a336:	1d3b      	adds	r3, r7, #4
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	2b20      	cmp	r3, #32
 800a33c:	d104      	bne.n	800a348 <gpio_configure_ext+0x368>
 800a33e:	2320      	movs	r3, #32
 800a340:	18fb      	adds	r3, r7, r3
 800a342:	2200      	movs	r2, #0
 800a344:	611a      	str	r2, [r3, #16]
				if ( bank == __BANK_A && id == __LP_GPIO_7 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_A && id == __LP_GPIO_12 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if ( bank == __BANK_B && id == __LP_GPIO_5 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 800a346:	e017      	b.n	800a378 <gpio_configure_ext+0x398>
				else err=1;
 800a348:	2301      	movs	r3, #1
 800a34a:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 800a34c:	e014      	b.n	800a378 <gpio_configure_ext+0x398>
		case ITSDK_GPIO_ALT_SPI1_MISO:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 800a34e:	2301      	movs	r3, #1
 800a350:	637b      	str	r3, [r7, #52]	; 0x34
				if ( bank == __BANK_A && id == __LP_GPIO_11 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_6 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_B && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 800a352:	e011      	b.n	800a378 <gpio_configure_ext+0x398>
 800a354:	0800d1d8 	.word	0x0800d1d8
 800a358:	40021000 	.word	0x40021000
 800a35c:	0800d1f8 	.word	0x0800d1f8
 800a360:	10110000 	.word	0x10110000
 800a364:	10210000 	.word	0x10210000
 800a368:	10310000 	.word	0x10310000
 800a36c:	0800d248 	.word	0x0800d248
		case ITSDK_GPIO_ALT_SPI1_NSS:
			#if ITSDK_DEVICE == __DEVICE_STM32L072XX
				err=1;
 800a370:	2301      	movs	r3, #1
 800a372:	637b      	str	r3, [r7, #52]	; 0x34
			#elif ITSDK_DEVICE == __DEVICE_STM32L052T8
				if ( bank == __BANK_A && id == __LP_GPIO_4 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else if( bank == __BANK_A && id == __LP_GPIO_15 ) GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
				else err=1;
			#endif
			break;
 800a374:	e000      	b.n	800a378 <gpio_configure_ext+0x398>
		default:
		case ITSDK_GPIO_ALT_NONE:
			break;
 800a376:	46c0      	nop			; (mov r8, r8)
		}
		if (err>0) {
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dd06      	ble.n	800a38c <gpio_configure_ext+0x3ac>
			log_error("Gpio - invalid alternate\r\n");
 800a37e:	4b0c      	ldr	r3, [pc, #48]	; (800a3b0 <gpio_configure_ext+0x3d0>)
 800a380:	0018      	movs	r0, r3
 800a382:	f7fe fe49 	bl	8009018 <log_error>
		}
		break;
 800a386:	e001      	b.n	800a38c <gpio_configure_ext+0x3ac>
	default:
		break;
 800a388:	46c0      	nop			; (mov r8, r8)
 800a38a:	e000      	b.n	800a38e <gpio_configure_ext+0x3ae>
		break;
 800a38c:	46c0      	nop			; (mov r8, r8)
	}


	HAL_GPIO_Init(getPortFromBankId(bank), &GPIO_InitStruct);
 800a38e:	1dfb      	adds	r3, r7, #7
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	0018      	movs	r0, r3
 800a394:	f7ff fdec 	bl	8009f70 <getPortFromBankId>
 800a398:	0002      	movs	r2, r0
 800a39a:	2320      	movs	r3, #32
 800a39c:	18fb      	adds	r3, r7, r3
 800a39e:	0019      	movs	r1, r3
 800a3a0:	0010      	movs	r0, r2
 800a3a2:	f7f7 fde1 	bl	8001f68 <HAL_GPIO_Init>

}
 800a3a6:	46c0      	nop			; (mov r8, r8)
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	b00e      	add	sp, #56	; 0x38
 800a3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	0800caa4 	.word	0x0800caa4

0800a3b4 <HAL_GPIO_EXTI_Callback>:
#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
#else
void gpio_Callback(uint16_t GPIO_Pin)
#endif
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	0002      	movs	r2, r0
 800a3bc:	1dbb      	adds	r3, r7, #6
 800a3be:	801a      	strh	r2, [r3, #0]

	// When the __gpio_irq_wakeup handler is set this handler is called
	// Because we do not want the normal handler to be called until the
	// MCU is correctly configured when waking up from deep-sleep
	if (__gpio_irq_wakeup != NULL ) {
 800a3c0:	4b1b      	ldr	r3, [pc, #108]	; (800a430 <HAL_GPIO_EXTI_Callback+0x7c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00c      	beq.n	800a3e2 <HAL_GPIO_EXTI_Callback+0x2e>
		void (*p)(uint16_t p) = __gpio_irq_wakeup->irq_func;
 800a3c8:	4b19      	ldr	r3, [pc, #100]	; (800a430 <HAL_GPIO_EXTI_Callback+0x7c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	613b      	str	r3, [r7, #16]
		if ( p != NULL ) {
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d005      	beq.n	800a3e2 <HAL_GPIO_EXTI_Callback+0x2e>
			p(GPIO_Pin);
 800a3d6:	1dbb      	adds	r3, r7, #6
 800a3d8:	881a      	ldrh	r2, [r3, #0]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	0010      	movs	r0, r2
 800a3de:	4798      	blx	r3
			return;
 800a3e0:	e023      	b.n	800a42a <HAL_GPIO_EXTI_Callback+0x76>
		}
	}
	// Normal non wake-up situation.
	gpio_irq_chain_t * c = &__gpio_irq_chain;
 800a3e2:	4b14      	ldr	r3, [pc, #80]	; (800a434 <HAL_GPIO_EXTI_Callback+0x80>)
 800a3e4:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 800a3e6:	e019      	b.n	800a41c <HAL_GPIO_EXTI_Callback+0x68>
		void (*p)(uint16_t p) = c->irq_func;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	60fb      	str	r3, [r7, #12]
		if ( p != NULL && (c->pinMask==0 || ((c->pinMask & GPIO_Pin) > 0) ) ) {
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d010      	beq.n	800a416 <HAL_GPIO_EXTI_Callback+0x62>
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	889b      	ldrh	r3, [r3, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d007      	beq.n	800a40c <HAL_GPIO_EXTI_Callback+0x58>
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	889b      	ldrh	r3, [r3, #4]
 800a400:	1dba      	adds	r2, r7, #6
 800a402:	8812      	ldrh	r2, [r2, #0]
 800a404:	4013      	ands	r3, r2
 800a406:	b29b      	uxth	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <HAL_GPIO_EXTI_Callback+0x62>
			p(GPIO_Pin);
 800a40c:	1dbb      	adds	r3, r7, #6
 800a40e:	881a      	ldrh	r2, [r3, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	0010      	movs	r0, r2
 800a414:	4798      	blx	r3
		}
		c = c->next;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	617b      	str	r3, [r7, #20]
	while ( c != NULL ) {
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1e2      	bne.n	800a3e8 <HAL_GPIO_EXTI_Callback+0x34>
	}
	#if !defined ITSDK_WITH_GPIO_HANDLER || ITSDK_WITH_GPIO_HANDLER == __ENABLE
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a422:	4b05      	ldr	r3, [pc, #20]	; (800a438 <HAL_GPIO_EXTI_Callback+0x84>)
 800a424:	1dba      	adds	r2, r7, #6
 800a426:	8812      	ldrh	r2, [r2, #0]
 800a428:	615a      	str	r2, [r3, #20]
	#endif
}
 800a42a:	46bd      	mov	sp, r7
 800a42c:	b006      	add	sp, #24
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	200001cc 	.word	0x200001cc
 800a434:	200001c0 	.word	0x200001c0
 800a438:	40010400 	.word	0x40010400

0800a43c <gpio_registerWakeUpAction>:

/**
 * Add an action on wake-up.
 * This action replace temporaly the exiting actions
 */
void gpio_registerWakeUpAction(gpio_irq_chain_t * chain) {
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
	__gpio_irq_wakeup = chain;
 800a444:	4b03      	ldr	r3, [pc, #12]	; (800a454 <gpio_registerWakeUpAction+0x18>)
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	601a      	str	r2, [r3, #0]
}
 800a44a:	46c0      	nop			; (mov r8, r8)
 800a44c:	46bd      	mov	sp, r7
 800a44e:	b002      	add	sp, #8
 800a450:	bd80      	pop	{r7, pc}
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	200001cc 	.word	0x200001cc

0800a458 <gpio_removeWakeUpAction>:

/**
 * Remove the action on wake-up.
 * This action restore the previously defined gpio actions
 */
void gpio_removeWakeUpAction() {
 800a458:	b580      	push	{r7, lr}
 800a45a:	af00      	add	r7, sp, #0
	__gpio_irq_wakeup = NULL;
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <gpio_removeWakeUpAction+0x10>)
 800a45e:	2200      	movs	r2, #0
 800a460:	601a      	str	r2, [r3, #0]
}
 800a462:	46c0      	nop			; (mov r8, r8)
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	200001cc 	.word	0x200001cc

0800a46c <NVIC_SystemReset>:
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a470:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a474:	4b03      	ldr	r3, [pc, #12]	; (800a484 <NVIC_SystemReset+0x18>)
 800a476:	4a04      	ldr	r2, [pc, #16]	; (800a488 <NVIC_SystemReset+0x1c>)
 800a478:	60da      	str	r2, [r3, #12]
 800a47a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a47e:	46c0      	nop			; (mov r8, r8)
    __NOP();
 800a480:	e7fd      	b.n	800a47e <NVIC_SystemReset+0x12>
 800a482:	46c0      	nop			; (mov r8, r8)
 800a484:	e000ed00 	.word	0xe000ed00
 800a488:	05fa0004 	.word	0x05fa0004

0800a48c <itsdk_reset>:
#include "stm32l0xx_hal.h"

/**
 * Reset the device
 */
void itsdk_reset() {
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0
	while(1) NVIC_SystemReset();
 800a490:	f7ff ffec 	bl	800a46c <NVIC_SystemReset>
 800a494:	e7fc      	b.n	800a490 <itsdk_reset+0x4>
	...

0800a498 <itsdk_getResetCause>:
}

/**
 * Reset Cause
 */
itsdk_reset_cause_t itsdk_getResetCause() {
 800a498:	b580      	push	{r7, lr}
 800a49a:	af00      	add	r7, sp, #0
	if ( RCC->CSR & RCC_CSR_LPWRRSTF ) return RESET_CAUSE_LOWPOWER;
 800a49c:	4b1c      	ldr	r3, [pc, #112]	; (800a510 <itsdk_getResetCause+0x78>)
 800a49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	da01      	bge.n	800a4a8 <itsdk_getResetCause+0x10>
 800a4a4:	2306      	movs	r3, #6
 800a4a6:	e030      	b.n	800a50a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_WWDGRSTF ) return RESET_CAUSE_WWDG;
 800a4a8:	4b19      	ldr	r3, [pc, #100]	; (800a510 <itsdk_getResetCause+0x78>)
 800a4aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4ac:	2380      	movs	r3, #128	; 0x80
 800a4ae:	05db      	lsls	r3, r3, #23
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	d001      	beq.n	800a4b8 <itsdk_getResetCause+0x20>
 800a4b4:	2305      	movs	r3, #5
 800a4b6:	e028      	b.n	800a50a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_IWDGRSTF ) return RESET_CAUSE_IWDG;
 800a4b8:	4b15      	ldr	r3, [pc, #84]	; (800a510 <itsdk_getResetCause+0x78>)
 800a4ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4bc:	2380      	movs	r3, #128	; 0x80
 800a4be:	059b      	lsls	r3, r3, #22
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	d001      	beq.n	800a4c8 <itsdk_getResetCause+0x30>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	e020      	b.n	800a50a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_SFTRSTF ) return RESET_CAUSE_SOFTWARE;
 800a4c8:	4b11      	ldr	r3, [pc, #68]	; (800a510 <itsdk_getResetCause+0x78>)
 800a4ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4cc:	2380      	movs	r3, #128	; 0x80
 800a4ce:	055b      	lsls	r3, r3, #21
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	d001      	beq.n	800a4d8 <itsdk_getResetCause+0x40>
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e018      	b.n	800a50a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PORRSTF ) return RESET_CAUSE_POWER_ON;
 800a4d8:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <itsdk_getResetCause+0x78>)
 800a4da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4dc:	2380      	movs	r3, #128	; 0x80
 800a4de:	051b      	lsls	r3, r3, #20
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	d001      	beq.n	800a4e8 <itsdk_getResetCause+0x50>
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	e010      	b.n	800a50a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_PINRSTF ) return RESET_CAUSE_RESET_PIN;
 800a4e8:	4b09      	ldr	r3, [pc, #36]	; (800a510 <itsdk_getResetCause+0x78>)
 800a4ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4ec:	2380      	movs	r3, #128	; 0x80
 800a4ee:	04db      	lsls	r3, r3, #19
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	d001      	beq.n	800a4f8 <itsdk_getResetCause+0x60>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e008      	b.n	800a50a <itsdk_getResetCause+0x72>
	if ( RCC->CSR & RCC_CSR_OBLRSTF ) return RESET_CAUSE_LOWPOWER;
 800a4f8:	4b05      	ldr	r3, [pc, #20]	; (800a510 <itsdk_getResetCause+0x78>)
 800a4fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4fc:	2380      	movs	r3, #128	; 0x80
 800a4fe:	049b      	lsls	r3, r3, #18
 800a500:	4013      	ands	r3, r2
 800a502:	d001      	beq.n	800a508 <itsdk_getResetCause+0x70>
 800a504:	2306      	movs	r3, #6
 800a506:	e000      	b.n	800a50a <itsdk_getResetCause+0x72>
	else return RESET_CAUSE_UNKNONW;
 800a508:	2307      	movs	r3, #7
}
 800a50a:	0018      	movs	r0, r3
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	40021000 	.word	0x40021000

0800a514 <itsdk_cleanResetCause>:

void itsdk_cleanResetCause() {
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_RMVF;
 800a518:	4b04      	ldr	r3, [pc, #16]	; (800a52c <itsdk_cleanResetCause+0x18>)
 800a51a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a51c:	4b03      	ldr	r3, [pc, #12]	; (800a52c <itsdk_cleanResetCause+0x18>)
 800a51e:	2180      	movs	r1, #128	; 0x80
 800a520:	0409      	lsls	r1, r1, #16
 800a522:	430a      	orrs	r2, r1
 800a524:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a526:	46c0      	nop			; (mov r8, r8)
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	40021000 	.word	0x40021000

0800a530 <itsdk_delayMs>:

/**
 * Delay in ms
 */
void itsdk_delayMs(uint32_t ms) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	0018      	movs	r0, r3
 800a53c:	f7f7 f974 	bl	8001828 <HAL_Delay>
}
 800a540:	46c0      	nop			; (mov r8, r8)
 800a542:	46bd      	mov	sp, r7
 800a544:	b002      	add	sp, #8
 800a546:	bd80      	pop	{r7, pc}

0800a548 <itsdk_getIrqMask>:

/**
 * Get the IRQ Mask
 */
uint32_t itsdk_getIrqMask() {
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a54e:	f3ef 8310 	mrs	r3, PRIMASK
 800a552:	607b      	str	r3, [r7, #4]
  return(result);
 800a554:	687b      	ldr	r3, [r7, #4]
	return __get_PRIMASK();
 800a556:	46c0      	nop			; (mov r8, r8)
}
 800a558:	0018      	movs	r0, r3
 800a55a:	46bd      	mov	sp, r7
 800a55c:	b002      	add	sp, #8
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <itsdk_setIrqMask>:

/**
 * Set / Restore the IRQ Mask
 */
void itsdk_setIrqMask(uint32_t mask) {
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(mask);
}
 800a572:	46c0      	nop			; (mov r8, r8)
 800a574:	46bd      	mov	sp, r7
 800a576:	b004      	add	sp, #16
 800a578:	bd80      	pop	{r7, pc}
	...

0800a57c <itsdk_enterCriticalSection>:
/**
 * Enter a critical section / disable interrupt
 */
static uint32_t __interrupt_mask;
void itsdk_enterCriticalSection() {
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
	__interrupt_mask = itsdk_getIrqMask();
 800a582:	f7ff ffe1 	bl	800a548 <itsdk_getIrqMask>
 800a586:	0002      	movs	r2, r0
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <itsdk_enterCriticalSection+0x24>)
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	2301      	movs	r3, #1
 800a58e:	607b      	str	r3, [r7, #4]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f383 8810 	msr	PRIMASK, r3
	//__disable_irq();
	__set_PRIMASK(1);	// allows to capture but not execute the interruption appearing during the critical section execution
}
 800a596:	46c0      	nop			; (mov r8, r8)
 800a598:	46bd      	mov	sp, r7
 800a59a:	b002      	add	sp, #8
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	200001d0 	.word	0x200001d0

0800a5a4 <itsdk_leaveCriticalSection>:

/**
 * Restore the initial irq mask
 * to leave a critical secqtion
 */
void itsdk_leaveCriticalSection() {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
	itsdk_setIrqMask(__interrupt_mask);
 800a5a8:	4b03      	ldr	r3, [pc, #12]	; (800a5b8 <itsdk_leaveCriticalSection+0x14>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	0018      	movs	r0, r3
 800a5ae:	f7ff ffd7 	bl	800a560 <itsdk_setIrqMask>
}
 800a5b2:	46c0      	nop			; (mov r8, r8)
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	200001d0 	.word	0x200001d0

0800a5bc <itsdk_getUniqId>:
/**
 * Generate a uniq ID based on the object ID. The id struct is
 * initialized based on this. This size of the id table is given
 * as a parameter. size is in Byte
 */
void itsdk_getUniqId(uint8_t * id, int8_t size){
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	000a      	movs	r2, r1
 800a5c6:	1cfb      	adds	r3, r7, #3
 800a5c8:	701a      	strb	r2, [r3, #0]

	uint32_t i = (( *( uint32_t* )STM32_ID1 ) << 16) + (( *( uint32_t* )STM32_ID2 )  << 8) + (*( uint32_t* )STM32_ID3 );
 800a5ca:	4b2c      	ldr	r3, [pc, #176]	; (800a67c <itsdk_getUniqId+0xc0>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	041a      	lsls	r2, r3, #16
 800a5d0:	4b2b      	ldr	r3, [pc, #172]	; (800a680 <itsdk_getUniqId+0xc4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	021b      	lsls	r3, r3, #8
 800a5d6:	18d2      	adds	r2, r2, r3
 800a5d8:	4b2a      	ldr	r3, [pc, #168]	; (800a684 <itsdk_getUniqId+0xc8>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	18d3      	adds	r3, r2, r3
 800a5de:	60fb      	str	r3, [r7, #12]
	uint8_t l=0;
 800a5e0:	2317      	movs	r3, #23
 800a5e2:	18fb      	adds	r3, r7, r3
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	701a      	strb	r2, [r3, #0]
	uint32_t s=i;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	613b      	str	r3, [r7, #16]
	while ( l < size ) {
 800a5ec:	e03a      	b.n	800a664 <itsdk_getUniqId+0xa8>
		if ( (l & 0x3) == 0 ) {
 800a5ee:	2317      	movs	r3, #23
 800a5f0:	18fb      	adds	r3, r7, r3
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	2203      	movs	r2, #3
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	d11f      	bne.n	800a63a <itsdk_getUniqId+0x7e>
			switch ( (l >> 2) & 3 ) {
 800a5fa:	2317      	movs	r3, #23
 800a5fc:	18fb      	adds	r3, r7, r3
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	089b      	lsrs	r3, r3, #2
 800a602:	b2db      	uxtb	r3, r3
 800a604:	001a      	movs	r2, r3
 800a606:	2303      	movs	r3, #3
 800a608:	4013      	ands	r3, r2
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d008      	beq.n	800a620 <itsdk_getUniqId+0x64>
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d00b      	beq.n	800a62a <itsdk_getUniqId+0x6e>
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10e      	bne.n	800a634 <itsdk_getUniqId+0x78>
				case 0:	s = i ^ STM32_ID1; break;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4a18      	ldr	r2, [pc, #96]	; (800a67c <itsdk_getUniqId+0xc0>)
 800a61a:	4053      	eors	r3, r2
 800a61c:	613b      	str	r3, [r7, #16]
 800a61e:	e00d      	b.n	800a63c <itsdk_getUniqId+0x80>
				case 1: s = i ^ STM32_ID2; break;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	4a17      	ldr	r2, [pc, #92]	; (800a680 <itsdk_getUniqId+0xc4>)
 800a624:	4053      	eors	r3, r2
 800a626:	613b      	str	r3, [r7, #16]
 800a628:	e008      	b.n	800a63c <itsdk_getUniqId+0x80>
				case 2: s = i ^ STM32_ID3; break;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4a15      	ldr	r2, [pc, #84]	; (800a684 <itsdk_getUniqId+0xc8>)
 800a62e:	4053      	eors	r3, r2
 800a630:	613b      	str	r3, [r7, #16]
 800a632:	e003      	b.n	800a63c <itsdk_getUniqId+0x80>
				default:
				case 3: s = i; break;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	613b      	str	r3, [r7, #16]
 800a638:	e000      	b.n	800a63c <itsdk_getUniqId+0x80>
			}
		}
 800a63a:	46c0      	nop			; (mov r8, r8)
		id[l] = ( s >> (8*(l&3))) & 0xFF;
 800a63c:	2017      	movs	r0, #23
 800a63e:	183b      	adds	r3, r7, r0
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2203      	movs	r2, #3
 800a644:	4013      	ands	r3, r2
 800a646:	00db      	lsls	r3, r3, #3
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	40da      	lsrs	r2, r3
 800a64c:	0011      	movs	r1, r2
 800a64e:	183b      	adds	r3, r7, r0
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	18d3      	adds	r3, r2, r3
 800a656:	b2ca      	uxtb	r2, r1
 800a658:	701a      	strb	r2, [r3, #0]
		l++;
 800a65a:	183b      	adds	r3, r7, r0
 800a65c:	781a      	ldrb	r2, [r3, #0]
 800a65e:	183b      	adds	r3, r7, r0
 800a660:	3201      	adds	r2, #1
 800a662:	701a      	strb	r2, [r3, #0]
	while ( l < size ) {
 800a664:	2317      	movs	r3, #23
 800a666:	18fb      	adds	r3, r7, r3
 800a668:	781a      	ldrb	r2, [r3, #0]
 800a66a:	1cfb      	adds	r3, r7, #3
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	b25b      	sxtb	r3, r3
 800a670:	429a      	cmp	r2, r3
 800a672:	dbbc      	blt.n	800a5ee <itsdk_getUniqId+0x32>
	}

}
 800a674:	46c0      	nop			; (mov r8, r8)
 800a676:	46bd      	mov	sp, r7
 800a678:	b006      	add	sp, #24
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	1ff80050 	.word	0x1ff80050
 800a680:	1ff80054 	.word	0x1ff80054
 800a684:	1ff80064 	.word	0x1ff80064

0800a688 <serial1_init>:
#endif

/**
 * Init the Serial 1 extra configurations
 */
void serial1_init() {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
#if ( ITSDK_WITH_UART_RXIRQ & __UART_USART1 ) > 0 || ( ITSDK_WITH_UART_RXIRQ & __UART_LPUART1 ) > 0
	#if ( ITSDK_WITH_UART_RXIRQ & __UART_LPUART1 ) > 0
		UART_HandleTypeDef * _uart = &hlpuart1;
	#elif  ( ITSDK_WITH_UART_RXIRQ & __UART_USART1 ) > 0
		UART_HandleTypeDef * _uart = &huart1;
 800a68e:	4b1d      	ldr	r3, [pc, #116]	; (800a704 <serial1_init+0x7c>)
 800a690:	607b      	str	r3, [r7, #4]
	#endif
    __HAL_UART_ENABLE_IT(_uart,UART_IT_ERR);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2101      	movs	r1, #1
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	609a      	str	r2, [r3, #8]
    __HAL_UART_ENABLE_IT(_uart,UART_IT_RXNE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2120      	movs	r1, #32
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(_uart,UART_IT_TC);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2140      	movs	r1, #64	; 0x40
 800a6be:	438a      	bics	r2, r1
 800a6c0:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(_uart,UART_IT_TXE);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2180      	movs	r1, #128	; 0x80
 800a6ce:	438a      	bics	r2, r1
 800a6d0:	601a      	str	r2, [r3, #0]
    // Clear pending interrupt & co
    HAL_UART_Receive_IT(_uart, __serial1_buffer, 1);
 800a6d2:	490d      	ldr	r1, [pc, #52]	; (800a708 <serial1_init+0x80>)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f7f9 ff93 	bl	8004604 <HAL_UART_Receive_IT>
    _uart->Instance->RDR;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _uart->Instance->ISR;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	69db      	ldr	r3, [r3, #28]
    _uart->Instance->ICR;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
    // Reset circular buffer
    __serial1_bufferRd = 0;
 800a6f0:	4b06      	ldr	r3, [pc, #24]	; (800a70c <serial1_init+0x84>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	701a      	strb	r2, [r3, #0]
    __serial1_bufferWr = 0;
 800a6f6:	4b06      	ldr	r3, [pc, #24]	; (800a710 <serial1_init+0x88>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	701a      	strb	r2, [r3, #0]
#endif
}
 800a6fc:	46c0      	nop			; (mov r8, r8)
 800a6fe:	46bd      	mov	sp, r7
 800a700:	b002      	add	sp, #8
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20000370 	.word	0x20000370
 800a708:	20000510 	.word	0x20000510
 800a70c:	20000550 	.word	0x20000550
 800a710:	2000050d 	.word	0x2000050d

0800a714 <serial1_print>:
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
	   while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_TC) == RESET);
  #endif
}

void serial1_print(char * msg) {
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg),0xFFFF);
  #elif ( ITSDK_WITH_UART & __UART_USART1 ) > 0
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg),0xFFFF);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	0018      	movs	r0, r3
 800a720:	f7f5 fcf2 	bl	8000108 <strlen>
 800a724:	0003      	movs	r3, r0
 800a726:	b29a      	uxth	r2, r3
 800a728:	4b04      	ldr	r3, [pc, #16]	; (800a73c <serial1_print+0x28>)
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	4804      	ldr	r0, [pc, #16]	; (800a740 <serial1_print+0x2c>)
 800a72e:	f7f9 fec1 	bl	80044b4 <HAL_UART_Transmit>
  #endif
}
 800a732:	46c0      	nop			; (mov r8, r8)
 800a734:	46bd      	mov	sp, r7
 800a736:	b002      	add	sp, #8
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	46c0      	nop			; (mov r8, r8)
 800a73c:	0000ffff 	.word	0x0000ffff
 800a740:	20000370 	.word	0x20000370

0800a744 <serial2_init>:
// ---------------------------------------------------------------------------

/**
 * Init the Serial 2 extra configurations
 */
void serial2_init() {
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
#if  ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0
    __HAL_UART_ENABLE_IT(&huart2,UART_IT_ERR);
 800a748:	4b1b      	ldr	r3, [pc, #108]	; (800a7b8 <serial2_init+0x74>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689a      	ldr	r2, [r3, #8]
 800a74e:	4b1a      	ldr	r3, [pc, #104]	; (800a7b8 <serial2_init+0x74>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2101      	movs	r1, #1
 800a754:	430a      	orrs	r2, r1
 800a756:	609a      	str	r2, [r3, #8]
    __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 800a758:	4b17      	ldr	r3, [pc, #92]	; (800a7b8 <serial2_init+0x74>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	4b16      	ldr	r3, [pc, #88]	; (800a7b8 <serial2_init+0x74>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2120      	movs	r1, #32
 800a764:	430a      	orrs	r2, r1
 800a766:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart2,UART_IT_TC);
 800a768:	4b13      	ldr	r3, [pc, #76]	; (800a7b8 <serial2_init+0x74>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	4b12      	ldr	r3, [pc, #72]	; (800a7b8 <serial2_init+0x74>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2140      	movs	r1, #64	; 0x40
 800a774:	438a      	bics	r2, r1
 800a776:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart2,UART_IT_TXE);
 800a778:	4b0f      	ldr	r3, [pc, #60]	; (800a7b8 <serial2_init+0x74>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <serial2_init+0x74>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2180      	movs	r1, #128	; 0x80
 800a784:	438a      	bics	r2, r1
 800a786:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, __serial2_buffer, 1);
 800a788:	490c      	ldr	r1, [pc, #48]	; (800a7bc <serial2_init+0x78>)
 800a78a:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <serial2_init+0x74>)
 800a78c:	2201      	movs	r2, #1
 800a78e:	0018      	movs	r0, r3
 800a790:	f7f9 ff38 	bl	8004604 <HAL_UART_Receive_IT>
    huart2.Instance->RDR;
 800a794:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <serial2_init+0x74>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    huart2.Instance->ISR;
 800a79a:	4b07      	ldr	r3, [pc, #28]	; (800a7b8 <serial2_init+0x74>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	69db      	ldr	r3, [r3, #28]
    huart2.Instance->ICR;
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <serial2_init+0x74>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
    __serial2_bufferRd = 0;
 800a7a6:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <serial2_init+0x7c>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	701a      	strb	r2, [r3, #0]
    __serial2_bufferWr = 0;
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <serial2_init+0x80>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	701a      	strb	r2, [r3, #0]
#endif
}
 800a7b2:	46c0      	nop			; (mov r8, r8)
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	200003f0 	.word	0x200003f0
 800a7bc:	200004c8 	.word	0x200004c8
 800a7c0:	2000050e 	.word	0x2000050e
 800a7c4:	200004c4 	.word	0x200004c4

0800a7c8 <serial2_print>:
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY)) == SET);
  while((__HAL_UART_GET_FLAG(&huart2, USART_ISR_TC)) == RESET);
  #endif
}

void serial2_print(char * msg) {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  #if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),0xFFFF);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f7f5 fc98 	bl	8000108 <strlen>
 800a7d8:	0003      	movs	r3, r0
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	4b04      	ldr	r3, [pc, #16]	; (800a7f0 <serial2_print+0x28>)
 800a7de:	6879      	ldr	r1, [r7, #4]
 800a7e0:	4804      	ldr	r0, [pc, #16]	; (800a7f4 <serial2_print+0x2c>)
 800a7e2:	f7f9 fe67 	bl	80044b4 <HAL_UART_Transmit>
  #endif
}
 800a7e6:	46c0      	nop			; (mov r8, r8)
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	b002      	add	sp, #8
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	0000ffff 	.word	0x0000ffff
 800a7f4:	200003f0 	.word	0x200003f0

0800a7f8 <serial2_read>:
	char * eol = "\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)eol, strlen(eol),0xFFFF);
  #endif
}

serial_read_response_e serial2_read(char * ch) {
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]

#if  ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0

	if ( __serial2_bufferRd != __serial2_bufferWr ) {
 800a800:	4b17      	ldr	r3, [pc, #92]	; (800a860 <serial2_read+0x68>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	b2da      	uxtb	r2, r3
 800a806:	4b17      	ldr	r3, [pc, #92]	; (800a864 <serial2_read+0x6c>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d021      	beq.n	800a854 <serial2_read+0x5c>
		// char available
		*ch = __serial2_buffer[__serial2_bufferRd];
 800a810:	4b13      	ldr	r3, [pc, #76]	; (800a860 <serial2_read+0x68>)
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	b2db      	uxtb	r3, r3
 800a816:	001a      	movs	r2, r3
 800a818:	4b13      	ldr	r3, [pc, #76]	; (800a868 <serial2_read+0x70>)
 800a81a:	5c9a      	ldrb	r2, [r3, r2]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	701a      	strb	r2, [r3, #0]
		itsdk_enterCriticalSection();
 800a820:	f7ff feac 	bl	800a57c <itsdk_enterCriticalSection>
		__serial2_bufferRd = (__serial2_bufferRd + 1) & (ITSDK_WITH_UART_RXIRQ_BUFSZ-1);
 800a824:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <serial2_read+0x68>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	3301      	adds	r3, #1
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	223f      	movs	r2, #63	; 0x3f
 800a830:	4013      	ands	r3, r2
 800a832:	b2da      	uxtb	r2, r3
 800a834:	4b0a      	ldr	r3, [pc, #40]	; (800a860 <serial2_read+0x68>)
 800a836:	701a      	strb	r2, [r3, #0]
		itsdk_leaveCriticalSection();
 800a838:	f7ff feb4 	bl	800a5a4 <itsdk_leaveCriticalSection>
		if ( __serial2_bufferRd != __serial2_bufferWr ) {
 800a83c:	4b08      	ldr	r3, [pc, #32]	; (800a860 <serial2_read+0x68>)
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	b2da      	uxtb	r2, r3
 800a842:	4b08      	ldr	r3, [pc, #32]	; (800a864 <serial2_read+0x6c>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	429a      	cmp	r2, r3
 800a84a:	d001      	beq.n	800a850 <serial2_read+0x58>
			return SERIAL_READ_PENDING_CHAR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e002      	b.n	800a856 <serial2_read+0x5e>
		} else {
			return SERIAL_READ_SUCCESS;
 800a850:	2300      	movs	r3, #0
 800a852:	e000      	b.n	800a856 <serial2_read+0x5e>
		}
	} else {
		return SERIAL_READ_NOCHAR;
 800a854:	2302      	movs	r3, #2
	return SERIAL_READ_NOCHAR;
  #else
	return SERIAL_READ_FAILED;
  #endif
#endif
}
 800a856:	0018      	movs	r0, r3
 800a858:	46bd      	mov	sp, r7
 800a85a:	b002      	add	sp, #8
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	46c0      	nop			; (mov r8, r8)
 800a860:	2000050e 	.word	0x2000050e
 800a864:	200004c4 	.word	0x200004c4
 800a868:	200004c8 	.word	0x200004c8

0800a86c <HAL_UART_ErrorCallback>:
// Global interrupt management
// ---------------------------------------------------------------------------


#if defined ITSDK_WITH_UART_RXIRQ && ITSDK_WITH_UART_RXIRQ != __UART_NONE
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
	// Clear the error flags
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2208      	movs	r2, #8
 800a87a:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2204      	movs	r2, #4
 800a882:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2202      	movs	r2, #2
 800a88a:	621a      	str	r2, [r3, #32]
}
 800a88c:	46c0      	nop			; (mov r8, r8)
 800a88e:	46bd      	mov	sp, r7
 800a890:	b002      	add	sp, #8
 800a892:	bd80      	pop	{r7, pc}

0800a894 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
	if (   __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	2208      	movs	r2, #8
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	2b08      	cmp	r3, #8
 800a8a8:	d00d      	beq.n	800a8c6 <HAL_UART_RxCpltCallback+0x32>
		|| __HAL_UART_GET_FLAG(huart, UART_FLAG_NE)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	69db      	ldr	r3, [r3, #28]
 800a8b0:	2204      	movs	r2, #4
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	2b04      	cmp	r3, #4
 800a8b6:	d006      	beq.n	800a8c6 <HAL_UART_RxCpltCallback+0x32>
		|| __HAL_UART_GET_FLAG(huart, UART_FLAG_FE)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d10b      	bne.n	800a8de <HAL_UART_RxCpltCallback+0x4a>
	) {
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_ORE);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2208      	movs	r2, #8
 800a8cc:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_NE);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2204      	movs	r2, #4
 800a8d4:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_FE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	621a      	str	r2, [r3, #32]
		if (false
			#if ( ITSDK_WITH_UART & __UART_LPUART1 ) > 0
				|| huart->Instance == LPUART1
			#endif
			#if ( ITSDK_WITH_UART & __UART_USART1 ) > 0
				|| huart->Instance == USART1
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
		if (false
 800a8e2:	4a2a      	ldr	r2, [pc, #168]	; (800a98c <HAL_UART_RxCpltCallback+0xf8>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d120      	bne.n	800a92a <HAL_UART_RxCpltCallback+0x96>

			#endif
			*/
			static index = 0;
			uint8_t externalBuffer[5];
			HAL_UART_Receive_IT(huart, &bufferGetter, 1);
 800a8e8:	4929      	ldr	r1, [pc, #164]	; (800a990 <HAL_UART_RxCpltCallback+0xfc>)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	f7f9 fe88 	bl	8004604 <HAL_UART_Receive_IT>
			if(bufferGetter == 'R'){
 800a8f4:	4b26      	ldr	r3, [pc, #152]	; (800a990 <HAL_UART_RxCpltCallback+0xfc>)
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b52      	cmp	r3, #82	; 0x52
 800a8fa:	d102      	bne.n	800a902 <HAL_UART_RxCpltCallback+0x6e>
				index = 0;
 800a8fc:	4b25      	ldr	r3, [pc, #148]	; (800a994 <HAL_UART_RxCpltCallback+0x100>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
			}
			externalBuffer[index] = bufferGetter;
 800a902:	4b24      	ldr	r3, [pc, #144]	; (800a994 <HAL_UART_RxCpltCallback+0x100>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a22      	ldr	r2, [pc, #136]	; (800a990 <HAL_UART_RxCpltCallback+0xfc>)
 800a908:	7811      	ldrb	r1, [r2, #0]
 800a90a:	2208      	movs	r2, #8
 800a90c:	18ba      	adds	r2, r7, r2
 800a90e:	54d1      	strb	r1, [r2, r3]
			index++;
 800a910:	4b20      	ldr	r3, [pc, #128]	; (800a994 <HAL_UART_RxCpltCallback+0x100>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	4b1f      	ldr	r3, [pc, #124]	; (800a994 <HAL_UART_RxCpltCallback+0x100>)
 800a918:	601a      	str	r2, [r3, #0]
			if (index > 4){
 800a91a:	4b1e      	ldr	r3, [pc, #120]	; (800a994 <HAL_UART_RxCpltCallback+0x100>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b04      	cmp	r3, #4
 800a920:	dd28      	ble.n	800a974 <HAL_UART_RxCpltCallback+0xe0>
				index = 0;
 800a922:	4b1c      	ldr	r3, [pc, #112]	; (800a994 <HAL_UART_RxCpltCallback+0x100>)
 800a924:	2200      	movs	r2, #0
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	e024      	b.n	800a974 <HAL_UART_RxCpltCallback+0xe0>
			}

		} else {
			#if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
			if ( huart->Instance == USART2 ) {
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a1a      	ldr	r2, [pc, #104]	; (800a998 <HAL_UART_RxCpltCallback+0x104>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d11f      	bne.n	800a974 <HAL_UART_RxCpltCallback+0xe0>
				#if ( ITSDK_WITH_UART_RXIRQ & __UART_USART2 ) > 0
				// at this point the data is in __serial2_buffer[__serial2_bufferWr]
				if ( ((__serial2_bufferWr+1) & (ITSDK_WITH_UART_RXIRQ_BUFSZ-1)) != __serial2_bufferRd  ) {
 800a934:	4b19      	ldr	r3, [pc, #100]	; (800a99c <HAL_UART_RxCpltCallback+0x108>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	3301      	adds	r3, #1
 800a93c:	223f      	movs	r2, #63	; 0x3f
 800a93e:	4013      	ands	r3, r2
 800a940:	4a17      	ldr	r2, [pc, #92]	; (800a9a0 <HAL_UART_RxCpltCallback+0x10c>)
 800a942:	7812      	ldrb	r2, [r2, #0]
 800a944:	b2d2      	uxtb	r2, r2
 800a946:	4293      	cmp	r3, r2
 800a948:	d009      	beq.n	800a95e <HAL_UART_RxCpltCallback+0xca>
					__serial2_bufferWr = ((__serial2_bufferWr+1) & (ITSDK_WITH_UART_RXIRQ_BUFSZ-1));
 800a94a:	4b14      	ldr	r3, [pc, #80]	; (800a99c <HAL_UART_RxCpltCallback+0x108>)
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	3301      	adds	r3, #1
 800a952:	b2db      	uxtb	r3, r3
 800a954:	223f      	movs	r2, #63	; 0x3f
 800a956:	4013      	ands	r3, r2
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	4b10      	ldr	r3, [pc, #64]	; (800a99c <HAL_UART_RxCpltCallback+0x108>)
 800a95c:	701a      	strb	r2, [r3, #0]
				}
				HAL_UART_Receive_IT(huart, &__serial2_buffer[__serial2_bufferWr], 1);
 800a95e:	4b0f      	ldr	r3, [pc, #60]	; (800a99c <HAL_UART_RxCpltCallback+0x108>)
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	b2db      	uxtb	r3, r3
 800a964:	001a      	movs	r2, r3
 800a966:	4b0f      	ldr	r3, [pc, #60]	; (800a9a4 <HAL_UART_RxCpltCallback+0x110>)
 800a968:	18d1      	adds	r1, r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	0018      	movs	r0, r3
 800a970:	f7f9 fe48 	bl	8004604 <HAL_UART_Receive_IT>
				#endif
			}
			#endif
		}
	} while ( __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) );
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	2220      	movs	r2, #32
 800a97c:	4013      	ands	r3, r2
 800a97e:	2b20      	cmp	r3, #32
 800a980:	d0ad      	beq.n	800a8de <HAL_UART_RxCpltCallback+0x4a>

}
 800a982:	46c0      	nop			; (mov r8, r8)
 800a984:	46bd      	mov	sp, r7
 800a986:	b004      	add	sp, #16
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	40013800 	.word	0x40013800
 800a990:	200004c5 	.word	0x200004c5
 800a994:	200001d4 	.word	0x200001d4
 800a998:	40004400 	.word	0x40004400
 800a99c:	200004c4 	.word	0x200004c4
 800a9a0:	2000050e 	.word	0x2000050e
 800a9a4:	200004c8 	.word	0x200004c8

0800a9a8 <debug_print>:
// ---------------------------------------------------------------------------

void debug_flush() {
}

void debug_print(debug_print_type_e lvl, char * msg) {
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	0002      	movs	r2, r0
 800a9b0:	6039      	str	r1, [r7, #0]
 800a9b2:	1dfb      	adds	r3, r7, #7
 800a9b4:	701a      	strb	r2, [r3, #0]
	SEGGER_RTT_WriteString(0, msg);
	SEGGER_RTT_WriteString(0,RTT_CTRL_RESET);
	int v = strlen(msg);
	wasEndLine = ( msg[v-1] == '\r' || msg[v-1] == '\n' )?1:0;
#endif
}
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	b002      	add	sp, #8
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <_eeprom_write>:
 * Offset allows to write 1 bank in multiple operation where offset is the pointer for bank start
 *  offset is aligned on 32b words
 * Actually bank is not supported, assuming is 0
 * @TODO : manage bank
 */
bool _eeprom_write(uint8_t bank, uint32_t offset, void * data, int len) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	607a      	str	r2, [r7, #4]
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	210f      	movs	r1, #15
 800a9ce:	187b      	adds	r3, r7, r1
 800a9d0:	1c02      	adds	r2, r0, #0
 800a9d2:	701a      	strb	r2, [r3, #0]
	uint8_t *  _data = (uint8_t *)data;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 800a9d8:	187b      	adds	r3, r7, r1
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d106      	bne.n	800a9ee <_eeprom_write+0x2e>
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	18d2      	adds	r2, r2, r3
 800a9e6:	23c0      	movs	r3, #192	; 0xc0
 800a9e8:	015b      	lsls	r3, r3, #5
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d906      	bls.n	800a9fc <_eeprom_write+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	4a3f      	ldr	r2, [pc, #252]	; (800aaf0 <_eeprom_write+0x130>)
 800a9f4:	0019      	movs	r1, r3
 800a9f6:	0010      	movs	r0, r2
 800a9f8:	f7fe f882 	bl	8008b00 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	4a3d      	ldr	r2, [pc, #244]	; (800aaf4 <_eeprom_write+0x134>)
 800aa00:	4694      	mov	ip, r2
 800aa02:	4463      	add	r3, ip
 800aa04:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	2203      	movs	r2, #3
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	d006      	beq.n	800aa1c <_eeprom_write+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,1);
 800aa0e:	4b3a      	ldr	r3, [pc, #232]	; (800aaf8 <_eeprom_write+0x138>)
 800aa10:	2101      	movs	r1, #1
 800aa12:	0018      	movs	r0, r3
 800aa14:	f7fe f874 	bl	8008b00 <itsdk_error_report>
	    return false;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	e064      	b.n	800aae6 <_eeprom_write+0x126>
	}

	// Unlock EEPROM
	if (FLASH->PECR & FLASH_PECR_PELOCK) {
 800aa1c:	4b37      	ldr	r3, [pc, #220]	; (800aafc <_eeprom_write+0x13c>)
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	4013      	ands	r3, r2
 800aa24:	d005      	beq.n	800aa32 <_eeprom_write+0x72>
			FLASH->PEKEYR = FLASH_PEKEY1;
 800aa26:	4b35      	ldr	r3, [pc, #212]	; (800aafc <_eeprom_write+0x13c>)
 800aa28:	4a35      	ldr	r2, [pc, #212]	; (800ab00 <_eeprom_write+0x140>)
 800aa2a:	60da      	str	r2, [r3, #12]
			FLASH->PEKEYR = FLASH_PEKEY2;
 800aa2c:	4b33      	ldr	r3, [pc, #204]	; (800aafc <_eeprom_write+0x13c>)
 800aa2e:	4a35      	ldr	r2, [pc, #212]	; (800ab04 <_eeprom_write+0x144>)
 800aa30:	60da      	str	r2, [r3, #12]
	}
	// Copy data
	for (int i = 0; i < len; i += 4) {
 800aa32:	2300      	movs	r3, #0
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	e04b      	b.n	800aad0 <_eeprom_write+0x110>
		v = _data[i] << 24;
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	18d3      	adds	r3, r2, r3
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	061b      	lsls	r3, r3, #24
 800aa42:	613b      	str	r3, [r7, #16]
		v+= (i+1 < len)?_data[i+1]<<16:0;
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	3301      	adds	r3, #1
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	dd07      	ble.n	800aa5e <_eeprom_write+0x9e>
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	3301      	adds	r3, #1
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	18d3      	adds	r3, r2, r3
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	041b      	lsls	r3, r3, #16
 800aa5a:	001a      	movs	r2, r3
 800aa5c:	e000      	b.n	800aa60 <_eeprom_write+0xa0>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	189b      	adds	r3, r3, r2
 800aa64:	613b      	str	r3, [r7, #16]
		v+= (i+2 < len)?_data[i+2]<<8:0;
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	3302      	adds	r3, #2
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	dd07      	ble.n	800aa80 <_eeprom_write+0xc0>
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	3302      	adds	r3, #2
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	18d3      	adds	r3, r2, r3
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	021b      	lsls	r3, r3, #8
 800aa7c:	001a      	movs	r2, r3
 800aa7e:	e000      	b.n	800aa82 <_eeprom_write+0xc2>
 800aa80:	2200      	movs	r2, #0
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	189b      	adds	r3, r3, r2
 800aa86:	613b      	str	r3, [r7, #16]
		v+= (i+3 < len)?_data[i+3]:0;
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	3303      	adds	r3, #3
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	dd06      	ble.n	800aaa0 <_eeprom_write+0xe0>
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	3303      	adds	r3, #3
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	18d3      	adds	r3, r2, r3
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	001a      	movs	r2, r3
 800aa9e:	e000      	b.n	800aaa2 <_eeprom_write+0xe2>
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	189b      	adds	r3, r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]
		if (v != __eepromRead(_eepromAddr)) __eepromWrite(_eepromAddr,v);
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	0018      	movs	r0, r3
 800aaac:	f000 f8a6 	bl	800abfc <__eepromRead>
 800aab0:	0002      	movs	r2, r0
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d005      	beq.n	800aac4 <_eeprom_write+0x104>
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	0011      	movs	r1, r2
 800aabe:	0018      	movs	r0, r3
 800aac0:	f000 f8a6 	bl	800ac10 <__eepromWrite>
		_eepromAddr+=4;
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	3304      	adds	r3, #4
 800aac8:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	3304      	adds	r3, #4
 800aace:	61bb      	str	r3, [r7, #24]
 800aad0:	69ba      	ldr	r2, [r7, #24]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	dbaf      	blt.n	800aa38 <_eeprom_write+0x78>
	}
	// Lock EEPROM
	FLASH->PECR |= FLASH_PECR_PELOCK;
 800aad8:	4b08      	ldr	r3, [pc, #32]	; (800aafc <_eeprom_write+0x13c>)
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	4b07      	ldr	r3, [pc, #28]	; (800aafc <_eeprom_write+0x13c>)
 800aade:	2101      	movs	r1, #1
 800aae0:	430a      	orrs	r2, r1
 800aae2:	605a      	str	r2, [r3, #4]
	return true;
 800aae4:	2301      	movs	r3, #1
}
 800aae6:	0018      	movs	r0, r3
 800aae8:	46bd      	mov	sp, r7
 800aaea:	b008      	add	sp, #32
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	46c0      	nop			; (mov r8, r8)
 800aaf0:	d0000030 	.word	0xd0000030
 800aaf4:	08080000 	.word	0x08080000
 800aaf8:	d0000031 	.word	0xd0000031
 800aafc:	40022000 	.word	0x40022000
 800ab00:	89abcdef 	.word	0x89abcdef
 800ab04:	02030405 	.word	0x02030405

0800ab08 <_eeprom_read>:

/**
 * Read a block of data from the EEPROM
 * Offset is to add an offset to bank start - Offset is aligned don 32b word
 */
bool _eeprom_read(uint8_t bank, uint32_t offset, void * data, int len) {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60b9      	str	r1, [r7, #8]
 800ab10:	607a      	str	r2, [r7, #4]
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	210f      	movs	r1, #15
 800ab16:	187b      	adds	r3, r7, r1
 800ab18:	1c02      	adds	r2, r0, #0
 800ab1a:	701a      	strb	r2, [r3, #0]
	uint8_t  * _data = (uint8_t *)data;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	617b      	str	r3, [r7, #20]
	uint32_t   _eepromAddr;
	uint32_t   v;

	if ( bank != 0 || (offset + len) > EEPROM_SIZE) {
 800ab20:	187b      	adds	r3, r7, r1
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d106      	bne.n	800ab36 <_eeprom_read+0x2e>
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	18d2      	adds	r2, r2, r3
 800ab2e:	23c0      	movs	r3, #192	; 0xc0
 800ab30:	015b      	lsls	r3, r3, #5
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d906      	bls.n	800ab44 <_eeprom_read+0x3c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_OUTOFBOUNDS,len);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	4a2d      	ldr	r2, [pc, #180]	; (800abf0 <_eeprom_read+0xe8>)
 800ab3c:	0019      	movs	r1, r3
 800ab3e:	0010      	movs	r0, r2
 800ab40:	f7fd ffde 	bl	8008b00 <itsdk_error_report>
	}
	_eepromAddr = (uint32_t)(EEPROM_START_ADDR+offset);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4a2b      	ldr	r2, [pc, #172]	; (800abf4 <_eeprom_read+0xec>)
 800ab48:	4694      	mov	ip, r2
 800ab4a:	4463      	add	r3, ip
 800ab4c:	61fb      	str	r3, [r7, #28]
	if ( (_eepromAddr & 0x3) != 0 ) {
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	2203      	movs	r2, #3
 800ab52:	4013      	ands	r3, r2
 800ab54:	d006      	beq.n	800ab64 <_eeprom_read+0x5c>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_EEPROM_NOTALIGNED,0);
 800ab56:	4b28      	ldr	r3, [pc, #160]	; (800abf8 <_eeprom_read+0xf0>)
 800ab58:	2100      	movs	r1, #0
 800ab5a:	0018      	movs	r0, r3
 800ab5c:	f7fd ffd0 	bl	8008b00 <itsdk_error_report>
	    return false;
 800ab60:	2300      	movs	r3, #0
 800ab62:	e040      	b.n	800abe6 <_eeprom_read+0xde>
	}

	// Read data
	for (int i = 0; i < len; i += 4) {
 800ab64:	2300      	movs	r3, #0
 800ab66:	61bb      	str	r3, [r7, #24]
 800ab68:	e038      	b.n	800abdc <_eeprom_read+0xd4>
		v = __eepromRead(_eepromAddr);
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	0018      	movs	r0, r3
 800ab6e:	f000 f845 	bl	800abfc <__eepromRead>
 800ab72:	0003      	movs	r3, r0
 800ab74:	613b      	str	r3, [r7, #16]
		_data[i]=(v & 0xFF000000) >> 24;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	0e19      	lsrs	r1, r3, #24
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	18d3      	adds	r3, r2, r3
 800ab80:	b2ca      	uxtb	r2, r1
 800ab82:	701a      	strb	r2, [r3, #0]
		if ( i+1 < len) _data[i+1]=(v & 0x00FF0000) >> 16;
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	3301      	adds	r3, #1
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	dd07      	ble.n	800ab9e <_eeprom_read+0x96>
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	0c19      	lsrs	r1, r3, #16
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	3301      	adds	r3, #1
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	18d3      	adds	r3, r2, r3
 800ab9a:	b2ca      	uxtb	r2, r1
 800ab9c:	701a      	strb	r2, [r3, #0]
		if ( i+2 < len) _data[i+2]=(v & 0x0000FF00) >> 8;
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	3302      	adds	r3, #2
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	dd07      	ble.n	800abb8 <_eeprom_read+0xb0>
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	0a19      	lsrs	r1, r3, #8
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	3302      	adds	r3, #2
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	18d3      	adds	r3, r2, r3
 800abb4:	b2ca      	uxtb	r2, r1
 800abb6:	701a      	strb	r2, [r3, #0]
		if ( i+3 < len) _data[i+3]=(v & 0x000000FF);
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	3303      	adds	r3, #3
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	dd06      	ble.n	800abd0 <_eeprom_read+0xc8>
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	3303      	adds	r3, #3
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	18d3      	adds	r3, r2, r3
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	b2d2      	uxtb	r2, r2
 800abce:	701a      	strb	r2, [r3, #0]
		_eepromAddr+=4;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	3304      	adds	r3, #4
 800abd4:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < len; i += 4) {
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	3304      	adds	r3, #4
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	dbc2      	blt.n	800ab6a <_eeprom_read+0x62>
	}
	return true;
 800abe4:	2301      	movs	r3, #1
}
 800abe6:	0018      	movs	r0, r3
 800abe8:	46bd      	mov	sp, r7
 800abea:	b008      	add	sp, #32
 800abec:	bd80      	pop	{r7, pc}
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	d0000030 	.word	0xd0000030
 800abf4:	08080000 	.word	0x08080000
 800abf8:	d0000031 	.word	0xd0000031

0800abfc <__eepromRead>:


/**
 * Read a word in EEPROM area
 */
uint32_t __eepromRead(uint32_t addr) {
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	return (*(volatile uint32_t*)addr);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
}
 800ac08:	0018      	movs	r0, r3
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	b002      	add	sp, #8
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <__eepromWrite>:

/**
 * Write a word in EEPROM area
 * Return false when an error occured
 */
bool __eepromWrite(uint32_t addr, uint32_t v) {
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]

	uint16_t tmout = 10000;
 800ac1a:	230e      	movs	r3, #14
 800ac1c:	18fb      	adds	r3, r7, r3
 800ac1e:	4a20      	ldr	r2, [pc, #128]	; (800aca0 <__eepromWrite+0x90>)
 800ac20:	801a      	strh	r2, [r3, #0]
	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 800ac22:	e005      	b.n	800ac30 <__eepromWrite+0x20>
 800ac24:	210e      	movs	r1, #14
 800ac26:	187b      	adds	r3, r7, r1
 800ac28:	881a      	ldrh	r2, [r3, #0]
 800ac2a:	187b      	adds	r3, r7, r1
 800ac2c:	3a01      	subs	r2, #1
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	4b1c      	ldr	r3, [pc, #112]	; (800aca4 <__eepromWrite+0x94>)
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	2201      	movs	r2, #1
 800ac36:	4013      	ands	r3, r2
 800ac38:	d004      	beq.n	800ac44 <__eepromWrite+0x34>
 800ac3a:	230e      	movs	r3, #14
 800ac3c:	18fb      	adds	r3, r7, r3
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1ef      	bne.n	800ac24 <__eepromWrite+0x14>
	if ( tmout == 0 ) return false;
 800ac44:	230e      	movs	r3, #14
 800ac46:	18fb      	adds	r3, r7, r3
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <__eepromWrite+0x42>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e021      	b.n	800ac96 <__eepromWrite+0x86>

	// Clear the FTDW bit (data will be erased before write if it non zero)
	FLASH->PECR &= (uint32_t)(~(uint32_t)FLASH_PECR_FIX);
 800ac52:	4b14      	ldr	r3, [pc, #80]	; (800aca4 <__eepromWrite+0x94>)
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <__eepromWrite+0x94>)
 800ac58:	4913      	ldr	r1, [pc, #76]	; (800aca8 <__eepromWrite+0x98>)
 800ac5a:	400a      	ands	r2, r1
 800ac5c:	605a      	str	r2, [r3, #4]

	*(volatile uint32_t *)addr = v;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	683a      	ldr	r2, [r7, #0]
 800ac62:	601a      	str	r2, [r3, #0]

	while ( (FLASH->SR & FLASH_SR_BSY) && tmout) tmout--;
 800ac64:	e005      	b.n	800ac72 <__eepromWrite+0x62>
 800ac66:	210e      	movs	r1, #14
 800ac68:	187b      	adds	r3, r7, r1
 800ac6a:	881a      	ldrh	r2, [r3, #0]
 800ac6c:	187b      	adds	r3, r7, r1
 800ac6e:	3a01      	subs	r2, #1
 800ac70:	801a      	strh	r2, [r3, #0]
 800ac72:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <__eepromWrite+0x94>)
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	2201      	movs	r2, #1
 800ac78:	4013      	ands	r3, r2
 800ac7a:	d004      	beq.n	800ac86 <__eepromWrite+0x76>
 800ac7c:	230e      	movs	r3, #14
 800ac7e:	18fb      	adds	r3, r7, r3
 800ac80:	881b      	ldrh	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1ef      	bne.n	800ac66 <__eepromWrite+0x56>
	if ( tmout == 0 ) return false;
 800ac86:	230e      	movs	r3, #14
 800ac88:	18fb      	adds	r3, r7, r3
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <__eepromWrite+0x84>
 800ac90:	2300      	movs	r3, #0
 800ac92:	e000      	b.n	800ac96 <__eepromWrite+0x86>

	return true;
 800ac94:	2301      	movs	r3, #1
}
 800ac96:	0018      	movs	r0, r3
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	b004      	add	sp, #16
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	46c0      	nop			; (mov r8, r8)
 800aca0:	00002710 	.word	0x00002710
 800aca4:	40022000 	.word	0x40022000
 800aca8:	fffffeff 	.word	0xfffffeff

0800acac <stm32l_lowPowerSetup>:

/**
 * Setup the STM32L Low Power mode for the given amount of ms
 * 0xFFFFFFFF ms when no time limit
 */
stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerSetup(uint32_t durationMs, stm32_lowPowerMode_e mode) {
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	000c      	movs	r4, r1
 800acb0:	b082      	sub	sp, #8
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// -------------------------------------------------------------
		// Configure the STM32L0x1 for switching to low power stop mode
		// -------------------------------------------------------------
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			if ( durationMs == __INFINITE_32B ) {
 800acb2:	1c43      	adds	r3, r0, #1
 800acb4:	d05d      	beq.n	800ad72 <stm32l_lowPowerSetup+0xc6>
				#endif
			}
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
		    } else {
			   return STM32L_LOWPOWER_TOOSHORT;
 800acb6:	2301      	movs	r3, #1
		    if ( durationMs > STM32L_MINIMUM_SLEEPDURATION_MS ) {
 800acb8:	2805      	cmp	r0, #5
 800acba:	d957      	bls.n	800ad6c <stm32l_lowPowerSetup+0xc0>
			   rtc_configure4LowPower(durationMs);						// Setup RTC wake Up
 800acbc:	f000 f982 	bl	800afc4 <rtc_configure4LowPower>
			}
		#endif
		HAL_SuspendTick();
 800acc0:	f7f6 fdd4 	bl	800186c <HAL_SuspendTick>
	    __HAL_RCC_PWR_CLK_ENABLE();				// Enable Power Control clock
 800acc4:	2380      	movs	r3, #128	; 0x80
 800acc6:	4a2c      	ldr	r2, [pc, #176]	; (800ad78 <stm32l_lowPowerSetup+0xcc>)
 800acc8:	055b      	lsls	r3, r3, #21
 800acca:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800accc:	430b      	orrs	r3, r1
 800acce:	6393      	str	r3, [r2, #56]	; 0x38
 	    HAL_PWREx_EnableUltraLowPower();		// Ultra low power mode
 800acd0:	f7f7 fbac 	bl	800242c <HAL_PWREx_EnableUltraLowPower>
 	    HAL_PWREx_EnableFastWakeUp();			// Fast wake-up for ultra low power mode
 800acd4:	f7f7 fb9c 	bl	8002410 <HAL_PWREx_EnableFastWakeUp>

 	    if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 800acd8:	2c00      	cmp	r4, #0
 800acda:	d13b      	bne.n	800ad54 <stm32l_lowPowerSetup+0xa8>
				while(__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET){};
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART1 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET){};
 800acdc:	2280      	movs	r2, #128	; 0x80
 800acde:	4b27      	ldr	r3, [pc, #156]	; (800ad7c <stm32l_lowPowerSetup+0xd0>)
 800ace0:	0252      	lsls	r2, r2, #9
 800ace2:	6819      	ldr	r1, [r3, #0]
 800ace4:	69cb      	ldr	r3, [r1, #28]
 800ace6:	4213      	tst	r3, r2
 800ace8:	d1fc      	bne.n	800ace4 <stm32l_lowPowerSetup+0x38>
			#endif

			#if ( ITSDK_WITH_UART & __UART_USART2 ) > 0
				// make sure that no UART transfer is on-going
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET){};
 800acea:	2180      	movs	r1, #128	; 0x80
 800acec:	4d24      	ldr	r5, [pc, #144]	; (800ad80 <stm32l_lowPowerSetup+0xd4>)
 800acee:	0249      	lsls	r1, r1, #9
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	69da      	ldr	r2, [r3, #28]
 800acf4:	420a      	tst	r2, r1
 800acf6:	d1fc      	bne.n	800acf2 <stm32l_lowPowerSetup+0x46>
			#endif


			#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_UART2 ) > 0
				// make sure that UART is ready to receive
				while(__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET){}
 800acf8:	2480      	movs	r4, #128	; 0x80
 800acfa:	03e4      	lsls	r4, r4, #15
 800acfc:	69da      	ldr	r2, [r3, #28]
 800acfe:	4222      	tst	r2, r4
 800ad00:	d0fc      	beq.n	800acfc <stm32l_lowPowerSetup+0x50>

				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 800ad02:	23c0      	movs	r3, #192	; 0xc0

			_stm32l_disableGpios();					// Disable GPIOs based on configuration

			#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			  // Register interrupt handler
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
 800ad04:	2604      	movs	r6, #4
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 800ad06:	039b      	lsls	r3, r3, #14
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 800ad08:	0019      	movs	r1, r3
 800ad0a:	9a01      	ldr	r2, [sp, #4]
 800ad0c:	0028      	movs	r0, r5
				wakeup.WakeUpEvent=UART_WAKEUP_ON_READDATA_NONEMPTY; // UART_WAKEUP_ON_STARTBIT
 800ad0e:	9300      	str	r3, [sp, #0]
				HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2,wakeup);
 800ad10:	f7fa fbe4 	bl	80054dc <HAL_UARTEx_StopModeWakeUpSourceConfig>
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800ad14:	682b      	ldr	r3, [r5, #0]
				HAL_UARTEx_EnableStopMode(&huart2);
 800ad16:	0028      	movs	r0, r5
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800ad18:	689a      	ldr	r2, [r3, #8]
					__HAL_RCC_USART1_CLK_DISABLE();
 800ad1a:	4d17      	ldr	r5, [pc, #92]	; (800ad78 <stm32l_lowPowerSetup+0xcc>)
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800ad1c:	4314      	orrs	r4, r2
 800ad1e:	609c      	str	r4, [r3, #8]
				HAL_UARTEx_EnableStopMode(&huart2);
 800ad20:	f7fa fc42 	bl	80055a8 <HAL_UARTEx_EnableStopMode>
					__HAL_RCC_USART1_CLK_DISABLE();
 800ad24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ad26:	4a17      	ldr	r2, [pc, #92]	; (800ad84 <stm32l_lowPowerSetup+0xd8>)
 800ad28:	4013      	ands	r3, r2
 800ad2a:	636b      	str	r3, [r5, #52]	; 0x34
			_stm32l_disableGpios();					// Disable GPIOs based on configuration
 800ad2c:	f000 f8cc 	bl	800aec8 <_stm32l_disableGpios>
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
 800ad30:	4a15      	ldr	r2, [pc, #84]	; (800ad88 <stm32l_lowPowerSetup+0xdc>)
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
 800ad32:	4816      	ldr	r0, [pc, #88]	; (800ad8c <stm32l_lowPowerSetup+0xe0>)
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU); 				// Clear wakeUp flag
 800ad34:	6813      	ldr	r3, [r2, #0]
 800ad36:	4333      	orrs	r3, r6
 800ad38:	6013      	str	r3, [r2, #0]
			  gpio_registerWakeUpAction(&__lowpwer_gpio_irq);	// Install the wakeup handler
 800ad3a:	f7ff fb7f 	bl	800a43c <gpio_registerWakeUpAction>
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_I2C2 ) > 0
				__HAL_RCC_I2C2_CLK_DISABLE();
			#endif
			#if ( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_SPI1 ) > 0
				__HAL_RCC_SPI1_CLK_DISABLE();
 800ad3e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800ad40:	4b13      	ldr	r3, [pc, #76]	; (800ad90 <stm32l_lowPowerSetup+0xe4>)
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_TIM21 ) > 0
				__HAL_RCC_TIM21_CLK_DISABLE();
			#endif
			#if( ITSDK_LOWPOWER_MISC_HALT & __LP_HALT_ADC1 ) > 0
				__HAL_RCC_ADC1_CLK_DISABLE();
 800ad42:	4914      	ldr	r1, [pc, #80]	; (800ad94 <stm32l_lowPowerSetup+0xe8>)
				__HAL_RCC_SPI1_CLK_DISABLE();
 800ad44:	401a      	ands	r2, r3
 800ad46:	636a      	str	r2, [r5, #52]	; 0x34
				__HAL_RCC_TIM21_CLK_DISABLE();
 800ad48:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800ad4a:	43b2      	bics	r2, r6
 800ad4c:	636a      	str	r2, [r5, #52]	; 0x34
				__HAL_RCC_ADC1_CLK_DISABLE();
 800ad4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ad50:	400b      	ands	r3, r1
 800ad52:	636b      	str	r3, [r5, #52]	; 0x34


 	    // Switch to STOPMode
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
		#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0
			__lowPower_wakeup_pin=0xFFFF;
 800ad54:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 800ad56:	24ff      	movs	r4, #255	; 0xff
			__lowPower_wakeup_pin=0xFFFF;
 800ad58:	4a0f      	ldr	r2, [pc, #60]	; (800ad98 <stm32l_lowPowerSetup+0xec>)
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 800ad5a:	4b10      	ldr	r3, [pc, #64]	; (800ad9c <stm32l_lowPowerSetup+0xf0>)
			__lowPower_wakeup_pin=0xFFFF;
 800ad5c:	4240      	negs	r0, r0
 800ad5e:	8010      	strh	r0, [r2, #0]
		#endif
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800ad60:	2101      	movs	r1, #1
 800ad62:	2001      	movs	r0, #1
		__lowPower_wakeup_reason=LOWPWR_WAKEUP_UNDEF;
 800ad64:	701c      	strb	r4, [r3, #0]
 	    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800ad66:	f7f7 fb1f 	bl	80023a8 <HAL_PWR_EnterSTOPMode>
	}
	return STM32L_LOWPOWER_SUCCESS;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	b002      	add	sp, #8
 800ad70:	bd70      	pop	{r4, r5, r6, pc}
					  durationMs = ITSDK_WDG_MS - 5;
 800ad72:	480b      	ldr	r0, [pc, #44]	; (800ada0 <stm32l_lowPowerSetup+0xf4>)
 800ad74:	e7a2      	b.n	800acbc <stm32l_lowPowerSetup+0x10>
 800ad76:	46c0      	nop			; (mov r8, r8)
 800ad78:	40021000 	.word	0x40021000
 800ad7c:	20000370 	.word	0x20000370
 800ad80:	200003f0 	.word	0x200003f0
 800ad84:	ffffbfff 	.word	0xffffbfff
 800ad88:	40007000 	.word	0x40007000
 800ad8c:	2000000c 	.word	0x2000000c
 800ad90:	ffffefff 	.word	0xffffefff
 800ad94:	fffffdff 	.word	0xfffffdff
 800ad98:	200001d8 	.word	0x200001d8
 800ad9c:	20000009 	.word	0x20000009
 800ada0:	00006d5b 	.word	0x00006d5b

0800ada4 <stm32l_lowPowerResume>:


stm32l_lowPowerReturn_e __attribute__((optimize("O3"))) stm32l_lowPowerResume(stm32_lowPowerMode_e mode) {
 800ada4:	b510      	push	{r4, lr}
 800ada6:	0004      	movs	r4, r0
	if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_STOP ) {
		// ------------------------------------------------------------
		// Restore from STOP MODE
		// ------------------------------------------------------------

		SystemClock_Config();
 800ada8:	f7f5 ffda 	bl	8000d60 <SystemClock_Config>
		HAL_SuspendTick();
 800adac:	f7f6 fd5e 	bl	800186c <HAL_SuspendTick>
		#if  ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_RTC ) > 0
			rtc_disable4LowPower();
 800adb0:	f000 f919 	bl	800afe6 <rtc_disable4LowPower>
		#endif

		if ( mode == STM32L_LOWPOWER_NORMAL_STOP ) {
 800adb4:	2c00      	cmp	r4, #0
 800adb6:	d003      	beq.n	800adc0 <stm32l_lowPowerResume+0x1c>
	} else {
		log_info("|");
	}
	#endif

	HAL_ResumeTick();
 800adb8:	f7f6 fd66 	bl	8001888 <HAL_ResumeTick>
	return STM32L_LOWPOWER_SUCCESS;
}
 800adbc:	2000      	movs	r0, #0
 800adbe:	bd10      	pop	{r4, pc}
			stm32l_lowPowerRestoreGpioConfig();
 800adc0:	f7f5 ff0c 	bl	8000bdc <stm32l_lowPowerRestoreGpioConfig>
				HAL_SPI_MspInit(&hspi1);
 800adc4:	4810      	ldr	r0, [pc, #64]	; (800ae08 <stm32l_lowPowerResume+0x64>)
 800adc6:	f7f6 f9cf 	bl	8001168 <HAL_SPI_MspInit>
				HAL_TIM_Base_MspInit(&htim21);
 800adca:	4810      	ldr	r0, [pc, #64]	; (800ae0c <stm32l_lowPowerResume+0x68>)
 800adcc:	f7f6 fb9e 	bl	800150c <HAL_TIM_Base_MspInit>
				__HAL_RCC_ADC1_CLK_ENABLE();
 800add0:	2380      	movs	r3, #128	; 0x80
 800add2:	4a0f      	ldr	r2, [pc, #60]	; (800ae10 <stm32l_lowPowerResume+0x6c>)
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800add8:	430b      	orrs	r3, r1
 800adda:	6353      	str	r3, [r2, #52]	; 0x34
				HAL_ADCEx_EnableVREFINT();
 800addc:	f7f6 ff7a 	bl	8001cd4 <HAL_ADCEx_EnableVREFINT>
				HAL_UART_MspInit(&huart1);
 800ade0:	480c      	ldr	r0, [pc, #48]	; (800ae14 <stm32l_lowPowerResume+0x70>)
 800ade2:	f7f6 fc13 	bl	800160c <HAL_UART_MspInit>
				MX_USART1_UART_Init();
 800ade6:	f7f6 fba9 	bl	800153c <MX_USART1_UART_Init>
			 gpio_removeWakeUpAction();
 800adea:	f7ff fb35 	bl	800a458 <gpio_removeWakeUpAction>
			 if ( __lowPower_wakeup_reason == LOWPWR_WAKEUP_GPIO && __lowPower_wakeup_pin != 0xFFFF ) {
 800adee:	4b0a      	ldr	r3, [pc, #40]	; (800ae18 <stm32l_lowPowerResume+0x74>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d1e0      	bne.n	800adb8 <stm32l_lowPowerResume+0x14>
 800adf6:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <stm32l_lowPowerResume+0x78>)
 800adf8:	4a09      	ldr	r2, [pc, #36]	; (800ae20 <stm32l_lowPowerResume+0x7c>)
 800adfa:	8818      	ldrh	r0, [r3, #0]
 800adfc:	4290      	cmp	r0, r2
 800adfe:	d0db      	beq.n	800adb8 <stm32l_lowPowerResume+0x14>
				HAL_GPIO_EXTI_Callback(__lowPower_wakeup_pin);
 800ae00:	f7ff fad8 	bl	800a3b4 <HAL_GPIO_EXTI_Callback>
 800ae04:	e7d8      	b.n	800adb8 <stm32l_lowPowerResume+0x14>
 800ae06:	46c0      	nop			; (mov r8, r8)
 800ae08:	200002dc 	.word	0x200002dc
 800ae0c:	20000334 	.word	0x20000334
 800ae10:	40021000 	.word	0x40021000
 800ae14:	20000370 	.word	0x20000370
 800ae18:	20000009 	.word	0x20000009
 800ae1c:	200001d8 	.word	0x200001d8
 800ae20:	0000ffff 	.word	0x0000ffff

0800ae24 <__GpioAnalog>:

/**
 * Switch the GPIO to Low Power
 */
void __GpioAnalog(GPIO_TypeDef  *GPIOx, uint16_t pins)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	000a      	movs	r2, r1
 800ae2e:	230a      	movs	r3, #10
 800ae30:	18fb      	adds	r3, r7, r3
 800ae32:	801a      	strh	r2, [r3, #0]
  uint32_t position = 0x00U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	617b      	str	r3, [r7, #20]

  // Configure the port pins //
  while ((pins >> position) != 0)
 800ae40:	e036      	b.n	800aeb0 <__GpioAnalog+0x8c>
  {
    iocurrent = (pins) & (1U << position);
 800ae42:	230a      	movs	r3, #10
 800ae44:	18fb      	adds	r3, r7, r3
 800ae46:	607b      	str	r3, [r7, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	69fa      	ldr	r2, [r7, #28]
 800ae50:	4091      	lsls	r1, r2
 800ae52:	000a      	movs	r2, r1
 800ae54:	4013      	ands	r3, r2
 800ae56:	61bb      	str	r3, [r7, #24]
    if(iocurrent)
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d025      	beq.n	800aeaa <__GpioAnalog+0x86>
    {
      // Configure IO Direction mode (Input, Output, Alternate or Analog)
      temp = GPIOx->MODER;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	617b      	str	r3, [r7, #20]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	005b      	lsls	r3, r3, #1
 800ae68:	2203      	movs	r2, #3
 800ae6a:	409a      	lsls	r2, r3
 800ae6c:	0013      	movs	r3, r2
 800ae6e:	43da      	mvns	r2, r3
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	4013      	ands	r3, r2
 800ae74:	617b      	str	r3, [r7, #20]
      temp |= ((GPIO_MODE_ANALOG) << (position * 2U));
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	409a      	lsls	r2, r3
 800ae7e:	0013      	movs	r3, r2
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = temp;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	601a      	str	r2, [r3, #0]

      // Activate the Pull-up or Pull down resistor for the current IO
      temp = GPIOx->PUPDR;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	617b      	str	r3, [r7, #20]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	2203      	movs	r2, #3
 800ae98:	409a      	lsls	r2, r3
 800ae9a:	0013      	movs	r3, r2
 800ae9c:	43da      	mvns	r2, r3
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	4013      	ands	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]
      temp |= ((GPIO_NOPULL) << (position * 2U));
      GPIOx->PUPDR = temp;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	60da      	str	r2, [r3, #12]
    }
    position++;
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	3301      	adds	r3, #1
 800aeae:	61fb      	str	r3, [r7, #28]
  while ((pins >> position) != 0)
 800aeb0:	230a      	movs	r3, #10
 800aeb2:	18fb      	adds	r3, r7, r3
 800aeb4:	881a      	ldrh	r2, [r3, #0]
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	411a      	asrs	r2, r3
 800aeba:	1e13      	subs	r3, r2, #0
 800aebc:	d1c1      	bne.n	800ae42 <__GpioAnalog+0x1e>
  }
}
 800aebe:	46c0      	nop			; (mov r8, r8)
 800aec0:	46bd      	mov	sp, r7
 800aec2:	b008      	add	sp, #32
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	46c0      	nop			; (mov r8, r8)

0800aec8 <_stm32l_disableGpios>:

/**
 * Disable GPIOS for Low Power switching
 */
void _stm32l_disableGpios() {
 800aec8:	b580      	push	{r7, lr}
 800aeca:	af00      	add	r7, sp, #0
    /*       example because communication between ST-link and the device       		*/
    /*       under test is done through UART. All GPIO pins are disabled (set   		*/
    /*       to analog input mode) including  UART I/O pins.           					*/

#ifdef GPIOA
	__GpioAnalog(GPIOA,(~ITSDK_LOWPOWER_GPIO_A_KEEP) & (GPIOA_PIN_AVAILABLE));
 800aecc:	4a1c      	ldr	r2, [pc, #112]	; (800af40 <_stm32l_disableGpios+0x78>)
 800aece:	23a0      	movs	r3, #160	; 0xa0
 800aed0:	05db      	lsls	r3, r3, #23
 800aed2:	0011      	movs	r1, r2
 800aed4:	0018      	movs	r0, r3
 800aed6:	f7ff ffa5 	bl	800ae24 <__GpioAnalog>
		__HAL_RCC_GPIOA_CLK_DISABLE();
	}
#endif

#ifdef GPIOB
	__GpioAnalog(GPIOB,(~ITSDK_LOWPOWER_GPIO_B_KEEP) & (GPIOB_PIN_AVAILABLE));
 800aeda:	4a1a      	ldr	r2, [pc, #104]	; (800af44 <_stm32l_disableGpios+0x7c>)
 800aedc:	4b1a      	ldr	r3, [pc, #104]	; (800af48 <_stm32l_disableGpios+0x80>)
 800aede:	0011      	movs	r1, r2
 800aee0:	0018      	movs	r0, r3
 800aee2:	f7ff ff9f 	bl	800ae24 <__GpioAnalog>
		__HAL_RCC_GPIOB_CLK_DISABLE();
	}
#endif

#ifdef GPIOC
	__GpioAnalog(GPIOC,(~ITSDK_LOWPOWER_GPIO_C_KEEP) & (GPIOC_PIN_AVAILABLE));
 800aee6:	4a19      	ldr	r2, [pc, #100]	; (800af4c <_stm32l_disableGpios+0x84>)
 800aee8:	4b19      	ldr	r3, [pc, #100]	; (800af50 <_stm32l_disableGpios+0x88>)
 800aeea:	0011      	movs	r1, r2
 800aeec:	0018      	movs	r0, r3
 800aeee:	f7ff ff99 	bl	800ae24 <__GpioAnalog>
		__HAL_RCC_GPIOC_CLK_DISABLE();
	}
#endif

#ifdef GPIOD
	__GpioAnalog(GPIOD,(~ITSDK_LOWPOWER_GPIO_D_KEEP) & (GPIOD_PIN_AVAILABLE));
 800aef2:	4a18      	ldr	r2, [pc, #96]	; (800af54 <_stm32l_disableGpios+0x8c>)
 800aef4:	4b18      	ldr	r3, [pc, #96]	; (800af58 <_stm32l_disableGpios+0x90>)
 800aef6:	0011      	movs	r1, r2
 800aef8:	0018      	movs	r0, r3
 800aefa:	f7ff ff93 	bl	800ae24 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_D_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOD_CLK_DISABLE();
 800aefe:	4b17      	ldr	r3, [pc, #92]	; (800af5c <_stm32l_disableGpios+0x94>)
 800af00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af02:	4b16      	ldr	r3, [pc, #88]	; (800af5c <_stm32l_disableGpios+0x94>)
 800af04:	2108      	movs	r1, #8
 800af06:	438a      	bics	r2, r1
 800af08:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOE
	__GpioAnalog(GPIOE,(~ITSDK_LOWPOWER_GPIO_E_KEEP) & (GPIOE_PIN_AVAILABLE));
 800af0a:	4a12      	ldr	r2, [pc, #72]	; (800af54 <_stm32l_disableGpios+0x8c>)
 800af0c:	4b14      	ldr	r3, [pc, #80]	; (800af60 <_stm32l_disableGpios+0x98>)
 800af0e:	0011      	movs	r1, r2
 800af10:	0018      	movs	r0, r3
 800af12:	f7ff ff87 	bl	800ae24 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_E_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOE_CLK_DISABLE();
 800af16:	4b11      	ldr	r3, [pc, #68]	; (800af5c <_stm32l_disableGpios+0x94>)
 800af18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1a:	4b10      	ldr	r3, [pc, #64]	; (800af5c <_stm32l_disableGpios+0x94>)
 800af1c:	2110      	movs	r1, #16
 800af1e:	438a      	bics	r2, r1
 800af20:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

#ifdef GPIOH
	__GpioAnalog(GPIOH,(~ITSDK_LOWPOWER_GPIO_H_KEEP) & (GPIOH_PIN_AVAILABLE));
 800af22:	4a10      	ldr	r2, [pc, #64]	; (800af64 <_stm32l_disableGpios+0x9c>)
 800af24:	4b10      	ldr	r3, [pc, #64]	; (800af68 <_stm32l_disableGpios+0xa0>)
 800af26:	0011      	movs	r1, r2
 800af28:	0018      	movs	r0, r3
 800af2a:	f7ff ff7b 	bl	800ae24 <__GpioAnalog>
	if( ITSDK_LOWPOWER_GPIO_H_KEEP == __LP_GPIO_NONE ) {
		__HAL_RCC_GPIOH_CLK_DISABLE();
 800af2e:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <_stm32l_disableGpios+0x94>)
 800af30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af32:	4b0a      	ldr	r3, [pc, #40]	; (800af5c <_stm32l_disableGpios+0x94>)
 800af34:	2180      	movs	r1, #128	; 0x80
 800af36:	438a      	bics	r2, r1
 800af38:	62da      	str	r2, [r3, #44]	; 0x2c
	}
#endif

}
 800af3a:	46c0      	nop			; (mov r8, r8)
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	0000fff3 	.word	0x0000fff3
 800af44:	0000ff5f 	.word	0x0000ff5f
 800af48:	50000400 	.word	0x50000400
 800af4c:	0000fff8 	.word	0x0000fff8
 800af50:	50000800 	.word	0x50000800
 800af54:	0000ffff 	.word	0x0000ffff
 800af58:	50000c00 	.word	0x50000c00
 800af5c:	40021000 	.word	0x40021000
 800af60:	50001000 	.word	0x50001000
 800af64:	00000603 	.word	0x00000603
 800af68:	50001c00 	.word	0x50001c00

0800af6c <__LP_GPIO_IRQHandler>:
 * once the mcu is reconfigured & ready
 */

#if ( ITSDK_LOWPOWER_MOD & __LOWPWR_MODE_WAKE_GPIO ) > 0

void __LP_GPIO_IRQHandler(uint16_t GPIO_Pin) {
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	0002      	movs	r2, r0
 800af74:	1dbb      	adds	r3, r7, #6
 800af76:	801a      	strh	r2, [r3, #0]

  /* Clear Wake Up Flag */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800af78:	4b08      	ldr	r3, [pc, #32]	; (800af9c <__LP_GPIO_IRQHandler+0x30>)
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	4b07      	ldr	r3, [pc, #28]	; (800af9c <__LP_GPIO_IRQHandler+0x30>)
 800af7e:	2104      	movs	r1, #4
 800af80:	430a      	orrs	r2, r1
 800af82:	601a      	str	r2, [r3, #0]
  __lowPower_wakeup_reason=LOWPWR_WAKEUP_GPIO;
 800af84:	4b06      	ldr	r3, [pc, #24]	; (800afa0 <__LP_GPIO_IRQHandler+0x34>)
 800af86:	2201      	movs	r2, #1
 800af88:	701a      	strb	r2, [r3, #0]
  __lowPower_wakeup_pin = GPIO_Pin;
 800af8a:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <__LP_GPIO_IRQHandler+0x38>)
 800af8c:	1dba      	adds	r2, r7, #6
 800af8e:	8812      	ldrh	r2, [r2, #0]
 800af90:	801a      	strh	r2, [r3, #0]

}
 800af92:	46c0      	nop			; (mov r8, r8)
 800af94:	46bd      	mov	sp, r7
 800af96:	b002      	add	sp, #8
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	46c0      	nop			; (mov r8, r8)
 800af9c:	40007000 	.word	0x40007000
 800afa0:	20000009 	.word	0x20000009
 800afa4:	200001d8 	.word	0x200001d8

0800afa8 <HAL_UARTEx_WakeupCallback>:

#endif

#if  ( ITSDK_LOWPOWER_MOD & ( __LOWPWR_MODE_WAKE_LPUART | __LOWPWR_MODE_WAKE_UART2 | __LOWPWR_MODE_WAKE_UART1 )  ) > 0
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart) {
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
   __lowPower_wakeup_reason=LOWPWR_WAKEUP_UART;
 800afb0:	4b03      	ldr	r3, [pc, #12]	; (800afc0 <HAL_UARTEx_WakeupCallback+0x18>)
 800afb2:	2203      	movs	r2, #3
 800afb4:	701a      	strb	r2, [r3, #0]
}
 800afb6:	46c0      	nop			; (mov r8, r8)
 800afb8:	46bd      	mov	sp, r7
 800afba:	b002      	add	sp, #8
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	46c0      	nop			; (mov r8, r8)
 800afc0:	20000009 	.word	0x20000009

0800afc4 <rtc_configure4LowPower>:


/**
 * Configure the RTC source clock for running LowPower
 */
void rtc_configure4LowPower(uint32_t ms) {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
	rtc_prepareSleepTime();
 800afcc:	f000 f99a 	bl	800b304 <rtc_prepareSleepTime>
	if ( ms > 0 ) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <rtc_configure4LowPower+0x1a>
		rtc_runRtcUntil(ms);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	0018      	movs	r0, r3
 800afda:	f000 f80d 	bl	800aff8 <rtc_runRtcUntil>
	}
}
 800afde:	46c0      	nop			; (mov r8, r8)
 800afe0:	46bd      	mov	sp, r7
 800afe2:	b002      	add	sp, #8
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <rtc_disable4LowPower>:

/**
 * Deactivate the WakeUpTimer for not having the IRQ looping
 */
void rtc_disable4LowPower() {
 800afe6:	b580      	push	{r7, lr}
 800afe8:	af00      	add	r7, sp, #0
	rtc_disableWakeUp();
 800afea:	f000 f85b 	bl	800b0a4 <rtc_disableWakeUp>
    rtc_updateTimeAfterSleepTime();
 800afee:	f000 f99b 	bl	800b328 <rtc_updateTimeAfterSleepTime>
}
 800aff2:	46c0      	nop			; (mov r8, r8)
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <rtc_runRtcUntil>:

/**
 * Run Rtc for a given time in ticks
 * Max is 16s
 */
void rtc_runRtcUntil(uint32_t ms) {
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	// Issue #48
	// it seems that timer is limited to 16bis (even if 32 bits in the HAL code)
	// So this is limiting in about 30s of sleeping time
	uint32_t ticks = rtc_getTicksFromDuration((uint32_t)ms);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	0018      	movs	r0, r3
 800b004:	f000 f816 	bl	800b034 <rtc_getTicksFromDuration>
 800b008:	0003      	movs	r3, r0
 800b00a:	60fb      	str	r3, [r7, #12]
	if ( ticks < 65536 ) {
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4a08      	ldr	r2, [pc, #32]	; (800b030 <rtc_runRtcUntil+0x38>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d804      	bhi.n	800b01e <rtc_runRtcUntil+0x26>
	    rtc_runRtcUntilTicks(ticks);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	0018      	movs	r0, r3
 800b018:	f000 f81c 	bl	800b054 <rtc_runRtcUntilTicks>
	} else {
		// If larger than 65535 we change the RTC clock to have a 1s time base and a longer period of time
		rtc_runRtcUntilMs(ms);
	}
}
 800b01c:	e003      	b.n	800b026 <rtc_runRtcUntil+0x2e>
		rtc_runRtcUntilMs(ms);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	0018      	movs	r0, r3
 800b022:	f000 f827 	bl	800b074 <rtc_runRtcUntilMs>
}
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	46bd      	mov	sp, r7
 800b02a:	b004      	add	sp, #16
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	46c0      	nop			; (mov r8, r8)
 800b030:	0000ffff 	.word	0x0000ffff

0800b034 <rtc_getTicksFromDuration>:

/*
 * Convert a duration in ticks (Wake-Up Clock only)
 */
uint32_t rtc_getTicksFromDuration(uint32_t ms) {
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
    return (ms * (ITSDK_RTC_CLKFREQ/16)) / 1000;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	02da      	lsls	r2, r3, #11
 800b040:	23fa      	movs	r3, #250	; 0xfa
 800b042:	0099      	lsls	r1, r3, #2
 800b044:	0010      	movs	r0, r2
 800b046:	f7f5 f867 	bl	8000118 <__udivsi3>
 800b04a:	0003      	movs	r3, r0
}
 800b04c:	0018      	movs	r0, r3
 800b04e:	46bd      	mov	sp, r7
 800b050:	b002      	add	sp, #8
 800b052:	bd80      	pop	{r7, pc}

0800b054 <rtc_runRtcUntilTicks>:
}

/**
 * Run the RTC for a given number of ticks
 */
void rtc_runRtcUntilTicks(uint32_t ticks) {
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, ticks, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	4b04      	ldr	r3, [pc, #16]	; (800b070 <rtc_runRtcUntilTicks+0x1c>)
 800b060:	2200      	movs	r2, #0
 800b062:	0018      	movs	r0, r3
 800b064:	f7f8 fde8 	bl	8003c38 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800b068:	46c0      	nop			; (mov r8, r8)
 800b06a:	46bd      	mov	sp, r7
 800b06c:	b002      	add	sp, #8
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20000260 	.word	0x20000260

0800b074 <rtc_runRtcUntilMs>:

/**
 * Run the RTC for a given number of ms
 */
void rtc_runRtcUntilMs(uint32_t ms) {
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
	// the scale is 1 second
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (ms / 1000), RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	23fa      	movs	r3, #250	; 0xfa
 800b080:	0099      	lsls	r1, r3, #2
 800b082:	0010      	movs	r0, r2
 800b084:	f7f5 f848 	bl	8000118 <__udivsi3>
 800b088:	0003      	movs	r3, r0
 800b08a:	0019      	movs	r1, r3
 800b08c:	4b04      	ldr	r3, [pc, #16]	; (800b0a0 <rtc_runRtcUntilMs+0x2c>)
 800b08e:	2204      	movs	r2, #4
 800b090:	0018      	movs	r0, r3
 800b092:	f7f8 fdd1 	bl	8003c38 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800b096:	46c0      	nop			; (mov r8, r8)
 800b098:	46bd      	mov	sp, r7
 800b09a:	b002      	add	sp, #8
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	46c0      	nop			; (mov r8, r8)
 800b0a0:	20000260 	.word	0x20000260

0800b0a4 <rtc_disableWakeUp>:


void rtc_disableWakeUp() {
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	af00      	add	r7, sp, #0
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800b0a8:	4b03      	ldr	r3, [pc, #12]	; (800b0b8 <rtc_disableWakeUp+0x14>)
 800b0aa:	0018      	movs	r0, r3
 800b0ac:	f7f8 fe8a 	bl	8003dc4 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 800b0b0:	46c0      	nop			; (mov r8, r8)
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	46c0      	nop			; (mov r8, r8)
 800b0b8:	20000260 	.word	0x20000260

0800b0bc <rtc_getTimestampMs>:

#ifndef __WE_HAVE_A_LOT_OF_FLASH
uint32_t __rtc_days = 0;			// day index since the begining
uint32_t __rtc_lastTick = 0;		// time in ms in the day
#endif
uint64_t rtc_getTimestampMs() {
 800b0bc:	b5b0      	push	{r4, r5, r7, lr}
 800b0be:	af00      	add	r7, sp, #0
	return rtc_getTimestampMsRaw(true);
 800b0c0:	2001      	movs	r0, #1
 800b0c2:	f000 f807 	bl	800b0d4 <rtc_getTimestampMsRaw>
 800b0c6:	0003      	movs	r3, r0
 800b0c8:	000c      	movs	r4, r1
}
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	0021      	movs	r1, r4
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b0d4 <rtc_getTimestampMsRaw>:

uint64_t rtc_getTimestampMsRaw(bool adjust) {
 800b0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0d6:	b095      	sub	sp, #84	; 0x54
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	0003      	movs	r3, r0
 800b0dc:	222f      	movs	r2, #47	; 0x2f
 800b0de:	18ba      	adds	r2, r7, r2
 800b0e0:	7013      	strb	r3, [r2, #0]
	uint64_t ms = (timestamp*1000) + ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
#else
	RTC_TimeTypeDef _time;
	RTC_DateTypeDef _date;
	uint64_t ms;
	HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 800b0e2:	210c      	movs	r1, #12
 800b0e4:	000c      	movs	r4, r1
 800b0e6:	2328      	movs	r3, #40	; 0x28
 800b0e8:	469c      	mov	ip, r3
 800b0ea:	44bc      	add	ip, r7
 800b0ec:	4461      	add	r1, ip
 800b0ee:	4b61      	ldr	r3, [pc, #388]	; (800b274 <rtc_getTimestampMsRaw+0x1a0>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	0018      	movs	r0, r3
 800b0f4:	f7f8 fa16 	bl	8003524 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BIN);
 800b0f8:	2308      	movs	r3, #8
 800b0fa:	2028      	movs	r0, #40	; 0x28
 800b0fc:	183a      	adds	r2, r7, r0
 800b0fe:	18d1      	adds	r1, r2, r3
 800b100:	4b5c      	ldr	r3, [pc, #368]	; (800b274 <rtc_getTimestampMsRaw+0x1a0>)
 800b102:	2200      	movs	r2, #0
 800b104:	0018      	movs	r0, r3
 800b106:	f7f8 fb17 	bl	8003738 <HAL_RTC_GetDate>
	ms  = (uint32_t)_time.Hours*3600*1000;
 800b10a:	0021      	movs	r1, r4
 800b10c:	2028      	movs	r0, #40	; 0x28
 800b10e:	183b      	adds	r3, r7, r0
 800b110:	185b      	adds	r3, r3, r1
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	001a      	movs	r2, r3
 800b116:	4b58      	ldr	r3, [pc, #352]	; (800b278 <rtc_getTimestampMsRaw+0x1a4>)
 800b118:	4353      	muls	r3, r2
 800b11a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b11c:	2300      	movs	r3, #0
 800b11e:	64fb      	str	r3, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Minutes*60*1000;
 800b120:	183a      	adds	r2, r7, r0
 800b122:	1853      	adds	r3, r2, r1
 800b124:	785b      	ldrb	r3, [r3, #1]
 800b126:	001a      	movs	r2, r3
 800b128:	4b54      	ldr	r3, [pc, #336]	; (800b27c <rtc_getTimestampMsRaw+0x1a8>)
 800b12a:	4353      	muls	r3, r2
 800b12c:	623b      	str	r3, [r7, #32]
 800b12e:	2300      	movs	r3, #0
 800b130:	627b      	str	r3, [r7, #36]	; 0x24
 800b132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b134:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800b136:	6a38      	ldr	r0, [r7, #32]
 800b138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b13a:	181b      	adds	r3, r3, r0
 800b13c:	414c      	adcs	r4, r1
 800b13e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b140:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += (uint32_t)_time.Seconds*1000;
 800b142:	210c      	movs	r1, #12
 800b144:	0008      	movs	r0, r1
 800b146:	2328      	movs	r3, #40	; 0x28
 800b148:	18fa      	adds	r2, r7, r3
 800b14a:	1853      	adds	r3, r2, r1
 800b14c:	789b      	ldrb	r3, [r3, #2]
 800b14e:	001a      	movs	r2, r3
 800b150:	0013      	movs	r3, r2
 800b152:	015b      	lsls	r3, r3, #5
 800b154:	1a9b      	subs	r3, r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	189b      	adds	r3, r3, r2
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	61bb      	str	r3, [r7, #24]
 800b15e:	2300      	movs	r3, #0
 800b160:	61fb      	str	r3, [r7, #28]
 800b162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b164:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800b166:	69b9      	ldr	r1, [r7, #24]
 800b168:	69fa      	ldr	r2, [r7, #28]
 800b16a:	185b      	adds	r3, r3, r1
 800b16c:	4154      	adcs	r4, r2
 800b16e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b170:	64fc      	str	r4, [r7, #76]	; 0x4c
	ms += ((1000*(uint32_t)(_time.SecondFraction-_time.SubSeconds))/_time.SecondFraction+1);
 800b172:	0001      	movs	r1, r0
 800b174:	2028      	movs	r0, #40	; 0x28
 800b176:	183b      	adds	r3, r7, r0
 800b178:	185b      	adds	r3, r3, r1
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	183b      	adds	r3, r7, r0
 800b17e:	185b      	adds	r3, r3, r1
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	1ad2      	subs	r2, r2, r3
 800b184:	0013      	movs	r3, r2
 800b186:	015b      	lsls	r3, r3, #5
 800b188:	1a9b      	subs	r3, r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	189b      	adds	r3, r3, r2
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	001a      	movs	r2, r3
 800b192:	183b      	adds	r3, r7, r0
 800b194:	185b      	adds	r3, r3, r1
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	0019      	movs	r1, r3
 800b19a:	0010      	movs	r0, r2
 800b19c:	f7f4 ffbc 	bl	8000118 <__udivsi3>
 800b1a0:	0003      	movs	r3, r0
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	617b      	str	r3, [r7, #20]
 800b1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ac:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800b1ae:	6939      	ldr	r1, [r7, #16]
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	185b      	adds	r3, r3, r1
 800b1b4:	4154      	adcs	r4, r2
 800b1b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1b8:	64fc      	str	r4, [r7, #76]	; 0x4c

	if ( ms < __rtc_lastTick ) {
 800b1ba:	4b31      	ldr	r3, [pc, #196]	; (800b280 <rtc_getTimestampMsRaw+0x1ac>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	001d      	movs	r5, r3
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	001e      	movs	r6, r3
 800b1c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1c6:	42b3      	cmp	r3, r6
 800b1c8:	d305      	bcc.n	800b1d6 <rtc_getTimestampMsRaw+0x102>
 800b1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1cc:	42b3      	cmp	r3, r6
 800b1ce:	d107      	bne.n	800b1e0 <rtc_getTimestampMsRaw+0x10c>
 800b1d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1d2:	42ab      	cmp	r3, r5
 800b1d4:	d204      	bcs.n	800b1e0 <rtc_getTimestampMsRaw+0x10c>
		// day has changed
		__rtc_days++;
 800b1d6:	4b2b      	ldr	r3, [pc, #172]	; (800b284 <rtc_getTimestampMsRaw+0x1b0>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	1c5a      	adds	r2, r3, #1
 800b1dc:	4b29      	ldr	r3, [pc, #164]	; (800b284 <rtc_getTimestampMsRaw+0x1b0>)
 800b1de:	601a      	str	r2, [r3, #0]
	}
	__rtc_lastTick = ms;
 800b1e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1e2:	4b27      	ldr	r3, [pc, #156]	; (800b280 <rtc_getTimestampMsRaw+0x1ac>)
 800b1e4:	601a      	str	r2, [r3, #0]
	ms = ( uint64_t )((uint64_t)__rtc_days*3600000L*24L)+(uint64_t)ms;
 800b1e6:	4b27      	ldr	r3, [pc, #156]	; (800b284 <rtc_getTimestampMsRaw+0x1b0>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	60bb      	str	r3, [r7, #8]
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	4a25      	ldr	r2, [pc, #148]	; (800b288 <rtc_getTimestampMsRaw+0x1b4>)
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	68b8      	ldr	r0, [r7, #8]
 800b1f6:	68f9      	ldr	r1, [r7, #12]
 800b1f8:	f7f5 f948 	bl	800048c <__aeabi_lmul>
 800b1fc:	0003      	movs	r3, r0
 800b1fe:	000c      	movs	r4, r1
 800b200:	0019      	movs	r1, r3
 800b202:	0022      	movs	r2, r4
 800b204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b206:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800b208:	185b      	adds	r3, r3, r1
 800b20a:	4154      	adcs	r4, r2
 800b20c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b20e:	64fc      	str	r4, [r7, #76]	; 0x4c
#endif
	// apply the RTC clock correction and add previous offset
	#if ITSDK_WITH_CLK_ADJUST > 0
		if (adjust && __rtc_init > 0) {
 800b210:	232f      	movs	r3, #47	; 0x2f
 800b212:	18fb      	adds	r3, r7, r3
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d024      	beq.n	800b264 <rtc_getTimestampMsRaw+0x190>
 800b21a:	4b1c      	ldr	r3, [pc, #112]	; (800b28c <rtc_getTimestampMsRaw+0x1b8>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d020      	beq.n	800b264 <rtc_getTimestampMsRaw+0x190>
			ms = (ms * (uint64_t)__rtc_currentRatio) / 1000L;
 800b222:	4b1b      	ldr	r3, [pc, #108]	; (800b290 <rtc_getTimestampMsRaw+0x1bc>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	603b      	str	r3, [r7, #0]
 800b228:	2300      	movs	r3, #0
 800b22a:	607b      	str	r3, [r7, #4]
 800b22c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b230:	6838      	ldr	r0, [r7, #0]
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	f7f5 f92a 	bl	800048c <__aeabi_lmul>
 800b238:	0003      	movs	r3, r0
 800b23a:	000c      	movs	r4, r1
 800b23c:	0018      	movs	r0, r3
 800b23e:	0021      	movs	r1, r4
 800b240:	22fa      	movs	r2, #250	; 0xfa
 800b242:	0092      	lsls	r2, r2, #2
 800b244:	2300      	movs	r3, #0
 800b246:	f7f5 f901 	bl	800044c <__aeabi_uldivmod>
 800b24a:	0003      	movs	r3, r0
 800b24c:	000c      	movs	r4, r1
 800b24e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b250:	64fc      	str	r4, [r7, #76]	; 0x4c
			ms += __rtc_offset;
 800b252:	4b10      	ldr	r3, [pc, #64]	; (800b294 <rtc_getTimestampMsRaw+0x1c0>)
 800b254:	685c      	ldr	r4, [r3, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b25a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b25c:	185b      	adds	r3, r3, r1
 800b25e:	4154      	adcs	r4, r2
 800b260:	64bb      	str	r3, [r7, #72]	; 0x48
 800b262:	64fc      	str	r4, [r7, #76]	; 0x4c
		}
	#else
		ms = (adjust)?(ms * ITSDK_CLK_CORRECTION) / 1000L:ms;
	#endif
	return ms;
 800b264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b266:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
}
 800b268:	0018      	movs	r0, r3
 800b26a:	0021      	movs	r1, r4
 800b26c:	46bd      	mov	sp, r7
 800b26e:	b015      	add	sp, #84	; 0x54
 800b270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b272:	46c0      	nop			; (mov r8, r8)
 800b274:	20000260 	.word	0x20000260
 800b278:	0036ee80 	.word	0x0036ee80
 800b27c:	0000ea60 	.word	0x0000ea60
 800b280:	200001e0 	.word	0x200001e0
 800b284:	200001dc 	.word	0x200001dc
 800b288:	05265c00 	.word	0x05265c00
 800b28c:	200001da 	.word	0x200001da
 800b290:	20000558 	.word	0x20000558
 800b294:	20000560 	.word	0x20000560

0800b298 <rtc_resetTime>:


/**
 * Reset RTC to 00:00:00.00 at startup
 */
void rtc_resetTime() {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
	RTC_DateTypeDef _date;
	_date.Year = 0;
 800b29e:	2114      	movs	r1, #20
 800b2a0:	187b      	adds	r3, r7, r1
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	70da      	strb	r2, [r3, #3]
	_date.Month = 1;
 800b2a6:	187b      	adds	r3, r7, r1
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	705a      	strb	r2, [r3, #1]
	_date.Date = 1;
 800b2ac:	187b      	adds	r3, r7, r1
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetDate(&hrtc,&_date,RTC_FORMAT_BIN);
 800b2b2:	1879      	adds	r1, r7, r1
 800b2b4:	4b11      	ldr	r3, [pc, #68]	; (800b2fc <rtc_resetTime+0x64>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	0018      	movs	r0, r3
 800b2ba:	f7f8 f98f 	bl	80035dc <HAL_RTC_SetDate>

	RTC_TimeTypeDef _time;
	_time.Hours 		 = 0x0;
 800b2be:	003b      	movs	r3, r7
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	701a      	strb	r2, [r3, #0]
	_time.Minutes 		 = 0x0;
 800b2c4:	003b      	movs	r3, r7
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	705a      	strb	r2, [r3, #1]
	_time.Seconds 		 = 0x0;
 800b2ca:	003b      	movs	r3, r7
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	709a      	strb	r2, [r3, #2]
	_time.SubSeconds  	 = 0x00;
 800b2d0:	003b      	movs	r3, r7
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	605a      	str	r2, [r3, #4]
	_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b2d6:	003b      	movs	r3, r7
 800b2d8:	2200      	movs	r2, #0
 800b2da:	60da      	str	r2, [r3, #12]
	_time.StoreOperation = RTC_STOREOPERATION_RESET;
 800b2dc:	003b      	movs	r3, r7
 800b2de:	2200      	movs	r2, #0
 800b2e0:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(&hrtc, &_time, RTC_FORMAT_BIN);
 800b2e2:	0039      	movs	r1, r7
 800b2e4:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <rtc_resetTime+0x64>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	f7f8 f857 	bl	800339c <HAL_RTC_SetTime>
	__rtc_lastTick = 0;
 800b2ee:	4b04      	ldr	r3, [pc, #16]	; (800b300 <rtc_resetTime+0x68>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	601a      	str	r2, [r3, #0]
}
 800b2f4:	46c0      	nop			; (mov r8, r8)
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	b006      	add	sp, #24
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20000260 	.word	0x20000260
 800b300:	200001e0 	.word	0x200001e0

0800b304 <rtc_prepareSleepTime>:

/**
 * Call before any sleep in case there is something to prepare with RTC
 * or others.
 */
void rtc_prepareSleepTime() {
 800b304:	b580      	push	{r7, lr}
 800b306:	af00      	add	r7, sp, #0
	__enable_systick=false;
 800b308:	4b05      	ldr	r3, [pc, #20]	; (800b320 <rtc_prepareSleepTime+0x1c>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	701a      	strb	r2, [r3, #0]

//	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN1 );
//	HAL_PWR_DisableWakeUpPin( PWR_WAKEUP_PIN2 );

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800b30e:	4b05      	ldr	r3, [pc, #20]	; (800b324 <rtc_prepareSleepTime+0x20>)
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	4b04      	ldr	r3, [pc, #16]	; (800b324 <rtc_prepareSleepTime+0x20>)
 800b314:	2104      	movs	r1, #4
 800b316:	430a      	orrs	r2, r1
 800b318:	601a      	str	r2, [r3, #0]
}
 800b31a:	46c0      	nop			; (mov r8, r8)
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20000018 	.word	0x20000018
 800b324:	40007000 	.word	0x40007000

0800b328 <rtc_updateTimeAfterSleepTime>:


/**
 * Get the sleep duration based on RTC counter
 */
void rtc_updateTimeAfterSleepTime() {
 800b328:	b5b0      	push	{r4, r5, r7, lr}
 800b32a:	af00      	add	r7, sp, #0

	itsdk_time_set_ms(rtc_getTimestampMs());
 800b32c:	f7ff fec6 	bl	800b0bc <rtc_getTimestampMs>
 800b330:	0003      	movs	r3, r0
 800b332:	000c      	movs	r4, r1
 800b334:	0018      	movs	r0, r3
 800b336:	0021      	movs	r1, r4
 800b338:	f7fe fa2e 	bl	8009798 <itsdk_time_set_ms>
	__enable_systick=true;
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <rtc_updateTimeAfterSleepTime+0x20>)
 800b33e:	2201      	movs	r2, #1
 800b340:	701a      	strb	r2, [r3, #0]
}
 800b342:	46c0      	nop			; (mov r8, r8)
 800b344:	46bd      	mov	sp, r7
 800b346:	bdb0      	pop	{r4, r5, r7, pc}
 800b348:	20000018 	.word	0x20000018

0800b34c <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * RCT Interrupt handler allowing to chain different function
 */
rtc_irq_chain_t __rtc_irq_chain = { NULL, NULL };
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	rtc_irq_chain_t * c = &__rtc_irq_chain;
 800b354:	4b0f      	ldr	r3, [pc, #60]	; (800b394 <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 800b356:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 800b358:	e00c      	b.n	800b374 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>
		void (*p)(RTC_HandleTypeDef *h) = c->irq_func;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	60bb      	str	r3, [r7, #8]
		if ( p != NULL ) {
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <HAL_RTCEx_WakeUpTimerEventCallback+0x22>
			p(hrtc);
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	0010      	movs	r0, r2
 800b36c:	4798      	blx	r3
		}
		c = c->next;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	60fb      	str	r3, [r7, #12]
	while ( c != NULL ) {
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1ef      	bne.n	800b35a <HAL_RTCEx_WakeUpTimerEventCallback+0xe>
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800b37a:	4b07      	ldr	r3, [pc, #28]	; (800b398 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	4b06      	ldr	r3, [pc, #24]	; (800b398 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 800b380:	2104      	movs	r1, #4
 800b382:	430a      	orrs	r2, r1
 800b384:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason=LOWPWR_WAKEUP_RTC;
 800b386:	4b05      	ldr	r3, [pc, #20]	; (800b39c <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 800b388:	2200      	movs	r2, #0
 800b38a:	701a      	strb	r2, [r3, #0]
}
 800b38c:	46c0      	nop			; (mov r8, r8)
 800b38e:	46bd      	mov	sp, r7
 800b390:	b004      	add	sp, #16
 800b392:	bd80      	pop	{r7, pc}
 800b394:	200001e4 	.word	0x200001e4
 800b398:	40007000 	.word	0x40007000
 800b39c:	20000009 	.word	0x20000009

0800b3a0 <rtc_getClockAdjustement>:
 */

/**
 * Return the last computed ratio
 */
uint32_t rtc_getClockAdjustement() {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	if (__rtc_init > 0) {
 800b3a4:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <rtc_getClockAdjustement+0x20>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <rtc_getClockAdjustement+0x12>
		return __rtc_currentRatio;
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <rtc_getClockAdjustement+0x24>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	e002      	b.n	800b3b8 <rtc_getClockAdjustement+0x18>
	} else {
		return rtc_calcClockRatio();
 800b3b2:	f000 f833 	bl	800b41c <rtc_calcClockRatio>
 800b3b6:	0003      	movs	r3, r0
	}
#else
	return ITSDK_CLK_CORRECTION;
#endif
}
 800b3b8:	0018      	movs	r0, r3
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	46c0      	nop			; (mov r8, r8)
 800b3c0:	200001da 	.word	0x200001da
 800b3c4:	20000558 	.word	0x20000558

0800b3c8 <rtc_adjustTime>:

/**
 * Manage rtc clock adjustement / (re)evaluate the clock ratio
 * Can be called at anytime to reajust
 */
void rtc_adjustTime() {
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint32_t newRatio=rtc_calcClockRatio();
 800b3ce:	f000 f825 	bl	800b41c <rtc_calcClockRatio>
 800b3d2:	0003      	movs	r3, r0
 800b3d4:	607b      	str	r3, [r7, #4]
	if (__rtc_init > 0) {
 800b3d6:	4b0e      	ldr	r3, [pc, #56]	; (800b410 <rtc_adjustTime+0x48>)
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d009      	beq.n	800b3f2 <rtc_adjustTime+0x2a>
		__rtc_offset = rtc_getTimestampMs();
 800b3de:	f7ff fe6d 	bl	800b0bc <rtc_getTimestampMs>
 800b3e2:	0003      	movs	r3, r0
 800b3e4:	000c      	movs	r4, r1
 800b3e6:	4a0b      	ldr	r2, [pc, #44]	; (800b414 <rtc_adjustTime+0x4c>)
 800b3e8:	6013      	str	r3, [r2, #0]
 800b3ea:	6054      	str	r4, [r2, #4]
		rtc_resetTime();
 800b3ec:	f7ff ff54 	bl	800b298 <rtc_resetTime>
 800b3f0:	e004      	b.n	800b3fc <rtc_adjustTime+0x34>
	} else {
		__rtc_offset=0;
 800b3f2:	4a08      	ldr	r2, [pc, #32]	; (800b414 <rtc_adjustTime+0x4c>)
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	2400      	movs	r4, #0
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	6054      	str	r4, [r2, #4]
	}
	__rtc_init=1;
 800b3fc:	4b04      	ldr	r3, [pc, #16]	; (800b410 <rtc_adjustTime+0x48>)
 800b3fe:	2201      	movs	r2, #1
 800b400:	701a      	strb	r2, [r3, #0]
	__rtc_currentRatio=newRatio;
 800b402:	4b05      	ldr	r3, [pc, #20]	; (800b418 <rtc_adjustTime+0x50>)
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	601a      	str	r2, [r3, #0]
#endif
}
 800b408:	46c0      	nop			; (mov r8, r8)
 800b40a:	46bd      	mov	sp, r7
 800b40c:	b003      	add	sp, #12
 800b40e:	bd90      	pop	{r4, r7, pc}
 800b410:	200001da 	.word	0x200001da
 800b414:	20000560 	.word	0x20000560
 800b418:	20000558 	.word	0x20000558

0800b41c <rtc_calcClockRatio>:


/**
 * Return the corrected clockRatio => realClock = (calcClockRatio * seenClock)/1000
 */
uint32_t rtc_calcClockRatio() {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
	}

	return (uint32_t)ratio;

#else
	return ITSDK_CLK_CORRECTION;
 800b420:	23fa      	movs	r3, #250	; 0xfa
 800b422:	009b      	lsls	r3, r3, #2
#endif
}
 800b424:	0018      	movs	r0, r3
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
	...

0800b42c <HAL_IncTick>:

/**
 * Action to be executed on Systick
 * The name vary depending on the Firwmare version ... ST, you make me crazy !
 */
void HAL_IncTick(void) {
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
	// add 1ms to the global counter
	if (__enable_systick) itsdk_time_add_us((__TICK_DURATION_US*__systick_ratio)/1000);
 800b430:	4b10      	ldr	r3, [pc, #64]	; (800b474 <HAL_IncTick+0x48>)
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d011      	beq.n	800b45c <HAL_IncTick+0x30>
 800b438:	4b0f      	ldr	r3, [pc, #60]	; (800b478 <HAL_IncTick+0x4c>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	0013      	movs	r3, r2
 800b43e:	015b      	lsls	r3, r3, #5
 800b440:	1a9b      	subs	r3, r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	189b      	adds	r3, r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	001a      	movs	r2, r3
 800b44a:	23fa      	movs	r3, #250	; 0xfa
 800b44c:	0099      	lsls	r1, r3, #2
 800b44e:	0010      	movs	r0, r2
 800b450:	f7f4 fe62 	bl	8000118 <__udivsi3>
 800b454:	0003      	movs	r3, r0
 800b456:	0018      	movs	r0, r3
 800b458:	f7fe f950 	bl	80096fc <itsdk_time_add_us>
	uwTick++;
 800b45c:	4b07      	ldr	r3, [pc, #28]	; (800b47c <HAL_IncTick+0x50>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	1c5a      	adds	r2, r3, #1
 800b462:	4b06      	ldr	r3, [pc, #24]	; (800b47c <HAL_IncTick+0x50>)
 800b464:	601a      	str	r2, [r3, #0]
	__lowPower_wakeup_reason = LOWPWR_WAKEUP_SYSTICK;
 800b466:	4b06      	ldr	r3, [pc, #24]	; (800b480 <HAL_IncTick+0x54>)
 800b468:	2202      	movs	r2, #2
 800b46a:	701a      	strb	r2, [r3, #0]
}
 800b46c:	46c0      	nop			; (mov r8, r8)
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	46c0      	nop			; (mov r8, r8)
 800b474:	20000018 	.word	0x20000018
 800b478:	2000001c 	.word	0x2000001c
 800b47c:	20000470 	.word	0x20000470
 800b480:	20000009 	.word	0x20000009

0800b484 <systick_adjustTime>:


/**
 * Update the correction tickRatio => realTicks = (calcTickRatio * seenTicks)/1000
 */
void systick_adjustTime() {
 800b484:	b590      	push	{r4, r7, lr}
 800b486:	b089      	sub	sp, #36	; 0x24
 800b488:	af00      	add	r7, sp, #0
#if ITSDK_WITH_CLK_ADJUST > 0
	uint64_t start_clk = itsdk_time_get_us()/1000;
 800b48a:	f7fe f9d1 	bl	8009830 <itsdk_time_get_us>
 800b48e:	22fa      	movs	r2, #250	; 0xfa
 800b490:	0092      	lsls	r2, r2, #2
 800b492:	2300      	movs	r3, #0
 800b494:	f7f4 ffda 	bl	800044c <__aeabi_uldivmod>
 800b498:	0003      	movs	r3, r0
 800b49a:	000c      	movs	r4, r1
 800b49c:	613b      	str	r3, [r7, #16]
 800b49e:	617c      	str	r4, [r7, #20]
	#if ITSDK_CLK_BEST_SOURCE == __CLK_BEST_SRC_RTC
		#if ITSDK_WITH_RTC == __RTC_ENABLED
			uint64_t start_rtc = rtc_getTimestampMsRaw(false);
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	f7ff fe17 	bl	800b0d4 <rtc_getTimestampMsRaw>
 800b4a6:	0003      	movs	r3, r0
 800b4a8:	000c      	movs	r4, r1
 800b4aa:	60bb      	str	r3, [r7, #8]
 800b4ac:	60fc      	str	r4, [r7, #12]
			while ( (rtc_getTimestampMsRaw(false)-start_rtc) < 200 );	// wait for 200ms
 800b4ae:	46c0      	nop			; (mov r8, r8)
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	f7ff fe0f 	bl	800b0d4 <rtc_getTimestampMsRaw>
 800b4b6:	000a      	movs	r2, r1
 800b4b8:	0001      	movs	r1, r0
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	68fc      	ldr	r4, [r7, #12]
 800b4be:	1ac9      	subs	r1, r1, r3
 800b4c0:	41a2      	sbcs	r2, r4
 800b4c2:	000b      	movs	r3, r1
 800b4c4:	0014      	movs	r4, r2
 800b4c6:	2c00      	cmp	r4, #0
 800b4c8:	d103      	bne.n	800b4d2 <systick_adjustTime+0x4e>
 800b4ca:	d1f1      	bne.n	800b4b0 <systick_adjustTime+0x2c>
 800b4cc:	2bc7      	cmp	r3, #199	; 0xc7
 800b4ce:	d800      	bhi.n	800b4d2 <systick_adjustTime+0x4e>
 800b4d0:	e7ee      	b.n	800b4b0 <systick_adjustTime+0x2c>
				0
		);
	#else
		#error 'INVALID BEST CLK SRC'
	#endif
	uint64_t stop_clk = itsdk_time_get_us()/1000;
 800b4d2:	f7fe f9ad 	bl	8009830 <itsdk_time_get_us>
 800b4d6:	22fa      	movs	r2, #250	; 0xfa
 800b4d8:	0092      	lsls	r2, r2, #2
 800b4da:	2300      	movs	r3, #0
 800b4dc:	f7f4 ffb6 	bl	800044c <__aeabi_uldivmod>
 800b4e0:	0003      	movs	r3, r0
 800b4e2:	000c      	movs	r4, r1
 800b4e4:	603b      	str	r3, [r7, #0]
 800b4e6:	607c      	str	r4, [r7, #4]
	uint64_t ratio = (1000*200)/(stop_clk-start_clk);
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	697c      	ldr	r4, [r7, #20]
 800b4f0:	1ac9      	subs	r1, r1, r3
 800b4f2:	41a2      	sbcs	r2, r4
 800b4f4:	000b      	movs	r3, r1
 800b4f6:	0014      	movs	r4, r2
 800b4f8:	001a      	movs	r2, r3
 800b4fa:	0023      	movs	r3, r4
 800b4fc:	4818      	ldr	r0, [pc, #96]	; (800b560 <systick_adjustTime+0xdc>)
 800b4fe:	2100      	movs	r1, #0
 800b500:	f7f4 ffa4 	bl	800044c <__aeabi_uldivmod>
 800b504:	0003      	movs	r3, r0
 800b506:	000c      	movs	r4, r1
 800b508:	61bb      	str	r3, [r7, #24]
 800b50a:	61fc      	str	r4, [r7, #28]
	//log_info("ticks : %d / 200ms ==> %d\r\n",(int)(stop_clk-start_clk),(int)ratio);

	// Protection against value too bad, sounds like a problem
	if ( ratio > 1400 || ratio < 600 ) {
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d111      	bne.n	800b536 <systick_adjustTime+0xb2>
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d104      	bne.n	800b522 <systick_adjustTime+0x9e>
 800b518:	69ba      	ldr	r2, [r7, #24]
 800b51a:	23af      	movs	r3, #175	; 0xaf
 800b51c:	00db      	lsls	r3, r3, #3
 800b51e:	429a      	cmp	r2, r3
 800b520:	d809      	bhi.n	800b536 <systick_adjustTime+0xb2>
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d113      	bne.n	800b550 <systick_adjustTime+0xcc>
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d103      	bne.n	800b536 <systick_adjustTime+0xb2>
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	4a0c      	ldr	r2, [pc, #48]	; (800b564 <systick_adjustTime+0xe0>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d80c      	bhi.n	800b550 <systick_adjustTime+0xcc>
		ITSDK_ERROR_REPORT(ITSDK_ERROR_TICKS_INVALID_CLKRATIO,(uint16_t)ratio);
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	69fc      	ldr	r4, [r7, #28]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	4a0a      	ldr	r2, [pc, #40]	; (800b568 <systick_adjustTime+0xe4>)
 800b53e:	0019      	movs	r1, r3
 800b540:	0010      	movs	r0, r2
 800b542:	f7fd fadd 	bl	8008b00 <itsdk_error_report>
		ratio = 1000;
 800b546:	23fa      	movs	r3, #250	; 0xfa
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	2400      	movs	r4, #0
 800b54c:	61bb      	str	r3, [r7, #24]
 800b54e:	61fc      	str	r4, [r7, #28]
	}
	__systick_ratio=(uint32_t)ratio;
 800b550:	69ba      	ldr	r2, [r7, #24]
 800b552:	4b06      	ldr	r3, [pc, #24]	; (800b56c <systick_adjustTime+0xe8>)
 800b554:	601a      	str	r2, [r3, #0]
#endif
}
 800b556:	46c0      	nop			; (mov r8, r8)
 800b558:	46bd      	mov	sp, r7
 800b55a:	b009      	add	sp, #36	; 0x24
 800b55c:	bd90      	pop	{r4, r7, pc}
 800b55e:	46c0      	nop			; (mov r8, r8)
 800b560:	00030d40 	.word	0x00030d40
 800b564:	00000257 	.word	0x00000257
 800b568:	90000061 	.word	0x90000061
 800b56c:	2000001c 	.word	0x2000001c

0800b570 <wdg_setupWithMaxMs>:

/**
 * Setup the WatchDog for fireing a reset after the given Ms time
 * Values from 7ms to 28s according to the possible values
 */
void wdg_setupWithMaxMs(uint32_t ms) {
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]

	if ( ms > 28000 || ms < 10 ) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a23      	ldr	r2, [pc, #140]	; (800b608 <wdg_setupWithMaxMs+0x98>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d802      	bhi.n	800b586 <wdg_setupWithMaxMs+0x16>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b09      	cmp	r3, #9
 800b584:	d806      	bhi.n	800b594 <wdg_setupWithMaxMs+0x24>
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_WDG_OUTOFBOUNDS,(uint16_t)ms);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	b29b      	uxth	r3, r3
 800b58a:	4a20      	ldr	r2, [pc, #128]	; (800b60c <wdg_setupWithMaxMs+0x9c>)
 800b58c:	0019      	movs	r1, r3
 800b58e:	0010      	movs	r0, r2
 800b590:	f7fd fab6 	bl	8008b00 <itsdk_error_report>
	}
  #if ITSDK_WDG_MS >0
	int32_t uwLsiFreq;
	uwLsiFreq = (ITSDK_WDG_CLKFREQ * rtc_getClockAdjustement())/1000;
 800b594:	f7ff ff04 	bl	800b3a0 <rtc_getClockAdjustement>
 800b598:	0002      	movs	r2, r0
 800b59a:	4b1d      	ldr	r3, [pc, #116]	; (800b610 <wdg_setupWithMaxMs+0xa0>)
 800b59c:	435a      	muls	r2, r3
 800b59e:	23fa      	movs	r3, #250	; 0xfa
 800b5a0:	0099      	lsls	r1, r3, #2
 800b5a2:	0010      	movs	r0, r2
 800b5a4:	f7f4 fdb8 	bl	8000118 <__udivsi3>
 800b5a8:	0003      	movs	r3, r0
 800b5aa:	60fb      	str	r3, [r7, #12]

	hiwdg.Instance = IWDG;
 800b5ac:	4b19      	ldr	r3, [pc, #100]	; (800b614 <wdg_setupWithMaxMs+0xa4>)
 800b5ae:	4a1a      	ldr	r2, [pc, #104]	; (800b618 <wdg_setupWithMaxMs+0xa8>)
 800b5b0:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800b5b2:	4b18      	ldr	r3, [pc, #96]	; (800b614 <wdg_setupWithMaxMs+0xa4>)
 800b5b4:	2206      	movs	r2, #6
 800b5b6:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 800b5b8:	4b16      	ldr	r3, [pc, #88]	; (800b614 <wdg_setupWithMaxMs+0xa4>)
 800b5ba:	4a18      	ldr	r2, [pc, #96]	; (800b61c <wdg_setupWithMaxMs+0xac>)
 800b5bc:	60da      	str	r2, [r3, #12]
	uint32_t rel = (ms * ( (uwLsiFreq * 10) / 256 )) / 10000;
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	0013      	movs	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	189b      	adds	r3, r3, r2
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	d500      	bpl.n	800b5cc <wdg_setupWithMaxMs+0x5c>
 800b5ca:	33ff      	adds	r3, #255	; 0xff
 800b5cc:	121b      	asrs	r3, r3, #8
 800b5ce:	001a      	movs	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4353      	muls	r3, r2
 800b5d4:	4912      	ldr	r1, [pc, #72]	; (800b620 <wdg_setupWithMaxMs+0xb0>)
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	f7f4 fd9e 	bl	8000118 <__udivsi3>
 800b5dc:	0003      	movs	r3, r0
 800b5de:	60bb      	str	r3, [r7, #8]
	hiwdg.Init.Reload = rel;
 800b5e0:	4b0c      	ldr	r3, [pc, #48]	; (800b614 <wdg_setupWithMaxMs+0xa4>)
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	609a      	str	r2, [r3, #8]

	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	; (800b614 <wdg_setupWithMaxMs+0xa4>)
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	f7f6 fe75 	bl	80022d8 <HAL_IWDG_Init>
 800b5ee:	1e03      	subs	r3, r0, #0
 800b5f0:	d006      	beq.n	800b600 <wdg_setupWithMaxMs+0x90>
	{
		/* Initialization Error */
	    ITSDK_ERROR_REPORT(ITSDK_ERROR_WDG_INIT_FAILED,(uint16_t)ms);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	4a0b      	ldr	r2, [pc, #44]	; (800b624 <wdg_setupWithMaxMs+0xb4>)
 800b5f8:	0019      	movs	r1, r3
 800b5fa:	0010      	movs	r0, r2
 800b5fc:	f7fd fa80 	bl	8008b00 <itsdk_error_report>
  #else
	#ifdef IWDG
      #error "Watchdog disabled you need to disable it also in CubeMx"
	#endif
  #endif
}
 800b600:	46c0      	nop			; (mov r8, r8)
 800b602:	46bd      	mov	sp, r7
 800b604:	b004      	add	sp, #16
 800b606:	bd80      	pop	{r7, pc}
 800b608:	00006d60 	.word	0x00006d60
 800b60c:	d0000040 	.word	0xd0000040
 800b610:	00009088 	.word	0x00009088
 800b614:	20000250 	.word	0x20000250
 800b618:	40003000 	.word	0x40003000
 800b61c:	00000fff 	.word	0x00000fff
 800b620:	00002710 	.word	0x00002710
 800b624:	c0000041 	.word	0xc0000041

0800b628 <wdg_refresh>:


void wdg_refresh() {
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800b62c:	4b03      	ldr	r3, [pc, #12]	; (800b63c <wdg_refresh+0x14>)
 800b62e:	0018      	movs	r0, r3
 800b630:	f7f6 fe9c 	bl	800236c <HAL_IWDG_Refresh>
}
 800b634:	46c0      	nop			; (mov r8, r8)
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	46c0      	nop			; (mov r8, r8)
 800b63c:	20000250 	.word	0x20000250

0800b640 <bzero>:
 800b640:	b510      	push	{r4, lr}
 800b642:	000a      	movs	r2, r1
 800b644:	2100      	movs	r1, #0
 800b646:	f000 f847 	bl	800b6d8 <memset>
 800b64a:	bd10      	pop	{r4, pc}

0800b64c <__errno>:
 800b64c:	4b01      	ldr	r3, [pc, #4]	; (800b654 <__errno+0x8>)
 800b64e:	6818      	ldr	r0, [r3, #0]
 800b650:	4770      	bx	lr
 800b652:	46c0      	nop			; (mov r8, r8)
 800b654:	20000020 	.word	0x20000020

0800b658 <__libc_init_array>:
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	2600      	movs	r6, #0
 800b65c:	4d0c      	ldr	r5, [pc, #48]	; (800b690 <__libc_init_array+0x38>)
 800b65e:	4c0d      	ldr	r4, [pc, #52]	; (800b694 <__libc_init_array+0x3c>)
 800b660:	1b64      	subs	r4, r4, r5
 800b662:	10a4      	asrs	r4, r4, #2
 800b664:	42a6      	cmp	r6, r4
 800b666:	d109      	bne.n	800b67c <__libc_init_array+0x24>
 800b668:	2600      	movs	r6, #0
 800b66a:	f000 fc41 	bl	800bef0 <_init>
 800b66e:	4d0a      	ldr	r5, [pc, #40]	; (800b698 <__libc_init_array+0x40>)
 800b670:	4c0a      	ldr	r4, [pc, #40]	; (800b69c <__libc_init_array+0x44>)
 800b672:	1b64      	subs	r4, r4, r5
 800b674:	10a4      	asrs	r4, r4, #2
 800b676:	42a6      	cmp	r6, r4
 800b678:	d105      	bne.n	800b686 <__libc_init_array+0x2e>
 800b67a:	bd70      	pop	{r4, r5, r6, pc}
 800b67c:	00b3      	lsls	r3, r6, #2
 800b67e:	58eb      	ldr	r3, [r5, r3]
 800b680:	4798      	blx	r3
 800b682:	3601      	adds	r6, #1
 800b684:	e7ee      	b.n	800b664 <__libc_init_array+0xc>
 800b686:	00b3      	lsls	r3, r6, #2
 800b688:	58eb      	ldr	r3, [r5, r3]
 800b68a:	4798      	blx	r3
 800b68c:	3601      	adds	r6, #1
 800b68e:	e7f2      	b.n	800b676 <__libc_init_array+0x1e>
 800b690:	0800d2a0 	.word	0x0800d2a0
 800b694:	0800d2a0 	.word	0x0800d2a0
 800b698:	0800d2a0 	.word	0x0800d2a0
 800b69c:	0800d2a4 	.word	0x0800d2a4

0800b6a0 <memcpy>:
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d100      	bne.n	800b6aa <memcpy+0xa>
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	5ccc      	ldrb	r4, [r1, r3]
 800b6ac:	54c4      	strb	r4, [r0, r3]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	e7f8      	b.n	800b6a4 <memcpy+0x4>

0800b6b2 <memmove>:
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	4288      	cmp	r0, r1
 800b6b6:	d902      	bls.n	800b6be <memmove+0xc>
 800b6b8:	188b      	adds	r3, r1, r2
 800b6ba:	4298      	cmp	r0, r3
 800b6bc:	d303      	bcc.n	800b6c6 <memmove+0x14>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e007      	b.n	800b6d2 <memmove+0x20>
 800b6c2:	5c8b      	ldrb	r3, [r1, r2]
 800b6c4:	5483      	strb	r3, [r0, r2]
 800b6c6:	3a01      	subs	r2, #1
 800b6c8:	d2fb      	bcs.n	800b6c2 <memmove+0x10>
 800b6ca:	bd10      	pop	{r4, pc}
 800b6cc:	5ccc      	ldrb	r4, [r1, r3]
 800b6ce:	54c4      	strb	r4, [r0, r3]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d1fa      	bne.n	800b6cc <memmove+0x1a>
 800b6d6:	e7f8      	b.n	800b6ca <memmove+0x18>

0800b6d8 <memset>:
 800b6d8:	0003      	movs	r3, r0
 800b6da:	1812      	adds	r2, r2, r0
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d100      	bne.n	800b6e2 <memset+0xa>
 800b6e0:	4770      	bx	lr
 800b6e2:	7019      	strb	r1, [r3, #0]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	e7f9      	b.n	800b6dc <memset+0x4>

0800b6e8 <_vsniprintf_r>:
 800b6e8:	b530      	push	{r4, r5, lr}
 800b6ea:	0014      	movs	r4, r2
 800b6ec:	b09b      	sub	sp, #108	; 0x6c
 800b6ee:	0005      	movs	r5, r0
 800b6f0:	001a      	movs	r2, r3
 800b6f2:	2c00      	cmp	r4, #0
 800b6f4:	da05      	bge.n	800b702 <_vsniprintf_r+0x1a>
 800b6f6:	238b      	movs	r3, #139	; 0x8b
 800b6f8:	6003      	str	r3, [r0, #0]
 800b6fa:	2001      	movs	r0, #1
 800b6fc:	4240      	negs	r0, r0
 800b6fe:	b01b      	add	sp, #108	; 0x6c
 800b700:	bd30      	pop	{r4, r5, pc}
 800b702:	2382      	movs	r3, #130	; 0x82
 800b704:	4668      	mov	r0, sp
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	8183      	strh	r3, [r0, #12]
 800b70a:	2300      	movs	r3, #0
 800b70c:	9100      	str	r1, [sp, #0]
 800b70e:	9104      	str	r1, [sp, #16]
 800b710:	429c      	cmp	r4, r3
 800b712:	d000      	beq.n	800b716 <_vsniprintf_r+0x2e>
 800b714:	1e63      	subs	r3, r4, #1
 800b716:	9302      	str	r3, [sp, #8]
 800b718:	9305      	str	r3, [sp, #20]
 800b71a:	2301      	movs	r3, #1
 800b71c:	4669      	mov	r1, sp
 800b71e:	425b      	negs	r3, r3
 800b720:	81cb      	strh	r3, [r1, #14]
 800b722:	0028      	movs	r0, r5
 800b724:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b726:	f000 f879 	bl	800b81c <_svfiprintf_r>
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	da01      	bge.n	800b732 <_vsniprintf_r+0x4a>
 800b72e:	238b      	movs	r3, #139	; 0x8b
 800b730:	602b      	str	r3, [r5, #0]
 800b732:	2c00      	cmp	r4, #0
 800b734:	d0e3      	beq.n	800b6fe <_vsniprintf_r+0x16>
 800b736:	2300      	movs	r3, #0
 800b738:	9a00      	ldr	r2, [sp, #0]
 800b73a:	7013      	strb	r3, [r2, #0]
 800b73c:	e7df      	b.n	800b6fe <_vsniprintf_r+0x16>
	...

0800b740 <vsniprintf>:
 800b740:	b507      	push	{r0, r1, r2, lr}
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	0013      	movs	r3, r2
 800b746:	000a      	movs	r2, r1
 800b748:	0001      	movs	r1, r0
 800b74a:	4802      	ldr	r0, [pc, #8]	; (800b754 <vsniprintf+0x14>)
 800b74c:	6800      	ldr	r0, [r0, #0]
 800b74e:	f7ff ffcb 	bl	800b6e8 <_vsniprintf_r>
 800b752:	bd0e      	pop	{r1, r2, r3, pc}
 800b754:	20000020 	.word	0x20000020

0800b758 <__ssputs_r>:
 800b758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b75a:	688e      	ldr	r6, [r1, #8]
 800b75c:	b085      	sub	sp, #20
 800b75e:	0007      	movs	r7, r0
 800b760:	000c      	movs	r4, r1
 800b762:	9203      	str	r2, [sp, #12]
 800b764:	9301      	str	r3, [sp, #4]
 800b766:	429e      	cmp	r6, r3
 800b768:	d83c      	bhi.n	800b7e4 <__ssputs_r+0x8c>
 800b76a:	2390      	movs	r3, #144	; 0x90
 800b76c:	898a      	ldrh	r2, [r1, #12]
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	421a      	tst	r2, r3
 800b772:	d034      	beq.n	800b7de <__ssputs_r+0x86>
 800b774:	2503      	movs	r5, #3
 800b776:	6909      	ldr	r1, [r1, #16]
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	1a5b      	subs	r3, r3, r1
 800b77c:	9302      	str	r3, [sp, #8]
 800b77e:	6963      	ldr	r3, [r4, #20]
 800b780:	9802      	ldr	r0, [sp, #8]
 800b782:	435d      	muls	r5, r3
 800b784:	0feb      	lsrs	r3, r5, #31
 800b786:	195d      	adds	r5, r3, r5
 800b788:	9b01      	ldr	r3, [sp, #4]
 800b78a:	106d      	asrs	r5, r5, #1
 800b78c:	3301      	adds	r3, #1
 800b78e:	181b      	adds	r3, r3, r0
 800b790:	42ab      	cmp	r3, r5
 800b792:	d900      	bls.n	800b796 <__ssputs_r+0x3e>
 800b794:	001d      	movs	r5, r3
 800b796:	0553      	lsls	r3, r2, #21
 800b798:	d532      	bpl.n	800b800 <__ssputs_r+0xa8>
 800b79a:	0029      	movs	r1, r5
 800b79c:	0038      	movs	r0, r7
 800b79e:	f000 fb07 	bl	800bdb0 <_malloc_r>
 800b7a2:	1e06      	subs	r6, r0, #0
 800b7a4:	d109      	bne.n	800b7ba <__ssputs_r+0x62>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	603b      	str	r3, [r7, #0]
 800b7aa:	2340      	movs	r3, #64	; 0x40
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	89a2      	ldrh	r2, [r4, #12]
 800b7b0:	4240      	negs	r0, r0
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	81a3      	strh	r3, [r4, #12]
 800b7b6:	b005      	add	sp, #20
 800b7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ba:	9a02      	ldr	r2, [sp, #8]
 800b7bc:	6921      	ldr	r1, [r4, #16]
 800b7be:	f7ff ff6f 	bl	800b6a0 <memcpy>
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	4a14      	ldr	r2, [pc, #80]	; (800b818 <__ssputs_r+0xc0>)
 800b7c6:	401a      	ands	r2, r3
 800b7c8:	2380      	movs	r3, #128	; 0x80
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	9b02      	ldr	r3, [sp, #8]
 800b7d0:	6126      	str	r6, [r4, #16]
 800b7d2:	18f6      	adds	r6, r6, r3
 800b7d4:	6026      	str	r6, [r4, #0]
 800b7d6:	6165      	str	r5, [r4, #20]
 800b7d8:	9e01      	ldr	r6, [sp, #4]
 800b7da:	1aed      	subs	r5, r5, r3
 800b7dc:	60a5      	str	r5, [r4, #8]
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	429e      	cmp	r6, r3
 800b7e2:	d900      	bls.n	800b7e6 <__ssputs_r+0x8e>
 800b7e4:	9e01      	ldr	r6, [sp, #4]
 800b7e6:	0032      	movs	r2, r6
 800b7e8:	9903      	ldr	r1, [sp, #12]
 800b7ea:	6820      	ldr	r0, [r4, #0]
 800b7ec:	f7ff ff61 	bl	800b6b2 <memmove>
 800b7f0:	68a3      	ldr	r3, [r4, #8]
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	1b9b      	subs	r3, r3, r6
 800b7f6:	60a3      	str	r3, [r4, #8]
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	199e      	adds	r6, r3, r6
 800b7fc:	6026      	str	r6, [r4, #0]
 800b7fe:	e7da      	b.n	800b7b6 <__ssputs_r+0x5e>
 800b800:	002a      	movs	r2, r5
 800b802:	0038      	movs	r0, r7
 800b804:	f000 fb32 	bl	800be6c <_realloc_r>
 800b808:	1e06      	subs	r6, r0, #0
 800b80a:	d1e0      	bne.n	800b7ce <__ssputs_r+0x76>
 800b80c:	6921      	ldr	r1, [r4, #16]
 800b80e:	0038      	movs	r0, r7
 800b810:	f000 fa84 	bl	800bd1c <_free_r>
 800b814:	e7c7      	b.n	800b7a6 <__ssputs_r+0x4e>
 800b816:	46c0      	nop			; (mov r8, r8)
 800b818:	fffffb7f 	.word	0xfffffb7f

0800b81c <_svfiprintf_r>:
 800b81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b81e:	b0a1      	sub	sp, #132	; 0x84
 800b820:	9003      	str	r0, [sp, #12]
 800b822:	001d      	movs	r5, r3
 800b824:	898b      	ldrh	r3, [r1, #12]
 800b826:	000f      	movs	r7, r1
 800b828:	0016      	movs	r6, r2
 800b82a:	061b      	lsls	r3, r3, #24
 800b82c:	d511      	bpl.n	800b852 <_svfiprintf_r+0x36>
 800b82e:	690b      	ldr	r3, [r1, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10e      	bne.n	800b852 <_svfiprintf_r+0x36>
 800b834:	2140      	movs	r1, #64	; 0x40
 800b836:	f000 fabb 	bl	800bdb0 <_malloc_r>
 800b83a:	6038      	str	r0, [r7, #0]
 800b83c:	6138      	str	r0, [r7, #16]
 800b83e:	2800      	cmp	r0, #0
 800b840:	d105      	bne.n	800b84e <_svfiprintf_r+0x32>
 800b842:	230c      	movs	r3, #12
 800b844:	9a03      	ldr	r2, [sp, #12]
 800b846:	3801      	subs	r0, #1
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	b021      	add	sp, #132	; 0x84
 800b84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b84e:	2340      	movs	r3, #64	; 0x40
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	2300      	movs	r3, #0
 800b854:	ac08      	add	r4, sp, #32
 800b856:	6163      	str	r3, [r4, #20]
 800b858:	3320      	adds	r3, #32
 800b85a:	7663      	strb	r3, [r4, #25]
 800b85c:	3310      	adds	r3, #16
 800b85e:	76a3      	strb	r3, [r4, #26]
 800b860:	9507      	str	r5, [sp, #28]
 800b862:	0035      	movs	r5, r6
 800b864:	782b      	ldrb	r3, [r5, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d001      	beq.n	800b86e <_svfiprintf_r+0x52>
 800b86a:	2b25      	cmp	r3, #37	; 0x25
 800b86c:	d146      	bne.n	800b8fc <_svfiprintf_r+0xe0>
 800b86e:	1bab      	subs	r3, r5, r6
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	d00c      	beq.n	800b88e <_svfiprintf_r+0x72>
 800b874:	0032      	movs	r2, r6
 800b876:	0039      	movs	r1, r7
 800b878:	9803      	ldr	r0, [sp, #12]
 800b87a:	f7ff ff6d 	bl	800b758 <__ssputs_r>
 800b87e:	1c43      	adds	r3, r0, #1
 800b880:	d100      	bne.n	800b884 <_svfiprintf_r+0x68>
 800b882:	e0ae      	b.n	800b9e2 <_svfiprintf_r+0x1c6>
 800b884:	6962      	ldr	r2, [r4, #20]
 800b886:	9b05      	ldr	r3, [sp, #20]
 800b888:	4694      	mov	ip, r2
 800b88a:	4463      	add	r3, ip
 800b88c:	6163      	str	r3, [r4, #20]
 800b88e:	782b      	ldrb	r3, [r5, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d100      	bne.n	800b896 <_svfiprintf_r+0x7a>
 800b894:	e0a5      	b.n	800b9e2 <_svfiprintf_r+0x1c6>
 800b896:	2201      	movs	r2, #1
 800b898:	2300      	movs	r3, #0
 800b89a:	4252      	negs	r2, r2
 800b89c:	6062      	str	r2, [r4, #4]
 800b89e:	a904      	add	r1, sp, #16
 800b8a0:	3254      	adds	r2, #84	; 0x54
 800b8a2:	1852      	adds	r2, r2, r1
 800b8a4:	1c6e      	adds	r6, r5, #1
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	60e3      	str	r3, [r4, #12]
 800b8aa:	60a3      	str	r3, [r4, #8]
 800b8ac:	7013      	strb	r3, [r2, #0]
 800b8ae:	65a3      	str	r3, [r4, #88]	; 0x58
 800b8b0:	7831      	ldrb	r1, [r6, #0]
 800b8b2:	2205      	movs	r2, #5
 800b8b4:	4853      	ldr	r0, [pc, #332]	; (800ba04 <_svfiprintf_r+0x1e8>)
 800b8b6:	f000 fa25 	bl	800bd04 <memchr>
 800b8ba:	1c75      	adds	r5, r6, #1
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d11f      	bne.n	800b900 <_svfiprintf_r+0xe4>
 800b8c0:	6822      	ldr	r2, [r4, #0]
 800b8c2:	06d3      	lsls	r3, r2, #27
 800b8c4:	d504      	bpl.n	800b8d0 <_svfiprintf_r+0xb4>
 800b8c6:	2353      	movs	r3, #83	; 0x53
 800b8c8:	a904      	add	r1, sp, #16
 800b8ca:	185b      	adds	r3, r3, r1
 800b8cc:	2120      	movs	r1, #32
 800b8ce:	7019      	strb	r1, [r3, #0]
 800b8d0:	0713      	lsls	r3, r2, #28
 800b8d2:	d504      	bpl.n	800b8de <_svfiprintf_r+0xc2>
 800b8d4:	2353      	movs	r3, #83	; 0x53
 800b8d6:	a904      	add	r1, sp, #16
 800b8d8:	185b      	adds	r3, r3, r1
 800b8da:	212b      	movs	r1, #43	; 0x2b
 800b8dc:	7019      	strb	r1, [r3, #0]
 800b8de:	7833      	ldrb	r3, [r6, #0]
 800b8e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8e2:	d016      	beq.n	800b912 <_svfiprintf_r+0xf6>
 800b8e4:	0035      	movs	r5, r6
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	200a      	movs	r0, #10
 800b8ea:	68e3      	ldr	r3, [r4, #12]
 800b8ec:	782a      	ldrb	r2, [r5, #0]
 800b8ee:	1c6e      	adds	r6, r5, #1
 800b8f0:	3a30      	subs	r2, #48	; 0x30
 800b8f2:	2a09      	cmp	r2, #9
 800b8f4:	d94e      	bls.n	800b994 <_svfiprintf_r+0x178>
 800b8f6:	2900      	cmp	r1, #0
 800b8f8:	d018      	beq.n	800b92c <_svfiprintf_r+0x110>
 800b8fa:	e010      	b.n	800b91e <_svfiprintf_r+0x102>
 800b8fc:	3501      	adds	r5, #1
 800b8fe:	e7b1      	b.n	800b864 <_svfiprintf_r+0x48>
 800b900:	4b40      	ldr	r3, [pc, #256]	; (800ba04 <_svfiprintf_r+0x1e8>)
 800b902:	6822      	ldr	r2, [r4, #0]
 800b904:	1ac0      	subs	r0, r0, r3
 800b906:	2301      	movs	r3, #1
 800b908:	4083      	lsls	r3, r0
 800b90a:	4313      	orrs	r3, r2
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	002e      	movs	r6, r5
 800b910:	e7ce      	b.n	800b8b0 <_svfiprintf_r+0x94>
 800b912:	9b07      	ldr	r3, [sp, #28]
 800b914:	1d19      	adds	r1, r3, #4
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	9107      	str	r1, [sp, #28]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	db01      	blt.n	800b922 <_svfiprintf_r+0x106>
 800b91e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b920:	e004      	b.n	800b92c <_svfiprintf_r+0x110>
 800b922:	425b      	negs	r3, r3
 800b924:	60e3      	str	r3, [r4, #12]
 800b926:	2302      	movs	r3, #2
 800b928:	4313      	orrs	r3, r2
 800b92a:	6023      	str	r3, [r4, #0]
 800b92c:	782b      	ldrb	r3, [r5, #0]
 800b92e:	2b2e      	cmp	r3, #46	; 0x2e
 800b930:	d10a      	bne.n	800b948 <_svfiprintf_r+0x12c>
 800b932:	786b      	ldrb	r3, [r5, #1]
 800b934:	2b2a      	cmp	r3, #42	; 0x2a
 800b936:	d135      	bne.n	800b9a4 <_svfiprintf_r+0x188>
 800b938:	9b07      	ldr	r3, [sp, #28]
 800b93a:	3502      	adds	r5, #2
 800b93c:	1d1a      	adds	r2, r3, #4
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	9207      	str	r2, [sp, #28]
 800b942:	2b00      	cmp	r3, #0
 800b944:	db2b      	blt.n	800b99e <_svfiprintf_r+0x182>
 800b946:	9309      	str	r3, [sp, #36]	; 0x24
 800b948:	4e2f      	ldr	r6, [pc, #188]	; (800ba08 <_svfiprintf_r+0x1ec>)
 800b94a:	7829      	ldrb	r1, [r5, #0]
 800b94c:	2203      	movs	r2, #3
 800b94e:	0030      	movs	r0, r6
 800b950:	f000 f9d8 	bl	800bd04 <memchr>
 800b954:	2800      	cmp	r0, #0
 800b956:	d006      	beq.n	800b966 <_svfiprintf_r+0x14a>
 800b958:	2340      	movs	r3, #64	; 0x40
 800b95a:	1b80      	subs	r0, r0, r6
 800b95c:	4083      	lsls	r3, r0
 800b95e:	6822      	ldr	r2, [r4, #0]
 800b960:	3501      	adds	r5, #1
 800b962:	4313      	orrs	r3, r2
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	7829      	ldrb	r1, [r5, #0]
 800b968:	2206      	movs	r2, #6
 800b96a:	4828      	ldr	r0, [pc, #160]	; (800ba0c <_svfiprintf_r+0x1f0>)
 800b96c:	1c6e      	adds	r6, r5, #1
 800b96e:	7621      	strb	r1, [r4, #24]
 800b970:	f000 f9c8 	bl	800bd04 <memchr>
 800b974:	2800      	cmp	r0, #0
 800b976:	d03c      	beq.n	800b9f2 <_svfiprintf_r+0x1d6>
 800b978:	4b25      	ldr	r3, [pc, #148]	; (800ba10 <_svfiprintf_r+0x1f4>)
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d125      	bne.n	800b9ca <_svfiprintf_r+0x1ae>
 800b97e:	2207      	movs	r2, #7
 800b980:	9b07      	ldr	r3, [sp, #28]
 800b982:	3307      	adds	r3, #7
 800b984:	4393      	bics	r3, r2
 800b986:	3308      	adds	r3, #8
 800b988:	9307      	str	r3, [sp, #28]
 800b98a:	6963      	ldr	r3, [r4, #20]
 800b98c:	9a04      	ldr	r2, [sp, #16]
 800b98e:	189b      	adds	r3, r3, r2
 800b990:	6163      	str	r3, [r4, #20]
 800b992:	e766      	b.n	800b862 <_svfiprintf_r+0x46>
 800b994:	4343      	muls	r3, r0
 800b996:	2101      	movs	r1, #1
 800b998:	189b      	adds	r3, r3, r2
 800b99a:	0035      	movs	r5, r6
 800b99c:	e7a6      	b.n	800b8ec <_svfiprintf_r+0xd0>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	425b      	negs	r3, r3
 800b9a2:	e7d0      	b.n	800b946 <_svfiprintf_r+0x12a>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	200a      	movs	r0, #10
 800b9a8:	001a      	movs	r2, r3
 800b9aa:	3501      	adds	r5, #1
 800b9ac:	6063      	str	r3, [r4, #4]
 800b9ae:	7829      	ldrb	r1, [r5, #0]
 800b9b0:	1c6e      	adds	r6, r5, #1
 800b9b2:	3930      	subs	r1, #48	; 0x30
 800b9b4:	2909      	cmp	r1, #9
 800b9b6:	d903      	bls.n	800b9c0 <_svfiprintf_r+0x1a4>
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d0c5      	beq.n	800b948 <_svfiprintf_r+0x12c>
 800b9bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b9be:	e7c3      	b.n	800b948 <_svfiprintf_r+0x12c>
 800b9c0:	4342      	muls	r2, r0
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	1852      	adds	r2, r2, r1
 800b9c6:	0035      	movs	r5, r6
 800b9c8:	e7f1      	b.n	800b9ae <_svfiprintf_r+0x192>
 800b9ca:	ab07      	add	r3, sp, #28
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	003a      	movs	r2, r7
 800b9d0:	4b10      	ldr	r3, [pc, #64]	; (800ba14 <_svfiprintf_r+0x1f8>)
 800b9d2:	0021      	movs	r1, r4
 800b9d4:	9803      	ldr	r0, [sp, #12]
 800b9d6:	e000      	b.n	800b9da <_svfiprintf_r+0x1be>
 800b9d8:	bf00      	nop
 800b9da:	9004      	str	r0, [sp, #16]
 800b9dc:	9b04      	ldr	r3, [sp, #16]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	d1d3      	bne.n	800b98a <_svfiprintf_r+0x16e>
 800b9e2:	89bb      	ldrh	r3, [r7, #12]
 800b9e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b9e6:	065b      	lsls	r3, r3, #25
 800b9e8:	d400      	bmi.n	800b9ec <_svfiprintf_r+0x1d0>
 800b9ea:	e72e      	b.n	800b84a <_svfiprintf_r+0x2e>
 800b9ec:	2001      	movs	r0, #1
 800b9ee:	4240      	negs	r0, r0
 800b9f0:	e72b      	b.n	800b84a <_svfiprintf_r+0x2e>
 800b9f2:	ab07      	add	r3, sp, #28
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	003a      	movs	r2, r7
 800b9f8:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <_svfiprintf_r+0x1f8>)
 800b9fa:	0021      	movs	r1, r4
 800b9fc:	9803      	ldr	r0, [sp, #12]
 800b9fe:	f000 f879 	bl	800baf4 <_printf_i>
 800ba02:	e7ea      	b.n	800b9da <_svfiprintf_r+0x1be>
 800ba04:	0800d264 	.word	0x0800d264
 800ba08:	0800d26a 	.word	0x0800d26a
 800ba0c:	0800d26e 	.word	0x0800d26e
 800ba10:	00000000 	.word	0x00000000
 800ba14:	0800b759 	.word	0x0800b759

0800ba18 <_printf_common>:
 800ba18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba1a:	0015      	movs	r5, r2
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	688a      	ldr	r2, [r1, #8]
 800ba20:	690b      	ldr	r3, [r1, #16]
 800ba22:	9000      	str	r0, [sp, #0]
 800ba24:	000c      	movs	r4, r1
 800ba26:	4293      	cmp	r3, r2
 800ba28:	da00      	bge.n	800ba2c <_printf_common+0x14>
 800ba2a:	0013      	movs	r3, r2
 800ba2c:	0022      	movs	r2, r4
 800ba2e:	602b      	str	r3, [r5, #0]
 800ba30:	3243      	adds	r2, #67	; 0x43
 800ba32:	7812      	ldrb	r2, [r2, #0]
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	d001      	beq.n	800ba3c <_printf_common+0x24>
 800ba38:	3301      	adds	r3, #1
 800ba3a:	602b      	str	r3, [r5, #0]
 800ba3c:	6823      	ldr	r3, [r4, #0]
 800ba3e:	069b      	lsls	r3, r3, #26
 800ba40:	d502      	bpl.n	800ba48 <_printf_common+0x30>
 800ba42:	682b      	ldr	r3, [r5, #0]
 800ba44:	3302      	adds	r3, #2
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	2706      	movs	r7, #6
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	401f      	ands	r7, r3
 800ba4e:	d027      	beq.n	800baa0 <_printf_common+0x88>
 800ba50:	0023      	movs	r3, r4
 800ba52:	3343      	adds	r3, #67	; 0x43
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	1e5a      	subs	r2, r3, #1
 800ba58:	4193      	sbcs	r3, r2
 800ba5a:	6822      	ldr	r2, [r4, #0]
 800ba5c:	0692      	lsls	r2, r2, #26
 800ba5e:	d430      	bmi.n	800bac2 <_printf_common+0xaa>
 800ba60:	0022      	movs	r2, r4
 800ba62:	9901      	ldr	r1, [sp, #4]
 800ba64:	3243      	adds	r2, #67	; 0x43
 800ba66:	9800      	ldr	r0, [sp, #0]
 800ba68:	9e08      	ldr	r6, [sp, #32]
 800ba6a:	47b0      	blx	r6
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d025      	beq.n	800babc <_printf_common+0xa4>
 800ba70:	2306      	movs	r3, #6
 800ba72:	6820      	ldr	r0, [r4, #0]
 800ba74:	682a      	ldr	r2, [r5, #0]
 800ba76:	68e1      	ldr	r1, [r4, #12]
 800ba78:	4003      	ands	r3, r0
 800ba7a:	2500      	movs	r5, #0
 800ba7c:	2b04      	cmp	r3, #4
 800ba7e:	d103      	bne.n	800ba88 <_printf_common+0x70>
 800ba80:	1a8d      	subs	r5, r1, r2
 800ba82:	43eb      	mvns	r3, r5
 800ba84:	17db      	asrs	r3, r3, #31
 800ba86:	401d      	ands	r5, r3
 800ba88:	68a3      	ldr	r3, [r4, #8]
 800ba8a:	6922      	ldr	r2, [r4, #16]
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	dd01      	ble.n	800ba94 <_printf_common+0x7c>
 800ba90:	1a9b      	subs	r3, r3, r2
 800ba92:	18ed      	adds	r5, r5, r3
 800ba94:	2700      	movs	r7, #0
 800ba96:	42bd      	cmp	r5, r7
 800ba98:	d120      	bne.n	800badc <_printf_common+0xc4>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	e010      	b.n	800bac0 <_printf_common+0xa8>
 800ba9e:	3701      	adds	r7, #1
 800baa0:	68e3      	ldr	r3, [r4, #12]
 800baa2:	682a      	ldr	r2, [r5, #0]
 800baa4:	1a9b      	subs	r3, r3, r2
 800baa6:	42bb      	cmp	r3, r7
 800baa8:	ddd2      	ble.n	800ba50 <_printf_common+0x38>
 800baaa:	0022      	movs	r2, r4
 800baac:	2301      	movs	r3, #1
 800baae:	3219      	adds	r2, #25
 800bab0:	9901      	ldr	r1, [sp, #4]
 800bab2:	9800      	ldr	r0, [sp, #0]
 800bab4:	9e08      	ldr	r6, [sp, #32]
 800bab6:	47b0      	blx	r6
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d1f0      	bne.n	800ba9e <_printf_common+0x86>
 800babc:	2001      	movs	r0, #1
 800babe:	4240      	negs	r0, r0
 800bac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bac2:	2030      	movs	r0, #48	; 0x30
 800bac4:	18e1      	adds	r1, r4, r3
 800bac6:	3143      	adds	r1, #67	; 0x43
 800bac8:	7008      	strb	r0, [r1, #0]
 800baca:	0021      	movs	r1, r4
 800bacc:	1c5a      	adds	r2, r3, #1
 800bace:	3145      	adds	r1, #69	; 0x45
 800bad0:	7809      	ldrb	r1, [r1, #0]
 800bad2:	18a2      	adds	r2, r4, r2
 800bad4:	3243      	adds	r2, #67	; 0x43
 800bad6:	3302      	adds	r3, #2
 800bad8:	7011      	strb	r1, [r2, #0]
 800bada:	e7c1      	b.n	800ba60 <_printf_common+0x48>
 800badc:	0022      	movs	r2, r4
 800bade:	2301      	movs	r3, #1
 800bae0:	321a      	adds	r2, #26
 800bae2:	9901      	ldr	r1, [sp, #4]
 800bae4:	9800      	ldr	r0, [sp, #0]
 800bae6:	9e08      	ldr	r6, [sp, #32]
 800bae8:	47b0      	blx	r6
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d0e6      	beq.n	800babc <_printf_common+0xa4>
 800baee:	3701      	adds	r7, #1
 800baf0:	e7d1      	b.n	800ba96 <_printf_common+0x7e>
	...

0800baf4 <_printf_i>:
 800baf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baf6:	b089      	sub	sp, #36	; 0x24
 800baf8:	9204      	str	r2, [sp, #16]
 800bafa:	000a      	movs	r2, r1
 800bafc:	3243      	adds	r2, #67	; 0x43
 800bafe:	9305      	str	r3, [sp, #20]
 800bb00:	9003      	str	r0, [sp, #12]
 800bb02:	9202      	str	r2, [sp, #8]
 800bb04:	7e0a      	ldrb	r2, [r1, #24]
 800bb06:	000c      	movs	r4, r1
 800bb08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb0a:	2a6e      	cmp	r2, #110	; 0x6e
 800bb0c:	d100      	bne.n	800bb10 <_printf_i+0x1c>
 800bb0e:	e086      	b.n	800bc1e <_printf_i+0x12a>
 800bb10:	d81f      	bhi.n	800bb52 <_printf_i+0x5e>
 800bb12:	2a63      	cmp	r2, #99	; 0x63
 800bb14:	d033      	beq.n	800bb7e <_printf_i+0x8a>
 800bb16:	d808      	bhi.n	800bb2a <_printf_i+0x36>
 800bb18:	2a00      	cmp	r2, #0
 800bb1a:	d100      	bne.n	800bb1e <_printf_i+0x2a>
 800bb1c:	e08c      	b.n	800bc38 <_printf_i+0x144>
 800bb1e:	2a58      	cmp	r2, #88	; 0x58
 800bb20:	d04d      	beq.n	800bbbe <_printf_i+0xca>
 800bb22:	0025      	movs	r5, r4
 800bb24:	3542      	adds	r5, #66	; 0x42
 800bb26:	702a      	strb	r2, [r5, #0]
 800bb28:	e030      	b.n	800bb8c <_printf_i+0x98>
 800bb2a:	2a64      	cmp	r2, #100	; 0x64
 800bb2c:	d001      	beq.n	800bb32 <_printf_i+0x3e>
 800bb2e:	2a69      	cmp	r2, #105	; 0x69
 800bb30:	d1f7      	bne.n	800bb22 <_printf_i+0x2e>
 800bb32:	6819      	ldr	r1, [r3, #0]
 800bb34:	6825      	ldr	r5, [r4, #0]
 800bb36:	1d0a      	adds	r2, r1, #4
 800bb38:	0628      	lsls	r0, r5, #24
 800bb3a:	d529      	bpl.n	800bb90 <_printf_i+0x9c>
 800bb3c:	6808      	ldr	r0, [r1, #0]
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	2800      	cmp	r0, #0
 800bb42:	da03      	bge.n	800bb4c <_printf_i+0x58>
 800bb44:	232d      	movs	r3, #45	; 0x2d
 800bb46:	9a02      	ldr	r2, [sp, #8]
 800bb48:	4240      	negs	r0, r0
 800bb4a:	7013      	strb	r3, [r2, #0]
 800bb4c:	4e6b      	ldr	r6, [pc, #428]	; (800bcfc <_printf_i+0x208>)
 800bb4e:	270a      	movs	r7, #10
 800bb50:	e04f      	b.n	800bbf2 <_printf_i+0xfe>
 800bb52:	2a73      	cmp	r2, #115	; 0x73
 800bb54:	d074      	beq.n	800bc40 <_printf_i+0x14c>
 800bb56:	d808      	bhi.n	800bb6a <_printf_i+0x76>
 800bb58:	2a6f      	cmp	r2, #111	; 0x6f
 800bb5a:	d01f      	beq.n	800bb9c <_printf_i+0xa8>
 800bb5c:	2a70      	cmp	r2, #112	; 0x70
 800bb5e:	d1e0      	bne.n	800bb22 <_printf_i+0x2e>
 800bb60:	2220      	movs	r2, #32
 800bb62:	6809      	ldr	r1, [r1, #0]
 800bb64:	430a      	orrs	r2, r1
 800bb66:	6022      	str	r2, [r4, #0]
 800bb68:	e003      	b.n	800bb72 <_printf_i+0x7e>
 800bb6a:	2a75      	cmp	r2, #117	; 0x75
 800bb6c:	d016      	beq.n	800bb9c <_printf_i+0xa8>
 800bb6e:	2a78      	cmp	r2, #120	; 0x78
 800bb70:	d1d7      	bne.n	800bb22 <_printf_i+0x2e>
 800bb72:	0022      	movs	r2, r4
 800bb74:	2178      	movs	r1, #120	; 0x78
 800bb76:	3245      	adds	r2, #69	; 0x45
 800bb78:	7011      	strb	r1, [r2, #0]
 800bb7a:	4e61      	ldr	r6, [pc, #388]	; (800bd00 <_printf_i+0x20c>)
 800bb7c:	e022      	b.n	800bbc4 <_printf_i+0xd0>
 800bb7e:	0025      	movs	r5, r4
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	3542      	adds	r5, #66	; 0x42
 800bb84:	1d11      	adds	r1, r2, #4
 800bb86:	6019      	str	r1, [r3, #0]
 800bb88:	6813      	ldr	r3, [r2, #0]
 800bb8a:	702b      	strb	r3, [r5, #0]
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e065      	b.n	800bc5c <_printf_i+0x168>
 800bb90:	6808      	ldr	r0, [r1, #0]
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	0669      	lsls	r1, r5, #25
 800bb96:	d5d3      	bpl.n	800bb40 <_printf_i+0x4c>
 800bb98:	b200      	sxth	r0, r0
 800bb9a:	e7d1      	b.n	800bb40 <_printf_i+0x4c>
 800bb9c:	6819      	ldr	r1, [r3, #0]
 800bb9e:	6825      	ldr	r5, [r4, #0]
 800bba0:	1d08      	adds	r0, r1, #4
 800bba2:	6018      	str	r0, [r3, #0]
 800bba4:	6808      	ldr	r0, [r1, #0]
 800bba6:	062e      	lsls	r6, r5, #24
 800bba8:	d505      	bpl.n	800bbb6 <_printf_i+0xc2>
 800bbaa:	4e54      	ldr	r6, [pc, #336]	; (800bcfc <_printf_i+0x208>)
 800bbac:	2708      	movs	r7, #8
 800bbae:	2a6f      	cmp	r2, #111	; 0x6f
 800bbb0:	d01b      	beq.n	800bbea <_printf_i+0xf6>
 800bbb2:	270a      	movs	r7, #10
 800bbb4:	e019      	b.n	800bbea <_printf_i+0xf6>
 800bbb6:	066d      	lsls	r5, r5, #25
 800bbb8:	d5f7      	bpl.n	800bbaa <_printf_i+0xb6>
 800bbba:	b280      	uxth	r0, r0
 800bbbc:	e7f5      	b.n	800bbaa <_printf_i+0xb6>
 800bbbe:	3145      	adds	r1, #69	; 0x45
 800bbc0:	4e4e      	ldr	r6, [pc, #312]	; (800bcfc <_printf_i+0x208>)
 800bbc2:	700a      	strb	r2, [r1, #0]
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	6822      	ldr	r2, [r4, #0]
 800bbc8:	1d01      	adds	r1, r0, #4
 800bbca:	6800      	ldr	r0, [r0, #0]
 800bbcc:	6019      	str	r1, [r3, #0]
 800bbce:	0615      	lsls	r5, r2, #24
 800bbd0:	d521      	bpl.n	800bc16 <_printf_i+0x122>
 800bbd2:	07d3      	lsls	r3, r2, #31
 800bbd4:	d502      	bpl.n	800bbdc <_printf_i+0xe8>
 800bbd6:	2320      	movs	r3, #32
 800bbd8:	431a      	orrs	r2, r3
 800bbda:	6022      	str	r2, [r4, #0]
 800bbdc:	2710      	movs	r7, #16
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d103      	bne.n	800bbea <_printf_i+0xf6>
 800bbe2:	2320      	movs	r3, #32
 800bbe4:	6822      	ldr	r2, [r4, #0]
 800bbe6:	439a      	bics	r2, r3
 800bbe8:	6022      	str	r2, [r4, #0]
 800bbea:	0023      	movs	r3, r4
 800bbec:	2200      	movs	r2, #0
 800bbee:	3343      	adds	r3, #67	; 0x43
 800bbf0:	701a      	strb	r2, [r3, #0]
 800bbf2:	6863      	ldr	r3, [r4, #4]
 800bbf4:	60a3      	str	r3, [r4, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	db58      	blt.n	800bcac <_printf_i+0x1b8>
 800bbfa:	2204      	movs	r2, #4
 800bbfc:	6821      	ldr	r1, [r4, #0]
 800bbfe:	4391      	bics	r1, r2
 800bc00:	6021      	str	r1, [r4, #0]
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d154      	bne.n	800bcb0 <_printf_i+0x1bc>
 800bc06:	9d02      	ldr	r5, [sp, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d05a      	beq.n	800bcc2 <_printf_i+0x1ce>
 800bc0c:	0025      	movs	r5, r4
 800bc0e:	7833      	ldrb	r3, [r6, #0]
 800bc10:	3542      	adds	r5, #66	; 0x42
 800bc12:	702b      	strb	r3, [r5, #0]
 800bc14:	e055      	b.n	800bcc2 <_printf_i+0x1ce>
 800bc16:	0655      	lsls	r5, r2, #25
 800bc18:	d5db      	bpl.n	800bbd2 <_printf_i+0xde>
 800bc1a:	b280      	uxth	r0, r0
 800bc1c:	e7d9      	b.n	800bbd2 <_printf_i+0xde>
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	680d      	ldr	r5, [r1, #0]
 800bc22:	1d10      	adds	r0, r2, #4
 800bc24:	6949      	ldr	r1, [r1, #20]
 800bc26:	6018      	str	r0, [r3, #0]
 800bc28:	6813      	ldr	r3, [r2, #0]
 800bc2a:	062e      	lsls	r6, r5, #24
 800bc2c:	d501      	bpl.n	800bc32 <_printf_i+0x13e>
 800bc2e:	6019      	str	r1, [r3, #0]
 800bc30:	e002      	b.n	800bc38 <_printf_i+0x144>
 800bc32:	066d      	lsls	r5, r5, #25
 800bc34:	d5fb      	bpl.n	800bc2e <_printf_i+0x13a>
 800bc36:	8019      	strh	r1, [r3, #0]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	9d02      	ldr	r5, [sp, #8]
 800bc3c:	6123      	str	r3, [r4, #16]
 800bc3e:	e04f      	b.n	800bce0 <_printf_i+0x1ec>
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	1d11      	adds	r1, r2, #4
 800bc44:	6019      	str	r1, [r3, #0]
 800bc46:	6815      	ldr	r5, [r2, #0]
 800bc48:	2100      	movs	r1, #0
 800bc4a:	6862      	ldr	r2, [r4, #4]
 800bc4c:	0028      	movs	r0, r5
 800bc4e:	f000 f859 	bl	800bd04 <memchr>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d001      	beq.n	800bc5a <_printf_i+0x166>
 800bc56:	1b40      	subs	r0, r0, r5
 800bc58:	6060      	str	r0, [r4, #4]
 800bc5a:	6863      	ldr	r3, [r4, #4]
 800bc5c:	6123      	str	r3, [r4, #16]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	9a02      	ldr	r2, [sp, #8]
 800bc62:	7013      	strb	r3, [r2, #0]
 800bc64:	e03c      	b.n	800bce0 <_printf_i+0x1ec>
 800bc66:	6923      	ldr	r3, [r4, #16]
 800bc68:	002a      	movs	r2, r5
 800bc6a:	9904      	ldr	r1, [sp, #16]
 800bc6c:	9803      	ldr	r0, [sp, #12]
 800bc6e:	9d05      	ldr	r5, [sp, #20]
 800bc70:	47a8      	blx	r5
 800bc72:	1c43      	adds	r3, r0, #1
 800bc74:	d03e      	beq.n	800bcf4 <_printf_i+0x200>
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	079b      	lsls	r3, r3, #30
 800bc7a:	d415      	bmi.n	800bca8 <_printf_i+0x1b4>
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	68e0      	ldr	r0, [r4, #12]
 800bc80:	4298      	cmp	r0, r3
 800bc82:	da39      	bge.n	800bcf8 <_printf_i+0x204>
 800bc84:	0018      	movs	r0, r3
 800bc86:	e037      	b.n	800bcf8 <_printf_i+0x204>
 800bc88:	0022      	movs	r2, r4
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	3219      	adds	r2, #25
 800bc8e:	9904      	ldr	r1, [sp, #16]
 800bc90:	9803      	ldr	r0, [sp, #12]
 800bc92:	9e05      	ldr	r6, [sp, #20]
 800bc94:	47b0      	blx	r6
 800bc96:	1c43      	adds	r3, r0, #1
 800bc98:	d02c      	beq.n	800bcf4 <_printf_i+0x200>
 800bc9a:	3501      	adds	r5, #1
 800bc9c:	68e3      	ldr	r3, [r4, #12]
 800bc9e:	9a07      	ldr	r2, [sp, #28]
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	42ab      	cmp	r3, r5
 800bca4:	dcf0      	bgt.n	800bc88 <_printf_i+0x194>
 800bca6:	e7e9      	b.n	800bc7c <_printf_i+0x188>
 800bca8:	2500      	movs	r5, #0
 800bcaa:	e7f7      	b.n	800bc9c <_printf_i+0x1a8>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d0ad      	beq.n	800bc0c <_printf_i+0x118>
 800bcb0:	9d02      	ldr	r5, [sp, #8]
 800bcb2:	0039      	movs	r1, r7
 800bcb4:	f7f4 fab6 	bl	8000224 <__aeabi_uidivmod>
 800bcb8:	5c73      	ldrb	r3, [r6, r1]
 800bcba:	3d01      	subs	r5, #1
 800bcbc:	702b      	strb	r3, [r5, #0]
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d1f7      	bne.n	800bcb2 <_printf_i+0x1be>
 800bcc2:	2f08      	cmp	r7, #8
 800bcc4:	d109      	bne.n	800bcda <_printf_i+0x1e6>
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	07db      	lsls	r3, r3, #31
 800bcca:	d506      	bpl.n	800bcda <_printf_i+0x1e6>
 800bccc:	6863      	ldr	r3, [r4, #4]
 800bcce:	6922      	ldr	r2, [r4, #16]
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	dc02      	bgt.n	800bcda <_printf_i+0x1e6>
 800bcd4:	2330      	movs	r3, #48	; 0x30
 800bcd6:	3d01      	subs	r5, #1
 800bcd8:	702b      	strb	r3, [r5, #0]
 800bcda:	9b02      	ldr	r3, [sp, #8]
 800bcdc:	1b5b      	subs	r3, r3, r5
 800bcde:	6123      	str	r3, [r4, #16]
 800bce0:	9b05      	ldr	r3, [sp, #20]
 800bce2:	aa07      	add	r2, sp, #28
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	0021      	movs	r1, r4
 800bce8:	9b04      	ldr	r3, [sp, #16]
 800bcea:	9803      	ldr	r0, [sp, #12]
 800bcec:	f7ff fe94 	bl	800ba18 <_printf_common>
 800bcf0:	1c43      	adds	r3, r0, #1
 800bcf2:	d1b8      	bne.n	800bc66 <_printf_i+0x172>
 800bcf4:	2001      	movs	r0, #1
 800bcf6:	4240      	negs	r0, r0
 800bcf8:	b009      	add	sp, #36	; 0x24
 800bcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcfc:	0800d275 	.word	0x0800d275
 800bd00:	0800d286 	.word	0x0800d286

0800bd04 <memchr>:
 800bd04:	b2c9      	uxtb	r1, r1
 800bd06:	1882      	adds	r2, r0, r2
 800bd08:	4290      	cmp	r0, r2
 800bd0a:	d101      	bne.n	800bd10 <memchr+0xc>
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	4770      	bx	lr
 800bd10:	7803      	ldrb	r3, [r0, #0]
 800bd12:	428b      	cmp	r3, r1
 800bd14:	d0fb      	beq.n	800bd0e <memchr+0xa>
 800bd16:	3001      	adds	r0, #1
 800bd18:	e7f6      	b.n	800bd08 <memchr+0x4>
	...

0800bd1c <_free_r>:
 800bd1c:	b570      	push	{r4, r5, r6, lr}
 800bd1e:	0005      	movs	r5, r0
 800bd20:	2900      	cmp	r1, #0
 800bd22:	d010      	beq.n	800bd46 <_free_r+0x2a>
 800bd24:	1f0c      	subs	r4, r1, #4
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	da00      	bge.n	800bd2e <_free_r+0x12>
 800bd2c:	18e4      	adds	r4, r4, r3
 800bd2e:	0028      	movs	r0, r5
 800bd30:	f000 f8d4 	bl	800bedc <__malloc_lock>
 800bd34:	4a1d      	ldr	r2, [pc, #116]	; (800bdac <_free_r+0x90>)
 800bd36:	6813      	ldr	r3, [r2, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d105      	bne.n	800bd48 <_free_r+0x2c>
 800bd3c:	6063      	str	r3, [r4, #4]
 800bd3e:	6014      	str	r4, [r2, #0]
 800bd40:	0028      	movs	r0, r5
 800bd42:	f000 f8cc 	bl	800bede <__malloc_unlock>
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	42a3      	cmp	r3, r4
 800bd4a:	d909      	bls.n	800bd60 <_free_r+0x44>
 800bd4c:	6821      	ldr	r1, [r4, #0]
 800bd4e:	1860      	adds	r0, r4, r1
 800bd50:	4283      	cmp	r3, r0
 800bd52:	d1f3      	bne.n	800bd3c <_free_r+0x20>
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	1841      	adds	r1, r0, r1
 800bd5a:	6021      	str	r1, [r4, #0]
 800bd5c:	e7ee      	b.n	800bd3c <_free_r+0x20>
 800bd5e:	0013      	movs	r3, r2
 800bd60:	685a      	ldr	r2, [r3, #4]
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	d001      	beq.n	800bd6a <_free_r+0x4e>
 800bd66:	42a2      	cmp	r2, r4
 800bd68:	d9f9      	bls.n	800bd5e <_free_r+0x42>
 800bd6a:	6819      	ldr	r1, [r3, #0]
 800bd6c:	1858      	adds	r0, r3, r1
 800bd6e:	42a0      	cmp	r0, r4
 800bd70:	d10b      	bne.n	800bd8a <_free_r+0x6e>
 800bd72:	6820      	ldr	r0, [r4, #0]
 800bd74:	1809      	adds	r1, r1, r0
 800bd76:	1858      	adds	r0, r3, r1
 800bd78:	6019      	str	r1, [r3, #0]
 800bd7a:	4282      	cmp	r2, r0
 800bd7c:	d1e0      	bne.n	800bd40 <_free_r+0x24>
 800bd7e:	6810      	ldr	r0, [r2, #0]
 800bd80:	6852      	ldr	r2, [r2, #4]
 800bd82:	1841      	adds	r1, r0, r1
 800bd84:	6019      	str	r1, [r3, #0]
 800bd86:	605a      	str	r2, [r3, #4]
 800bd88:	e7da      	b.n	800bd40 <_free_r+0x24>
 800bd8a:	42a0      	cmp	r0, r4
 800bd8c:	d902      	bls.n	800bd94 <_free_r+0x78>
 800bd8e:	230c      	movs	r3, #12
 800bd90:	602b      	str	r3, [r5, #0]
 800bd92:	e7d5      	b.n	800bd40 <_free_r+0x24>
 800bd94:	6821      	ldr	r1, [r4, #0]
 800bd96:	1860      	adds	r0, r4, r1
 800bd98:	4282      	cmp	r2, r0
 800bd9a:	d103      	bne.n	800bda4 <_free_r+0x88>
 800bd9c:	6810      	ldr	r0, [r2, #0]
 800bd9e:	6852      	ldr	r2, [r2, #4]
 800bda0:	1841      	adds	r1, r0, r1
 800bda2:	6021      	str	r1, [r4, #0]
 800bda4:	6062      	str	r2, [r4, #4]
 800bda6:	605c      	str	r4, [r3, #4]
 800bda8:	e7ca      	b.n	800bd40 <_free_r+0x24>
 800bdaa:	46c0      	nop			; (mov r8, r8)
 800bdac:	200001ec 	.word	0x200001ec

0800bdb0 <_malloc_r>:
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	b570      	push	{r4, r5, r6, lr}
 800bdb4:	1ccd      	adds	r5, r1, #3
 800bdb6:	439d      	bics	r5, r3
 800bdb8:	3508      	adds	r5, #8
 800bdba:	0006      	movs	r6, r0
 800bdbc:	2d0c      	cmp	r5, #12
 800bdbe:	d21e      	bcs.n	800bdfe <_malloc_r+0x4e>
 800bdc0:	250c      	movs	r5, #12
 800bdc2:	42a9      	cmp	r1, r5
 800bdc4:	d81d      	bhi.n	800be02 <_malloc_r+0x52>
 800bdc6:	0030      	movs	r0, r6
 800bdc8:	f000 f888 	bl	800bedc <__malloc_lock>
 800bdcc:	4a25      	ldr	r2, [pc, #148]	; (800be64 <_malloc_r+0xb4>)
 800bdce:	6814      	ldr	r4, [r2, #0]
 800bdd0:	0021      	movs	r1, r4
 800bdd2:	2900      	cmp	r1, #0
 800bdd4:	d119      	bne.n	800be0a <_malloc_r+0x5a>
 800bdd6:	4c24      	ldr	r4, [pc, #144]	; (800be68 <_malloc_r+0xb8>)
 800bdd8:	6823      	ldr	r3, [r4, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d103      	bne.n	800bde6 <_malloc_r+0x36>
 800bdde:	0030      	movs	r0, r6
 800bde0:	f000 f86a 	bl	800beb8 <_sbrk_r>
 800bde4:	6020      	str	r0, [r4, #0]
 800bde6:	0029      	movs	r1, r5
 800bde8:	0030      	movs	r0, r6
 800bdea:	f000 f865 	bl	800beb8 <_sbrk_r>
 800bdee:	1c43      	adds	r3, r0, #1
 800bdf0:	d12b      	bne.n	800be4a <_malloc_r+0x9a>
 800bdf2:	230c      	movs	r3, #12
 800bdf4:	0030      	movs	r0, r6
 800bdf6:	6033      	str	r3, [r6, #0]
 800bdf8:	f000 f871 	bl	800bede <__malloc_unlock>
 800bdfc:	e003      	b.n	800be06 <_malloc_r+0x56>
 800bdfe:	2d00      	cmp	r5, #0
 800be00:	dadf      	bge.n	800bdc2 <_malloc_r+0x12>
 800be02:	230c      	movs	r3, #12
 800be04:	6033      	str	r3, [r6, #0]
 800be06:	2000      	movs	r0, #0
 800be08:	bd70      	pop	{r4, r5, r6, pc}
 800be0a:	680b      	ldr	r3, [r1, #0]
 800be0c:	1b5b      	subs	r3, r3, r5
 800be0e:	d419      	bmi.n	800be44 <_malloc_r+0x94>
 800be10:	2b0b      	cmp	r3, #11
 800be12:	d903      	bls.n	800be1c <_malloc_r+0x6c>
 800be14:	600b      	str	r3, [r1, #0]
 800be16:	18cc      	adds	r4, r1, r3
 800be18:	6025      	str	r5, [r4, #0]
 800be1a:	e003      	b.n	800be24 <_malloc_r+0x74>
 800be1c:	684b      	ldr	r3, [r1, #4]
 800be1e:	428c      	cmp	r4, r1
 800be20:	d10d      	bne.n	800be3e <_malloc_r+0x8e>
 800be22:	6013      	str	r3, [r2, #0]
 800be24:	0030      	movs	r0, r6
 800be26:	f000 f85a 	bl	800bede <__malloc_unlock>
 800be2a:	0020      	movs	r0, r4
 800be2c:	2207      	movs	r2, #7
 800be2e:	300b      	adds	r0, #11
 800be30:	1d23      	adds	r3, r4, #4
 800be32:	4390      	bics	r0, r2
 800be34:	1ac3      	subs	r3, r0, r3
 800be36:	d0e7      	beq.n	800be08 <_malloc_r+0x58>
 800be38:	425a      	negs	r2, r3
 800be3a:	50e2      	str	r2, [r4, r3]
 800be3c:	e7e4      	b.n	800be08 <_malloc_r+0x58>
 800be3e:	6063      	str	r3, [r4, #4]
 800be40:	000c      	movs	r4, r1
 800be42:	e7ef      	b.n	800be24 <_malloc_r+0x74>
 800be44:	000c      	movs	r4, r1
 800be46:	6849      	ldr	r1, [r1, #4]
 800be48:	e7c3      	b.n	800bdd2 <_malloc_r+0x22>
 800be4a:	2303      	movs	r3, #3
 800be4c:	1cc4      	adds	r4, r0, #3
 800be4e:	439c      	bics	r4, r3
 800be50:	42a0      	cmp	r0, r4
 800be52:	d0e1      	beq.n	800be18 <_malloc_r+0x68>
 800be54:	1a21      	subs	r1, r4, r0
 800be56:	0030      	movs	r0, r6
 800be58:	f000 f82e 	bl	800beb8 <_sbrk_r>
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	d1db      	bne.n	800be18 <_malloc_r+0x68>
 800be60:	e7c7      	b.n	800bdf2 <_malloc_r+0x42>
 800be62:	46c0      	nop			; (mov r8, r8)
 800be64:	200001ec 	.word	0x200001ec
 800be68:	200001f0 	.word	0x200001f0

0800be6c <_realloc_r>:
 800be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6e:	0007      	movs	r7, r0
 800be70:	000d      	movs	r5, r1
 800be72:	0016      	movs	r6, r2
 800be74:	2900      	cmp	r1, #0
 800be76:	d105      	bne.n	800be84 <_realloc_r+0x18>
 800be78:	0011      	movs	r1, r2
 800be7a:	f7ff ff99 	bl	800bdb0 <_malloc_r>
 800be7e:	0004      	movs	r4, r0
 800be80:	0020      	movs	r0, r4
 800be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be84:	2a00      	cmp	r2, #0
 800be86:	d103      	bne.n	800be90 <_realloc_r+0x24>
 800be88:	f7ff ff48 	bl	800bd1c <_free_r>
 800be8c:	0034      	movs	r4, r6
 800be8e:	e7f7      	b.n	800be80 <_realloc_r+0x14>
 800be90:	f000 f826 	bl	800bee0 <_malloc_usable_size_r>
 800be94:	002c      	movs	r4, r5
 800be96:	42b0      	cmp	r0, r6
 800be98:	d2f2      	bcs.n	800be80 <_realloc_r+0x14>
 800be9a:	0031      	movs	r1, r6
 800be9c:	0038      	movs	r0, r7
 800be9e:	f7ff ff87 	bl	800bdb0 <_malloc_r>
 800bea2:	1e04      	subs	r4, r0, #0
 800bea4:	d0ec      	beq.n	800be80 <_realloc_r+0x14>
 800bea6:	0029      	movs	r1, r5
 800bea8:	0032      	movs	r2, r6
 800beaa:	f7ff fbf9 	bl	800b6a0 <memcpy>
 800beae:	0029      	movs	r1, r5
 800beb0:	0038      	movs	r0, r7
 800beb2:	f7ff ff33 	bl	800bd1c <_free_r>
 800beb6:	e7e3      	b.n	800be80 <_realloc_r+0x14>

0800beb8 <_sbrk_r>:
 800beb8:	2300      	movs	r3, #0
 800beba:	b570      	push	{r4, r5, r6, lr}
 800bebc:	4c06      	ldr	r4, [pc, #24]	; (800bed8 <_sbrk_r+0x20>)
 800bebe:	0005      	movs	r5, r0
 800bec0:	0008      	movs	r0, r1
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	f7f5 fa58 	bl	8001378 <_sbrk>
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	d103      	bne.n	800bed4 <_sbrk_r+0x1c>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d000      	beq.n	800bed4 <_sbrk_r+0x1c>
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	bd70      	pop	{r4, r5, r6, pc}
 800bed6:	46c0      	nop			; (mov r8, r8)
 800bed8:	20000568 	.word	0x20000568

0800bedc <__malloc_lock>:
 800bedc:	4770      	bx	lr

0800bede <__malloc_unlock>:
 800bede:	4770      	bx	lr

0800bee0 <_malloc_usable_size_r>:
 800bee0:	1f0b      	subs	r3, r1, #4
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	1f18      	subs	r0, r3, #4
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	da01      	bge.n	800beee <_malloc_usable_size_r+0xe>
 800beea:	580b      	ldr	r3, [r1, r0]
 800beec:	18c0      	adds	r0, r0, r3
 800beee:	4770      	bx	lr

0800bef0 <_init>:
 800bef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef2:	46c0      	nop			; (mov r8, r8)
 800bef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef6:	bc08      	pop	{r3}
 800bef8:	469e      	mov	lr, r3
 800befa:	4770      	bx	lr

0800befc <_fini>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf02:	bc08      	pop	{r3}
 800bf04:	469e      	mov	lr, r3
 800bf06:	4770      	bx	lr
